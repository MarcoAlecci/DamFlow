<android.accounts.AccountManagerFuture: V getResult()> -> _SOURCE_
<android.accounts.AccountManagerFuture: V getResult(long,android.icu.util.TimeUnit)> -> _SOURCE_
<android.animation.LayoutTransition: void enableTransitionType(int)> -> _SINK_
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)> -> _SOURCE_
<android.animation.LayoutTransition: long getDuration(int)> -> _SOURCE_
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)> -> _SOURCE_
<android.animation.LayoutTransition: boolean isChangingLayout()> -> _SOURCE_
<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)> -> _SOURCE_
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)> -> _SINK_
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)> -> _SINK_
<android.animation.LayoutTransition: void setDuration(int,long)> -> _SINK_
<android.animation.LayoutTransition: void setDuration(long)> -> _SINK_
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)> -> _SINK_
<android.animation.LayoutTransition: void setStartDelay(int,long)> -> _SINK_
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)> -> _SOURCE_
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder after(long)> -> _SINK_
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder before(android.animation.Animator)> -> _SINK_
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder with(android.animation.Animator)> -> _SINK_
<android.accessibilityservice.AccessibilityService.ScreenshotResult: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.ScreenshotResult: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.ScreenshotResult: long getTimestamp()> -> _SOURCE_
<android.animation.Animator: long getDuration()> -> _SOURCE_
<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.animation.Animator: long getStartDelay()> -> _SOURCE_
<android.animation.Animator: long getTotalDuration()> -> _SOURCE_
<android.animation.Animator: boolean isPaused()> -> _SOURCE_
<android.animation.Animator: boolean isRunning()> -> _SOURCE_
<android.animation.Animator: Animator setDuration(long)> -> _SINK_
<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.animation.Animator: void setStartDelay(long)> -> _SOURCE_
<android.animation.Animator: void setTarget(java.lang.Object)> -> _SINK_
<android.animation.Animator: void setupStartValues()> -> _SINK_
<android.accounts.AuthenticatorDescription: int describeContents()> -> _SOURCE_
<android.accounts.AuthenticatorDescription: int hashCode()> -> _SOURCE_
<android.accounts.AuthenticatorDescription: AuthenticatorDescription newKey(java.lang.String)> -> _SOURCE_
<android.accounts.AuthenticatorDescription: java.lang.String toString()> -> _SOURCE_
<android.accessibilityservice.GestureDescription.StrokeDescription: android.accessibilityservice.GestureDescription.StrokeDescription continueStroke(android.graphics.Path,long,long,boolean)> -> _SINK_
<android.accessibilityservice.GestureDescription.StrokeDescription: long getDuration()> -> _SOURCE_
<android.accessibilityservice.GestureDescription.StrokeDescription: android.graphics.Path getPath()> -> _SOURCE_
<android.accessibilityservice.GestureDescription.StrokeDescription: long getStartTime()> -> _SOURCE_
<android.accounts.Account: int describeContents()> -> _SOURCE_
<android.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: int setInputMethodEnabled(java.lang.String,boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)> -> _SINK_
<android.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)> -> _SOURCE_
<android.accessibilityservice.AccessibilityButtonController: boolean isAccessibilityButtonAvailable()> -> _SOURCE_
<android.animation.Keyframe: float getFraction()> -> _SOURCE_
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.animation.Keyframe: java.lang.Class getType()> -> _SOURCE_
<android.animation.Keyframe: Object getValue()> -> _SOURCE_
<android.animation.Keyframe: boolean hasValue()> -> _SOURCE_
<android.animation.Keyframe: void setFraction(float)> -> _SINK_
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.animation.Keyframe: void setValue(java.lang.Object)> -> _SINK_
<android.accessibilityservice.AccessibilityService: android.content.Context createDisplayContext(android.view.Display)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)> -> _SINK_
<android.accessibilityservice.AccessibilityService: boolean dispatchGesture(android.accessibilityservice.GestureDescription,android.accessibilityservice.AccessibilityService.GestureResultCallback,android.os.Handler)> -> _SINK_
<android.accessibilityservice.AccessibilityService: AccessibilityButtonController getAccessibilityButtonController(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: AccessibilityButtonController getAccessibilityButtonController()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: InputMethod getInputMethod()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: AccessibilityService.MagnificationController getMagnificationController()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: AccessibilityService.SoftKeyboardController getSoftKeyboardController()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: List<AccessibilityNodeInfo.AccessibilityAction> getSystemActions()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: TouchInteractionController getTouchInteractionController(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: List<AccessibilityWindowInfo> getWindows()> -> _SINK_
<android.accessibilityservice.AccessibilityService: SparseArray<List<AccessibilityWindowInfo>> getWindowsOnAllDisplays()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: boolean isCacheEnabled()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: boolean isNodeInCache(android.view.accessibility.AccessibilityNodeInfo)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.view.inputmethod.InputMethod onCreateInputMethod()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: void setAccessibilityFocusAppearance(int,int)> -> _SINK_
<android.accessibilityservice.AccessibilityService: void setAnimationScale(float)> -> _SINK_
<android.accessibilityservice.AccessibilityService: boolean setCacheEnabled(boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<android.accessibilityservice.AccessibilityService: void takeScreenshot(int,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService.TakeScreenshotCallback)> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: int describeContents()> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: String gestureIdToString(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: int getDisplayId()> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: int getGestureId()> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: List<MotionEvent> getMotionEvents()> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: java.lang.String toString()> -> _SOURCE_
<android.accounts.AccountAuthenticatorActivity: void finish()> -> _SOURCE_
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)> -> _SINK_
<android.accessibilityservice.AccessibilityService.MagnificationController: float getCenterX()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController: float getCenterY()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController: android.graphics.Region getCurrentMagnificationRegion()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController: MagnificationConfig getMagnificationConfig()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController: android.graphics.Region getMagnificationRegion()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController: float getScale()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean setCenter(float,float,boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean setMagnificationConfig(MagnificationConfig,boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean setScale(float,boolean)> -> _SINK_
<android.accessibilityservice.FingerprintGestureController: boolean isGestureDetectionAvailable()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: int getDisplayId()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: long getMaxGestureDuration()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: int getMaxStrokeCount()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: android.accessibilityservice.GestureDescription.StrokeDescription getStroke(int)> -> _SOURCE_
<android.accessibilityservice.GestureDescription: int getStrokeCount()> -> _SOURCE_
<android.animation.AnimatorSet: ArrayList<Animator> getChildAnimations()> -> _SOURCE_
<android.animation.AnimatorSet: long getCurrentPlayTime()> -> _SOURCE_
<android.animation.AnimatorSet: long getDuration()> -> _SOURCE_
<android.animation.AnimatorSet: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.animation.AnimatorSet: long getStartDelay()> -> _SOURCE_
<android.animation.AnimatorSet: long getTotalDuration()> -> _SOURCE_
<android.animation.AnimatorSet: void playSequentially(List<Animator>)> -> _SINK_
<android.animation.AnimatorSet: void playSequentially(Animator[])> -> _SINK_
<android.animation.AnimatorSet: void playTogether(Collection<Animator>)> -> _SINK_
<android.animation.AnimatorSet: void playTogether(Animator[])> -> _SINK_
<android.animation.AnimatorSet: void reverse()> -> _SINK_
<android.animation.AnimatorSet: void setCurrentPlayTime(long)> -> _SINK_
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)> -> _SINK_
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.animation.AnimatorSet: void setStartDelay(long)> -> _SOURCE_
<android.animation.AnimatorSet: void setTarget(java.lang.Object)> -> _SINK_
<android.animation.AnimatorSet: void setupStartValues()> -> _SINK_
<android.animation.AnimatorSet: java.lang.String toString()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: String capabilityToString(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int describeContents()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: String feedbackTypeToString(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: String flagToString(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int getNonInteractiveUiTimeoutMillis()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getTileServiceClassName()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: boolean isAccessibilityTool()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String loadDescription(android.content.pm.PackageManager)> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.CharSequence loadIntro(android.content.pm.PackageManager)> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.CharSequence loadSummary(android.content.pm.PackageManager)> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: void setInteractiveUiTimeoutMillis(int)> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: void setNonInteractiveUiTimeoutMillis(int)> -> _SINK_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener: void onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,float,float,float)> -> _SINK_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> addAccount(java.lang.String,java.lang.String,String[],android.os.Bundle,android.app.Activity,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map) -> _SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> editProperties(java.lang.String,android.app.Activity,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: AccountManager get(android.content.Context)> -> _SOURCE_
<android.accounts.AccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: Account[] getAccounts()> -> _SOURCE_
<android.accounts.AccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: Account[] getAccountsByType(java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(java.lang.String,String[],AccountManagerCallback<Account[]>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(android.accounts.Account,java.lang.String,boolean,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthTokenByFeatures(java.lang.String,java.lang.String,String[],android.app.Activity,android.os.Bundle,android.os.Bundle,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()> -> _SOURCE_
<android.accounts.AccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getPreviousName(android.accounts.Account)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Boolean> hasFeatures(android.accounts.Account,String[],AccountManagerCallback<Boolean>,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: Intent newChooseAccountIntent(android.accounts.Account,List<Account>,String[],java.lang.String,java.lang.String,String[],android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Account> renameAccount(android.accounts.Account,java.lang.String,AccountManagerCallback<Account>,android.os.Handler)> -> _SINK_
<android.accounts.AccountManager: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: AccountManagerFuture<Bundle> startAddAccountSession(java.lang.String,java.lang.String,String[],android.os.Bundle,android.app.Activity,AccountManagerCallback<Bundle>,android.os.Handler)> -> _SINK_
<android.animation.PointFEvaluator: android.graphics.PointF evaluate(float,android.graphics.PointF,android.graphics.PointF)> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()> -> _SOURCE_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofFloat(Property<?,,float[])> -> _SINK_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofFloat(java.lang.String,float[])> -> _SOURCE_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofInt(java.lang.String,int[])> -> _SOURCE_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofInt(Property<?,,int[])> -> _SOURCE_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])> -> _SOURCE_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)> -> _SINK_
<android.animation.PropertyValuesHolder:  PropertyValuesHolder ofMultiFloat(java.lang.String,TypeConverter<T,,TypeEvaluator,Keyframe[])> -> _SINK_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)> -> _SINK_
<android.animation.PropertyValuesHolder: PropertyValuesHolder ofMultiInt(java.lang.String,int[][])> -> _SOURCE_
<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)> -> _SINK_
<android.animation.PropertyValuesHolder: void setFloatValues(float[])> -> _SINK_
<android.animation.PropertyValuesHolder: void setIntValues(int[])> -> _SINK_
<android.animation.PropertyValuesHolder: void setKeyframes(Keyframe[])> -> _SINK_
<android.animation.PropertyValuesHolder: void setObjectValues(Object[])> -> _SINK_
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)> -> _SINK_
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)> -> _SINK_
<android.animation.ObjectAnimator: java.lang.String getPropertyName()> -> _SOURCE_
<android.animation.ObjectAnimator: java.lang.Object getTarget()> -> _SOURCE_
<android.animation.ObjectAnimator: ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,float[][])> -> _SINK_
<android.animation.ObjectAnimator: ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,android.graphics.Path)> -> _SINK_
<android.animation.ObjectAnimator:  ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,TypeConverter<T,,TypeEvaluator,T[])> -> _SINK_
<android.animation.ObjectAnimator: ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,int[][])> -> _SINK_
<android.animation.ObjectAnimator: ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,android.graphics.Path)> -> _SINK_
<android.animation.ObjectAnimator:  ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,TypeConverter<T,,TypeEvaluator,T[])> -> _SINK_
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)> -> _SINK_
<android.animation.ObjectAnimator: void setFloatValues(float[])> -> _SINK_
<android.animation.ObjectAnimator: void setIntValues(int[])> -> _SINK_
<android.animation.ObjectAnimator: void setObjectValues(Object[])> -> _SINK_
<android.animation.ObjectAnimator: void setProperty(android.util.Property)> -> _SINK_
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)> -> _SINK_
<android.animation.ObjectAnimator: void setTarget(java.lang.Object)> -> _SINK_
<android.animation.ObjectAnimator: void setupStartValues()> -> _SINK_
<android.animation.ObjectAnimator: java.lang.String toString()> -> _SOURCE_
<android.annotation.TargetApi: int value()> -> _SINK_
<android.annotation.SuppressLint: String[] value()> -> _SINK_
<android.animation.TimeAnimator: void setCurrentPlayTime(long)> -> _SINK_
<android.animation.TypeEvaluator: T evaluate(float,T,T)> -> _SOURCE_
<android.app.ActivityManager.AppTask: android.app.ActivityManager.RecentTaskInfo getTaskInfo()> -> _SOURCE_
<android.app.ActivityManager.AppTask: void moveToFront()> -> _SINK_
<android.animation.ValueAnimator: boolean areAnimatorsEnabled()> -> _SOURCE_
<android.animation.ValueAnimator: float getAnimatedFraction()> -> _SOURCE_
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)> -> _SOURCE_
<android.animation.ValueAnimator: long getCurrentPlayTime()> -> _SOURCE_
<android.animation.ValueAnimator: long getDuration()> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.animation.ValueAnimator: int getRepeatCount()> -> _SINK_
<android.animation.ValueAnimator: int getRepeatMode()> -> _SOURCE_
<android.animation.ValueAnimator: long getStartDelay()> -> _SOURCE_
<android.animation.ValueAnimator: long getTotalDuration()> -> _SOURCE_
<android.animation.ValueAnimator: PropertyValuesHolder[] getValues()> -> _SOURCE_
<android.animation.ValueAnimator: boolean isRunning()> -> _SOURCE_
<android.animation.ValueAnimator: void reverse()> -> _SINK_
<android.animation.ValueAnimator: void setCurrentFraction(float)> -> _SINK_
<android.animation.ValueAnimator: void setCurrentPlayTime(long)> -> _SINK_
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)> -> _SINK_
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)> -> _SINK_
<android.animation.ValueAnimator: void setFloatValues(float[])> -> _SINK_
<android.animation.ValueAnimator: void setIntValues(int[])> -> _SINK_
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)> -> _SOURCE_
<android.animation.ValueAnimator: void setObjectValues(Object[])> -> _SINK_
<android.animation.ValueAnimator: void setRepeatCount(int)> -> _SINK_
<android.animation.ValueAnimator: void setRepeatMode(int)> -> _SOURCE_
<android.animation.ValueAnimator: void setStartDelay(long)> -> _SOURCE_
<android.animation.ValueAnimator: void setValues(PropertyValuesHolder[])> -> _SINK_
<android.animation.ValueAnimator: java.lang.String toString()> -> _SOURCE_
<android.animation.TimeInterpolator: float getInterpolation(float)> -> _SINK_
<android.animation.RectEvaluator: android.graphics.Rect evaluate(float,android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
<android.app.AlarmManager.AlarmClockInfo: int describeContents()> -> _SOURCE_
<android.app.AlarmManager.AlarmClockInfo: android.app.PendingIntent getShowIntent()> -> _SOURCE_
<android.app.AlarmManager.AlarmClockInfo: long getTriggerTime()> -> _SOURCE_
<android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()> -> _SOURCE_
<android.app.ActivityOptions: int getLaunchDisplayId()> -> _SOURCE_
<android.app.ActivityOptions: boolean getLockTaskMode()> -> _SOURCE_
<android.app.ActivityOptions: int getSplashScreenStyle()> -> _SINK_
<android.app.ActivityOptions: ActivityOptions makeBasic()> -> _SINK_
<android.app.ActivityOptions: ActivityOptions makeClipRevealAnimation(android.view.View,int,int,int,int)> -> _SINK_
<android.app.ActivityOptions: ActivityOptions makeCustomAnimation(android.content.Context,int,int)> -> _SINK_
<android.app.ActivityOptions: ActivityOptions makeCustomAnimation(android.content.Context,int,int,int)> -> _SINK_
<android.app.ActivityOptions: ActivityOptions makeLaunchIntoPip(android.app.PictureInPictureParams)> -> _SINK_
<android.app.ActivityOptions: ActivityOptions makeScaleUpAnimation(android.view.View,int,int,int,int)> -> _SINK_
<android.app.ActivityOptions: android.app.ActivityOptions setLaunchBounds(android.graphics.Rect)> -> _SINK_
<android.app.ActivityOptions: android.app.ActivityOptions setLaunchDisplayId(int)> -> _SINK_
<android.app.ActivityOptions: android.app.ActivityOptions setLockTaskEnabled(boolean)> -> _SINK_
<android.app.ActivityOptions: void setPendingIntentBackgroundActivityLaunchAllowed(boolean)> -> _SINK_
<android.app.ActivityOptions: android.app.ActivityOptions setSplashScreenStyle(int)> -> _SINK_
<android.app.ActivityOptions: android.os.Bundle toBundle()> -> _SOURCE_
<android.app.ActivityOptions: void update(android.app.ActivityOptions)> -> _SINK_
<android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)> -> _SINK_
<android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)> -> _SINK_
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: boolean isOpActive(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: String permissionToOp(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int startProxyOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.AlarmManager: android.app.AlarmManager.AlarmClockInfo getNextAlarmClock()> -> _SOURCE_
<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)> -> _SINK_
<android.app.AlarmManager: void setAlarmClock(android.app.AlarmManager.AlarmClockInfo,android.app.PendingIntent)> -> _SINK_
<android.app.AlarmManager: void setAndAllowWhileIdle(int,long,android.app.PendingIntent)> -> _SINK_
<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)> -> _SINK_
<android.app.AlarmManager: void setExact(int,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)> -> _SINK_
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)> -> _SINK_
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.app.AlarmManager: void setTime(long)> -> _SINK_
<android.app.AlarmManager: void setTimeZone(java.lang.String)> -> _SINK_
<android.app.AlarmManager: void setWindow(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.app.AlertDialog.Builder: android.content.Context getContext()> -> _SOURCE_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCancelable(boolean)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCustomTitle(android.view.View)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIconAttribute(int)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setInverseBackgroundForced(boolean)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(int)> -> _SOURCE_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(int)> -> _SINK_
<android.app.ApplicationErrorReport.BatteryInfo: void dump(android.util.Printer,java.lang.String)> -> _SOURCE_
<android.app.ApplicationErrorReport.BatteryInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ApplicationErrorReport.RunningServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _SOURCE_
<android.app.ApplicationErrorReport.RunningServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.AutomaticZenRule: int describeContents()> -> _SOURCE_
<android.app.AutomaticZenRule: android.net.Uri getConditionId()> -> _SOURCE_
<android.app.AutomaticZenRule: android.content.ComponentName getConfigurationActivity()> -> _SOURCE_
<android.app.AutomaticZenRule: long getCreationTime()> -> _SOURCE_
<android.app.AutomaticZenRule: int getInterruptionFilter()> -> _SOURCE_
<android.app.AutomaticZenRule: java.lang.String getName()> -> _SOURCE_
<android.app.AutomaticZenRule: android.content.ComponentName getOwner()> -> _SOURCE_
<android.app.AutomaticZenRule: boolean isEnabled()> -> _SOURCE_
<android.app.AutomaticZenRule: void setConditionId(android.net.Uri)> -> _SINK_
<android.app.AutomaticZenRule: void setConfigurationActivity(android.content.ComponentName)> -> _SINK_
<android.app.AutomaticZenRule: void setEnabled(boolean)> -> _SINK_
<android.app.AutomaticZenRule: void setName(java.lang.String)> -> _SINK_
<android.app.AutomaticZenRule: void setZenPolicy(android.service.notification.ZenPolicy)> -> _SINK_
<android.app.AutomaticZenRule: java.lang.String toString()> -> _SOURCE_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request addRequestHeader(java.lang.String,java.lang.String)> -> _SINK_
<android.app.DownloadManager.Request: void allowScanningByMediaScanner()> -> _SOURCE_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setAllowedNetworkTypes(int)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setAllowedOverMetered(boolean)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setAllowedOverRoaming(boolean)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDescription(java.lang.CharSequence)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDestinationUri(android.net.Uri)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setMimeType(java.lang.String)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setRequiresDeviceIdle(boolean)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setShowRunningNotification(boolean)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setVisibleInDownloadsUi(boolean)> -> _SOURCE_
<android.app.AuthenticationRequiredException: int describeContents()> -> _SOURCE_
<android.app.AuthenticationRequiredException: android.app.PendingIntent getUserAction()> -> _SOURCE_
<android.app.ApplicationExitInfo: int describeContents()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getDefiningUid()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getPackageUid()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getPid()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.lang.String getProcessName()> -> _SOURCE_
<android.app.ApplicationExitInfo: byte[] getProcessStateSummary()> -> _SOURCE_
<android.app.ApplicationExitInfo: long getPss()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getRealUid()> -> _SOURCE_
<android.app.ApplicationExitInfo: long getRss()> -> _SOURCE_
<android.app.ApplicationExitInfo: long getTimestamp()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.io.InputStream getTraceInputStream()> -> _SOURCE_
<android.app.ApplicationExitInfo: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.app.ApplicationErrorReport.AnrInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SOURCE_
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()> -> _SOURCE_
<android.app.ExpandableListActivity: long getSelectedId()> -> _SOURCE_
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)> -> _SINK_
<android.app.ExpandableListActivity: void setSelectedGroup(int)> -> _SINK_
<android.app.ApplicationErrorReport.CrashInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.ApplicationErrorReport.CrashInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)> -> _SOURCE_
<android.app.FragmentContainer: <T extends View> T onFindViewById(int)> -> _SOURCE_
<android.app.FragmentContainer: boolean onHasView()> -> _SOURCE_
<android.app.Fragment.SavedState: int describeContents()> -> _SOURCE_
<android.app.FragmentController: FragmentController createController(FragmentHostCallback<?>)> -> _SOURCE_
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean,android.content.res.Configuration)> -> _SINK_
<android.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)> -> _SINK_
<android.app.FragmentController: android.app.Fragment findFragmentByWho(java.lang.String)> -> _SOURCE_
<android.app.FragmentController: void reportLoaderStart()> -> _SINK_
<android.app.FragmentController: void restoreAllState(android.os.Parcelable,List<Fragment>)> -> _SOURCE_
<android.app.FragmentController: Arrayjava.util.Map retainLoaderNonConfig()> -> _SOURCE_
<android.app.BackgroundServiceStartNotAllowedException: int describeContents()> -> _SOURCE_
<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,String[])> -> _SOURCE_
<android.app.FragmentManager: Fragment findFragmentById(int)> -> _SOURCE_
<android.app.FragmentManager: Fragment findFragmentByTag(java.lang.String)> -> _SOURCE_
<android.app.FragmentManager: FragmentManager.BackStackEntry getBackStackEntryAt(int)> -> _SOURCE_
<android.app.FragmentManager: int getBackStackEntryCount()> -> _SOURCE_
<android.app.FragmentManager: Fragment getPrimaryNavigationFragment()> -> _SOURCE_
<android.app.FragmentManager: void popBackStack()> -> _SINK_
<android.app.FragmentManager: void popBackStack(int,int)> -> _SOURCE_
<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)> -> _SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> -> _SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,android.net.Uri,android.net.Uri)> -> _SINK_
<android.app.DownloadManager: Long getMaxBytesOverMobile(android.content.Context)> -> _SOURCE_
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)> -> _SOURCE_
<android.app.DownloadManager: Long getRecommendedMaxBytesOverMobile(android.content.Context)> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> -> _SOURCE_
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)> -> _SOURCE_
<android.app.FragmentManager.BackStackEntry: CharSequence getBreadCrumbShortTitle()> -> _SOURCE_
<android.app.FragmentManager.BackStackEntry: int getBreadCrumbShortTitleRes()> -> _SOURCE_
<android.app.FragmentManager.BackStackEntry: CharSequence getBreadCrumbTitle()> -> _SOURCE_
<android.app.FragmentManager.BackStackEntry: int getBreadCrumbTitleRes()> -> _SOURCE_
<android.app.FragmentManager.BackStackEntry: int getId()> -> _SOURCE_
<android.app.FragmentManager.BackStackEntry: String getName()> -> _SOURCE_
<android.app.ForegroundServiceStartNotAllowedException: int describeContents()> -> _SOURCE_
<android.app.DatePickerDialog: void setOnDateSetListener(android.app.DatePickerDialog.OnDateSetListener)> -> _SINK_
<android.app.DatePickerDialog: void updateDate(int,int,int)> -> _SINK_
<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceLocked()> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceSecure()> -> _SOURCE_
<android.app.KeyguardManager: boolean isKeyguardLocked()> -> _SOURCE_
<android.app.KeyguardManager: boolean isKeyguardSecure()> -> _SOURCE_
<android.app.Instrumentation.ActivityMonitor: IntentFilter getFilter()> -> _SOURCE_
<android.app.Instrumentation.ActivityMonitor: int getHits()> -> _SOURCE_
<android.app.Instrumentation.ActivityMonitor: Activity getLastActivity()> -> _SOURCE_
<android.app.Instrumentation.ActivityMonitor: Instrumentation.ActivityResult getResult()> -> _SOURCE_
<android.app.Instrumentation.ActivityMonitor: boolean isBlocking()> -> _SINK_
<android.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,String[])> -> _SOURCE_
<android.app.FragmentHostCallback: <T extends View> T onFindViewById(int)> -> _SOURCE_
<android.app.FragmentHostCallback: E onGetHost()> -> _SOURCE_
<android.app.FragmentHostCallback: boolean onHasView()> -> _SOURCE_
<android.app.FragmentHostCallback: boolean onHasWindowAnimations()> -> _SOURCE_
<android.app.FragmentHostCallback: void onRequestPermissionsFromFragment(android.app.Fragment,String[],int)> -> _SOURCE_
<android.app.DownloadManager.Query: android.app.DownloadManager.Query setFilterById(long[])> -> _SINK_
<android.app.DownloadManager.Query: android.app.DownloadManager.Query setFilterByStatus(int)> -> _SINK_
<android.app.LauncherActivity.IconResizer: android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable)> -> _SOURCE_
<android.app.GameManager: int getGameMode()> -> _SOURCE_
<android.app.FragmentBreadCrumbs: void setActivity(android.app.Activity)> -> _SINK_
<android.app.FragmentBreadCrumbs: void setMaxVisible(int)> -> _SOURCE_
<android.app.FragmentBreadCrumbs: void setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View.OnClickListener)> -> _SINK_
<android.app.FragmentBreadCrumbs: void setTitle(java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_
<android.app.IntentService: void onStart(android.content.Intent,int)> -> _SINK_
<android.app.IntentService: int onStartCommand(android.content.Intent,int,int)> -> _SINK_
<android.app.IntentService: void setIntentRedelivery(boolean)> -> _SINK_
<android.app.LocalActivityManager: void dispatchDestroy(boolean)> -> _SINK_
<android.app.LocalActivityManager: void dispatchPause(boolean)> -> _SINK_
<android.app.LocalActivityManager: void dispatchStop()> -> _SINK_
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)> -> _SOURCE_
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()> -> _SOURCE_
<android.app.LocalActivityManager: java.lang.String getCurrentId()> -> _SOURCE_
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()> -> _SOURCE_
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)> -> _SINK_
<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,String[])> -> _SOURCE_
<android.app.LoaderManager: void enableDebugLogging(boolean)> -> _SINK_
<android.app.LoaderManager: <D> Loader<D> getLoader(int)> -> _SOURCE_
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder addExtras(android.os.Bundle)> -> _SINK_
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder addRemoteInput(android.app.RemoteInput)> -> _SINK_
<android.app.Notification.Action.Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setAllowGeneratedReplies(boolean)> -> _SOURCE_
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setAuthenticationRequired(boolean)> -> _SINK_
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setSemanticAction(int)> -> _SINK_
<android.app.LauncherActivity: List<LauncherActivity.ListItem> makeListItems()> -> _SOURCE_
<android.app.LauncherActivity: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.LauncherActivity: void setTitle(int)> -> _SINK_
<android.app.Notification.Action: int describeContents()> -> _SOURCE_
<android.app.Notification.Action: boolean getAllowGeneratedReplies()> -> _SOURCE_
<android.app.Notification.Action: int getSemanticAction()> -> _SOURCE_
<android.app.Notification.Action: boolean isAuthenticationRequired()> -> _SOURCE_
<android.app.Notification.Action: boolean isContextual()> -> _SOURCE_
<android.app.Instrumentation.ActivityResult: int getResultCode()> -> _SOURCE_
<android.app.Instrumentation.ActivityResult: android.content.Intent getResultData()> -> _SOURCE_
<android.app.Notification.Action.WearableExtender: boolean getHintDisplayActionInline()> -> _SINK_
<android.app.Notification.Action.WearableExtender: java.lang.CharSequence getInProgressLabel()> -> _SINK_
<android.app.Notification.Action.WearableExtender: boolean isAvailableOffline()> -> _SOURCE_
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setAvailableOffline(boolean)> -> _SINK_
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setHintDisplayActionInline(boolean)> -> _SINK_
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setInProgressLabel(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder setLatestTimestamp(long)> -> _SINK_
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder setReadPendingIntent(android.app.PendingIntent)> -> _SINK_
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder setReplyAction(android.app.PendingIntent,android.app.RemoteInput)> -> _SINK_
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()> -> _SOURCE_
<android.app.ListFragment: android.widget.ListView getListView()> -> _SOURCE_
<android.app.ListFragment: long getSelectedItemId()> -> _SOURCE_
<android.app.ListFragment: int getSelectedItemPosition()> -> _SOURCE_
<android.app.ListFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SOURCE_
<android.app.ListFragment: void setListShown(boolean)> -> _SINK_
<android.app.ListFragment: void setListShownNoAnimation(boolean)> -> _SINK_
<android.app.ListFragment: void setSelection(int)> -> _SINK_
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()> -> _SOURCE_
<android.app.ListActivity: android.widget.ListView getListView()> -> _SOURCE_
<android.app.ListActivity: long getSelectedItemId()> -> _SOURCE_
<android.app.ListActivity: int getSelectedItemPosition()> -> _SOURCE_
<android.app.ListActivity: void setSelection(int)> -> _SINK_
<android.app.Notification.CarExtender: android.app.Notification.Builder extend(android.app.Notification.Builder)> -> _SINK_
<android.app.Notification.CarExtender: int getColor()> -> _SINK_
<android.app.Notification.CarExtender: android.graphics.Bitmap getLargeIcon()> -> _SOURCE_
<android.app.Notification.CarExtender: android.app.Notification.CarExtender.UnreadConversation getUnreadConversation()> -> _SOURCE_
<android.app.Notification.CarExtender: android.app.Notification.CarExtender setColor(int)> -> _SINK_
<android.app.Notification.CarExtender: android.app.Notification.CarExtender setLargeIcon(android.graphics.Bitmap)> -> _SINK_
<android.app.Notification.CarExtender: android.app.Notification.CarExtender setUnreadConversation(android.app.Notification.CarExtender.UnreadConversation)> -> _SINK_
<android.app.Notification.CarExtender.UnreadConversation: long getLatestTimestamp()> -> _SOURCE_
<android.app.Notification.CarExtender.UnreadConversation: String[] getMessages()> -> _SOURCE_
<android.app.Notification.CarExtender.UnreadConversation: java.lang.String getParticipant()> -> _SOURCE_
<android.app.Notification.CarExtender.UnreadConversation: String[] getParticipants()> -> _SINK_
<android.app.Notification.CarExtender.UnreadConversation: android.app.PendingIntent getReadPendingIntent()> -> _SOURCE_
<android.app.Notification.CarExtender.UnreadConversation: android.app.RemoteInput getRemoteInput()> -> _SOURCE_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigLargeIcon(android.graphics.Bitmap)> -> _SINK_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigPicture(android.graphics.Bitmap)> -> _SOURCE_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigPicture(android.graphics.drawable.Icon)> -> _SOURCE_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle setSummaryText(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle showBigPictureWhenCollapsed(boolean)> -> _SINK_
<android.app.Notification.CallStyle: Notification.CallStyle forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.app.Notification.CallStyle: android.app.Notification.CallStyle setAnswerButtonColorHint(int)> -> _SINK_
<android.app.Notification.CallStyle: android.app.Notification.CallStyle setIsVideo(boolean)> -> _SINK_
<android.app.Notification.CallStyle: android.app.Notification.CallStyle setVerificationIcon(android.graphics.drawable.Icon)> -> _SOURCE_
<android.app.Notification.CallStyle: android.app.Notification.CallStyle setVerificationText(java.lang.CharSequence)> -> _SOURCE_
<android.app.Notification.InboxStyle: android.app.Notification.InboxStyle addLine(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.InboxStyle: android.app.Notification.InboxStyle setSummaryText(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.BigTextStyle: android.app.Notification.BigTextStyle bigText(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.BigTextStyle: android.app.Notification.BigTextStyle setSummaryText(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.MessagingStyle.Message: java.lang.String getDataMimeType()> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: android.net.Uri getDataUri()> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: android.os.Bundle getExtras()> -> _SINK_
<android.app.Notification.MessagingStyle.Message: List<Notification.MessagingStyle.Message> getMessagesFromBundleArray(Parcelable[])> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: java.lang.CharSequence getSender()> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: android.app.Person getSenderPerson()> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: long getTimestamp()> -> _SOURCE_
<android.app.Notification.MessagingStyle.Message: android.app.Notification.MessagingStyle.Message setData(java.lang.String,android.net.Uri)> -> _SINK_
<android.app.Notification.MediaStyle: android.app.Notification.MediaStyle setMediaSession(android.media.session.MediaSession.Token)> -> _SINK_
<android.app.NotificationChannelGroup: int describeContents()> -> _SOURCE_
<android.app.NotificationChannelGroup: List<NotificationChannel> getChannels()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String getDescription()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String getId()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.CharSequence getName()> -> _SOURCE_
<android.app.NotificationChannelGroup: boolean isBlocked()> -> _SOURCE_
<android.app.NotificationChannelGroup: void setDescription(java.lang.String)> -> _SINK_
<android.app.NotificationChannelGroup: java.lang.String toString()> -> _SOURCE_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata build()> -> _SINK_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setAutoExpandBubble(boolean)> -> _SINK_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeight(int)> -> _SINK_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeightResId(int)> -> _SINK_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIntent(android.app.PendingIntent)> -> _SINK_
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setSuppressNotification(boolean)> -> _SINK_
<android.app.NotificationChannel: boolean canBubble()> -> _SOURCE_
<android.app.NotificationChannel: boolean canBypassDnd()> -> _SINK_
<android.app.NotificationChannel: boolean canShowBadge()> -> _SOURCE_
<android.app.NotificationChannel: int describeContents()> -> _SOURCE_
<android.app.NotificationChannel: void enableLights(boolean)> -> _SINK_
<android.app.NotificationChannel: void enableVibration(boolean)> -> _SINK_
<android.app.NotificationChannel: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getConversationId()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getDescription()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getGroup()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getId()> -> _SOURCE_
<android.app.NotificationChannel: int getImportance()> -> _SOURCE_
<android.app.NotificationChannel: int getLightColor()> -> _SOURCE_
<android.app.NotificationChannel: int getLockscreenVisibility()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.CharSequence getName()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getParentChannelId()> -> _SOURCE_
<android.app.NotificationChannel: android.net.Uri getSound()> -> _SOURCE_
<android.app.NotificationChannel: long[] getVibrationPattern()> -> _SOURCE_
<android.app.NotificationChannel: boolean hasUserSetImportance()> -> _SOURCE_
<android.app.NotificationChannel: boolean hasUserSetSound()> -> _SOURCE_
<android.app.NotificationChannel: boolean isBlockable()> -> _SOURCE_
<android.app.NotificationChannel: boolean isConversation()> -> _SOURCE_
<android.app.NotificationChannel: boolean isDemoted()> -> _SOURCE_
<android.app.NotificationChannel: void setAllowBubbles(boolean)> -> _SINK_
<android.app.NotificationChannel: void setConversationId(java.lang.String,java.lang.String)> -> _SINK_
<android.app.NotificationChannel: void setDescription(java.lang.String)> -> _SINK_
<android.app.NotificationChannel: void setGroup(java.lang.String)> -> _SINK_
<android.app.NotificationChannel: void setLightColor(int)> -> _SINK_
<android.app.NotificationChannel: void setLockscreenVisibility(int)> -> _SINK_
<android.app.NotificationChannel: void setName(java.lang.CharSequence)> -> _SINK_
<android.app.NotificationChannel: void setShowBadge(boolean)> -> _SINK_
<android.app.NotificationChannel: void setSound(android.net.Uri,android.media.AudioAttributes)> -> _SINK_
<android.app.NotificationChannel: void setVibrationPattern(long[])> -> _SINK_
<android.app.NotificationChannel: boolean shouldShowLights()> -> _SOURCE_
<android.app.NotificationChannel: boolean shouldVibrate()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)> -> _SINK_
<android.app.NotificationManager: boolean areBubblesAllowed()> -> _SOURCE_
<android.app.NotificationManager: boolean areBubblesEnabled()> -> _SOURCE_
<android.app.NotificationManager: boolean areNotificationsEnabled()> -> _SOURCE_
<android.app.NotificationManager: boolean areNotificationsPaused()> -> _SOURCE_
<android.app.NotificationManager: boolean canNotifyAsPackage(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: void createNotificationChannelGroups(List<NotificationChannelGroup>)> -> _SINK_
<android.app.NotificationManager: StatusBarNotification[] getActiveNotifications()> -> _SOURCE_
<android.app.NotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: java.util.Map getAutomaticZenRules()> -> _SOURCE_
<android.app.NotificationManager: int getBubblePreference()> -> _SINK_
<android.app.NotificationManager: android.app.NotificationManager.Policy getConsolidatedNotificationPolicy()> -> _SOURCE_
<android.app.NotificationManager: int getCurrentInterruptionFilter()> -> _SOURCE_
<android.app.NotificationManager: int getImportance()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: List<NotificationChannelGroup> getNotificationChannelGroups()> -> _SOURCE_
<android.app.NotificationManager: List<NotificationChannel> getNotificationChannels()> -> _SOURCE_
<android.app.NotificationManager: java.lang.String getNotificationDelegate()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationManager.Policy getNotificationPolicy()> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationPolicyAccessGranted()> -> _SINK_
<android.app.NotificationManager: boolean matchesCallFilter(android.net.Uri)> -> _SOURCE_
<android.app.NotificationManager: void notify(int,android.app.Notification)> -> _SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> -> _SINK_
<android.app.NotificationManager: void notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)> -> _SINK_
<android.app.NotificationManager: void setInterruptionFilter(int)> -> _SINK_
<android.app.NotificationManager: void setNotificationDelegate(java.lang.String)> -> _SINK_
<android.app.NotificationManager: void setNotificationPolicy(android.app.NotificationManager.Policy)> -> _SINK_
<android.app.NotificationManager: boolean shouldHideSilentStatusBarIcons()> -> _SOURCE_
<android.app.NotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder addExtras(android.os.Bundle)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder addPerson(android.app.Person)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification build()> -> _SINK_
<android.app.Notification.Builder: android.widget.RemoteViews createBigContentView()> -> _SINK_
<android.app.Notification.Builder: android.widget.RemoteViews createHeadsUpContentView()> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder extend(android.app.Notification.Extender)> -> _SINK_
<android.app.Notification.Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.Notification.Builder: android.app.Notification.Style getStyle()> -> _SOURCE_
<android.app.Notification.Builder: android.app.Notification.Builder setBadgeIconType(int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setBubbleMetadata(android.app.Notification.BubbleMetadata)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setCategory(java.lang.String)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setChannelId(java.lang.String)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setChronometerCountDown(boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setColor(int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setColorized(boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setContent(android.widget.RemoteViews)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setContentInfo(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setContentText(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setContentTitle(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setCustomBigContentView(android.widget.RemoteViews)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setCustomContentView(android.widget.RemoteViews)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setCustomHeadsUpContentView(android.widget.RemoteViews)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setFlag(int,boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setForegroundServiceBehavior(int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setGroup(java.lang.String)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setGroupAlertBehavior(int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setGroupSummary(boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setLargeIcon(android.graphics.Bitmap)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setLargeIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setLocalOnly(boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setLocusId(android.content.LocusId)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setNumber(int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setOngoing(boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setProgress(int,int,boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setPublicVersion(android.app.Notification)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setRemoteInputHistory(CharSequence[])> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSettingsText(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setShortcutId(java.lang.String)> -> _SOURCE_
<android.app.Notification.Builder: android.app.Notification.Builder setShowWhen(boolean)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSmallIcon(int,int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSmallIcon(int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSmallIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSortKey(java.lang.String)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSound(android.net.Uri,android.media.AudioAttributes)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSound(android.net.Uri)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setSound(android.net.Uri,int)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setStyle(android.app.Notification.Style)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setTicker(java.lang.CharSequence)> -> _SINK_
<android.app.Notification.Builder: android.app.Notification.Builder setWhen(long)> -> _SINK_
<android.app.Person.Builder: android.app.Person build()> -> _SOURCE_
<android.app.Person.Builder: android.app.Person.Builder setBot(boolean)> -> _SINK_
<android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)> -> _SINK_
<android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)> -> _SINK_
<android.app.Person.Builder: android.app.Person.Builder setName(java.lang.CharSequence)> -> _SINK_
<android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)> -> _SINK_
<android.app.RecoverableSecurityException: int describeContents()> -> _SOURCE_
<android.app.RecoverableSecurityException: android.app.RemoteAction getUserAction()> -> _SOURCE_
<android.app.RecoverableSecurityException: java.lang.CharSequence getUserMessage()> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender addAction(android.app.Notification.Action)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender addActions(List<Notification.Action>)> -> _SINK_
<android.app.Notification.WearableExtender: List<Notification.Action> getActions()> -> _SOURCE_
<android.app.Notification.WearableExtender: android.graphics.Bitmap getBackground()> -> _SINK_
<android.app.Notification.WearableExtender: java.lang.String getBridgeTag()> -> _SOURCE_
<android.app.Notification.WearableExtender: int getContentAction()> -> _SOURCE_
<android.app.Notification.WearableExtender: int getContentIcon()> -> _SINK_
<android.app.Notification.WearableExtender: int getContentIconGravity()> -> _SINK_
<android.app.Notification.WearableExtender: boolean getContentIntentAvailableOffline()> -> _SOURCE_
<android.app.Notification.WearableExtender: int getCustomContentHeight()> -> _SINK_
<android.app.Notification.WearableExtender: int getCustomSizePreset()> -> _SINK_
<android.app.Notification.WearableExtender: java.lang.String getDismissalId()> -> _SOURCE_
<android.app.Notification.WearableExtender: android.app.PendingIntent getDisplayIntent()> -> _SINK_
<android.app.Notification.WearableExtender: int getGravity()> -> _SOURCE_
<android.app.Notification.WearableExtender: boolean getHintAmbientBigPicture()> -> _SOURCE_
<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()> -> _SINK_
<android.app.Notification.WearableExtender: boolean getHintContentIntentLaunchesActivity()> -> _SINK_
<android.app.Notification.WearableExtender: int getHintScreenTimeout()> -> _SOURCE_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setBackground(android.graphics.Bitmap)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setBridgeTag(java.lang.String)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentIcon(int)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentIconGravity(int)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentIntentAvailableOffline(boolean)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setCustomContentHeight(int)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setCustomSizePreset(int)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setDisplayIntent(android.app.PendingIntent)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setGravity(int)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintAmbientBigPicture(boolean)> -> _SOURCE_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintAvoidBackgroundClipping(boolean)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintContentIntentLaunchesActivity(boolean)> -> _SINK_
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setStartScrollBottom(boolean)> -> _SINK_
<android.app.PictureInPictureUiState: int describeContents()> -> _SOURCE_
<android.app.PictureInPictureUiState: boolean isStashed()> -> _SOURCE_
<android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map -> _SINK_
<android.app.RemoteInput: void addResultsToIntent(RemoteInput[],android.content.Intent,android.os.Bundle)> -> _SINK_
<android.app.RemoteInput: int describeContents()> -> _SOURCE_
<android.app.RemoteInput: boolean getAllowFreeFormInput()> -> _SOURCE_
<android.app.RemoteInput: Set<String> getAllowedDataTypes()> -> _SOURCE_
<android.app.RemoteInput: CharSequence[] getChoices()> -> _SOURCE_
<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)> -> _SOURCE_
<android.app.RemoteInput: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.RemoteInput: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.RemoteInput: java.lang.String getResultKey()> -> _SOURCE_
<android.app.RemoteInput: Bundle getResultsFromIntent(android.content.Intent)> -> _SOURCE_
<android.app.RemoteInput: int getResultsSource(android.content.Intent)> -> _SOURCE_
<android.app.RemoteInput: boolean isDataOnly()> -> _SOURCE_
<android.app.RemoteInput: void setResultsSource(android.content.Intent,int)> -> _SINK_
<android.app.Presentation: android.view.Display getDisplay()> -> _SOURCE_
<android.app.Presentation: android.content.res.Resources getResources()> -> _SINK_
<android.app.Presentation: void show()> -> _SINK_
<android.app.ServiceStartNotAllowedException: java.lang.Throwable getCause()> -> _SOURCE_
<android.app.StatusBarManager: void requestAddTileService(android.content.ComponentName,java.lang.CharSequence,android.graphics.drawable.Icon,java.util.concurrent.Executor,Consumer<Integer>)> -> _SINK_
<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)> -> _SINK_
<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)> -> _SOURCE_
<android.app.Service: int getForegroundServiceType()> -> _SOURCE_
<android.app.Service: void onStart(android.content.Intent,int)> -> _SINK_
<android.app.Service: void startForeground(int,android.app.Notification)> -> _SINK_
<android.app.Service: void startForeground(int,android.app.Notification,int)> -> _SINK_
<android.app.Service: void stopSelf(int)> -> _SOURCE_
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder addExtras(android.os.Bundle)> -> _SINK_
<android.app.RemoteInput.Builder: android.app.RemoteInput build()> -> _SINK_
<android.app.RemoteInput.Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setAllowDataType(java.lang.String,boolean)> -> _SINK_
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setAllowFreeFormInput(boolean)> -> _SINK_
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setChoices(CharSequence[])> -> _SINK_
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)> -> _SINK_
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setLabel(java.lang.CharSequence)> -> _SINK_
<android.app.PictureInPictureParams: int describeContents()> -> _SOURCE_
<android.app.PictureInPictureParams: java.lang.String toString()> -> _SOURCE_
<android.app.UiAutomation: void adoptShellPermissionIdentity()> -> _SINK_
<android.app.UiAutomation: void adoptShellPermissionIdentity(String[])> -> _SINK_
<android.app.UiAutomation: void dropShellPermissionIdentity()> -> _SINK_
<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)> -> _SINK_
<android.app.UiAutomation: ParcelFileDescriptor[] executeShellCommandRw(java.lang.String)> -> _SINK_
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SOURCE_
<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<android.app.UiAutomation: android.view.WindowContentFrameStats getWindowContentFrameStats(int)> -> _SOURCE_
<android.app.UiAutomation: List<AccessibilityWindowInfo> getWindows()> -> _SINK_
<android.app.UiAutomation: SparseArray<List<AccessibilityWindowInfo>> getWindowsOnAllDisplays()> -> _SOURCE_
<android.app.UiAutomation: void grantRuntimePermission(java.lang.String,java.lang.String)> -> _SINK_
<android.app.UiAutomation: void setAnimationScale(float)> -> _SINK_
<android.app.UiAutomation: boolean setRotation(int)> -> _SINK_
<android.app.UiAutomation: void setRunAsMonkey(boolean)> -> _SINK_
<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<android.app.UiAutomation: java.lang.String toString()> -> _SOURCE_
<android.app.VoiceInteractor.Prompt: int countVoicePrompts()> -> _SOURCE_
<android.app.VoiceInteractor.Prompt: int describeContents()> -> _SOURCE_
<android.app.VoiceInteractor.Prompt: java.lang.CharSequence getVisualPrompt()> -> _SOURCE_
<android.app.VoiceInteractor.Prompt: java.lang.CharSequence getVoicePromptAt(int)> -> _SOURCE_
<android.app.VoiceInteractor.Prompt: java.lang.String toString()> -> _SOURCE_
<android.app.TaskInfo: boolean isVisible()> -> _SOURCE_
<android.app.TaskInfo: java.lang.String toString()> -> _SOURCE_
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()> -> _SOURCE_
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SOURCE_
<android.app.SearchManager: List<SearchableInfo> getSearchablesInGlobalSearch()> -> _SOURCE_
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.app.TabActivity: android.widget.TabHost getTabHost()> -> _SOURCE_
<android.app.TabActivity: android.widget.TabWidget getTabWidget()> -> _SOURCE_
<android.app.TabActivity: void setDefaultTab(java.lang.String)> -> _SINK_
<android.app.TabActivity: void setDefaultTab(int)> -> _SINK_
<android.app.UiModeManager: int getCurrentModeType()> -> _SOURCE_
<android.app.UiModeManager: java.time.LocalTime getCustomNightModeEnd()> -> _SINK_
<android.app.UiModeManager: java.time.LocalTime getCustomNightModeStart()> -> _SOURCE_
<android.app.UiModeManager: int getNightMode()> -> _SOURCE_
<android.app.UiModeManager: void setApplicationNightMode(int)> -> _SINK_
<android.app.UiModeManager: void setCustomNightModeEnd(java.time.LocalTime)> -> _SINK_
<android.app.UiModeManager: void setCustomNightModeStart(java.time.LocalTime)> -> _SINK_
<android.app.UiModeManager: void setNightMode(int)> -> _SINK_
<android.app.VoiceInteractor.Request: android.app.Activity getActivity()> -> _SOURCE_
<android.app.VoiceInteractor.Request: android.content.Context getContext()> -> _SOURCE_
<android.app.VoiceInteractor.Request: java.lang.String getName()> -> _SOURCE_
<android.app.VoiceInteractor.Request: java.lang.String toString()> -> _SOURCE_
<android.app.WallpaperColors: int describeContents()> -> _SOURCE_
<android.app.WallpaperColors: WallpaperColors fromBitmap(android.graphics.Bitmap)> -> _SINK_
<android.app.WallpaperColors: WallpaperColors fromDrawable(android.graphics.drawable.Drawable)> -> _SOURCE_
<android.app.WallpaperColors: int getColorHints()> -> _SOURCE_
<android.app.WallpaperColors: android.graphics.Color getPrimaryColor()> -> _SOURCE_
<android.app.WallpaperColors: android.graphics.Color getSecondaryColor()> -> _SINK_
<android.app.WallpaperColors: android.graphics.Color getTertiaryColor()> -> _SINK_
<android.app.WallpaperColors: java.lang.String toString()> -> _SOURCE_
<android.app.VoiceInteractor.CommandRequest: void onCommandResult(boolean,android.os.Bundle)> -> _SINK_
<android.app.SearchableInfo: int describeContents()> -> _SOURCE_
<android.app.SearchableInfo: int getHintId()> -> _SOURCE_
<android.app.SearchableInfo: int getImeOptions()> -> _SOURCE_
<android.app.SearchableInfo: int getInputType()> -> _SOURCE_
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()> -> _SOURCE_
<android.app.SearchableInfo: int getSettingsDescriptionId()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()> -> _SINK_
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestPackage()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestPath()> -> _SOURCE_
<android.app.SearchableInfo: int getVoiceLanguageId()> -> _SOURCE_
<android.app.SearchableInfo: int getVoiceLanguageModeId()> -> _SOURCE_
<android.app.SearchableInfo: int getVoiceMaxResults()> -> _SOURCE_
<android.app.SearchableInfo: int getVoicePromptTextId()> -> _SOURCE_
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()> -> _SOURCE_
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()> -> _SOURCE_
<android.app.SearchableInfo: boolean shouldIncludeInGlobalSearch()> -> _SOURCE_
<android.app.SearchableInfo: boolean shouldRewriteQueryFromData()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy.Builder: android.app.admin.FactoryResetProtectionPolicy.Builder setFactoryResetProtectionAccounts(List<String>)> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy.Builder: android.app.admin.FactoryResetProtectionPolicy.Builder setFactoryResetProtectionEnabled(boolean)> -> _SINK_
<android.app.WallpaperManager: void clear(int)> -> _SINK_
<android.app.WallpaperManager: void clearWallpaper()> -> _SINK_
<android.app.WallpaperManager: void clearWallpaperOffsets(android.os.IBinder)> -> _SINK_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable()> -> _SINK_
<android.app.WallpaperManager: android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)> -> _SINK_
<android.app.WallpaperManager: int getDesiredMinimumHeight()> -> _SOURCE_
<android.app.WallpaperManager: int getDesiredMinimumWidth()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> -> _SOURCE_
<android.app.WallpaperManager: WallpaperManager getInstance(android.content.Context)> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperColors getWallpaperColors(int)> -> _SOURCE_
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int)> -> _SOURCE_
<android.app.WallpaperManager: int getWallpaperId(int)> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()> -> _SOURCE_
<android.app.WallpaperManager: boolean hasResourceWallpaper(int)> -> _SOURCE_
<android.app.WallpaperManager: boolean isSetWallpaperAllowed()> -> _SOURCE_
<android.app.WallpaperManager: boolean isWallpaperSupported()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()> -> _SOURCE_
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)> -> _SINK_
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)> -> _SINK_
<android.app.WallpaperManager: void setDisplayPadding(android.graphics.Rect)> -> _SINK_
<android.app.WallpaperManager: int setResource(int,int)> -> _SINK_
<android.app.WallpaperManager: void setResource(int)> -> _SINK_
<android.app.WallpaperManager: void setStream(java.io.InputStream)> -> _SINK_
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean,int)> -> _SINK_
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)> -> _SINK_
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)> -> _SINK_
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)> -> _SINK_
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> -> _SINK_
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.app.admin.NetworkEvent: int describeContents()> -> _SOURCE_
<android.app.admin.NetworkEvent: long getId()> -> _SOURCE_
<android.app.admin.NetworkEvent: java.lang.String getPackageName()> -> _SOURCE_
<android.app.admin.NetworkEvent: long getTimestamp()> -> _SOURCE_
<android.app.admin.SecurityLog.SecurityEvent: int describeContents()> -> _SOURCE_
<android.app.admin.SecurityLog.SecurityEvent: java.lang.Object getData()> -> _SOURCE_
<android.app.admin.SecurityLog.SecurityEvent: long getId()> -> _SOURCE_
<android.app.admin.SecurityLog.SecurityEvent: int getLogLevel()> -> _SOURCE_
<android.app.admin.SecurityLog.SecurityEvent: int getTag()> -> _SOURCE_
<android.app.admin.SecurityLog.SecurityEvent: long getTimeNanos()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: int describeContents()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: List<String> getFactoryResetProtectionAccounts()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: boolean isFactoryResetProtectionEnabled()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DnsEvent: int describeContents()> -> _SOURCE_
<android.app.admin.DnsEvent: java.lang.String getHostname()> -> _SOURCE_
<android.app.admin.DnsEvent: List<InetAddress> getInetAddresses()> -> _SOURCE_
<android.app.admin.DnsEvent: int getTotalResolvedAddressCount()> -> _SOURCE_
<android.app.admin.DnsEvent: java.lang.String toString()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: AppSearchBatchResult<KeyType, ValueType> build()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: Builder<KeyType, ValueType> setFailure(KeyType,int,java.lang.String)> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: Builder<KeyType, ValueType> setResult(KeyType,AppSearchResult<ValueType>)> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: Builder<KeyType, ValueType> setSuccess(KeyType,ValueType)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: SystemUpdatePolicy createAutomaticInstallPolicy()> -> _SINK_
<android.app.admin.SystemUpdatePolicy: SystemUpdatePolicy createWindowedInstallPolicy(int,int)> -> _SINK_
<android.app.admin.SystemUpdatePolicy: int describeContents()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: List<FreezePeriod> getFreezePeriods()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: int getPolicyType()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy setFreezePeriods(List<FreezePeriod>)> -> _SINK_
<android.app.admin.SystemUpdatePolicy: java.lang.String toString()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult: java.util.Map> getAll()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult: java.util.Map> getFailures()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult: java.util.Map getSuccesses()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult: boolean isSuccess()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult: java.lang.String toString()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy.ValidationFailedException: int describeContents()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy.ValidationFailedException: int getErrorCode()> -> _SOURCE_
<android.app.appsearch.AppSearchManager.SearchContext: java.lang.String getDatabaseName()> -> _SOURCE_
<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()> -> _SOURCE_
<android.app.admin.FreezePeriod: java.time.MonthDay getStart()> -> _SOURCE_
<android.app.admin.FreezePeriod: java.lang.String toString()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: int describeContents()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: long getReceivedTime()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: int getSecurityPatchState()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: java.lang.String toString()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema: List<AppSearchSchema.PropertyConfig> getProperties()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema: java.lang.String getSchemaType()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema: java.lang.String toString()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.BytesPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.BytesPropertyConfig build()> -> _SINK_
<android.app.admin.UnsafeStateException: int describeContents()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.Builder: android.app.appsearch.AppSearchSchema.Builder addProperty(android.app.appsearch.AppSearchSchema.PropertyConfig)> -> _SINK_
<android.app.appsearch.AppSearchSchema.Builder: android.app.appsearch.AppSearchSchema build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig: java.lang.String getSchemaType()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig: boolean shouldIndexNestedProperties()> -> _SOURCE_
<android.app.appsearch.AppSearchManager: void createGlobalSearchSession(java.util.concurrent.Executor,Consumer<AppSearchResult<GlobalSearchSession>>)> -> _SINK_
<android.app.appsearch.AppSearchManager: void createSearchSession(android.app.appsearch.AppSearchManager.SearchContext,java.util.concurrent.Executor,Consumer<AppSearchResult<AppSearchSession>>)> -> _SINK_
<android.app.appsearch.GenericDocument: long getCreationTimestampMillis()> -> _SOURCE_
<android.app.appsearch.GenericDocument: java.lang.String getId()> -> _SOURCE_
<android.app.appsearch.GenericDocument: int getMaxIndexedProperties()> -> _SOURCE_
<android.app.appsearch.GenericDocument: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.GenericDocument: java.lang.Object getProperty(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: boolean getPropertyBoolean(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: boolean[] getPropertyBooleanArray(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: byte[] getPropertyBytes(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: byte[][] getPropertyBytesArray(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: android.app.appsearch.GenericDocument getPropertyDocument(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: GenericDocument[] getPropertyDocumentArray(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: double getPropertyDouble(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: double[] getPropertyDoubleArray(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: long getPropertyLong(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: long[] getPropertyLongArray(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: Set<String> getPropertyNames()> -> _SOURCE_
<android.app.appsearch.GenericDocument: java.lang.String getPropertyString(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: String[] getPropertyStringArray(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument: java.lang.String getSchemaType()> -> _SOURCE_
<android.app.appsearch.GenericDocument: int getScore()> -> _SOURCE_
<android.app.appsearch.GenericDocument: long getTtlMillis()> -> _SOURCE_
<android.app.appsearch.AppSearchResult: java.lang.String getErrorMessage()> -> _SOURCE_
<android.app.appsearch.AppSearchResult: int getResultCode()> -> _SOURCE_
<android.app.appsearch.AppSearchResult: ValueType getResultValue()> -> _SOURCE_
<android.app.appsearch.AppSearchResult: boolean isSuccess()> -> _SOURCE_
<android.app.appsearch.AppSearchResult: java.lang.String toString()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig: int getIndexingType()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig: int getTokenizerType()> -> _SOURCE_
<android.app.appsearch.GetByDocumentIdRequest: Set<String> getIds()> -> _SOURCE_
<android.app.appsearch.GetByDocumentIdRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.GetByDocumentIdRequest: java.util.Map> getProjections()> -> _SOURCE_
<android.app.appsearch.AppSearchSession: void getByDocumentId(android.app.appsearch.GetByDocumentIdRequest,java.util.concurrent.Executor,BatchResultCallback<String,)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: void getNamespaces(java.util.concurrent.Executor,Consumer<AppSearchResult<Set<String>>>)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: void getSchema(java.util.concurrent.Executor,Consumer<AppSearchResult<GetSchemaResponse>>)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: void getStorageInfo(java.util.concurrent.Executor,Consumer<AppSearchResult<StorageInfo>>)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: void reportUsage(android.app.appsearch.ReportUsageRequest,java.util.concurrent.Executor,Consumer<AppSearchResult<Void>>)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: android.app.appsearch.SearchResults search(java.lang.String,android.app.appsearch.SearchSpec)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: void setSchema(android.app.appsearch.SetSchemaRequest,java.util.concurrent.Executor,java.util.concurrent.Executor,Consumer<AppSearchResult<SetSchemaResponse>>)> -> _SINK_
<android.app.appsearch.GetByDocumentIdRequest.Builder: android.app.appsearch.GetByDocumentIdRequest.Builder addProjection(java.lang.String,Collection<String>)> -> _SINK_
<android.app.appsearch.GetByDocumentIdRequest.Builder: android.app.appsearch.GetByDocumentIdRequest build()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.StringPropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setIndexingType(int)> -> _SINK_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setTokenizerType(int)> -> _SINK_
<android.app.appsearch.PutDocumentsRequest: List<GenericDocument> getGenericDocuments()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.PropertyConfig: int getCardinality()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.PropertyConfig: java.lang.String getName()> -> _SOURCE_
<android.app.appsearch.RemoveByDocumentIdRequest: Set<String> getIds()> -> _SOURCE_
<android.app.appsearch.RemoveByDocumentIdRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: void getByDocumentId(java.lang.String,java.lang.String,android.app.appsearch.GetByDocumentIdRequest,java.util.concurrent.Executor,BatchResultCallback<String,)> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: void getSchema(java.lang.String,java.lang.String,java.util.concurrent.Executor,Consumer<AppSearchResult<GetSchemaResponse>>)> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: void reportSystemUsage(android.app.appsearch.ReportSystemUsageRequest,java.util.concurrent.Executor,Consumer<AppSearchResult<Void>>)> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: android.app.appsearch.SearchResults search(java.lang.String,android.app.appsearch.SearchSpec)> -> _SOURCE_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest.Builder addGenericDocuments(GenericDocument[])> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest.Builder addGenericDocuments(Collection<?)> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest build()> -> _SINK_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder addSchema(android.app.appsearch.AppSearchSchema)> -> _SINK_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder addSchemaTypeNotDisplayedBySystem(java.lang.String)> -> _SINK_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse build()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder setRequiredPermissionsForSchemaTypeVisibility(java.lang.String,Set<Set<Integer>>)> -> _SINK_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder setSchemaTypeVisibleToPackages(java.lang.String,Set<PackageIdentifier>)> -> _SINK_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder setVersion(int)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setCreationTimestampMillis(long)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyBoolean(java.lang.String,boolean[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyBytes(java.lang.String,byte[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyDocument(java.lang.String,GenericDocument[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyDouble(java.lang.String,double[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyLong(java.lang.String,long[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyString(java.lang.String,String[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setScore(int)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setTtlMillis(long)> -> _SINK_
<android.app.appsearch.Migrator: GenericDocument onUpgrade(int,int,android.app.appsearch.GenericDocument)> -> _SINK_
<android.app.appsearch.Migrator: boolean shouldMigrate(int,int)> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getDatabaseName()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getDocumentId()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: long getUsageTimestampMillis()> -> _SOURCE_
<android.app.appsearch.SearchResult: java.lang.String getDatabaseName()> -> _SOURCE_
<android.app.appsearch.SearchResult: android.app.appsearch.GenericDocument getGenericDocument()> -> _SOURCE_
<android.app.appsearch.SearchResult: List<SearchResult.MatchInfo> getMatchInfos()> -> _SOURCE_
<android.app.appsearch.SearchResult: java.lang.String getPackageName()> -> _SOURCE_
<android.app.appsearch.SearchResult: double getRankingSignal()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse: java.util.Map>> getRequiredPermissionsForSchemaTypeVisibility()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse: Set<String> getSchemaTypesNotDisplayedBySystem()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse: java.util.Map> getSchemaTypesVisibleToPackages()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse: Set<AppSearchSchema> getSchemas()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse: int getVersion()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder setShouldIndexNestedProperties(boolean)> -> _SINK_
<android.app.appsearch.ReportUsageRequest.Builder: android.app.appsearch.ReportUsageRequest.Builder setUsageTimestampMillis(long)> -> _SINK_
<android.app.appsearch.ReportUsageRequest: java.lang.String getDocumentId()> -> _SOURCE_
<android.app.appsearch.ReportUsageRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.ReportUsageRequest: long getUsageTimestampMillis()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo build()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo.Builder setExactMatchRange(android.app.appsearch.SearchResult.MatchRange)> -> _SINK_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo.Builder setSnippetRange(android.app.appsearch.SearchResult.MatchRange)> -> _SINK_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo.Builder setSubmatchRange(android.app.appsearch.SearchResult.MatchRange)> -> _SINK_
<android.app.appsearch.SearchResult.Builder: android.app.appsearch.SearchResult.Builder setGenericDocument(android.app.appsearch.GenericDocument)> -> _SINK_
<android.app.appsearch.SearchResult.Builder: android.app.appsearch.SearchResult.Builder setRankingSignal(double)> -> _SINK_
<android.app.appsearch.SearchResults: void getNextPage(java.util.concurrent.Executor,Consumer<AppSearchResult<List<SearchResult>>>)> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: java.util.Map getMigrators()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: java.util.Map>> getRequiredPermissionsForSchemaTypeVisibility()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: Set<AppSearchSchema> getSchemas()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: Set<String> getSchemasNotDisplayedBySystem()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: java.util.Map> getSchemasVisibleToPackages()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: int getVersion()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: boolean isForceOverride()> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterNamespaces(String[])> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterNamespaces(Collection<String>)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterPackageNames(String[])> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterPackageNames(Collection<String>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterSchemas(Collection<String>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterSchemas(String[])> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addProjection(java.lang.String,Collection<String>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setMaxSnippetSize(int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setOrder(int)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setRankingStrategy(int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setResultCountPerPage(int)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setResultGrouping(int,int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setSnippetCount(int)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setSnippetCountPerProperty(int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setTermMatch(int)> -> _SINK_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.CharSequence getExactMatch()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: android.app.appsearch.SearchResult.MatchRange getExactMatchRange()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.String getFullText()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.String getPropertyPath()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.CharSequence getSnippet()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: android.app.appsearch.SearchResult.MatchRange getSnippetRange()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.CharSequence getSubmatch()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: android.app.appsearch.SearchResult.MatchRange getSubmatchRange()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse: Set<String> getDeletedTypes()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse: Set<String> getMigratedTypes()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse: List<SetSchemaResponse.MigrationFailure> getMigrationFailures()> -> _SOURCE_
<android.app.appsearch.SearchSpec: List<String> getFilterNamespaces()> -> _SOURCE_
<android.app.appsearch.SearchSpec: List<String> getFilterPackageNames()> -> _SOURCE_
<android.app.appsearch.SearchSpec: List<String> getFilterSchemas()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getMaxSnippetSize()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getOrder()> -> _SOURCE_
<android.app.appsearch.SearchSpec: java.util.Map> getProjections()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getResultCountPerPage()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getResultGroupingLimit()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getResultGroupingTypeFlags()> -> _SINK_
<android.app.appsearch.SearchSpec: int getSnippetCount()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getSnippetCountPerProperty()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getTermMatch()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest.Builder: android.app.appsearch.ReportSystemUsageRequest.Builder setUsageTimestampMillis(long)> -> _SINK_
<android.app.assist.AssistContent: int describeContents()> -> _SOURCE_
<android.app.assist.AssistContent: android.os.Bundle getExtras()> -> _SINK_
<android.app.assist.AssistContent: android.content.Intent getIntent()> -> _SOURCE_
<android.app.assist.AssistContent: java.lang.String getStructuredData()> -> _SOURCE_
<android.app.assist.AssistContent: android.net.Uri getWebUri()> -> _SOURCE_
<android.app.assist.AssistContent: boolean isAppProvidedIntent()> -> _SOURCE_
<android.app.assist.AssistContent: boolean isAppProvidedWebUri()> -> _SOURCE_
<android.app.assist.AssistContent: void setIntent(android.content.Intent)> -> _SINK_
<android.app.assist.AssistContent: void setStructuredData(java.lang.String)> -> _SINK_
<android.app.assist.AssistContent: void setWebUri(android.net.Uri)> -> _SOURCE_
<android.app.assist.AssistStructure: int describeContents()> -> _SOURCE_
<android.app.assist.AssistStructure: long getAcquisitionEndTime()> -> _SOURCE_
<android.app.assist.AssistStructure: long getAcquisitionStartTime()> -> _SOURCE_
<android.app.assist.AssistStructure: android.content.ComponentName getActivityComponent()> -> _SOURCE_
<android.app.assist.AssistStructure: android.app.assist.AssistStructure.WindowNode getWindowNodeAt(int)> -> _SOURCE_
<android.app.assist.AssistStructure: int getWindowNodeCount()> -> _SOURCE_
<android.app.assist.AssistStructure: boolean isHomeActivity()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchRange: int getEnd()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchRange: int getStart()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchRange: java.lang.String toString()> -> _SOURCE_
<android.app.appsearch.StorageInfo.Builder: android.app.appsearch.StorageInfo.Builder setAliveDocumentsCount(int)> -> _SINK_
<android.app.appsearch.StorageInfo.Builder: android.app.appsearch.StorageInfo.Builder setAliveNamespacesCount(int)> -> _SINK_
<android.app.appsearch.StorageInfo.Builder: android.app.appsearch.StorageInfo.Builder setSizeBytes(long)> -> _SINK_
<android.app.assist.AssistStructure.ViewNode: float getAlpha()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: CharSequence[] getAutofillOptions()> -> _SINK_
<android.app.assist.AssistStructure.ViewNode: int getAutofillType()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.app.assist.AssistStructure.ViewNode getChildAt(int)> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getChildCount()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getClassName()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: float getElevation()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getHeight()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getHint()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getHintIdEntry()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.view.ViewStructure.HtmlInfo getHtmlInfo()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getId()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getIdEntry()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getIdPackage()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getIdType()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getImportantForAutofill()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getInputType()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getLeft()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getMaxTextEms()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getMaxTextLength()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getMinTextEms()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: String[] getReceiveContentMimeTypes()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getScrollX()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getScrollY()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getTextBackgroundColor()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getTextColor()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getTextIdEntry()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int[] getTextLineBaselines()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int[] getTextLineCharOffsets()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: float getTextSize()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getTextStyle()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getTop()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: android.graphics.Matrix getTransformation()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getVisibility()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getWebDomain()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: java.lang.String getWebScheme()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: int getWidth()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isAccessibilityFocused()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isActivated()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isAssistBlocked()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isCheckable()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isClickable()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isContextClickable()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isEnabled()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isFocusable()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isFocused()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isLongClickable()> -> _SOURCE_
<android.app.assist.AssistStructure.ViewNode: boolean isOpaque()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse.MigrationFailure: AppSearchResult<Void> getAppSearchResult()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse.MigrationFailure: java.lang.String getDocumentId()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse.MigrationFailure: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse.MigrationFailure: java.lang.String getSchemaType()> -> _SOURCE_
<android.app.backup.BackupDataOutput: long getQuota()> -> _SOURCE_
<android.app.backup.BackupDataOutput: int getTransportFlags()> -> _SOURCE_
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> -> _SINK_
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> -> _SINK_
<android.app.appsearch.exceptions.AppSearchException: int getResultCode()> -> _SOURCE_
<android.app.appsearch.exceptions.AppSearchException:  AppSearchResult toAppSearchResult()> -> _SOURCE_
<android.app.backup.BackupDataInput: int getDataSize()> -> _SOURCE_
<android.app.backup.BackupDataInput: java.lang.String getKey()> -> _SOURCE_
<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)> -> _SOURCE_
<android.app.backup.BackupDataInput: boolean readNextHeader()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: long getQuota()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: int getTransportFlags()> -> _SOURCE_
<android.app.backup.BackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SINK_
<android.app.backup.BackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> -> _SOURCE_
<android.app.backup.BackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder addRequiredPermissionsForSchemaTypeVisibility(java.lang.String,Set<Integer>)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder addSchemas(AppSearchSchema[])> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest build()> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder clearRequiredPermissionsForSchemaTypeVisibility(java.lang.String)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setForceOverride(boolean)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setMigrator(java.lang.String,android.app.appsearch.Migrator)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setMigrators(java.util.Map -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setSchemaTypeDisplayedBySystem(java.lang.String,boolean)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setSchemaTypeVisibilityForPackage(java.lang.String,boolean,android.app.appsearch.PackageIdentifier)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setVersion(int)> -> _SINK_
<android.app.backup.SharedPreferencesBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> -> _SINK_
<android.app.backup.RestoreObserver: void onUpdate(int,java.lang.String)> -> _SOURCE_
<android.app.backup.RestoreObserver: void restoreFinished(int)> -> _SOURCE_
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse.Builder addMigratedType(java.lang.String)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse.Builder addMigrationFailure(android.app.appsearch.SetSchemaResponse.MigrationFailure)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse build()> -> _SINK_
<android.app.appsearch.StorageInfo: int getAliveDocumentsCount()> -> _SOURCE_
<android.app.appsearch.StorageInfo: int getAliveNamespacesCount()> -> _SOURCE_
<android.app.appsearch.StorageInfo: long getSizeBytes()> -> _SOURCE_
<android.app.blob.BlobStoreManager.Session: void allowPackageAccess(java.lang.String,byte[])> -> _SINK_
<android.app.blob.BlobStoreManager.Session: void allowPublicAccess()> -> _SINK_
<android.app.blob.BlobStoreManager.Session: void allowSameSignatureAccess()> -> _SINK_
<android.app.blob.BlobStoreManager.Session: void commit(java.util.concurrent.Executor,Consumer<Integer>)> -> _SINK_
<android.app.blob.BlobStoreManager.Session: long getSize()> -> _SOURCE_
<android.app.blob.BlobStoreManager.Session: boolean isPackageAccessAllowed(java.lang.String,byte[])> -> _SOURCE_
<android.app.blob.BlobStoreManager.Session: boolean isPublicAccessAllowed()> -> _SOURCE_
<android.app.blob.BlobStoreManager.Session: boolean isSameSignatureAccessAllowed()> -> _SOURCE_
<android.app.blob.BlobStoreManager.Session: android.os.ParcelFileDescriptor openWrite(long,long)> -> _SINK_
<android.app.blob.BlobHandle: BlobHandle createWithSha256(byte[],java.lang.CharSequence,long,java.lang.String)> -> _SINK_
<android.app.blob.BlobHandle: int describeContents()> -> _SOURCE_
<android.app.blob.BlobHandle: long getExpiryTimeMillis()> -> _SOURCE_
<android.app.blob.BlobHandle: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.blob.BlobHandle: byte[] getSha256Digest()> -> _SOURCE_
<android.app.blob.BlobHandle: java.lang.String getTag()> -> _SOURCE_
<android.app.job.JobScheduler: List<JobInfo> getAllPendingJobs()> -> _SOURCE_
<android.app.job.JobScheduler: JobInfo getPendingJob(int)> -> _SINK_
<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)> -> _SINK_
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,int,long)> -> _SINK_
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,java.lang.CharSequence,long)> -> _SINK_
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,java.lang.CharSequence)> -> _SINK_
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,int)> -> _SINK_
<android.app.blob.BlobStoreManager: List<BlobHandle> getLeasedBlobs()> -> _SOURCE_
<android.app.blob.BlobStoreManager: long getRemainingLeaseQuotaBytes()> -> _SOURCE_
<android.app.blob.BlobStoreManager: android.app.blob.BlobStoreManager.Session openSession(long)> -> _SINK_
<android.app.job.JobWorkItem: int describeContents()> -> _SOURCE_
<android.app.job.JobWorkItem: int getDeliveryCount()> -> _SOURCE_
<android.app.job.JobWorkItem: long getEstimatedNetworkDownloadBytes()> -> _SOURCE_
<android.app.job.JobWorkItem: long getEstimatedNetworkUploadBytes()> -> _SOURCE_
<android.app.job.JobWorkItem: android.content.Intent getIntent()> -> _SOURCE_
<android.app.job.JobWorkItem: long getMinimumNetworkChunkBytes()> -> _SOURCE_
<android.app.job.JobWorkItem: java.lang.String toString()> -> _SOURCE_
<android.arch.core.executor.testing.CountingTaskExecutorRule: void drainTasks(int,android.icu.util.TimeUnit)> -> _SINK_
<android.app.people.ConversationStatus: int describeContents()> -> _SOURCE_
<android.app.people.ConversationStatus: int getActivity()> -> _SOURCE_
<android.app.people.ConversationStatus: int getAvailability()> -> _SOURCE_
<android.app.people.ConversationStatus: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.app.people.ConversationStatus: long getEndTimeMillis()> -> _SOURCE_
<android.app.people.ConversationStatus: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.app.people.ConversationStatus: java.lang.String getId()> -> _SOURCE_
<android.app.people.ConversationStatus: long getStartTimeMillis()> -> _SOURCE_
<android.app.people.ConversationStatus: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)> -> _SOURCE_
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> -> _SOURCE_
<android.app.job.JobInfo.TriggerContentUri: int describeContents()> -> _SOURCE_
<android.app.job.JobInfo.TriggerContentUri: int getFlags()> -> _SOURCE_
<android.app.job.JobInfo.TriggerContentUri: android.net.Uri getUri()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: int getDisplayId()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: int getHeight()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: int getLeft()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: android.app.assist.AssistStructure.ViewNode getRootViewNode()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: int getTop()> -> _SOURCE_
<android.app.assist.AssistStructure.WindowNode: int getWidth()> -> _SOURCE_
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addIcon(android.graphics.drawable.Icon,java.lang.String,List<String>)> -> _SINK_
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addText(java.lang.CharSequence,java.lang.String,List<String>)> -> _SINK_
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)> -> _SINK_
<android.arch.lifecycle.Lifecycle: Lifecycle.State getCurrentState()> -> _SOURCE_
<android.app.backup.FileBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> -> _SOURCE_
<android.app.backup.FileBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> -> _SINK_
<android.app.slice.SliceManager: int checkSlicePermission(android.net.Uri,int,int)> -> _SOURCE_
<android.app.slice.SliceManager: List<Uri> getPinnedSlices()> -> _SOURCE_
<android.app.slice.SliceManager: Set<SliceSpec> getPinnedSpecs(android.net.Uri)> -> _SOURCE_
<android.app.slice.SliceManager: Collection<Uri> getSliceDescendants(android.net.Uri)> -> _SOURCE_
<android.app.slice.SliceManager: void grantSlicePermission(java.lang.String,android.net.Uri)> -> _SINK_
<android.app.slice.SliceManager: android.net.Uri mapIntentToUri(android.content.Intent)> -> _SINK_
<android.app.slice.SliceManager: void revokeSlicePermission(java.lang.String,android.net.Uri)> -> _SINK_
<android.app.slice.SliceSpec: boolean canRender(android.app.slice.SliceSpec)> -> _SINK_
<android.app.slice.SliceSpec: int describeContents()> -> _SOURCE_
<android.app.slice.SliceSpec: int getRevision()> -> _SOURCE_
<android.app.slice.SliceSpec: java.lang.String getType()> -> _SOURCE_
<android.app.slice.SliceSpec: java.lang.String toString()> -> _SOURCE_
<android.app.job.JobServiceEngine: IBinder getBinder()> -> _SOURCE_
<android.app.job.JobServiceEngine: void jobFinished(android.app.job.JobParameters,boolean)> -> _SOURCE_
<android.app.job.JobServiceEngine: boolean onStartJob(android.app.job.JobParameters)> -> _SOURCE_
<android.app.people.PeopleManager: void addOrUpdateStatus(java.lang.String,android.app.people.ConversationStatus)> -> _SINK_
<android.app.people.PeopleManager: List<ConversationStatus> getStatuses(java.lang.String)> -> _SOURCE_
<android.arch.lifecycle.LifecycleRegistryOwner: LifecycleRegistry getLifecycle()> -> _SOURCE_
<android.app.usage.EventStats: void add(android.app.usage.EventStats)> -> _SINK_
<android.app.usage.EventStats: int describeContents()> -> _SOURCE_
<android.app.usage.EventStats: int getCount()> -> _SOURCE_
<android.app.usage.EventStats: int getEventType()> -> _SOURCE_
<android.app.usage.EventStats: long getFirstTimeStamp()> -> _SOURCE_
<android.app.usage.EventStats: long getLastEventTime()> -> _SOURCE_
<android.app.usage.EventStats: long getLastTimeStamp()> -> _SOURCE_
<android.app.usage.EventStats: long getTotalTime()> -> _SOURCE_
<android.app.backup.BackupDataInputStream: java.lang.String getKey()> -> _SOURCE_
<android.app.backup.BackupDataInputStream: int read()> -> _SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[],int,int)> -> _SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[])> -> _SINK_
<android.app.backup.BackupDataInputStream: int size()> -> _SOURCE_
<android.arch.lifecycle.LifecycleOwner: Lifecycle getLifecycle()> -> _SOURCE_
<android.arch.lifecycle.LiveData: T getValue()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: int describeContents()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getAppBytes()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getAudioBytes()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getImageBytes()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getTotalBytes()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getVideoBytes()> -> _SOURCE_
<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle.State getCurrentState()> -> _SOURCE_
<android.arch.lifecycle.LifecycleRegistry: int getObserverCount()> -> _SOURCE_
<android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle.Event)> -> _SINK_
<android.arch.lifecycle.ProcessLifecycleOwner: android.arch.lifecycle.Lifecycle getLifecycle()> -> _SOURCE_
<android.arch.lifecycle.MutableLiveData: void postValue(T)> -> _SINK_
<android.arch.lifecycle.MutableLiveData: void setValue(T)> -> _SINK_
<android.app.usage.StorageStatsManager: long getTotalBytes(java.util.UUID)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID,android.os.UserHandle)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.util.UUID,int)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.util.UUID,android.os.UserHandle)> -> _SOURCE_
<android.arch.lifecycle.ViewModelStoreOwner: ViewModelStore getViewModelStore()> -> _SOURCE_
<android.app.role.RoleManager: android.content.Intent createRequestRoleIntent(java.lang.String)> -> _SOURCE_
<android.app.role.RoleManager: boolean isRoleAvailable(java.lang.String)> -> _SOURCE_
<android.app.role.RoleManager: boolean isRoleHeld(java.lang.String)> -> _SOURCE_
<android.arch.paging.AsyncPagedListDiffer: PagedList getCurrentList()> -> _SOURCE_
<android.arch.paging.AsyncPagedListDiffer: T getItem(int)> -> _SOURCE_
<android.arch.paging.AsyncPagedListDiffer: int getItemCount()> -> _SOURCE_
<android.arch.lifecycle.ViewModelStores: ViewModelStore of(android.app.Fragment)> -> _SOURCE_
<android.arch.lifecycle.ViewModelStores: ViewModelStore of(androidx.fragment.app.FragmentActivity)> -> _SOURCE_
<android.arch.paging.PagedList: T get(int)> -> _SOURCE_
<android.arch.paging.PagedList: android.arch.paging.PagedList.Config getConfig()> -> _SOURCE_
<android.arch.paging.PagedList: DataSource<?, T> getDataSource()> -> _SOURCE_
<android.arch.paging.PagedList: Object getLastKey()> -> _SOURCE_
<android.arch.paging.PagedList: int getPositionOffset()> -> _SOURCE_
<android.arch.paging.PagedList: int size()> -> _SOURCE_
<android.arch.paging.PagedList: List snapshot()> -> _SOURCE_
<android.app.usage.NetworkStats.Bucket: int getDefaultNetworkStatus()> -> _SOURCE_
<android.app.usage.NetworkStats.Bucket: long getEndTimeStamp()> -> _SINK_
<android.app.usage.NetworkStats.Bucket: int getMetered()> -> _SOURCE_
<android.app.usage.NetworkStats.Bucket: int getRoaming()> -> _SINK_
<android.app.usage.NetworkStats.Bucket: long getRxBytes()> -> _SOURCE_
<android.app.usage.NetworkStats.Bucket: long getRxPackets()> -> _SOURCE_
<android.app.usage.NetworkStats.Bucket: long getStartTimeStamp()> -> _SINK_
<android.app.usage.NetworkStats.Bucket: int getState()> -> _SOURCE_
<android.app.usage.NetworkStats.Bucket: int getTag()> -> _SINK_
<android.app.usage.NetworkStats.Bucket: long getTxBytes()> -> _SINK_
<android.app.usage.NetworkStats.Bucket: long getTxPackets()> -> _SINK_
<android.app.usage.NetworkStats.Bucket: int getUid()> -> _SOURCE_
<android.arch.paging.PagedList.Builder: Builder<Key, Value> setInitialKey(androidx.compose.ui.input.key.Key)> -> _SINK_
<android.arch.paging.PageKeyedDataSource: void loadInitial(LoadInitialParams<Key>,LoadInitialCallback<Key,)> -> _SOURCE_
<android.app.usage.UsageEvents: int describeContents()> -> _SOURCE_
<android.arch.paging.PositionalDataSource: int computeInitialLoadPosition(android.arch.paging.PositionalDataSource.LoadInitialParams,int)> -> _SINK_
<android.arch.paging.PositionalDataSource: int computeInitialLoadSize(android.arch.paging.PositionalDataSource.LoadInitialParams,int,int)> -> _SINK_
<android.arch.paging.PositionalDataSource: void loadInitial(android.arch.paging.PositionalDataSource.LoadInitialParams,LoadInitialCallback)> -> _SOURCE_
<android.arch.paging.PositionalDataSource: void loadRange(android.arch.paging.PositionalDataSource.LoadRangeParams,LoadRangeCallback)> -> _SOURCE_
<android.appwidget.AppWidgetHost: int allocateAppWidgetId()> -> _SOURCE_
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()> -> _SOURCE_
<android.appwidget.AppWidgetHost: void startAppWidgetConfigureActivityForResult(android.app.Activity,int,int,int,android.os.Bundle)> -> _SINK_
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)> -> _SOURCE_
<android.appwidget.AppWidgetManager: List<AppWidgetProviderInfo> getInstalledProviders()> -> _SOURCE_
<android.appwidget.AppWidgetManager: List<AppWidgetProviderInfo> getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.appwidget.AppWidgetManager: List<AppWidgetProviderInfo> getInstalledProvidersForProfile(android.os.UserHandle)> -> _SOURCE_
<android.appwidget.AppWidgetManager: AppWidgetManager getInstance(android.content.Context)> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean isRequestPinAppWidgetSupported()> -> _SOURCE_
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)> -> _SINK_
<android.arch.paging.RxPagedListBuilder: RxPagedListBuilder<Key, Value> setFetchScheduler(Scheduler)> -> _SOURCE_
<android.arch.paging.RxPagedListBuilder: RxPagedListBuilder<Key, Value> setInitialLoadKey(androidx.compose.ui.input.key.Key)> -> _SOURCE_
<android.arch.persistence.db.SimpleSQLiteQuery: void bind(android.arch.persistence.db.SupportSQLiteProgram,Object[])> -> _SINK_
<android.arch.persistence.db.SimpleSQLiteQuery: int getArgCount()> -> _SOURCE_
<android.arch.persistence.db.SimpleSQLiteQuery: java.lang.String getSql()> -> _SOURCE_
<android.app.usage.StorageStats: int describeContents()> -> _SOURCE_
<android.app.usage.StorageStats: long getAppBytes()> -> _SOURCE_
<android.app.usage.StorageStats: long getCacheBytes()> -> _SOURCE_
<android.app.usage.StorageStats: long getDataBytes()> -> _SOURCE_
<android.app.usage.StorageStats: long getExternalCacheBytes()> -> _SOURCE_
<android.app.usage.UsageEvents.Event: int getAppStandbyBucket()> -> _SOURCE_
<android.app.usage.UsageEvents.Event: java.lang.String getClassName()> -> _SOURCE_
<android.app.usage.UsageEvents.Event: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.app.usage.UsageEvents.Event: java.lang.String getPackageName()> -> _SOURCE_
<android.app.usage.UsageEvents.Event: java.lang.String getShortcutId()> -> _SOURCE_
<android.app.usage.UsageEvents.Event: long getTimeStamp()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper.Factory: SupportSQLiteOpenHelper create(android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration)> -> _SINK_
<android.arch.paging.LivePagedListBuilder: LiveData<PagedList<Value>> build()> -> _SINK_
<android.arch.paging.LivePagedListBuilder: LivePagedListBuilder<Key, Value> setFetchExecutor(java.util.concurrent.Executor)> -> _SINK_
<android.arch.paging.LivePagedListBuilder: LivePagedListBuilder<Key, Value> setInitialLoadKey(androidx.compose.ui.input.key.Key)> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: int describeContents()> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: android.content.pm.ActivityInfo getActivityInfo()> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: UserHandle getProfile()> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: CharSequence loadDescription(android.content.Context)> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: String loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: Drawable loadPreviewImage(android.content.Context,int)> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: java.lang.String toString()> -> _SOURCE_
<android.arch.paging.ItemKeyedDataSource: Key getKey(androidx.health.services.client.data.Value)> -> _SOURCE_
<android.arch.paging.ItemKeyedDataSource: void loadAfter(LoadParams<Key>,LoadCallback<Value>)> -> _SINK_
<android.arch.paging.ItemKeyedDataSource: void loadBefore(LoadParams<Key>,LoadCallback<Value>)> -> _SINK_
<android.arch.paging.ItemKeyedDataSource: void loadInitial(LoadInitialParams<Key>,LoadInitialCallback<Value>)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteStatement: long executeInsert()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteStatement: String simpleQueryForString()> -> _SOURCE_
<android.arch.persistence.room.Database: Class[] entities()> -> _SOURCE_
<android.arch.persistence.room.Database: boolean exportSchema()> -> _SINK_
<android.arch.persistence.room.Database: int version()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: SupportSQLiteQueryBuilder builder(java.lang.String)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQueryBuilder columns(String[])> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQuery create()> -> _SINK_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQueryBuilder groupBy(java.lang.String)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQueryBuilder selection(java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.room.Entity: ForeignKey[] foreignKeys()> -> _SOURCE_
<android.arch.persistence.room.Entity: Index[] indices()> -> _SOURCE_
<android.arch.persistence.room.Entity: boolean inheritSuperIndices()> -> _SINK_
<android.arch.persistence.room.Entity: String[] primaryKeys()> -> _SOURCE_
<android.arch.persistence.room.Entity: java.lang.String tableName()> -> _SOURCE_
<android.arch.persistence.room.ColumnInfo: int collate()> -> _SINK_
<android.arch.persistence.room.ColumnInfo: boolean index()> -> _SOURCE_
<android.arch.persistence.room.ColumnInfo: java.lang.String name()> -> _SOURCE_
<android.arch.persistence.room.ColumnInfo: int typeAffinity()> -> _SINK_
<android.arch.persistence.room.DatabaseConfiguration: boolean isMigrationRequiredFrom(int)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: void beginTransaction()> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: SupportSQLiteStatement compileStatement(java.lang.String)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: List<Pair<String, String>> getAttachedDbs()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: long getPageSize()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: String getPath()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: int getVersion()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean inTransaction()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: long insert(java.lang.String,int,android.content.ContentValues)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isDbLockedByCurrentThread()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isOpen()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isReadOnly()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean needUpgrade(int)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(android.arch.persistence.db.SupportSQLiteQuery)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(java.lang.String)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(android.arch.persistence.db.SupportSQLiteQuery,android.os.CancellationSignal)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setPageSize(long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setTransactionSuccessful()> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setVersion(int)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: int update(java.lang.String,int,android.content.ContentValues,java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely(long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely()> -> _SINK_
<android.arch.paging.DataSource: boolean isInvalid()> -> _SOURCE_
<android.arch.persistence.room.Embedded: java.lang.String prefix()> -> _SINK_
<android.arch.paging.DataSource.Factory: DataSource<Key, Value> create()> -> _SINK_
<android.arch.persistence.room.InvalidationTracker: void refreshVersionsAsync()> -> _SINK_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetails(int,java.lang.String,long,long)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(int,java.lang.String,long,long,int)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTag(int,java.lang.String,long,long,int,int)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(int,java.lang.String,long,long,int,int,int)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(int,java.lang.String,long,long)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats.Bucket querySummaryForDevice(int,java.lang.String,long,long)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats.Bucket querySummaryForUser(int,java.lang.String,long,long)> -> _SOURCE_
<android.arch.lifecycle.ViewModelProvider.AndroidViewModelFactory: ViewModelProvider.AndroidViewModelFactory getInstance(android.app.Application)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQuery: int getArgCount()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQuery: String getSql()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<android.arch.persistence.db.framework.FrameworkSQLiteOpenHelperFactory: android.arch.persistence.db.SupportSQLiteOpenHelper create(android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration)> -> _SINK_
<android.arch.persistence.room.Query: java.lang.String value()> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase.Builder: Builder addMigrations(Migration[])> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: T build()> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder fallbackToDestructiveMigrationFrom(int[])> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder openHelperFactory(android.arch.persistence.db.SupportSQLiteOpenHelper.Factory)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder setJournalMode(android.arch.persistence.room.RoomDatabase.JournalMode)> -> _SINK_
<android.arch.persistence.room.testing.MigrationTestHelper: android.arch.persistence.db.SupportSQLiteDatabase createDatabase(java.lang.String,int)> -> _SOURCE_
<android.arch.persistence.room.testing.MigrationTestHelper: android.arch.persistence.db.SupportSQLiteDatabase runMigrationsAndValidate(java.lang.String,int,boolean,Migration[])> -> _SINK_
<android.arch.paging.PagedList.Config.Builder: android.arch.paging.PagedList.Config build()> -> _SINK_
<android.arch.paging.PagedList.Config.Builder: android.arch.paging.PagedList.Config.Builder setInitialLoadSizeHint(int)> -> _SINK_
<android.arch.paging.PagedList.Config.Builder: android.arch.paging.PagedList.Config.Builder setPageSize(int)> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: void endTransaction()> -> _SINK_
<android.arch.persistence.room.RoomDatabase: android.arch.persistence.room.InvalidationTracker getInvalidationTracker()> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: android.arch.persistence.db.SupportSQLiteOpenHelper getOpenHelper()> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: boolean inTransaction()> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: boolean isOpen()> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: android.database.Cursor query(android.arch.persistence.db.SupportSQLiteQuery)> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: android.database.Cursor query(java.lang.String,Object[])> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase: <V> V runInTransaction(Callable<V>)> -> _SINK_
<android.arch.persistence.room.RoomDatabase: void setTransactionSuccessful()> -> _SINK_
<android.arch.persistence.room.ForeignKey: String[] childColumns()> -> _SOURCE_
<android.arch.persistence.room.ForeignKey: boolean deferred()> -> _SINK_
<android.arch.persistence.room.ForeignKey: java.lang.Class entity()> -> _SOURCE_
<android.arch.persistence.room.ForeignKey: String[] parentColumns()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: String getDatabaseName()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: SupportSQLiteDatabase getReadableDatabase()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: SupportSQLiteDatabase getWritableDatabase()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)> -> _SINK_
<android.arch.persistence.room.Relation: java.lang.Class entity()> -> _SOURCE_
<android.arch.persistence.room.Relation: java.lang.String entityColumn()> -> _SOURCE_
<android.arch.persistence.room.Relation: java.lang.String parentColumn()> -> _SOURCE_
<android.arch.persistence.room.Relation: String[] projection()> -> _SINK_
<android.arch.persistence.room.RoomDatabase.MigrationContainer: void addMigrations(Migration[])> -> _SINK_
<android.arch.persistence.room.RoomDatabase.MigrationContainer: List<Migration> findMigrationPath(int,int)> -> _SOURCE_
<android.app.usage.UsageStatsManager: int getAppStandbyBucket()> -> _SOURCE_
<android.app.usage.UsageStatsManager: boolean isAppInactive(java.lang.String)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)> -> _SOURCE_
<android.app.usage.UsageStatsManager: List<ConfigurationStats> queryConfigurations(int,long,long)> -> _SOURCE_
<android.app.usage.UsageStatsManager: List<EventStats> queryEventStats(int,long,long)> -> _SOURCE_
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEventsForSelf(long,long)> -> _SOURCE_
<android.app.usage.UsageStatsManager: List<UsageStats> queryUsageStats(int,long,long)> -> _SOURCE_
<android.arch.persistence.room.Room: <T extends RoomDatabase> Builder databaseBuilder(android.content.Context,Class,java.lang.String)> -> _SINK_
<android.arch.persistence.room.Room: <T extends RoomDatabase> Builder inMemoryDatabaseBuilder(android.content.Context,Class)> -> _SINK_
<android.bluetooth.BluetoothGatt: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothGattService getService(java.util.UUID)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: List<BluetoothGattService> getServices()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: void readPhy()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean requestConnectionPriority(int)> -> _SINK_
<android.bluetooth.BluetoothGatt: boolean requestMtu(int)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)> -> _SINK_
<android.bluetooth.BluetoothGatt: void setPreferredPhy(int,int,int)> -> _SINK_
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _SINK_
<android.bluetooth.BluetoothGatt: int writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic,byte[],int)> -> _SINK_
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _SINK_
<android.bluetooth.BluetoothGatt: int writeDescriptor(android.bluetooth.BluetoothGattDescriptor,byte[])> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int,android.os.Handler)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureL2capChannel(int)> -> _SINK_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)> -> _SINK_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createL2capChannel(int)> -> _SINK_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> -> _SINK_
<android.bluetooth.BluetoothDevice: int describeContents()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getBondState()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getName()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getType()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: ParcelUuid[] getUuids()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int setAlias(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> -> _SINK_
<android.bluetooth.BluetoothDevice: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onCharacteristicReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattCharacteristic)> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onDescriptorReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattDescriptor)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)> -> _SINK_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: Set<BluetoothDevice> getBondedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: BluetoothAdapter getDefaultAdapter()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.time.Duration getDiscoverableTimeout()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getLeMaximumAdvertisingDataLength()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getMaxConnectedAudioDevices()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteLeDevice(java.lang.String,int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getScanMode()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getState()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLe2MPhySupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int isLeAudioBroadcastAssistantSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int isLeAudioBroadcastSourceSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int isLeAudioSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLeCodedPhySupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLeExtendedAdvertisingSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLePeriodicAdvertisingSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isMultipleAdvertisementSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isOffloadedFilteringSupported()> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean isOffloadedScanBatchingSupported()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capChannel()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingL2capChannel()> -> _SINK_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: int describeContents()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: List<BluetoothGattDescriptor> getDescriptors()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Float getFloatValue(int,int)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getInstanceId()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Integer getIntValue(int,int)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getPermissions()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getProperties()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattService getService()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.String getStringValue(int)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.UUID getUuid()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: byte[] getValue()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getWriteType()> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int)> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(byte[])> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int,int)> -> _SINK_
<android.bluetooth.BluetoothGattCharacteristic: void setWriteType(int)> -> _SINK_
<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)> -> _SINK_
<android.bluetooth.BluetoothGattServer: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: android.bluetooth.BluetoothGattService getService(java.util.UUID)> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: int notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean,byte[])> -> _SINK_
<android.bluetooth.BluetoothGattServer: void readPhy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)> -> _SINK_
<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])> -> _SINK_
<android.bluetooth.BluetoothGattServer: void setPreferredPhy(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<android.bluetooth.BluetoothGattService: boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _SINK_
<android.bluetooth.BluetoothGattService: boolean addService(android.bluetooth.BluetoothGattService)> -> _SINK_
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: List<BluetoothGattCharacteristic> getCharacteristics()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: List<BluetoothGattService> getIncludedServices()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: int getInstanceId()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: int getType()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.UUID getUuid()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int,byte[])> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onReadRemoteRssi(android.bluetooth.BluetoothGatt,int,int)> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice.Callback: void onSetReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])> -> _SINK_
<android.bluetooth.BluetoothHealthCallback: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
<android.bluetooth.BluetoothHealthCallback: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isNoiseReductionSupported(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean isVoiceRecognitionSupported(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.bluetooth.BluetoothLeAudio: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothLeAudio: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothLeAudio: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothLeAudio: int getGroupId(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.car.CarAppFocusManager: int requestAppFocus(int,android.car.CarAppFocusManager.OnAppFocusOwnershipCallback)> -> _SINK_
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
<android.car.Car: int getCarConnectionType()> -> _SOURCE_
<android.car.Car: java.lang.Object getCarManager(java.lang.String)> -> _SOURCE_
<android.car.Car: boolean isConnected()> -> _SOURCE_
<android.car.Car: boolean isConnecting()> -> _SOURCE_
<android.car.Car: boolean isFeatureEnabled(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothClass: int describeContents()> -> _SOURCE_
<android.bluetooth.BluetoothClass: boolean doesClassMatch(int)> -> _SINK_
<android.bluetooth.BluetoothClass: int getDeviceClass()> -> _SOURCE_
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()> -> _SOURCE_
<android.bluetooth.BluetoothClass: boolean hasService(int)> -> _SOURCE_
<android.bluetooth.BluetoothClass: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: int getPsm()> -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: java.lang.String toString()> -> _SOURCE_
<android.car.CarOccupantZoneManager.OccupantZoneConfigChangeListener: void onOccupantZoneConfigChanged(int)> -> _SINK_
<android.car.CarOccupantZoneManager: List<Display> getAllDisplaysForOccupant(android.car.CarOccupantZoneManager.OccupantZoneInfo)> -> _SOURCE_
<android.car.CarOccupantZoneManager: List<CarOccupantZoneManager.OccupantZoneInfo> getAllOccupantZones()> -> _SOURCE_
<android.car.CarOccupantZoneManager: android.view.Display getDisplayForOccupant(android.car.CarOccupantZoneManager.OccupantZoneInfo,int)> -> _SOURCE_
<android.car.CarOccupantZoneManager: int getDisplayType(android.view.Display)> -> _SOURCE_
<android.car.CarOccupantZoneManager: int getUserForOccupant(android.car.CarOccupantZoneManager.OccupantZoneInfo)> -> _SOURCE_
<android.bluetooth.BluetoothProfile: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothProfile: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothProfile: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: boolean replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: boolean reportError(android.bluetooth.BluetoothDevice,byte)> -> _SINK_
<android.bluetooth.BluetoothHidDevice: boolean sendReport(android.bluetooth.BluetoothDevice,int,byte[])> -> _SINK_
<android.bluetooth.le.AdvertiseSettings: int describeContents()> -> _SOURCE_
<android.bluetooth.le.AdvertiseSettings: int getTimeout()> -> _SOURCE_
<android.bluetooth.le.AdvertiseSettings: int getTxPowerLevel()> -> _SOURCE_
<android.bluetooth.le.AdvertiseSettings: boolean isConnectable()> -> _SOURCE_
<android.bluetooth.le.AdvertiseSettings: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothAdapter getAdapter()> -> _SOURCE_
<android.bluetooth.BluetoothManager: List<BluetoothDevice> getConnectedDevices(int)> -> _SOURCE_
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<android.bluetooth.BluetoothManager: List<BluetoothDevice> getDevicesMatchingConnectionStates(int,int[])> -> _SOURCE_
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)> -> _SOURCE_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addManufacturerData(int,byte[])> -> _SOURCE_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addServiceData(android.os.ParcelUuid,byte[])> -> _SINK_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addServiceSolicitationUuid(android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addServiceUuid(android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addTransportDiscoveryData(TransportDiscoveryData)> -> _SINK_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData build()> -> _SINK_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder setIncludeDeviceName(boolean)> -> _SINK_
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder setIncludeTxPowerLevel(boolean)> -> _SINK_
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings build()> -> _SINK_
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setAdvertiseMode(int)> -> _SINK_
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setConnectable(boolean)> -> _SINK_
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setTimeout(int)> -> _SINK_
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setTxPowerLevel(int)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters build()> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setAnonymous(boolean)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setConnectable(boolean)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setInterval(int)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setLegacyMode(boolean)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setScannable(boolean)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setSecondaryPhy(int)> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setTxPowerLevel(int)> -> _SINK_
<android.car.drivingstate.CarUxRestrictions.Builder: android.car.drivingstate.CarUxRestrictions build()> -> _SOURCE_
<android.car.drivingstate.CarUxRestrictions.Builder: android.car.drivingstate.CarUxRestrictions.Builder setMaxContentDepth(int)> -> _SINK_
<android.car.drivingstate.CarUxRestrictions.Builder: android.car.drivingstate.CarUxRestrictions.Builder setMaxCumulativeContentItems(int)> -> _SINK_
<android.car.drivingstate.CarUxRestrictions.Builder: android.car.drivingstate.CarUxRestrictions.Builder setMaxStringLength(int)> -> _SINK_
<android.bluetooth.BluetoothGattDescriptor: int describeContents()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: android.bluetooth.BluetoothGattCharacteristic getCharacteristic()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: int getPermissions()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: java.util.UUID getUuid()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: byte[] getValue()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: boolean setValue(byte[])> -> _SINK_
<android.car.content.pm.CarPackageManager: boolean isActivityDistractionOptimized(java.lang.String,java.lang.String)> -> _SOURCE_
<android.car.content.pm.CarPackageManager: boolean isPendingIntentDistractionOptimized(android.app.PendingIntent)> -> _SOURCE_
<android.car.content.pm.CarPackageManager: boolean isServiceDistractionOptimized(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: List<BluetoothDevice> getConnectedDevices()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.bluetooth.le.AdvertisingSet: void setAdvertisingData(android.bluetooth.le.AdvertiseData)> -> _SINK_
<android.bluetooth.le.AdvertisingSet: void setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters)> -> _SINK_
<android.bluetooth.le.AdvertisingSet: void setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData)> -> _SINK_
<android.bluetooth.le.AdvertisingSet: void setPeriodicAdvertisingEnabled(boolean)> -> _SINK_
<android.bluetooth.le.AdvertisingSet: void setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters)> -> _SINK_
<android.bluetooth.le.AdvertisingSet: void setScanResponseData(android.bluetooth.le.AdvertiseData)> -> _SINK_
<android.car.drivingstate.CarUxRestrictionsManager: android.car.drivingstate.CarUxRestrictions getCurrentCarUxRestrictions()> -> _SINK_
<android.bluetooth.le.AdvertisingSetParameters: int describeContents()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: int getInterval()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: int getPrimaryPhy()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: int getTxPowerLevel()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: boolean includeTxPower()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: boolean isAnonymous()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: boolean isConnectable()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: boolean isLegacy()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: boolean isScannable()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: java.lang.String toString()> -> _SOURCE_
<android.car.hardware.CarSensorManager: android.car.hardware.CarSensorEvent getLatestSensorEvent(int)> -> _SOURCE_
<android.car.hardware.CarSensorManager: List<CarPropertyConfig> getPropertyList()> -> _SOURCE_
<android.car.hardware.CarSensorManager: int[] getSupportedSensors()> -> _SOURCE_
<android.car.hardware.CarSensorManager: boolean isSensorSupported(int)> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: android.bluetooth.le.PeriodicAdvertisingParameters build()> -> _SINK_
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean)> -> _SINK_
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: android.bluetooth.le.PeriodicAdvertisingParameters.Builder setInterval(int)> -> _SINK_
<android.bluetooth.le.PeriodicAdvertisingParameters: int describeContents()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingParameters: boolean getIncludeTxPower()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingParameters: int getInterval()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: int describeContents()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: boolean getIncludeDeviceName()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: boolean getIncludeTxPowerLevel()> -> _SINK_
<android.bluetooth.le.AdvertiseData: SparseArray<byte[]> getManufacturerSpecificData()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.util.Map getServiceData()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: List<ParcelUuid> getServiceSolicitationUuids()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: List<ParcelUuid> getServiceUuids()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: List<TransportDiscoveryData> getTransportDiscoveryData()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.BluetoothLeScanner: void startScan(android.bluetooth.le.ScanCallback)> -> _SINK_
<android.bluetooth.BluetoothHealthAppConfiguration: int describeContents()> -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()> -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()> -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getConnectionType()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getMaxReceivePacketSize()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getMaxTransmitPacketSize()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: boolean isConnected()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: int getAdvertiseFlags()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.Map getAdvertisingDataMap()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getBytes()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.lang.String getDeviceName()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: SparseArray<byte[]> getManufacturerSpecificData()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getManufacturerSpecificData(int)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getServiceData(android.os.ParcelUuid)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.Map getServiceData()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: List<ParcelUuid> getServiceSolicitationUuids()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: List<ParcelUuid> getServiceUuids()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: int getTxPowerLevel()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.lang.String toString()> -> _SOURCE_
<android.car.VehiclePropertyIds: String toString(int)> -> _SOURCE_
<android.car.settings.CarConfigurationManager: android.car.settings.SpeedBumpConfiguration getSpeedBumpConfiguration()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int describeContents()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getAdvertisingSid()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getDataStatus()> -> _SOURCE_
<android.bluetooth.le.ScanResult: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getPeriodicAdvertisingInterval()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getPrimaryPhy()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getRssi()> -> _SOURCE_
<android.bluetooth.le.ScanResult: android.bluetooth.le.ScanRecord getScanRecord()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getSecondaryPhy()> -> _SOURCE_
<android.bluetooth.le.ScanResult: long getTimestampNanos()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getTxPower()> -> _SOURCE_
<android.bluetooth.le.ScanResult: boolean isConnectable()> -> _SOURCE_
<android.bluetooth.le.ScanResult: boolean isLegacy()> -> _SOURCE_
<android.bluetooth.le.ScanResult: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.ScanCallback: void onBatchScanResults(List<ScanResult>)> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setAdvertisingDataWithType(int,byte[],byte[])> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setDeviceAddress(java.lang.String)> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setDeviceName(java.lang.String)> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setManufacturerData(int,byte[])> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setManufacturerData(int,byte[],byte[])> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceData(android.os.ParcelUuid,byte[])> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceData(android.os.ParcelUuid,byte[],byte[])> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceSolicitationUuid(android.os.ParcelUuid,android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceSolicitationUuid(android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceUuid(android.os.ParcelUuid,android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceUuid(android.os.ParcelUuid)> -> _SINK_
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings build()> -> _SINK_
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setLegacy(boolean)> -> _SINK_
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setMatchMode(int)> -> _SINK_
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setNumOfMatches(int)> -> _SINK_
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setReportDelay(long)> -> _SINK_
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setScanMode(int)> -> _SINK_
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,java.util.concurrent.Executor,android.companion.CompanionDeviceManager.Callback)> -> _SINK_
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager.Callback,android.os.Handler)> -> _SINK_
<android.companion.CompanionDeviceManager: List<String> getAssociations()> -> _SOURCE_
<android.companion.CompanionDeviceManager: List<AssociationInfo> getMyAssociations()> -> _SOURCE_
<android.companion.CompanionDeviceManager: void requestNotificationAccess(android.content.ComponentName)> -> _SOURCE_
<android.companion.WifiDeviceFilter: int describeContents()> -> _SOURCE_
<android.companion.CompanionDeviceManager.Callback: void onAssociationCreated(AssociationInfo)> -> _SINK_
<android.companion.CompanionDeviceManager.Callback: void onAssociationPending(android.content.IntentSender)> -> _SINK_
<android.companion.BluetoothDeviceFilter: int describeContents()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: java.lang.String toString()> -> _SOURCE_
<android.content.BroadcastReceiver.PendingResult: int getResultCode()> -> _SOURCE_
<android.content.BroadcastReceiver.PendingResult: String getResultData()> -> _SOURCE_
<android.content.BroadcastReceiver.PendingResult: Bundle getResultExtras(boolean)> -> _SOURCE_
<android.content.BroadcastReceiver.PendingResult: void setResultCode(int)> -> _SINK_
<android.content.BroadcastReceiver.PendingResult: void setResultData(java.lang.String)> -> _SINK_
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,String[],java.lang.String,String[],java.lang.String)> -> _SOURCE_
<android.content.AttributionSource.Builder: android.content.AttributionSource build()> -> _SINK_
<android.content.AttributionSource.Builder: android.content.AttributionSource.Builder setAttributionTag(java.lang.String)> -> _SOURCE_
<android.content.AttributionSource.Builder: android.content.AttributionSource.Builder setNext(android.content.AttributionSource)> -> _SINK_
<android.content.AttributionSource.Builder: android.content.AttributionSource.Builder setPackageName(java.lang.String)> -> _SOURCE_
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.ClipDescription: int describeContents()> -> _SOURCE_
<android.content.ClipDescription: String[] filterMimeTypes(java.lang.String)> -> _SOURCE_
<android.content.ClipDescription: int getClassificationStatus()> -> _SOURCE_
<android.content.ClipDescription: float getConfidenceScore(java.lang.String)> -> _SOURCE_
<android.content.ClipDescription: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.content.ClipDescription: java.lang.String getMimeType(int)> -> _SOURCE_
<android.content.ClipDescription: int getMimeTypeCount()> -> _SOURCE_
<android.content.ClipDescription: long getTimestamp()> -> _SOURCE_
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)> -> _SOURCE_
<android.content.ClipDescription: boolean isStyledText()> -> _SOURCE_
<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)> -> _SINK_
<android.content.ClipDescription: java.lang.String toString()> -> _SOURCE_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,String[])> -> _SOURCE_
<android.content.AsyncTaskLoader: void setUpdateThrottle(long)> -> _SINK_
<android.content.ClipData: int describeContents()> -> _SOURCE_
<android.content.ClipData: android.content.ClipDescription getDescription()> -> _SOURCE_
<android.content.ClipData: android.content.ClipData.Item getItemAt(int)> -> _SOURCE_
<android.content.ClipData: int getItemCount()> -> _SOURCE_
<android.content.ClipData: ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)> -> _SINK_
<android.content.ClipData: ClipData newIntent(java.lang.CharSequence,android.content.Intent)> -> _SINK_
<android.content.ClipData: ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_
<android.content.ClipData: ClipData newRawUri(java.lang.CharSequence,android.net.Uri)> -> _SINK_
<android.content.ClipData: ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)> -> _SINK_
<android.content.ClipData: java.lang.String toString()> -> _SOURCE_
<android.content.ContentProviderResult: int describeContents()> -> _SOURCE_
<android.content.ContentProviderResult: java.lang.String toString()> -> _SOURCE_
<android.content.BroadcastReceiver: boolean getAbortBroadcast()> -> _SOURCE_
<android.content.BroadcastReceiver: boolean getDebugUnregister()> -> _SOURCE_
<android.content.BroadcastReceiver: int getResultCode()> -> _SOURCE_
<android.content.BroadcastReceiver: String getResultData()> -> _SOURCE_
<android.content.BroadcastReceiver: Bundle getResultExtras(boolean)> -> _SOURCE_
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()> -> _SOURCE_
<android.content.BroadcastReceiver: void setOrderedHint(boolean)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation build()> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withExtra(java.lang.String,java.lang.Object)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withExtras(android.os.Bundle)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withSelection(java.lang.String,String[])> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValueBackReference(java.lang.String,int,java.lang.String)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValueBackReference(java.lang.String,int)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValueBackReferences(android.content.ContentValues)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValues(android.content.ContentValues)> -> _SINK_
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withYieldAllowed(boolean)> -> _SINK_
<android.content.AttributionSource: boolean checkCallingUid()> -> _SINK_
<android.content.AttributionSource: int describeContents()> -> _SOURCE_
<android.content.AttributionSource: void enforceCallingUid()> -> _SINK_
<android.content.AttributionSource: java.lang.String getAttributionTag()> -> _SOURCE_
<android.content.AttributionSource: android.content.AttributionSource getNext()> -> _SINK_
<android.content.AttributionSource: java.lang.String getPackageName()> -> _SOURCE_
<android.content.AttributionSource: int getUid()> -> _SOURCE_
<android.content.AttributionSource: AttributionSource myAttributionSource()> -> _SOURCE_
<android.content.AttributionSource: java.lang.String toString()> -> _SOURCE_
<android.content.ClipData.Item: java.lang.String coerceToHtmlText(android.content.Context)> -> _SINK_
<android.content.ClipData.Item: java.lang.CharSequence coerceToStyledText(android.content.Context)> -> _SOURCE_
<android.content.ClipData.Item: java.lang.CharSequence coerceToText(android.content.Context)> -> _SINK_
<android.content.ClipData.Item: java.lang.String getHtmlText()> -> _SOURCE_
<android.content.ClipData.Item: android.content.Intent getIntent()> -> _SOURCE_
<android.content.ClipData.Item: java.lang.CharSequence getText()> -> _SOURCE_
<android.content.ClipData.Item: android.view.textclassifier.TextLinks getTextLinks()> -> _SOURCE_
<android.content.ClipData.Item: android.net.Uri getUri()> -> _SOURCE_
<android.content.ClipData.Item: java.lang.String toString()> -> _SOURCE_
<android.companion.WifiDeviceFilter.Builder: android.companion.WifiDeviceFilter build()> -> _SINK_
<android.companion.WifiDeviceFilter.Builder: android.companion.WifiDeviceFilter.Builder setBssid(android.net.MacAddress)> -> _SOURCE_
<android.companion.WifiDeviceFilter.Builder: android.companion.WifiDeviceFilter.Builder setNamePattern(java.util.regex.Pattern)> -> _SINK_
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,ContentProviderResult[],int)> -> _SINK_
<android.content.ContentProviderOperation: int describeContents()> -> _SOURCE_
<android.content.ContentProviderOperation: android.net.Uri getUri()> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isYieldAllowed()> -> _SOURCE_
<android.content.ContentProviderOperation: ContentProviderOperation.Builder newInsert(android.net.Uri)> -> _SINK_
<android.content.ContentProviderOperation: ContentProviderOperation.Builder newUpdate(android.net.Uri)> -> _SINK_
<android.content.ContentProviderOperation: android.os.Bundle resolveExtrasBackReferences(ContentProviderResult[],int)> -> _SOURCE_
<android.content.ContentProviderOperation: android.content.ContentValues resolveValueBackReferences(ContentProviderResult[],int)> -> _SOURCE_
<android.content.ContentProviderOperation: java.lang.String toString()> -> _SOURCE_
<android.content.ContentResolver.MimeTypeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.content.ContentResolver.MimeTypeInfo: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.content.ContentResolver.MimeTypeInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.content.ContentValues: boolean containsKey(java.lang.String)> -> _SOURCE_
<android.content.ContentValues: int describeContents()> -> _SOURCE_
<android.content.ContentValues: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)> -> _SOURCE_
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)> -> _SOURCE_
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)> -> _SOURCE_
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)> -> _SOURCE_
<android.content.ContentValues: Set<String> keySet()> -> _SOURCE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.String)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,byte[])> -> _SINK_
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)> -> _SINK_
<android.content.ContentValues: void putAll(android.content.ContentValues)> -> _SINK_
<android.content.ContentValues: int size()> -> _SOURCE_
<android.content.ContentValues: java.lang.String toString()> -> _SOURCE_
<android.content.ContentValues: Set<Entry<String, Object>> valueSet()> -> _SOURCE_
<android.content.ContextParams.Builder: android.content.ContextParams.Builder setAttributionTag(java.lang.String)> -> _SINK_
<android.content.ContextParams.Builder: android.content.ContextParams.Builder setNextAttributionSource(android.content.AttributionSource)> -> _SINK_
<android.content.Intent.ShortcutIconResource: int describeContents()> -> _SINK_
<android.content.Intent.FilterComparison: android.content.Intent getIntent()> -> _SOURCE_
<android.content.PeriodicSync: int describeContents()> -> _SOURCE_
<android.content.IntentSender: int describeContents()> -> _SOURCE_
<android.content.IntentSender: java.lang.String getCreatorPackage()> -> _SOURCE_
<android.content.IntentSender: int getCreatorUid()> -> _SOURCE_
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<android.content.IntentSender: java.lang.String getTargetPackage()> -> _SOURCE_
<android.content.IntentSender: IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)> -> _SOURCE_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender.OnFinished,android.os.Handler)> -> _SINK_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender.OnFinished,android.os.Handler,java.lang.String)> -> _SINK_
<android.content.SharedPreferences: boolean contains(java.lang.String)> -> _SOURCE_
<android.content.SharedPreferences: SharedPreferences.Editor edit()> -> _SINK_
<android.content.SharedPreferences: java.util.Map getAll()> -> _SOURCE_
<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.content.SharedPreferences: float getFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences: int getInt(java.lang.String,int)> -> _SOURCE_
<android.content.SharedPreferences: long getLong(java.lang.String,long)> -> _SOURCE_
<android.content.SharedPreferences: String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.SharedPreferences: Set<String> getStringSet(java.lang.String,Set<String>)> -> _SOURCE_
<android.content.RestrictionEntry: int describeContents()> -> _SOURCE_
<android.content.RestrictionEntry: String[] getAllSelectedStrings()> -> _SOURCE_
<android.content.RestrictionEntry: String[] getChoiceValues()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getDescription()> -> _SOURCE_
<android.content.RestrictionEntry: int getIntValue()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getKey()> -> _SOURCE_
<android.content.RestrictionEntry: RestrictionEntry[] getRestrictions()> -> _SOURCE_
<android.content.RestrictionEntry: boolean getSelectedState()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getSelectedString()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getTitle()> -> _SOURCE_
<android.content.RestrictionEntry: int getType()> -> _SOURCE_
<android.content.RestrictionEntry: void setAllSelectedStrings(String[])> -> _SINK_
<android.content.RestrictionEntry: void setChoiceEntries(android.content.Context,int)> -> _SINK_
<android.content.RestrictionEntry: void setChoiceEntries(String[])> -> _SINK_
<android.content.RestrictionEntry: void setChoiceValues(String[])> -> _SINK_
<android.content.RestrictionEntry: void setChoiceValues(android.content.Context,int)> -> _SINK_
<android.content.RestrictionEntry: void setDescription(java.lang.String)> -> _SINK_
<android.content.RestrictionEntry: void setIntValue(int)> -> _SINK_
<android.content.RestrictionEntry: void setRestrictions(RestrictionEntry[])> -> _SINK_
<android.content.RestrictionEntry: void setSelectedState(boolean)> -> _SINK_
<android.content.RestrictionEntry: void setSelectedString(java.lang.String)> -> _SINK_
<android.content.RestrictionEntry: void setTitle(java.lang.String)> -> _SINK_
<android.content.RestrictionEntry: void setType(int)> -> _SINK_
<android.content.RestrictionEntry: java.lang.String toString()> -> _SOURCE_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor clear()> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor putStringSet(java.lang.String,Set<String>)> -> _SINK_
<android.content.SharedPreferences.Editor: SharedPreferences.Editor remove(java.lang.String)> -> _SINK_
<android.content.SyncStats: int describeContents()> -> _SOURCE_
<android.content.SyncStats: java.lang.String toString()> -> _SOURCE_
<android.content.LocusId: int describeContents()> -> _SOURCE_
<android.content.LocusId: java.lang.String getId()> -> _SOURCE_
<android.content.LocusId: java.lang.String toString()> -> _SOURCE_
<android.content.SyncRequest: int describeContents()> -> _SOURCE_
<android.content.UriPermission: int describeContents()> -> _SOURCE_
<android.content.UriPermission: long getPersistedTime()> -> _SOURCE_
<android.content.UriPermission: android.net.Uri getUri()> -> _SOURCE_
<android.content.UriPermission: boolean isReadPermission()> -> _SOURCE_
<android.content.UriPermission: boolean isWritePermission()> -> _SOURCE_
<android.content.UriPermission: java.lang.String toString()> -> _SOURCE_
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setRequiresCharging(boolean)> -> _SINK_
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setScheduleAsExpeditedJob(boolean)> -> _SINK_
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setSyncAdapter(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.pm.Attribution: int describeContents()> -> _SOURCE_
<android.content.pm.Attribution: int getLabel()> -> _SOURCE_
<android.content.pm.Attribution: java.lang.String getTag()> -> _SINK_
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.content.UriMatcher: int match(android.net.Uri)> -> _SOURCE_
<android.content.pm.ChangedPackages: int describeContents()> -> _SOURCE_
<android.content.pm.ChangedPackages: List<String> getPackageNames()> -> _SOURCE_
<android.content.pm.ChangedPackages: int getSequenceNumber()> -> _SOURCE_
<android.content.pm.ApkChecksum: int describeContents()> -> _SOURCE_
<android.content.pm.ApkChecksum: java.security.Certificate getInstallerCertificate()> -> _SOURCE_
<android.content.pm.ApkChecksum: java.lang.String getInstallerPackageName()> -> _SOURCE_
<android.content.pm.ApkChecksum: java.lang.String getSplitName()> -> _SOURCE_
<android.content.pm.ApkChecksum: int getType()> -> _SOURCE_
<android.content.pm.ApkChecksum: byte[] getValue()> -> _SOURCE_
<android.content.SyncResult: int describeContents()> -> _SOURCE_
<android.content.SyncResult: java.lang.String toDebugString()> -> _SOURCE_
<android.content.pm.ConfigurationInfo: int describeContents()> -> _SOURCE_
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<android.content.pm.LauncherApps.PinItemRequest: int describeContents()> -> _SOURCE_
<android.content.pm.LauncherApps.PinItemRequest: android.appwidget.AppWidgetProviderInfo getAppWidgetProviderInfo(android.content.Context)> -> _SOURCE_
<android.content.pm.LauncherApps.PinItemRequest: android.os.Bundle getExtras()> -> _SINK_
<android.content.pm.LauncherApps.PinItemRequest: int getRequestType()> -> _SOURCE_
<android.content.pm.LauncherApps.PinItemRequest: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.content.pm.LauncherApps.PinItemRequest: boolean isValid()> -> _SOURCE_
<android.content.pm.Checksum: int describeContents()> -> _SOURCE_
<android.content.pm.Checksum: int getType()> -> _SOURCE_
<android.content.pm.Checksum: byte[] getValue()> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.ModuleInfo: boolean isHidden()> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String toString()> -> _SOURCE_
<android.content.pm.FeatureGroupInfo: int describeContents()> -> _SOURCE_
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setActivity(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setChangedSince(long)> -> _SOURCE_
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setLocusIds(List<LocusId>)> -> _SOURCE_
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setPackage(java.lang.String)> -> _SOURCE_
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setQueryFlags(int)> -> _SINK_
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setShortcutIds(List<String>)> -> _SOURCE_
<android.content.pm.PackageInfo: int describeContents()> -> _SOURCE_
<android.content.pm.PackageInfo: long getLongVersionCode()> -> _SOURCE_
<android.content.pm.PackageInfo: void setLongVersionCode(long)> -> _SINK_
<android.content.pm.CrossProfileApps: boolean canInteractAcrossProfiles()> -> _SOURCE_
<android.content.pm.CrossProfileApps: boolean canRequestInteractAcrossProfiles()> -> _SOURCE_
<android.content.pm.CrossProfileApps: android.content.Intent createRequestInteractAcrossProfilesIntent()> -> _SINK_
<android.content.pm.CrossProfileApps: android.graphics.drawable.Drawable getProfileSwitchingIconDrawable(android.os.UserHandle)> -> _SOURCE_
<android.content.pm.CrossProfileApps: java.lang.CharSequence getProfileSwitchingLabel(android.os.UserHandle)> -> _SOURCE_
<android.content.pm.CrossProfileApps: List<UserHandle> getTargetUserProfiles()> -> _SOURCE_
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)> -> _SINK_
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)> -> _SINK_
<android.content.pm.CrossProfileApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle)> -> _SINK_
<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller.SessionParams)> -> _SINK_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.SessionInfo getActiveStagedSession()> -> _SOURCE_
<android.content.pm.PackageInstaller: List<PackageInstaller.SessionInfo> getActiveStagedSessions()> -> _SOURCE_
<android.content.pm.PackageInstaller: List<PackageInstaller.SessionInfo> getAllSessions()> -> _SOURCE_
<android.content.pm.PackageInstaller: List<PackageInstaller.SessionInfo> getMySessions()> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.SessionInfo getSessionInfo(int)> -> _SOURCE_
<android.content.pm.PackageInstaller: List<PackageInstaller.SessionInfo> getStagedSessions()> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.Session openSession(int)> -> _SINK_
<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)> -> _SINK_
<android.content.pm.InstallSourceInfo: int describeContents()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()> -> _SINK_
<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: int getPackageSource()> -> _SOURCE_
<android.content.pm.LauncherApps.Callback: void onPackageAdded(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps.Callback: void onPackageChanged(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: List<LauncherActivityInfo> getActivityList(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: List<PackageInstaller.SessionInfo> getAllPackageInstallerSessions()> -> _SOURCE_
<android.content.pm.LauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: android.content.pm.LauncherApps.PinItemRequest getPinItemRequest(android.content.Intent)> -> _SOURCE_
<android.content.pm.LauncherApps: List<UserHandle> getProfiles()> -> _SOURCE_
<android.content.pm.LauncherApps: android.graphics.drawable.Drawable getShortcutBadgedIconDrawable(android.content.pm.ShortcutInfo,int)> -> _SOURCE_
<android.content.pm.LauncherApps: List<LauncherActivityInfo> getShortcutConfigActivityList(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: android.app.PendingIntent getShortcutIntent(java.lang.String,java.lang.String,android.os.Bundle,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: List<ShortcutInfo> getShortcuts(android.content.pm.LauncherApps.ShortcutQuery,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: boolean hasShortcutHostPermission()> -> _SOURCE_
<android.content.pm.LauncherApps: boolean isActivityEnabled(android.content.ComponentName,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: boolean isPackageEnabled(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: void pinShortcuts(java.lang.String,List<String>,android.os.UserHandle)> -> _SINK_
<android.content.pm.LauncherApps: android.content.pm.LauncherActivityInfo resolveActivity(android.content.Intent,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.LauncherApps: void startAppDetailsActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)> -> _SOURCE_
<android.content.pm.LauncherApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)> -> _SINK_
<android.content.pm.LauncherApps: void startPackageInstallerSessionDetailsActivity(android.content.pm.PackageInstaller.SessionInfo,android.graphics.Rect,android.os.Bundle)> -> _SINK_
<android.content.pm.FeatureInfo: int describeContents()> -> _SOURCE_
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<android.content.pm.PackageStats: int describeContents()> -> _SOURCE_
<android.content.pm.PackageInstaller.SessionCallback: void onProgressChanged(int,float)> -> _SOURCE_
<android.content.pm.ShortcutInfo: int describeContents()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()> -> _SOURCE_
<android.content.pm.ShortcutInfo: List<String> getCapabilityParameterValues(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: Set<String> getCategories()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getDisabledReason()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()> -> _SINK_
<android.content.pm.ShortcutInfo: java.lang.String getId()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.Intent getIntent()> -> _SOURCE_
<android.content.pm.ShortcutInfo: Intent[] getIntents()> -> _SOURCE_
<android.content.pm.ShortcutInfo: long getLastChangedTimestamp()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getLongLabel()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getPackage()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getRank()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getShortLabel()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean hasCapability(java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean hasKeyFieldsOnly()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isCached()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isDeclaredInManifest()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isDynamic()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isIncludedIn(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isPinned()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageManager.Property: int describeContents()> -> _SOURCE_
<android.content.pm.PackageManager.Property: boolean getBoolean()> -> _SOURCE_
<android.content.pm.PackageManager.Property: java.lang.String getClassName()> -> _SOURCE_
<android.content.pm.PackageManager.Property: float getFloat()> -> _SOURCE_
<android.content.pm.PackageManager.Property: int getInteger()> -> _SOURCE_
<android.content.pm.PackageManager.Property: java.lang.String getName()> -> _SOURCE_
<android.content.pm.PackageManager.Property: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.PackageManager.Property: int getResourceId()> -> _SOURCE_
<android.content.pm.PackageManager.Property: java.lang.String getString()> -> _SOURCE_
<android.content.pm.PackageManager.Property: boolean isBoolean()> -> _SOURCE_
<android.content.pm.PackageManager.Property: boolean isResourceId()> -> _SOURCE_
<android.content.pm.PackageManager.Property: boolean isString()> -> _SOURCE_
<android.content.pm.VersionedPackage: int describeContents()> -> _SOURCE_
<android.content.pm.VersionedPackage: long getLongVersionCode()> -> _SOURCE_
<android.content.pm.VersionedPackage: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.VersionedPackage: int getVersionCode()> -> _SOURCE_
<android.content.pm.ShortcutManager: boolean addDynamicShortcuts(List<ShortcutInfo>)> -> _SINK_
<android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)> -> _SOURCE_
<android.content.pm.ShortcutManager: List<ShortcutInfo> getDynamicShortcuts()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getIconMaxHeight()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getIconMaxWidth()> -> _SOURCE_
<android.content.pm.ShortcutManager: List<ShortcutInfo> getManifestShortcuts()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()> -> _SOURCE_
<android.content.pm.ShortcutManager: List<ShortcutInfo> getPinnedShortcuts()> -> _SOURCE_
<android.content.pm.ShortcutManager: List<ShortcutInfo> getShortcuts(int)> -> _SOURCE_
<android.content.pm.ShortcutManager: boolean isRateLimitingActive()> -> _SINK_
<android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()> -> _SOURCE_
<android.content.pm.ShortcutManager: void pushDynamicShortcut(android.content.pm.ShortcutInfo)> -> _SINK_
<android.content.pm.ShortcutManager: boolean setDynamicShortcuts(List<ShortcutInfo>)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder addCapabilityBinding(java.lang.String,java.lang.String,List<String>)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(Set<String>)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntent(android.content.Intent)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(Intent[])> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(java.lang.CharSequence)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPerson(android.app.Person)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(Person[])> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(java.lang.CharSequence)> -> _SINK_
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setStartingTheme(int)> -> _SINK_
<android.content.pm.verify.domain.DomainVerificationUserState: int describeContents()> -> _SOURCE_
<android.content.pm.verify.domain.DomainVerificationUserState: java.util.Map getHostToStateMap()> -> _SOURCE_
<android.content.pm.verify.domain.DomainVerificationUserState: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.verify.domain.DomainVerificationUserState: android.os.UserHandle getUser()> -> _SOURCE_
<android.content.pm.verify.domain.DomainVerificationUserState: java.lang.String toString()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: int describeContents()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: List<VersionedPackage> getDependentPackages()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: long getLongVersion()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String getName()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: int getType()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: int getVersion()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String toString()> -> _SOURCE_
<android.content.res.AssetFileDescriptor.AutoCloseOutputStream: void write(byte[])> -> _SINK_
<android.content.res.AssetFileDescriptor.AutoCloseOutputStream: void write(byte[],int,int)> -> _SINK_
<android.content.res.AssetFileDescriptor.AutoCloseOutputStream: void write(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: int describeContents()> -> _SOURCE_
<android.content.pm.PackageInstaller.SessionParams: void setAppIcon(android.graphics.Bitmap)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setAppLabel(java.lang.CharSequence)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setAppPackageName(java.lang.String)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setAutoRevokePermissionsMode(boolean)> -> _SOURCE_
<android.content.pm.PackageInstaller.SessionParams: void setInstallLocation(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setInstallReason(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setInstallScenario(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setMultiPackage()> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setOriginatingUid(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setOriginatingUri(android.net.Uri)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setPackageSource(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setReferrerUri(android.net.Uri)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setRequireUserAction(int)> -> _SINK_
<android.content.pm.PackageInstaller.SessionParams: void setSize(long)> -> _SOURCE_
<android.content.pm.PackageInstaller.SessionParams: void setWhitelistedRestrictedPermissions(Set<String>)> -> _SINK_
<android.content.res.AssetFileDescriptor: int describeContents()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getDeclaredLength()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getLength()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getStartOffset()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: java.lang.String toString()> -> _SOURCE_
<android.content.res.ObbScanner: ObbInfo getObbInfo(java.lang.String)> -> _SOURCE_
<android.content.res.Resources.Theme: void applyStyle(int,boolean)> -> _SINK_
<android.content.res.Resources.Theme: void dump(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.res.Resources.Theme: int[] getAttributeResolutionStack(int,int,int)> -> _SOURCE_
<android.content.res.Resources.Theme: int getChangingConfigurations()> -> _SOURCE_
<android.content.res.Resources.Theme: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.content.res.Resources.Theme: int getExplicitStyle(android.util.AttributeSet)> -> _SOURCE_
<android.content.res.Resources.Theme: android.content.res.Resources getResources()> -> _SOURCE_
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> -> _SOURCE_
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(int[])> -> _SOURCE_
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])> -> _SOURCE_
<android.content.res.Resources.Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)> -> _SOURCE_
<android.content.res.Resources.Theme: java.lang.String toString()> -> _SOURCE_
<android.content.res.AssetFileDescriptor.AutoCloseInputStream: int available()> -> _SOURCE_
<android.content.res.AssetFileDescriptor.AutoCloseInputStream: int read()> -> _SOURCE_
<android.content.res.AssetFileDescriptor.AutoCloseInputStream: int read(byte[],int,int)> -> _SOURCE_
<android.content.res.ObbInfo: int describeContents()> -> _SOURCE_
<android.content.res.ObbInfo: java.lang.String toString()> -> _SOURCE_
<android.content.pm.verify.domain.DomainVerificationManager: android.content.pm.verify.domain.DomainVerificationUserState getDomainVerificationUserState(java.lang.String)> -> _SOURCE_
<android.content.res.TypedArray: boolean getBoolean(int,boolean)> -> _SOURCE_
<android.content.res.TypedArray: int getColor(int,int)> -> _SOURCE_
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)> -> _SOURCE_
<android.content.res.TypedArray: float getDimension(int,float)> -> _SOURCE_
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> -> _SOURCE_
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)> -> _SOURCE_
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.content.res.TypedArray: float getFloat(int,float)> -> _SOURCE_
<android.content.res.TypedArray: android.graphics.Typeface getFont(int)> -> _SOURCE_
<android.content.res.TypedArray: float getFraction(int,int,int,float)> -> _SOURCE_
<android.content.res.TypedArray: int getIndex(int)> -> _SOURCE_
<android.content.res.TypedArray: int getIndexCount()> -> _SOURCE_
<android.content.res.TypedArray: int getInt(int,int)> -> _SOURCE_
<android.content.res.TypedArray: int getInteger(int,int)> -> _SOURCE_
<android.content.res.TypedArray: int getLayoutDimension(int,int)> -> _SOURCE_
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String getPositionDescription()> -> _SOURCE_
<android.content.res.TypedArray: int getResourceId(int,int)> -> _SOURCE_
<android.content.res.TypedArray: android.content.res.Resources getResources()> -> _SOURCE_
<android.content.res.TypedArray: int getSourceResourceId(int,int)> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String getString(int)> -> _SOURCE_
<android.content.res.TypedArray: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.content.res.TypedArray: CharSequence[] getTextArray(int)> -> _SOURCE_
<android.content.res.TypedArray: int getType(int)> -> _SOURCE_
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)> -> _SOURCE_
<android.content.res.TypedArray: boolean hasValue(int)> -> _SOURCE_
<android.content.res.TypedArray: boolean hasValueOrEmpty(int)> -> _SOURCE_
<android.content.res.TypedArray: int length()> -> _SOURCE_
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)> -> _SOURCE_
<android.content.res.loader.ResourcesLoader: void addProvider(android.content.res.loader.ResourcesProvider)> -> _SINK_
<android.content.res.loader.ResourcesLoader: List<ResourcesProvider> getProviders()> -> _SOURCE_
<android.content.res.loader.ResourcesLoader: void setProviders(List<ResourcesProvider>)> -> _SINK_
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)> -> _SOURCE_
<android.content.res.Resources: AssetManager getAssets()> -> _SOURCE_
<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)> -> _SOURCE_
<android.content.res.Resources: boolean getBoolean(int)> -> _SOURCE_
<android.content.res.Resources: int getColor(int)> -> _SOURCE_
<android.content.res.Resources: int getColor(int,android.content.res.Resources.Theme)> -> _SOURCE_
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources.Theme)> -> _SOURCE_
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> -> _SOURCE_
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.content.res.Resources: float getDimension(int)> -> _SOURCE_
<android.content.res.Resources: int getDimensionPixelOffset(int)> -> _SOURCE_
<android.content.res.Resources: int getDimensionPixelSize(int)> -> _SOURCE_
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources.Theme)> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources.Theme)> -> _SOURCE_
<android.content.res.Resources: float getFloat(int)> -> _SOURCE_
<android.content.res.Resources: android.graphics.Typeface getFont(int)> -> _SOURCE_
<android.content.res.Resources: float getFraction(int,int,int)> -> _SOURCE_
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.res.Resources: int[] getIntArray(int)> -> _SOURCE_
<android.content.res.Resources: int getInteger(int)> -> _SOURCE_
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getQuantityString(int,int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getQuantityString(int,int,Object[])> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceName(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getString(int,Object[])> -> _SOURCE_
<android.content.res.Resources: java.lang.String getString(int)> -> _SOURCE_
<android.content.res.Resources: String[] getStringArray(int)> -> _SOURCE_
<android.content.res.Resources: Resources getSystem()> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.content.res.Resources: CharSequence[] getTextArray(int)> -> _SOURCE_
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)> -> _SOURCE_
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)> -> _SOURCE_
<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)> -> _SOURCE_
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> -> _SOURCE_
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> -> _SOURCE_
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> -> _SOURCE_
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)> -> _SOURCE_
<android.content.res.Resources: java.io.InputStream openRawResource(int)> -> _SOURCE_
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> -> _SOURCE_
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)> -> _SOURCE_
<android.content.pm.SigningInfo: int describeContents()> -> _SOURCE_
<android.content.pm.SigningInfo: Signature[] getApkContentsSigners()> -> _SOURCE_
<android.content.pm.SigningInfo: Signature[] getSigningCertificateHistory()> -> _SOURCE_
<android.content.pm.SigningInfo: boolean hasMultipleSigners()> -> _SINK_
<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()> -> _SINK_
<android.content.res.AssetManager: String[] getLocales()> -> _SOURCE_
<android.content.res.AssetManager: String[] list(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)> -> _SOURCE_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> -> _SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> -> _SOURCE_
<android.database.AbstractWindowedCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: double getDouble(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: float getFloat(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: int getInt(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: long getLong(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: short getShort(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: int getType(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: boolean hasWindow()> -> _SOURCE_
<android.database.AbstractWindowedCursor: boolean isBlob(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: boolean isFloat(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: boolean isLong(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: boolean isString(int)> -> _SOURCE_
<android.content.res.loader.ResourcesProvider: ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.content.res.loader.ResourcesProvider: ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)> -> _SOURCE_
<android.content.res.loader.ResourcesProvider: ResourcesProvider loadFromDirectory(java.lang.String,android.content.res.loader.AssetsProvider)> -> _SINK_
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()> -> _SOURCE_
<android.content.res.XmlResourceParser: String getAttributeNamespace(int)> -> _SOURCE_
<android.database.CrossProcessCursor: CursorWindow getWindow()> -> _SOURCE_
<android.content.res.AssetManager.AssetInputStream: int available()> -> _SOURCE_
<android.content.res.AssetManager.AssetInputStream: int read()> -> _SOURCE_
<android.content.res.AssetManager.AssetInputStream: int read(byte[],int,int)> -> _SOURCE_
<android.database.AbstractCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SOURCE_
<android.database.AbstractCursor: byte[] getBlob(int)> -> _SOURCE_
<android.database.AbstractCursor: int getColumnCount()> -> _SOURCE_
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)> -> _SOURCE_
<android.database.AbstractCursor: java.lang.String getColumnName(int)> -> _SOURCE_
<android.database.AbstractCursor: String[] getColumnNames()> -> _SOURCE_
<android.database.AbstractCursor: int getCount()> -> _SOURCE_
<android.database.AbstractCursor: double getDouble(int)> -> _SOURCE_
<android.database.AbstractCursor: android.os.Bundle getExtras()> -> _SOURCE_
<android.database.AbstractCursor: float getFloat(int)> -> _SOURCE_
<android.database.AbstractCursor: int getInt(int)> -> _SOURCE_
<android.database.AbstractCursor: long getLong(int)> -> _SOURCE_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()> -> _SOURCE_
<android.database.AbstractCursor: List<Uri> getNotificationUris()> -> _SOURCE_
<android.database.AbstractCursor: short getShort(int)> -> _SOURCE_
<android.database.AbstractCursor: String getString(int)> -> _SOURCE_
<android.database.AbstractCursor: int getType(int)> -> _SOURCE_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<android.database.AbstractCursor: boolean isAfterLast()> -> _SOURCE_
<android.database.AbstractCursor: boolean isBeforeFirst()> -> _SOURCE_
<android.database.AbstractCursor: boolean isClosed()> -> _SOURCE_
<android.database.AbstractCursor: boolean isFirst()> -> _SOURCE_
<android.database.AbstractCursor: boolean isLast()> -> _SOURCE_
<android.database.AbstractCursor: void setExtras(android.os.Bundle)> -> _SOURCE_
<android.database.AbstractCursor: void setNotificationUris(android.content.ContentResolver,List<Uri>)> -> _SINK_
<android.database.CursorWrapper: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SOURCE_
<android.database.CursorWrapper: byte[] getBlob(int)> -> _SOURCE_
<android.database.CursorWrapper: int getColumnCount()> -> _SOURCE_
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getColumnName(int)> -> _SOURCE_
<android.database.CursorWrapper: String[] getColumnNames()> -> _SOURCE_
<android.database.CursorWrapper: int getCount()> -> _SOURCE_
<android.database.CursorWrapper: double getDouble(int)> -> _SOURCE_
<android.database.CursorWrapper: android.os.Bundle getExtras()> -> _SOURCE_
<android.database.CursorWrapper: float getFloat(int)> -> _SOURCE_
<android.database.CursorWrapper: int getInt(int)> -> _SOURCE_
<android.database.CursorWrapper: long getLong(int)> -> _SOURCE_
<android.database.CursorWrapper: android.net.Uri getNotificationUri()> -> _SOURCE_
<android.database.CursorWrapper: List<Uri> getNotificationUris()> -> _SOURCE_
<android.database.CursorWrapper: short getShort(int)> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getString(int)> -> _SOURCE_
<android.database.CursorWrapper: int getType(int)> -> _SOURCE_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> -> _SOURCE_
<android.database.CursorWrapper: boolean isAfterLast()> -> _SOURCE_
<android.database.CursorWrapper: boolean isBeforeFirst()> -> _SOURCE_
<android.database.CursorWrapper: boolean isClosed()> -> _SOURCE_
<android.database.CursorWrapper: boolean isFirst()> -> _SOURCE_
<android.database.CursorWrapper: boolean isLast()> -> _SOURCE_
<android.database.CursorWrapper: void setExtras(android.os.Bundle)> -> _SOURCE_
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.database.CursorWrapper: void setNotificationUris(android.content.ContentResolver,List<Uri>)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,float)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,double)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,int)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,java.lang.String)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,long)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,byte[])> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: void bind(int,boolean)> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: long execute()> -> _SINK_
<android.database.DatabaseUtils.InsertHelper: int getColumnIndex(java.lang.String)> -> _SOURCE_
<android.database.DatabaseUtils.InsertHelper: void prepareForReplace()> -> _SINK_
<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SOURCE_
<android.database.Cursor: byte[] getBlob(int)> -> _SOURCE_
<android.database.Cursor: int getColumnCount()> -> _SOURCE_
<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)> -> _SOURCE_
<android.database.Cursor: String getColumnName(int)> -> _SOURCE_
<android.database.Cursor: String[] getColumnNames()> -> _SOURCE_
<android.database.Cursor: int getCount()> -> _SOURCE_
<android.database.Cursor: double getDouble(int)> -> _SOURCE_
<android.database.Cursor: Bundle getExtras()> -> _SOURCE_
<android.database.Cursor: float getFloat(int)> -> _SOURCE_
<android.database.Cursor: int getInt(int)> -> _SOURCE_
<android.database.Cursor: long getLong(int)> -> _SOURCE_
<android.database.Cursor: Uri getNotificationUri()> -> _SOURCE_
<android.database.Cursor: default List<Uri> getNotificationUris()> -> _SOURCE_
<android.database.Cursor: short getShort(int)> -> _SOURCE_
<android.database.Cursor: String getString(int)> -> _SOURCE_
<android.database.Cursor: int getType(int)> -> _SOURCE_
<android.database.Cursor: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<android.database.Cursor: boolean isAfterLast()> -> _SOURCE_
<android.database.Cursor: boolean isBeforeFirst()> -> _SOURCE_
<android.database.Cursor: boolean isClosed()> -> _SOURCE_
<android.database.Cursor: boolean isFirst()> -> _SOURCE_
<android.database.Cursor: boolean isLast()> -> _SOURCE_
<android.database.Cursor: void setExtras(android.os.Bundle)> -> _SOURCE_
<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.database.Cursor: default void setNotificationUris(android.content.ContentResolver,List<Uri>)> -> _SINK_
<android.database.MatrixCursor: byte[] getBlob(int)> -> _SOURCE_
<android.database.MatrixCursor: String[] getColumnNames()> -> _SOURCE_
<android.database.MatrixCursor: int getCount()> -> _SOURCE_
<android.database.MatrixCursor: double getDouble(int)> -> _SOURCE_
<android.database.MatrixCursor: float getFloat(int)> -> _SOURCE_
<android.database.MatrixCursor: int getInt(int)> -> _SOURCE_
<android.database.MatrixCursor: long getLong(int)> -> _SOURCE_
<android.database.MatrixCursor: short getShort(int)> -> _SOURCE_
<android.database.MatrixCursor: java.lang.String getString(int)> -> _SOURCE_
<android.database.MatrixCursor: int getType(int)> -> _SOURCE_
<android.database.MatrixCursor.RowBuilder: android.database.MatrixCursor.RowBuilder add(java.lang.Object)> -> _SINK_
<android.database.MatrixCursor.RowBuilder: android.database.MatrixCursor.RowBuilder add(java.lang.String,java.lang.Object)> -> _SOURCE_
<android.database.MergeCursor: byte[] getBlob(int)> -> _SOURCE_
<android.database.MergeCursor: String[] getColumnNames()> -> _SOURCE_
<android.database.MergeCursor: int getCount()> -> _SOURCE_
<android.database.MergeCursor: double getDouble(int)> -> _SOURCE_
<android.database.MergeCursor: float getFloat(int)> -> _SOURCE_
<android.database.MergeCursor: int getInt(int)> -> _SOURCE_
<android.database.MergeCursor: long getLong(int)> -> _SOURCE_
<android.database.MergeCursor: short getShort(int)> -> _SOURCE_
<android.database.MergeCursor: java.lang.String getString(int)> -> _SOURCE_
<android.database.MergeCursor: int getType(int)> -> _SOURCE_
<android.database.CursorJoiner: boolean hasNext()> -> _SOURCE_
<android.database.CursorJoiner: android.database.CursorJoiner.Result next()> -> _SOURCE_
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()> -> _SOURCE_
<android.databinding.InverseBindingMethod: java.lang.String method()> -> _SOURCE_
<android.databinding.InverseBindingMethod: java.lang.Class type()> -> _SOURCE_
<android.databinding.DataBindingUtil: String convertBrIdToString(int)> -> _SOURCE_
<android.databinding.DataBindingUtil: <T extends ViewDataBinding> T findBinding(android.view.View)> -> _SOURCE_
<android.databinding.DataBindingUtil: <T extends ViewDataBinding> T getBinding(android.view.View)> -> _SOURCE_
<android.databinding.DataBindingUtil: DataBindingComponent getDefaultComponent()> -> _SOURCE_
<android.databinding.InverseBindingAdapter: java.lang.String attribute()> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: String[] getColumnNames()> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: int getCount()> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: void setFillWindowForwardOnly(boolean)> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder addOpenFlags(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder removeOpenFlags(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setErrorHandler(android.database.DatabaseErrorHandler)> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setJournalMode(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setLookasideConfig(int,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setOpenFlags(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setSynchronousMode(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteCursorDriver: Cursor query(android.database.sqlite.SQLiteDatabase.CursorFactory,String[])> -> _SOURCE_
<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase.CursorFactory: Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void beginTransaction()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: SQLiteDatabase create(android.database.sqlite.SQLiteDatabase.CursorFactory)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase.OpenParams)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,Object[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,Object[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: String findEditTable(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: List<Pair<String, String>> getAttachedDbs()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isOpen()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.OpenParams)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.CursorFactory)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,String[],android.os.CancellationSignal)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,String[])> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,String[],java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.lang.String toString()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,String[],int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: void setIdleConnectionTimeout(long)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void setLookasideConfig(int,int)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void setOpenParams(android.database.sqlite.SQLiteDatabase.OpenParams)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<android.databinding.ViewDataBinding: android.view.View getRoot()> -> _SOURCE_
<android.databinding.ViewDataBinding: boolean hasPendingBindings()> -> _SOURCE_
<android.databinding.ViewDataBinding: boolean setVariable(int,java.lang.Object)> -> _SINK_
<android.database.sqlite.SQLiteQuery: java.lang.String toString()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: long executeInsert()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: java.lang.String toString()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,String[])> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereStandalone(java.lang.CharSequence)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: String buildQueryString(boolean,java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(String[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase.CursorFactory getCursorFactory()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: Collection<Pattern> getProjectionGreylist()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.util.Map getProjectionMap()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: long insert(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: boolean isDistinct()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictColumns()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictGrammar()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,String[],java.lang.String,String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionGreylist(Collection<Pattern>)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: void setStrict(boolean)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setStrictGrammar(boolean)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase.OpenParams: android.database.DatabaseErrorHandler getErrorHandler()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase.OpenParams: long getIdleConnectionTimeout()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase.OpenParams: int getLookasideSlotCount()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase.OpenParams: int getLookasideSlotSize()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase.OpenParams: int getOpenFlags()> -> _SOURCE_
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.drm.DrmInfo: byte[] getData()> -> _SOURCE_
<android.drm.DrmInfo: int getInfoType()> -> _SOURCE_
<android.drm.DrmInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.drm.DrmInfo: Iterator<Object> iterator()> -> _SOURCE_
<android.drm.DrmInfo: Iterator<String> keyIterator()> -> _SOURCE_
<android.drm.DrmInfo: void put(java.lang.String,java.lang.Object)> -> _SINK_
<android.drm.DrmRights: java.lang.String getAccountId()> -> _SOURCE_
<android.drm.DrmRights: byte[] getData()> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getMimeType()> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getSubscriptionId()> -> _SOURCE_
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<android.drm.DrmEvent: java.lang.String getMessage()> -> _SOURCE_
<android.drm.DrmEvent: int getType()> -> _SOURCE_
<android.drm.DrmEvent: int getUniqueId()> -> _SOURCE_
<android.drm.ProcessedData: java.lang.String getAccountId()> -> _SOURCE_
<android.drm.ProcessedData: byte[] getData()> -> _SOURCE_
<android.drm.ProcessedData: java.lang.String getSubscriptionId()> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory.Options)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeByteArray(byte[],int,int)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory.Options)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeFile(java.lang.String)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeFileDescriptor(java.io.FileDescriptor)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory.Options)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeStream(java.io.InputStream)> -> _SOURCE_
<android.graphics.BitmapFactory: Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)> -> _SOURCE_
<android.drm.DrmUtils.ExtendedMetadataParser: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.drm.DrmUtils.ExtendedMetadataParser: Iterator<String> iterator()> -> _SOURCE_
<android.drm.DrmUtils.ExtendedMetadataParser: Iterator<String> keyIterator()> -> _SOURCE_
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.drm.DrmInfoRequest: int getInfoType()> -> _SOURCE_
<android.drm.DrmInfoRequest: java.lang.String getMimeType()> -> _SOURCE_
<android.drm.DrmInfoRequest: Iterator<Object> iterator()> -> _SOURCE_
<android.drm.DrmInfoRequest: void put(java.lang.String,java.lang.Object)> -> _SINK_
<android.drm.DrmManagerClient: android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest)> -> _SOURCE_
<android.drm.DrmManagerClient: int acquireRights(android.drm.DrmInfoRequest)> -> _SOURCE_
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: boolean canHandle(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri)> -> _SOURCE_
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus convertData(int,byte[])> -> _SINK_
<android.drm.DrmManagerClient: String[] getAvailableDrmEngines()> -> _SOURCE_
<android.drm.DrmManagerClient: Collection<DrmSupportInfo> getAvailableDrmSupportInfo()> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)> -> _SOURCE_
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)> -> _SOURCE_
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)> -> _SOURCE_
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)> -> _SOURCE_
<android.drm.DrmManagerClient: int removeRights(java.lang.String)> -> _SINK_
<android.drm.DrmManagerClient: int removeRights(android.net.Uri)> -> _SINK_
<android.drm.DrmManagerClient: int saveRights(android.drm.DrmRights,java.lang.String,java.lang.String)> -> _SINK_
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int)> -> _SINK_
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int,boolean)> -> _SINK_
<android.graphics.BitmapFactory.Options: void requestCancelDecode()> -> _SINK_
<android.gesture.Prediction: java.lang.String toString()> -> _SOURCE_
<android.drm.DrmUtils: DrmUtils.ExtendedMetadataParser getExtendedMetadataParser(byte[])> -> _SOURCE_
<android.drm.DrmSupportInfo: void addFileSuffix(java.lang.String)> -> _SINK_
<android.drm.DrmSupportInfo: void addMimeType(java.lang.String)> -> _SINK_
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()> -> _SOURCE_
<android.drm.DrmSupportInfo: java.lang.String getDescription()> -> _SOURCE_
<android.drm.DrmSupportInfo: Iterator<String> getFileSuffixIterator()> -> _SOURCE_
<android.drm.DrmSupportInfo: Iterator<String> getMimeTypeIterator()> -> _SOURCE_
<android.drm.DrmSupportInfo: void setDescription(java.lang.String)> -> _SINK_
<android.graphics.BlendModeColorFilter: int getColor()> -> _SOURCE_
<android.graphics.BlendModeColorFilter: android.graphics.BlendMode getMode()> -> _SOURCE_
<android.graphics.BitmapRegionDecoder: int getHeight()> -> _SOURCE_
<android.graphics.BitmapRegionDecoder: int getWidth()> -> _SOURCE_
<android.graphics.BitmapRegionDecoder: BitmapRegionDecoder newInstance(byte[],int,int)> -> _SINK_
<android.graphics.BitmapRegionDecoder: BitmapRegionDecoder newInstance(android.os.ParcelFileDescriptor)> -> _SINK_
<android.graphics.BitmapRegionDecoder: BitmapRegionDecoder newInstance(java.lang.String)> -> _SOURCE_
<android.graphics.BitmapShader: int getFilterMode()> -> _SOURCE_
<android.graphics.BitmapShader: void setFilterMode(int)> -> _SINK_
<android.graphics.ColorSpace.Connector: android.graphics.ColorSpace getDestination()> -> _SOURCE_
<android.graphics.ColorSpace.Connector: android.graphics.ColorSpace.RenderIntent getRenderIntent()> -> _SINK_
<android.graphics.ColorSpace.Connector: android.graphics.ColorSpace getSource()> -> _SOURCE_
<android.graphics.Color: int HSVToColor(float[])> -> _SINK_
<android.graphics.Color: int HSVToColor(int,float[])> -> _SINK_
<android.graphics.Color: void RGBToHSV(int,int,int,float[])> -> _SOURCE_
<android.graphics.Color: int alpha(int)> -> _SOURCE_
<android.graphics.Color: float alpha()> -> _SOURCE_
<android.graphics.Color: float alpha(long)> -> _SOURCE_
<android.graphics.Color: int argb(int,int,int,int)> -> _SOURCE_
<android.graphics.Color: int argb(float,float,float,float)> -> _SOURCE_
<android.graphics.Color: int blue(int)> -> _SOURCE_
<android.graphics.Color: float blue()> -> _SOURCE_
<android.graphics.Color: float blue(long)> -> _SOURCE_
<android.graphics.Color: ColorSpace colorSpace(long)> -> _SOURCE_
<android.graphics.Color: void colorToHSV(int,float[])> -> _SOURCE_
<android.graphics.Color: long convert(long,android.graphics.ColorSpace.Connector)> -> _SINK_
<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)> -> _SOURCE_
<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)> -> _SINK_
<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace.Connector)> -> _SINK_
<android.graphics.Color: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.graphics.Color: float getComponent(int)> -> _SOURCE_
<android.graphics.Color: int getComponentCount()> -> _SOURCE_
<android.graphics.Color: float[] getComponents()> -> _SOURCE_
<android.graphics.Color: float[] getComponents(float[])> -> _SINK_
<android.graphics.Color: android.graphics.ColorSpace.Model getModel()> -> _SOURCE_
<android.graphics.Color: float green(long)> -> _SOURCE_
<android.graphics.Color: float green()> -> _SOURCE_
<android.graphics.Color: int green(int)> -> _SOURCE_
<android.graphics.Color: boolean isSrgb()> -> _SOURCE_
<android.graphics.Color: float luminance(long)> -> _SOURCE_
<android.graphics.Color: float luminance(int)> -> _SOURCE_
<android.graphics.Color: float luminance()> -> _SOURCE_
<android.graphics.Color: long pack(int)> -> _SINK_
<android.graphics.Color: long pack(float,float,float,float)> -> _SINK_
<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)> -> _SINK_
<android.graphics.Color: long pack(float,float,float)> -> _SINK_
<android.graphics.Color: long pack()> -> _SINK_
<android.graphics.Color: int parseColor(java.lang.String)> -> _SOURCE_
<android.graphics.Color: float red()> -> _SOURCE_
<android.graphics.Color: float red(long)> -> _SOURCE_
<android.graphics.Color: int red(int)> -> _SOURCE_
<android.graphics.Color: int rgb(float,float,float)> -> _SOURCE_
<android.graphics.Color: int rgb(int,int,int)> -> _SOURCE_
<android.graphics.Color: int toArgb()> -> _SINK_
<android.graphics.Color: int toArgb(long)> -> _SINK_
<android.graphics.Color: java.lang.String toString()> -> _SOURCE_
<android.graphics.Color: Color valueOf(float,float,float)> -> _SINK_
<android.graphics.Color: Color valueOf(float,float,float,float)> -> _SINK_
<android.graphics.Color: Color valueOf(float[],android.graphics.ColorSpace)> -> _SINK_
<android.graphics.Color: Color valueOf(long)> -> _SINK_
<android.graphics.Color: Color valueOf(float,float,float,float,android.graphics.ColorSpace)> -> _SINK_
<android.graphics.ImageDecoder.DecodeException: int getError()> -> _SOURCE_
<android.graphics.ColorSpace: float[] cctToXyz(int)> -> _SOURCE_
<android.graphics.ColorSpace: ColorSpace.Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)> -> _SOURCE_
<android.graphics.ColorSpace: ColorSpace.Connector connect(android.graphics.ColorSpace)> -> _SOURCE_
<android.graphics.ColorSpace: ColorSpace.Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)> -> _SINK_
<android.graphics.ColorSpace: ColorSpace.Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)> -> _SINK_
<android.graphics.ColorSpace: float[] fromXyz(float[])> -> _SOURCE_
<android.graphics.ColorSpace: float[] fromXyz(float,float,float)> -> _SOURCE_
<android.graphics.ColorSpace: ColorSpace get(android.graphics.ColorSpace.Named)> -> _SOURCE_
<android.graphics.ColorSpace: int getComponentCount()> -> _SOURCE_
<android.graphics.ColorSpace: int getId()> -> _SOURCE_
<android.graphics.ColorSpace: float getMaxValue(int)> -> _SOURCE_
<android.graphics.ColorSpace: float getMinValue(int)> -> _SOURCE_
<android.graphics.ColorSpace: android.graphics.ColorSpace.Model getModel()> -> _SOURCE_
<android.graphics.ColorSpace: java.lang.String getName()> -> _SOURCE_
<android.graphics.ColorSpace: boolean isSrgb()> -> _SOURCE_
<android.graphics.ColorSpace: boolean isWideGamut()> -> _SOURCE_
<android.graphics.ColorSpace: ColorSpace match(float[],android.graphics.ColorSpace.Rgb.TransferParameters)> -> _SOURCE_
<android.graphics.ColorSpace: java.lang.String toString()> -> _SOURCE_
<android.graphics.ColorSpace: float[] toXyz(float,float,float)> -> _SOURCE_
<android.graphics.ColorSpace: float[] toXyz(float[])> -> _SOURCE_
<android.graphics.ImageDecoder.OnHeaderDecodedListener: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder.ImageInfo,android.graphics.ImageDecoder.Source)> -> _SOURCE_
<android.graphics.ColorMatrix: float[] getArray()> -> _SOURCE_
<android.graphics.ColorMatrix: void postConcat(android.graphics.ColorMatrix)> -> _SINK_
<android.graphics.ColorMatrix: void reset()> -> _SINK_
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)> -> _SINK_
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)> -> _SINK_
<android.graphics.ColorMatrix: void setRotate(int,float)> -> _SINK_
<android.graphics.ColorMatrix: void setSaturation(float)> -> _SINK_
<android.graphics.ColorMatrix: void setScale(float,float,float,float)> -> _SINK_
<android.graphics.ImageFormat: int getBitsPerPixel(int)> -> _SOURCE_
<android.graphics.HardwareRenderer.FrameRenderRequest: android.graphics.HardwareRenderer.FrameRenderRequest setVsyncTime(long)> -> _SINK_
<android.graphics.ColorSpace.Rgb: float[] fromXyz(float[])> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: java.util.function.DoubleUnaryOperator getEotf()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float[] getInverseTransform()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float getMaxValue(int)> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float getMinValue(int)> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: java.util.function.DoubleUnaryOperator getOetf()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float[] getPrimaries()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: android.graphics.ColorSpace.Rgb.TransferParameters getTransferParameters()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float[] getTransform()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: boolean isSrgb()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: boolean isWideGamut()> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float[] toLinear(float[])> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float[] toLinear(float,float,float)> -> _SOURCE_
<android.graphics.ColorSpace.Rgb: float[] toXyz(float[])> -> _SOURCE_
<android.graphics.Insets: Insets add(android.graphics.Insets,android.graphics.Insets)> -> _SINK_
<android.graphics.Insets: int describeContents()> -> _SOURCE_
<android.graphics.Insets: Insets max(android.graphics.Insets,android.graphics.Insets)> -> _SOURCE_
<android.graphics.Insets: Insets min(android.graphics.Insets,android.graphics.Insets)> -> _SOURCE_
<android.graphics.Insets: Insets of(int,int,int,int)> -> _SOURCE_
<android.graphics.Insets: Insets of(android.graphics.Rect)> -> _SOURCE_
<android.graphics.Insets: java.lang.String toString()> -> _SOURCE_
<android.graphics.LightingColorFilter: int getColorAdd()> -> _SOURCE_
<android.graphics.LightingColorFilter: int getColorMultiply()> -> _SOURCE_
<android.graphics.ImageDecoder: ImageDecoder.Source createSource(java.io.File)> -> _SINK_
<android.graphics.ImageDecoder: Bitmap decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)> -> _SINK_
<android.graphics.ImageDecoder: Bitmap decodeBitmap(android.graphics.ImageDecoder.Source)> -> _SINK_
<android.graphics.ImageDecoder: android.graphics.Rect getCrop()> -> _SOURCE_
<android.graphics.ImageDecoder: int getMemorySizePolicy()> -> _SOURCE_
<android.graphics.ImageDecoder: android.graphics.PostProcessor getPostProcessor()> -> _SOURCE_
<android.graphics.ImageDecoder: boolean isMimeTypeSupported(java.lang.String)> -> _SOURCE_
<android.graphics.ImageDecoder: boolean isMutableRequired()> -> _SOURCE_
<android.graphics.ImageDecoder: boolean isUnpremultipliedRequired()> -> _SOURCE_
<android.graphics.ImageDecoder: void setAllocator(int)> -> _SINK_
<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)> -> _SINK_
<android.graphics.ImageDecoder: void setMemorySizePolicy(int)> -> _SINK_
<android.graphics.ImageDecoder: void setMutableRequired(boolean)> -> _SINK_
<android.graphics.ImageDecoder: void setPostProcessor(android.graphics.PostProcessor)> -> _SINK_
<android.graphics.ImageDecoder: void setTargetColorSpace(android.graphics.ColorSpace)> -> _SINK_
<android.graphics.ImageDecoder: void setTargetSampleSize(int)> -> _SINK_
<android.graphics.ImageDecoder: void setTargetSize(int,int)> -> _SINK_
<android.graphics.ImageDecoder: void setUnpremultipliedRequired(boolean)> -> _SINK_
<android.graphics.ImageDecoder.ImageInfo: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.graphics.ImageDecoder.ImageInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.graphics.ImageDecoder.ImageInfo: android.util.Size getSize()> -> _SOURCE_
<android.graphics.ImageDecoder.ImageInfo: boolean isAnimated()> -> _SOURCE_
<android.graphics.HardwareRenderer: boolean isDrawingEnabled()> -> _SOURCE_
<android.graphics.HardwareRenderer: void setContentRoot(android.graphics.RenderNode)> -> _SINK_
<android.graphics.HardwareRenderer: void setDrawingEnabled(boolean)> -> _SINK_
<android.graphics.HardwareRenderer: void setLightSourceAlpha(float,float)> -> _SINK_
<android.graphics.HardwareRenderer: void setLightSourceGeometry(float,float,float,float)> -> _SINK_
<android.graphics.HardwareRenderer: void setName(java.lang.String)> -> _SINK_
<android.graphics.HardwareRenderer: void setOpaque(boolean)> -> _SINK_
<android.graphics.HardwareRenderer: void setSurface(android.view.Surface)> -> _SOURCE_
<android.graphics.HardwareRenderer: void stop()> -> _SINK_
<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<android.graphics.NinePatch: int getDensity()> -> _SOURCE_
<android.graphics.NinePatch: int getHeight()> -> _SOURCE_
<android.graphics.NinePatch: java.lang.String getName()> -> _SOURCE_
<android.graphics.NinePatch: android.graphics.Paint getPaint()> -> _SOURCE_
<android.graphics.NinePatch: Region getTransparentRegion(android.graphics.Rect)> -> _SOURCE_
<android.graphics.NinePatch: int getWidth()> -> _SOURCE_
<android.graphics.NinePatch: boolean hasAlpha()> -> _SOURCE_
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)> -> _SINK_
<android.graphics.Paint.FontMetricsInt: java.lang.String toString()> -> _SOURCE_
<android.graphics.Outline: boolean canClip()> -> _SOURCE_
<android.graphics.Outline: float getAlpha()> -> _SOURCE_
<android.graphics.Outline: float getRadius()> -> _SOURCE_
<android.graphics.Outline: boolean isEmpty()> -> _SOURCE_
<android.graphics.Outline: void setAlpha(float)> -> _SINK_
<android.graphics.Outline: void setConvexPath(android.graphics.Path)> -> _SINK_
<android.graphics.Outline: void setEmpty()> -> _SINK_
<android.graphics.Outline: void setOval(android.graphics.Rect)> -> _SINK_
<android.graphics.Outline: void setOval(int,int,int,int)> -> _SINK_
<android.graphics.Outline: void setPath(android.graphics.Path)> -> _SINK_
<android.graphics.Outline: void setRect(int,int,int,int)> -> _SINK_
<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)> -> _SINK_
<android.graphics.Outline: void setRoundRect(int,int,int,int,float)> -> _SINK_
<android.graphics.Path: void addPath(android.graphics.Path)> -> _SINK_
<android.graphics.Path: void addPath(android.graphics.Path,float,float)> -> _SINK_
<android.graphics.Path: float[] approximate(float)> -> _SOURCE_
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)> -> _SOURCE_
<android.graphics.Path: android.graphics.Path.FillType getFillType()> -> _SOURCE_
<android.graphics.Path: boolean isConvex()> -> _SOURCE_
<android.graphics.Path: boolean isEmpty()> -> _SOURCE_
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path.Op)> -> _SINK_
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path.Op)> -> _SINK_
<android.graphics.Path: void rLineTo(float,float)> -> _SOURCE_
<android.graphics.Path: void setFillType(android.graphics.Path.FillType)> -> _SINK_
<android.graphics.Path: void setLastPoint(float,float)> -> _SINK_
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)> -> _SOURCE_
<android.graphics.Point: void readFromParcel(android.os.Parcel)> -> _SINK_
<android.graphics.Point: void set(int,int)> -> _SINK_
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)> -> _SOURCE_
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)> -> _SINK_
<android.graphics.PathMeasure: float getLength()> -> _SOURCE_
<android.graphics.PathMeasure: boolean getSegment(float,float,android.graphics.Path,boolean)> -> _SOURCE_
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)> -> _SINK_
<android.graphics.SurfaceTexture: int getDataSpace()> -> _SOURCE_
<android.graphics.SurfaceTexture: long getTimestamp()> -> _SOURCE_
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])> -> _SOURCE_
<android.graphics.SurfaceTexture: boolean isReleased()> -> _SOURCE_
<android.graphics.SurfaceTexture: void releaseTexImage()> -> _SINK_
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)> -> _SINK_
<android.graphics.SurfaceTexture: void updateTexImage()> -> _SINK_
<android.graphics.Typeface: Typeface create(android.graphics.Typeface,int)> -> _SINK_
<android.graphics.Typeface: Typeface create(java.lang.String,int)> -> _SINK_
<android.graphics.Typeface: Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)> -> _SINK_
<android.graphics.Typeface: Typeface createFromFile(java.io.File)> -> _SINK_
<android.graphics.Typeface: Typeface createFromFile(java.lang.String)> -> _SINK_
<android.graphics.Typeface: Typeface defaultFromStyle(int)> -> _SOURCE_
<android.graphics.Typeface: int getStyle()> -> _SOURCE_
<android.graphics.Typeface: int getWeight()> -> _SOURCE_
<android.graphics.Typeface: boolean isBold()> -> _SOURCE_
<android.graphics.Typeface: boolean isItalic()> -> _SOURCE_
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)> -> _SINK_
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()> -> _SINK_
<android.graphics.Typeface.CustomFallbackBuilder: int getMaxCustomFallbackCount()> -> _SOURCE_
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)> -> _SINK_
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setSystemFallback(java.lang.String)> -> _SINK_
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setFallback(java.lang.String)> -> _SINK_
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setFontVariationSettings(java.lang.String)> -> _SINK_
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setFontVariationSettings(FontVariationAxis[])> -> _SINK_
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setItalic(boolean)> -> _SINK_
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setTtcIndex(int)> -> _SINK_
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setWeight(int)> -> _SINK_
<android.graphics.drawable.AnimatedImageDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.graphics.drawable.AnimatedImageDrawable: int getAlpha()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: int getIntrinsicHeight()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: int getIntrinsicWidth()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: int getOpacity()> -> _SINK_
<android.graphics.drawable.AnimatedImageDrawable: int getRepeatCount()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: boolean isRunning()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: void setAlpha(int)> -> _SINK_
<android.graphics.drawable.AnimatedImageDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.graphics.drawable.AnimatedImageDrawable: void setRepeatCount(int)> -> _SINK_
<android.graphics.RenderEffect: RenderEffect createBitmapEffect(android.graphics.Bitmap)> -> _SOURCE_
<android.graphics.RenderEffect: RenderEffect createBitmapEffect(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
<android.graphics.RenderEffect: RenderEffect createOffsetEffect(float,float)> -> _SINK_
<android.graphics.RenderEffect: RenderEffect createRuntimeShaderEffect(RuntimeShader,java.lang.String)> -> _SINK_
<android.graphics.drawable.AnimatedStateListDrawable: void addState(int[],android.graphics.drawable.Drawable,int)> -> _SINK_
<android.graphics.drawable.Drawable.ConstantState: boolean canApplyTheme()> -> _SOURCE_
<android.graphics.drawable.PictureDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.graphics.drawable.PictureDrawable: int getIntrinsicHeight()> -> _SOURCE_
<android.graphics.drawable.PictureDrawable: int getIntrinsicWidth()> -> _SOURCE_
<android.graphics.drawable.PictureDrawable: int getOpacity()> -> _SINK_
<android.graphics.drawable.PictureDrawable: android.graphics.Picture getPicture()> -> _SOURCE_
<android.graphics.drawable.PictureDrawable: void setAlpha(int)> -> _SINK_
<android.graphics.drawable.PictureDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.graphics.drawable.PictureDrawable: void setPicture(android.graphics.Picture)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithAdaptiveBitmap(android.graphics.Bitmap)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithAdaptiveBitmapContentUri(java.lang.String)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithAdaptiveBitmapContentUri(android.net.Uri)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithBitmap(android.graphics.Bitmap)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithContentUri(java.lang.String)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithContentUri(android.net.Uri)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithData(byte[],int,int)> -> _SINK_
<android.graphics.drawable.Icon: Icon createWithFilePath(java.lang.String)> -> _SINK_
<android.graphics.drawable.Icon: int getResId()> -> _SOURCE_
<android.graphics.drawable.Icon: java.lang.String getResPackage()> -> _SOURCE_
<android.graphics.drawable.Icon: int getType()> -> _SOURCE_
<android.graphics.drawable.Icon: android.net.Uri getUri()> -> _SOURCE_
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(int)> -> _SINK_
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)> -> _SINK_
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)> -> _SINK_
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff.Mode)> -> _SINK_
<android.graphics.drawable.Icon: java.lang.String toString()> -> _SOURCE_
<android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()> -> _SOURCE_
<android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()> -> _SOURCE_
<android.graphics.drawable.InsetDrawable: int getOpacity()> -> _SINK_
<android.graphics.drawable.InsetDrawable: android.graphics.Insets getOpticalInsets()> -> _SINK_
<android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)> -> _SINK_
<android.graphics.drawable.ShapeDrawable.ShaderFactory: Shader resize(int,int)> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: int getAlpha()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: int getIntrinsicHeight()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: int getIntrinsicWidth()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: int getOpacity()> -> _SINK_
<android.graphics.drawable.ShapeDrawable: boolean getPadding(android.graphics.Rect)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable.ShaderFactory getShaderFactory()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setTintBlendMode(android.graphics.BlendMode)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setTintList(android.content.res.ColorStateList)> -> _SINK_
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)> -> _SINK_
<android.graphics.Picture: int getHeight()> -> _SOURCE_
<android.graphics.Picture: int getWidth()> -> _SOURCE_
<android.graphics.Picture: boolean requiresHardwareAcceleration()> -> _SINK_
<android.graphics.drawable.ClipDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.graphics.drawable.ClipDrawable: int getOpacity()> -> _SINK_
<android.graphics.drawable.TransitionDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.graphics.drawable.TransitionDrawable: void resetTransition()> -> _SOURCE_
<android.graphics.drawable.ScaleDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: int getOpacity()> -> _SINK_
<android.graphics.fonts.Font: FontVariationAxis[] getAxes()> -> _SOURCE_
<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()> -> _SOURCE_
<android.graphics.fonts.Font: java.io.File getFile()> -> _SOURCE_
<android.graphics.fonts.Font: float getGlyphBounds(int,android.graphics.Paint,android.graphics.RectF)> -> _SOURCE_
<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.graphics.fonts.Font: void getMetrics(android.graphics.Paint,android.graphics.Paint.FontMetrics)> -> _SOURCE_
<android.graphics.fonts.Font: int getSourceIdentifier()> -> _SOURCE_
<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()> -> _SOURCE_
<android.graphics.fonts.Font: int getTtcIndex()> -> _SOURCE_
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font build()> -> _SINK_
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setFontVariationSettings(java.lang.String)> -> _SINK_
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setFontVariationSettings(FontVariationAxis[])> -> _SINK_
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setSlant(int)> -> _SINK_
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setTtcIndex(int)> -> _SINK_
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setWeight(int)> -> _SINK_
<android.graphics.drawable.StateListDrawable: void addState(int[],android.graphics.drawable.Drawable)> -> _SINK_
<android.graphics.drawable.StateListDrawable: int findStateDrawableIndex(int[])> -> _SOURCE_
<android.graphics.drawable.StateListDrawable: int getStateCount()> -> _SOURCE_
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)> -> _SOURCE_
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)> -> _SOURCE_
<android.graphics.fonts.FontStyle: int getSlant()> -> _SOURCE_
<android.graphics.fonts.FontStyle: int getWeight()> -> _SOURCE_
<android.graphics.fonts.FontStyle: java.lang.String toString()> -> _SOURCE_
<android.graphics.drawable.shapes.Shape: float getHeight()> -> _SOURCE_
<android.graphics.drawable.shapes.Shape: float getWidth()> -> _SOURCE_
<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)> -> _SOURCE_
<android.graphics.fonts.FontFamily: int getSize()> -> _SOURCE_
<android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily.Builder addFont(android.graphics.fonts.Font)> -> _SINK_
<android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()> -> _SINK_
<android.graphics.pdf.PdfDocument: List<PdfDocument.PageInfo> getPages()> -> _SOURCE_
<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument.Page startPage(android.graphics.pdf.PdfDocument.PageInfo)> -> _SINK_
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)> -> _SINK_
<android.graphics.pdf.PdfDocument.PageInfo: android.graphics.Rect getContentRect()> -> _SOURCE_
<android.graphics.pdf.PdfDocument.PageInfo: int getPageHeight()> -> _SOURCE_
<android.graphics.pdf.PdfDocument.PageInfo: int getPageNumber()> -> _SOURCE_
<android.graphics.pdf.PdfDocument.PageInfo: int getPageWidth()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer: int getPageCount()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer: boolean shouldScaleForPrinting()> -> _SOURCE_
<android.graphics.pdf.PdfDocument.Page: android.graphics.Canvas getCanvas()> -> _SOURCE_
<android.graphics.pdf.PdfDocument.Page: android.graphics.pdf.PdfDocument.PageInfo getInfo()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer.Page: int getHeight()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer.Page: int getIndex()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer.Page: int getWidth()> -> _SOURCE_
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setBreakStrategy(int)> -> _SINK_
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setHyphenationFrequency(int)> -> _SINK_
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setIndents(int[])> -> _SINK_
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setJustificationMode(int)> -> _SINK_
<android.graphics.text.LineBreaker: android.graphics.text.LineBreaker.Result computeLineBreaks(android.graphics.text.MeasuredText,android.graphics.text.LineBreaker.ParagraphConstraints,int)> -> _SINK_
<android.graphics.fonts.SystemFonts: Set<Font> getAvailableFonts()> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: int getEndLineHyphenEdit(int)> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: float getLineAscent(int)> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: int getLineBreakOffset(int)> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: int getLineCount()> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: float getLineDescent(int)> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: float getLineWidth(int)> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: int getStartLineHyphenEdit(int)> -> _SOURCE_
<android.graphics.text.LineBreaker.Result: boolean hasLineTab(int)> -> _SOURCE_
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder appendStyleRun(android.graphics.Paint,LineBreakConfig,int,boolean)> -> _SINK_
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder appendStyleRun(android.graphics.Paint,int,boolean)> -> _SINK_
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText build()> -> _SINK_
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder setComputeHyphenation(boolean)> -> _SINK_
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder setComputeHyphenation(int)> -> _SINK_
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder setComputeLayout(boolean)> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: float getAdvance()> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: float getAscent()> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: android.graphics.fonts.Font getFont(int)> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: int getGlyphId(int)> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: float getGlyphX(int)> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: float getGlyphY(int)> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: float getOffsetX()> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: float getOffsetY()> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: int glyphCount()> -> _SOURCE_
<android.graphics.text.PositionedGlyphs: java.lang.String toString()> -> _SOURCE_
<android.graphics.Camera: boolean enableShutterSound(boolean)> -> _SINK_
<android.graphics.Camera: void getCameraInfo(int,android.hardware.Camera.CameraInfo)> -> _SOURCE_
<android.graphics.Camera: int getNumberOfCameras()> -> _SOURCE_
<android.graphics.Camera: android.hardware.Camera.Parameters getParameters()> -> _SOURCE_
<android.graphics.Camera: void setAutoFocusMoveCallback(android.hardware.Camera.AutoFocusMoveCallback)> -> _SINK_
<android.graphics.Camera: void setParameters(android.hardware.Camera.Parameters)> -> _SINK_
<android.graphics.Camera: void setPreviewDisplay(android.view.SurfaceHolder)> -> _SINK_
<android.graphics.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)> -> _SINK_
<android.graphics.Camera: void startFaceDetection()> -> _SOURCE_
<android.graphics.Camera: void startSmoothZoom(int)> -> _SOURCE_
<android.graphics.Camera: void takePicture(android.hardware.Camera.ShutterCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback)> -> _SINK_
<android.graphics.text.LineBreaker.ParagraphConstraints: float getDefaultTabStop()> -> _SOURCE_
<android.graphics.text.LineBreaker.ParagraphConstraints: float getFirstWidth()> -> _SOURCE_
<android.graphics.text.LineBreaker.ParagraphConstraints: int getFirstWidthLineCount()> -> _SOURCE_
<android.graphics.text.LineBreaker.ParagraphConstraints: float[] getTabStops()> -> _SOURCE_
<android.graphics.text.LineBreaker.ParagraphConstraints: float getWidth()> -> _SOURCE_
<android.graphics.text.LineBreaker.ParagraphConstraints: void setIndent(float,int)> -> _SINK_
<android.graphics.text.LineBreaker.ParagraphConstraints: void setTabStops(float[],float)> -> _SINK_
<android.graphics.text.LineBreaker.ParagraphConstraints: void setWidth(float)> -> _SINK_
<android.hardware.Camera.FaceDetectionListener: void onFaceDetection(Face[],android.graphics.Camera)> -> _SOURCE_
<android.hardware.Camera.Area: boolean equals(java.lang.Object)> -> _SOURCE_
<android.graphics.pdf.PdfDocument.PageInfo.Builder: android.graphics.pdf.PdfDocument.PageInfo.Builder setContentRect(android.graphics.Rect)> -> _SINK_
<android.hardware.BatteryState: float getCapacity()> -> _SOURCE_
<android.hardware.BatteryState: int getStatus()> -> _SOURCE_
<android.hardware.BatteryState: boolean isPresent()> -> _SOURCE_
<android.graphics.fonts.FontVariationAxis: float getStyleValue()> -> _SOURCE_
<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()> -> _SOURCE_
<android.graphics.fonts.FontVariationAxis: String toFontVariationSettings(FontVariationAxis[])> -> _SINK_
<android.graphics.fonts.FontVariationAxis: java.lang.String toString()> -> _SOURCE_
<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)> -> _SOURCE_
<android.graphics.text.MeasuredText: float getCharWidthAt(int)> -> _SOURCE_
<android.graphics.text.MeasuredText: void getFontMetricsInt(int,int,android.graphics.Paint.FontMetricsInt)> -> _SOURCE_
<android.graphics.text.MeasuredText: float getWidth(int,int)> -> _SOURCE_
<android.hardware.HardwareBuffer: int describeContents()> -> _SOURCE_
<android.hardware.HardwareBuffer: int getFormat()> -> _SOURCE_
<android.hardware.HardwareBuffer: int getHeight()> -> _SOURCE_
<android.hardware.HardwareBuffer: int getLayers()> -> _SOURCE_
<android.hardware.HardwareBuffer: long getUsage()> -> _SOURCE_
<android.hardware.HardwareBuffer: int getWidth()> -> _SOURCE_
<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)> -> _SOURCE_
<android.hardware.ConsumerIrManager: CarrierFrequencyRange[] getCarrierFrequencies()> -> _SOURCE_
<android.hardware.ConsumerIrManager: void transmit(int,int[])> -> _SINK_
<android.hardware.SensorEventCallback: void onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo)> -> _SINK_
<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)> -> _SINK_
<android.hardware.SensorDirectChannel: boolean isOpen()> -> _SOURCE_
<android.hardware.SensorPrivacyManager: boolean supportsSensorToggle(int)> -> _SOURCE_
<android.hardware.SensorPrivacyManager: boolean supportsSensorToggle(int,int)> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: int canAuthenticate()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: int canAuthenticate(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.BiometricManager.Strings getStrings(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricManager.Strings: java.lang.CharSequence getButtonLabel()> -> _SINK_
<android.hardware.biometrics.BiometricManager.Strings: java.lang.CharSequence getPromptMessage()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager.Strings: java.lang.CharSequence getSettingName()> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)> -> _SINK_
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)> -> _SINK_
<android.hardware.SensorManager: float getAltitude(float,float)> -> _SOURCE_
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)> -> _SOURCE_
<android.hardware.SensorManager: List<Sensor> getDynamicSensorList(int)> -> _SOURCE_
<android.hardware.SensorManager: float getInclination(float[])> -> _SOURCE_
<android.hardware.SensorManager: float[] getOrientation(float[],float[])> -> _SOURCE_
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])> -> _SOURCE_
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])> -> _SOURCE_
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])> -> _SOURCE_
<android.hardware.SensorManager: List<Sensor> getSensorList(int)> -> _SOURCE_
<android.hardware.SensorManager: int getSensors()> -> _SOURCE_
<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()> -> _SOURCE_
<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback)> -> _SINK_
<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback,android.os.Handler)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.AuthenticationResult: int getAuthenticationType()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.AuthenticationResult: android.hardware.biometrics.BiometricPrompt.CryptoObject getCryptoObject()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: int getAllowedAuthenticators()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.hardware.ConsumerIrManager.CarrierFrequencyRange: int getMaxFrequency()> -> _SOURCE_
<android.hardware.ConsumerIrManager.CarrierFrequencyRange: int getMinFrequency()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setAllowedAuthenticators(int)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setConfirmationRequired(boolean)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setDeviceCredentialAllowed(boolean)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: PresentationSession getPresentationSession()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: android.content.pm.Signature getSignature()> -> _SOURCE_
<android.hardware.camera2.CameraExtensionSession: int capture(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession.ExtensionCaptureCallback)> -> _SINK_
<android.hardware.camera2.CameraExtensionSession: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession: List<CaptureRequest> createHighSpeedRequestList(android.hardware.camera2.CaptureRequest)> -> _SINK_
<android.hardware.camera2.CameraManager.TorchCallback: void onTorchModeChanged(java.lang.String,boolean)> -> _SINK_
<android.hardware.camera2.CameraManager.TorchCallback: void onTorchModeUnavailable(java.lang.String)> -> _SINK_
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraExtensionCharacteristics getCameraExtensionCharacteristics(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CameraManager: String[] getCameraIdList()> -> _SOURCE_
<android.hardware.camera2.CameraManager: Set<Set<String>> getConcurrentCameraIds()> -> _SOURCE_
<android.hardware.camera2.CameraManager: int getTorchStrengthLevel(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler)> -> _SOURCE_
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice.StateCallback)> -> _SOURCE_
<android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)> -> _SINK_
<android.hardware.camera2.CameraManager: void turnOnTorchWithStrengthLevel(java.lang.String,int)> -> _SINK_
<android.hardware.camera2.CameraCaptureSession: int captureBurst(List<CaptureRequest>,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)> -> _SINK_
<android.hardware.camera2.CameraCaptureSession: int captureBurstRequests(List<CaptureRequest>,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.CaptureCallback)> -> _SINK_
<android.hardware.camera2.CameraCaptureSession: CameraDevice getDevice()> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession: Surface getInputSurface()> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession: boolean supportsOfflineProcessing(android.view.Surface)> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraOfflineSession switchToOffline(Collection<Surface>,java.util.concurrent.Executor,android.hardware.camera2.CameraOfflineSession.CameraOfflineSessionCallback)> -> _SINK_
<android.hardware.camera2.CameraCaptureSession: void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)> -> _SINK_
<android.hardware.camera2.CameraCharacteristics.Key: java.lang.String getName()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics.Key: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest.Key: java.lang.String getName()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest.Key: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: long getFrameNumber()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: int getReason()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: int getSequenceId()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: boolean wasImageCaptured()> -> _SOURCE_
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest.Builder createCaptureRequest(int,Set<String>)> -> _SINK_
<android.hardware.camera2.CameraDevice: CaptureRequest.Builder createCaptureRequest(int)> -> _SINK_
<android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)> -> _SOURCE_
<android.hardware.camera2.CameraDevice: void createCaptureSession(List<Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)> -> _SINK_
<android.hardware.camera2.CameraDevice: void createCaptureSessionByOutputConfigurations(List<OutputConfiguration>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)> -> _SINK_
<android.hardware.camera2.CameraDevice: void createConstrainedHighSpeedCaptureSession(List<Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)> -> _SINK_
<android.hardware.camera2.CameraDevice: void createExtensionSession(android.hardware.camera2.params.ExtensionSessionConfiguration)> -> _SINK_
<android.hardware.camera2.CameraDevice: CaptureRequest.Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)> -> _SOURCE_
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,List<Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)> -> _SINK_
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,List<OutputConfiguration>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)> -> _SINK_
<android.hardware.camera2.CameraDevice: int getCameraAudioRestriction()> -> _SOURCE_
<android.hardware.camera2.CameraDevice: String getId()> -> _SOURCE_
<android.hardware.camera2.CameraDevice: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)> -> _SOURCE_
<android.hardware.camera2.CameraDevice: void setCameraAudioRestriction(int)> -> _SINK_
<android.hardware.camera2.CaptureRequest.Builder: void addTarget(android.view.Surface)> -> _SINK_
<android.hardware.camera2.CaptureRequest.Builder: android.hardware.camera2.CaptureRequest build()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest.Builder:  T get(Key)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest.Builder:  T getPhysicalCameraKey(Key,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest.Builder: void removeTarget(android.view.Surface)> -> _SINK_
<android.hardware.camera2.CaptureRequest.Builder:  void set(Key,T)> -> _SINK_
<android.hardware.camera2.CaptureRequest.Builder:  CaptureRequest.Builder setPhysicalCameraKey(Key,T,java.lang.String)> -> _SINK_
<android.hardware.camera2.CaptureRequest.Builder: void setTag(java.lang.Object)> -> _SINK_
<android.hardware.camera2.CameraCharacteristics:  T get(Key)> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: List<Key<?>> getAvailableCaptureRequestKeys()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: List<Key<?>> getAvailableCaptureResultKeys()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: List<Key<?>> getAvailableSessionKeys()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: List<Key<?>> getKeys()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: List<Key<?>> getKeysNeedingPermission()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: Set<String> getPhysicalCameraIds()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int)> -> _SOURCE_
<android.hardware.camera2.CaptureResult.Key: java.lang.String getName()> -> _SOURCE_
<android.hardware.camera2.CaptureResult.Key: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.MultiResolutionImageReader: android.hardware.camera2.params.MultiResolutionStreamInfo getStreamInfoForImageReader(android.media.ImageReader)> -> _SOURCE_
<android.hardware.camera2.MultiResolutionImageReader: android.view.Surface getSurface()> -> _SOURCE_
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setDescription(java.lang.String)> -> _SINK_
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setLocation(android.location.Location)> -> _SINK_
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setOrientation(int)> -> _SINK_
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setThumbnail(android.media.Image)> -> _SINK_
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setThumbnail(android.graphics.Bitmap)> -> _SINK_
<android.hardware.camera2.DngCreator: void writeByteBuffer(java.io.OutputStream,android.util.Size,java.nio.ByteBuffer,long)> -> _SINK_
<android.hardware.camera2.DngCreator: void writeImage(java.io.OutputStream,android.media.Image)> -> _SINK_
<android.hardware.camera2.DngCreator: void writeInputStream(java.io.OutputStream,android.util.Size,java.io.InputStream,long)> -> _SINK_
<android.hardware.camera2.CameraExtensionCharacteristics: Set<Key> getAvailableCaptureRequestKeys(int)> -> _SOURCE_
<android.hardware.camera2.CameraExtensionCharacteristics: Set<Key> getAvailableCaptureResultKeys(int)> -> _SOURCE_
<android.hardware.camera2.CameraExtensionCharacteristics: Range<Long> getEstimatedCaptureLatencyRangeMillis(int,android.util.Size,int)> -> _SOURCE_
<android.hardware.camera2.CameraExtensionCharacteristics: List<Size> getExtensionSupportedSizes(int,int)> -> _SOURCE_
<android.hardware.camera2.CameraExtensionCharacteristics:  List<Size> getExtensionSupportedSizes(int,Class)> -> _SINK_
<android.hardware.camera2.CameraExtensionCharacteristics: List<Integer> getSupportedExtensions()> -> _SOURCE_
<android.hardware.camera2.params.DeviceStateSensorOrientationMap: int getSensorOrientation(long)> -> _SOURCE_
<android.hardware.camera2.params.ColorSpaceTransform: android.util.Rational getElement(int,int)> -> _SOURCE_
<android.hardware.camera2.params.ColorSpaceTransform: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.Capability: boolean equals(java.lang.Object)> -> _SOURCE_
<android.hardware.camera2.params.Capability: android.util.Size getMaxStreamingSize()> -> _SOURCE_
<android.hardware.camera2.params.Capability: int getMode()> -> _SINK_
<android.hardware.camera2.params.Capability: Range<Float> getZoomRatioRange()> -> _SOURCE_
<android.hardware.camera2.params.Capability: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: int getColumnCount()> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: float getGainFactor(int,int,int)> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: android.hardware.camera2.params.RggbChannelVector getGainFactorVector(int,int)> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: int getRowCount()> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.hardware.camera2.params.ExtensionSessionConfiguration: int getExtension()> -> _SOURCE_
<android.hardware.camera2.params.ExtensionSessionConfiguration: List<OutputConfiguration> getOutputConfigurations()> -> _SOURCE_
<android.hardware.camera2.params.ExtensionSessionConfiguration: android.hardware.camera2.CameraExtensionSession.StateCallback getStateCallback()> -> _SOURCE_
<android.hardware.camera2.CameraMetadata: List<TKey> getKeys()> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Rect getBounds()> -> _SOURCE_
<android.hardware.camera2.params.Face: int getId()> -> _SINK_
<android.hardware.camera2.params.Face: android.graphics.Point getLeftEyePosition()> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()> -> _SOURCE_
<android.hardware.camera2.params.Face: int getScore()> -> _SOURCE_
<android.hardware.camera2.params.Face: java.lang.String toString()> -> _SINK_
<android.hardware.camera2.params.MandatoryStreamCombination: java.lang.CharSequence getDescription()> -> _SINK_
<android.hardware.camera2.params.MandatoryStreamCombination: List<MandatoryStreamCombination.MandatoryStreamInformation> getStreamsInformation()> -> _SINK_
<android.hardware.camera2.params.BlackLevelPattern: void copyTo(int[],int)> -> _SINK_
<android.hardware.camera2.params.BlackLevelPattern: int getOffsetForIndex(int,int)> -> _SOURCE_
<android.hardware.camera2.params.BlackLevelPattern: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: int describeContents()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest:  T get(Key)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: List<Key<?>> getKeys()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: int getHeight()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: int getWidth()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: int getX()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: int getY()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: int[] getInputFormats()> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: Collection<MultiResolutionStreamInfo> getInputInfo(int)> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: int[] getOutputFormats()> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: Collection<MultiResolutionStreamInfo> getOutputInfo(int)> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: Size[] getHighResolutionOutputSizes(int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: Range[]<Integer> getHighSpeedVideoFpsRanges()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: Range[]<Integer> getHighSpeedVideoFpsRangesFor(android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: Size[] getHighSpeedVideoSizes()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: Size[] getHighSpeedVideoSizesFor(Range<Integer>)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()> -> _SINK_
<android.hardware.camera2.params.StreamConfigurationMap: Size[] getInputSizes(int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap:  long getOutputMinFrameDuration(Class,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: Size[] getOutputSizes(int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap:  Size[] getOutputSizes(Class)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap:  long getOutputStallDuration(Class,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.TonemapCurve: void copyColorCurve(int,float[],int)> -> _SINK_
<android.hardware.camera2.params.TonemapCurve: android.graphics.PointF getPoint(int,int)> -> _SOURCE_
<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)> -> _SOURCE_
<android.hardware.camera2.params.TonemapCurve: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamInfo: int getHeight()> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamInfo: java.lang.String getPhysicalCameraId()> -> _SOURCE_
<android.hardware.camera2.params.MultiResolutionStreamInfo: int getWidth()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: void addSensorPixelModeUsed(int)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void addSurface(android.view.Surface)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: int describeContents()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: void enableSurfaceSharing()> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: int getDynamicRangeProfile()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getMaxSharedSurfaceCount()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getMirrorMode()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getStreamUseCase()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getSurfaceGroupId()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: List<Surface> getSurfaces()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getTimestampBase()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: void removeSensorPixelModeUsed(int)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void removeSurface(android.view.Surface)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void setDynamicRangeProfile(int)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void setMirrorMode(int)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void setPhysicalCameraId(java.lang.String)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void setStreamUseCase(int)> -> _SINK_
<android.hardware.camera2.params.OutputConfiguration: void setTimestampBase(int)> -> _SINK_
<android.hardware.camera2.params.OisSample: long getTimestamp()> -> _SOURCE_
<android.hardware.camera2.params.OisSample: float getXshift()> -> _SOURCE_
<android.hardware.camera2.params.OisSample: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.InputConfiguration: int getFormat()> -> _SOURCE_
<android.hardware.camera2.params.InputConfiguration: int getHeight()> -> _SOURCE_
<android.hardware.camera2.params.InputConfiguration: int getWidth()> -> _SOURCE_
<android.hardware.camera2.params.InputConfiguration: boolean isMultiResolution()> -> _SOURCE_
<android.hardware.camera2.params.InputConfiguration: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: int get10BitFormat()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: List<Size> getAvailableSizes()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: int getFormat()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: int getStreamUseCase()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: boolean is10BitCapable()> -> _SINK_
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)> -> _SOURCE_
<android.hardware.display.DisplayManager: Display[] getDisplays()> -> _SOURCE_
<android.hardware.display.DisplayManager: Display[] getDisplays(java.lang.String)> -> _SOURCE_
<android.hardware.display.DisplayManager: int getMatchContentFrameRateUserPreference()> -> _SOURCE_
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)> -> _SOURCE_
<android.hardware.input.InputManager: int[] getInputDeviceIds()> -> _SOURCE_
<android.hardware.input.InputManager: float getMaximumObscuringOpacityForTouch()> -> _SOURCE_
<android.hardware.lights.Light: int getId()> -> _SOURCE_
<android.hardware.lights.Light: java.lang.String getName()> -> _SOURCE_
<android.hardware.lights.Light: int getOrdinal()> -> _SOURCE_
<android.hardware.lights.Light: int getType()> -> _SOURCE_
<android.hardware.lights.Light: boolean hasBrightnessControl()> -> _SINK_
<android.hardware.lights.Light: boolean hasRgbControl()> -> _SINK_
<android.hardware.lights.Light: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getBlue()> -> _SINK_
<android.hardware.camera2.params.RggbChannelVector: float getComponent(int)> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getGreenEven()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getGreenOdd()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getRed()> -> _SINK_
<android.hardware.camera2.params.RggbChannelVector: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int describeContents()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getId()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: android.hardware.usb.UsbInterface getInterface(int)> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getInterfaceCount()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getMaxPower()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: java.lang.String getName()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: boolean isRemoteWakeup()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: boolean isSelfPowered()> -> _SOURCE_
<android.hardware.lights.LightsRequest: List<LightState> getLightStates()> -> _SOURCE_
<android.hardware.lights.LightsRequest: java.util.Map getLightsAndStates()> -> _SINK_
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()> -> _SOURCE_
<android.hardware.lights.LightsRequest.Builder: android.hardware.lights.LightsRequest.Builder addLight(android.hardware.lights.Light,android.hardware.lights.LightState)> -> _SINK_
<android.hardware.lights.LightsRequest.Builder: android.hardware.lights.LightsRequest build()> -> _SINK_
<android.hardware.lights.LightsRequest.Builder: android.hardware.lights.LightsRequest.Builder clearLight(android.hardware.lights.Light)> -> _SINK_
<android.hardware.lights.LightsManager: LightState getLightState(android.hardware.lights.Light)> -> _SOURCE_
<android.hardware.lights.LightsManager: LightsManager.LightsSession openSession()> -> _SINK_
<android.hardware.lights.LightsManager.LightsSession: void requestLights(android.hardware.lights.LightsRequest)> -> _SINK_
<android.hardware.camera2.CaptureResult:  T get(Key)> -> _SOURCE_
<android.hardware.camera2.CaptureResult: java.lang.String getCameraId()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: long getFrameNumber()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: List<Key<?>> getKeys()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: int getSequenceId()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Size> getHighResolutionOutputSizes(int)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Range<Integer>> getHighSpeedVideoFpsRanges()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Range<Integer>> getHighSpeedVideoFpsRangesFor(android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Size> getHighSpeedVideoSizes()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Size> getHighSpeedVideoSizesFor(Range<Integer>)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Integer> getInputFormats()> -> _SINK_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Size> getInputSizes(int)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Integer> getOutputFormats()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap:  long getOutputMinFrameDuration(Class,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Size> getOutputSizes(int)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap:  Set<Size> getOutputSizes(Class)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap:  long getOutputStallDuration(Class,android.util.Size)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set<Integer> getValidOutputFormatsForInput(int)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(int)> -> _SOURCE_
<android.hardware.lights.LightState: int describeContents()> -> _SOURCE_
<android.hardware.lights.LightState: int getColor()> -> _SOURCE_
<android.hardware.lights.LightState: int getPlayerId()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int describeContents()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getAddress()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getAttributes()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getDirection()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getInterval()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getType()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()> -> _SOURCE_
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()> -> _SOURCE_
<android.hardware.usb.UsbRequest: boolean initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)> -> _SINK_
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)> -> _SINK_
<android.hardware.lights.LightState.Builder: android.hardware.lights.LightState build()> -> _SINK_
<android.hardware.lights.LightState.Builder: android.hardware.lights.LightState.Builder setColor(int)> -> _SINK_
<android.hardware.lights.LightState.Builder: android.hardware.lights.LightState.Builder setPlayerId(int)> -> _SINK_
<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()> -> _SINK_
<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()> -> _SOURCE_
<android.hardware.display.VirtualDisplay: void resize(int,int,int)> -> _SINK_
<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)> -> _SINK_
<android.hardware.display.VirtualDisplay: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: int describeContents()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: boolean equals(java.lang.Object)> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: List<OutputConfiguration> getOutputConfigurations()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: int getSessionType()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession.StateCallback getStateCallback()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: void setSessionParameters(android.hardware.camera2.CaptureRequest)> -> _SINK_
<android.hardware.usb.UsbAccessory: int describeContents()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getModel()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int describeContents()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getAlternateSetting()> -> _SOURCE_
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getEndpointCount()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getId()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getInterfaceClass()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()> -> _SOURCE_
<android.hardware.usb.UsbInterface: java.lang.String getName()> -> _SOURCE_
<android.hardware.usb.UsbInterface: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int,int)> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: boolean setConfiguration(android.hardware.usb.UsbConfiguration)> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: boolean setInterface(android.hardware.usb.UsbInterface)> -> _SINK_
<android.hardware.fingerprint.FingerprintManager.AuthenticationResult: android.hardware.fingerprint.FingerprintManager.CryptoObject getCryptoObject()> -> _SOURCE_
<android.icu.lang.UCharacter: int charCount(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int codePointAt(char[],int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: int codePointAt(char[],int)> -> _SOURCE_
<android.icu.lang.UCharacter: int codePointAt(java.lang.CharSequence,int)> -> _SOURCE_
<android.icu.lang.UCharacter: int codePointCount(java.lang.CharSequence,int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: int codePointCount(char[],int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: int digit(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int digit(int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: String foldCase(java.lang.String,boolean)> -> _SOURCE_
<android.icu.lang.UCharacter: String foldCase(java.lang.String,int)> -> _SOURCE_
<android.icu.lang.UCharacter: char forDigit(int,int)> -> _SINK_
<android.icu.lang.UCharacter: VersionInfo getAge(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getCharFromExtendedName(java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: int getCharFromName(java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: int getCharFromNameAlias(java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: int getCodePoint(char)> -> _SOURCE_
<android.icu.lang.UCharacter: int getCombiningClass(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getDirection(int)> -> _SOURCE_
<android.icu.lang.UCharacter: byte getDirectionality(int)> -> _SOURCE_
<android.icu.lang.UCharacter: String getExtendedName(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getHanNumericValue(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getIntPropertyMaxValue(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getIntPropertyMinValue(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getIntPropertyValue(int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: String getName(int)> -> _SOURCE_
<android.icu.lang.UCharacter: String getName(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: String getNameAlias(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getNumericValue(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getPropertyEnum(java.lang.CharSequence)> -> _SOURCE_
<android.icu.lang.UCharacter: String getPropertyName(int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getPropertyValueEnum(int,java.lang.CharSequence)> -> _SOURCE_
<android.icu.lang.UCharacter: String getPropertyValueName(int,int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: int getType(int)> -> _SOURCE_
<android.icu.lang.UCharacter: double getUnicodeNumericValue(int)> -> _SOURCE_
<android.icu.lang.UCharacter: VersionInfo getUnicodeVersion()> -> _SOURCE_
<android.icu.lang.UCharacter: boolean hasBinaryProperty(int,int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isBMP(int)> -> _SINK_
<android.icu.lang.UCharacter: boolean isBaseForm(int)> -> _SINK_
<android.icu.lang.UCharacter: boolean isDigit(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isHighSurrogate(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isHighSurrogate(char)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isISOControl(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isLetter(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isLetterOrDigit(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isLowSurrogate(char)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isLowerCase(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isSpaceChar(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isSupplementaryCodePoint(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isTitleCase(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isUAlphabetic(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isULowercase(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isUUppercase(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isUWhiteSpace(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isValidCodePoint(int)> -> _SOURCE_
<android.icu.lang.UCharacter: boolean isWhitespace(int)> -> _SOURCE_
<android.icu.lang.UCharacter: char[] toChars(int)> -> _SOURCE_
<android.icu.lang.UCharacter: int toCodePoint(char,char)> -> _SOURCE_
<android.icu.lang.UCharacter: int toCodePoint(int,int)> -> _SINK_
<android.icu.lang.UCharacter: String toLowerCase(java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: int toLowerCase(int)> -> _SOURCE_
<android.icu.lang.UCharacter: String toLowerCase(android.icu.util.ULocale,java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: String toLowerCase(androidx.compose.ui.text.intl.Locale,java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: String toString(int)> -> _SOURCE_
<android.icu.lang.UCharacter: String toTitleCase(androidx.compose.ui.text.intl.Locale,java.lang.String,android.icu.text.BreakIterator,int)> -> _SOURCE_
<android.icu.lang.UCharacter: String toTitleCase(android.icu.util.ULocale,java.lang.String,android.icu.text.BreakIterator)> -> _SOURCE_
<android.icu.lang.UCharacter: String toTitleCase(java.lang.String,android.icu.text.BreakIterator)> -> _SOURCE_
<android.icu.lang.UCharacter: String toTitleCase(android.icu.util.ULocale,java.lang.String,android.icu.text.BreakIterator,int)> -> _SOURCE_
<android.icu.lang.UCharacter: String toTitleCase(androidx.compose.ui.text.intl.Locale,java.lang.String,android.icu.text.BreakIterator)> -> _SOURCE_
<android.icu.lang.UCharacter: int toTitleCase(int)> -> _SINK_
<android.icu.lang.UCharacter: String toUpperCase(androidx.compose.ui.text.intl.Locale,java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: String toUpperCase(android.icu.util.ULocale,java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter: String toUpperCase(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: List<CaptureResult> getPartialResults()> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraTotalResults()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager.CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager.CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager.CryptoObject: android.content.pm.Signature getSignature()> -> _SOURCE_
<android.hardware.usb.UsbManager: UsbAccessory[] getAccessoryList()> -> _SOURCE_
<android.hardware.usb.UsbManager: Hashjava.util.Map getDeviceList()> -> _SOURCE_
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbAccessory)> -> _SOURCE_
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbDevice)> -> _SOURCE_
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SOURCE_
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)> -> _SOURCE_
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)> -> _SOURCE_
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)> -> _SOURCE_
<android.icu.lang.UCharacterCategory: String toString(int)> -> _SOURCE_
<android.icu.lang.UCharacterDirection: String toString(int)> -> _SOURCE_
<android.icu.lang.UScript: boolean breaksBetweenLetters(int)> -> _SOURCE_
<android.icu.lang.UScript: int[] getCode(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.lang.UScript: int[] getCode(java.lang.String)> -> _SOURCE_
<android.icu.lang.UScript: int[] getCode(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.lang.UScript: int getCodeFromName(java.lang.String)> -> _SOURCE_
<android.icu.lang.UScript: String getName(int)> -> _SOURCE_
<android.icu.lang.UScript: String getSampleString(int)> -> _SOURCE_
<android.icu.lang.UScript: int getScript(int)> -> _SOURCE_
<android.icu.lang.UScript: int getScriptExtensions(int,java.util.BitSet)> -> _SINK_
<android.icu.lang.UScript: String getShortName(int)> -> _SOURCE_
<android.icu.lang.UScript: UScript.ScriptUsage getUsage(int)> -> _SOURCE_
<android.icu.lang.UScript: boolean hasScript(int,int)> -> _SOURCE_
<android.icu.lang.UScript: boolean isRightToLeft(int)> -> _SOURCE_
<android.icu.number.LocalizedNumberFormatter: android.icu.number.FormattedNumber format(double)> -> _SINK_
<android.icu.number.LocalizedNumberFormatter: android.icu.number.FormattedNumber format(android.icu.util.Measure)> -> _SINK_
<android.icu.number.LocalizedNumberFormatter: android.icu.number.FormattedNumber format(long)> -> _SINK_
<android.icu.number.LocalizedNumberFormatter: android.icu.number.FormattedNumber format(java.lang.Number)> -> _SINK_
<android.icu.number.FormattedNumberRange: <A extends Appendable> A appendTo(A)> -> _SINK_
<android.icu.number.FormattedNumberRange: char charAt(int)> -> _SOURCE_
<android.icu.number.FormattedNumberRange: android.icu.math.BigDecimal getFirstBigDecimal()> -> _SOURCE_
<android.icu.number.FormattedNumberRange: android.icu.number.NumberRangeFormatter.RangeIdentityResult getIdentityResult()> -> _SOURCE_
<android.icu.number.FormattedNumberRange: android.icu.math.BigDecimal getSecondBigDecimal()> -> _SOURCE_
<android.icu.number.FormattedNumberRange: int length()> -> _SOURCE_
<android.icu.number.FormattedNumberRange: boolean nextPosition(android.icu.text.ConstrainedFieldPosition)> -> _SOURCE_
<android.icu.number.FormattedNumberRange: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.icu.number.FormattedNumberRange: java.text.AttributedCharacterIterator toCharacterIterator()> -> _SOURCE_
<android.icu.number.Notation: CompactNotation compactLong()> -> _SINK_
<android.icu.number.Notation: CompactNotation compactShort()> -> _SINK_
<android.icu.number.Notation: ScientificNotation engineering()> -> _SINK_
<android.icu.number.Notation: ScientificNotation scientific()> -> _SOURCE_
<android.icu.number.Notation: SimpleNotation simple()> -> _SINK_
<android.icu.number.LocalizedNumberRangeFormatter: android.icu.number.FormattedNumberRange formatRange(int,int)> -> _SINK_
<android.icu.number.LocalizedNumberRangeFormatter: android.icu.number.FormattedNumberRange formatRange(java.lang.Number,java.lang.Number)> -> _SINK_
<android.icu.number.LocalizedNumberRangeFormatter: android.icu.number.FormattedNumberRange formatRange(double,double)> -> _SINK_
<android.icu.lang.UCharacter.UnicodeBlock: UCharacter.UnicodeBlock forName(java.lang.String)> -> _SOURCE_
<android.icu.lang.UCharacter.UnicodeBlock: int getID()> -> _SOURCE_
<android.icu.lang.UCharacter.UnicodeBlock: UCharacter.UnicodeBlock getInstance(int)> -> _SOURCE_
<android.icu.lang.UCharacter.UnicodeBlock: UCharacter.UnicodeBlock of(int)> -> _SOURCE_
<android.icu.number.FractionPrecision: android.icu.number.Precision withMaxDigits(int)> -> _SINK_
<android.icu.number.FractionPrecision: android.icu.number.Precision withMinDigits(int)> -> _SINK_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal abs(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal abs()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal add(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal add(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int,int)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: double doubleValue()> -> _SOURCE_
<android.icu.math.BigDecimal: boolean equals(java.lang.Object)> -> _SOURCE_
<android.icu.math.BigDecimal: java.lang.String format(int,int)> -> _SOURCE_
<android.icu.math.BigDecimal: java.lang.String format(int,int,int,int,int,int)> -> _SOURCE_
<android.icu.math.BigDecimal: int hashCode()> -> _SOURCE_
<android.icu.math.BigDecimal: int intValue()> -> _SOURCE_
<android.icu.math.BigDecimal: int intValueExact()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal max(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal max(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal min(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal min(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal negate()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal negate(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal plus(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal plus()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal pow(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal pow(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: int scale()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int,int)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int)> -> _SOURCE_
<android.icu.math.BigDecimal: short shortValueExact()> -> _SINK_
<android.icu.math.BigDecimal: int signum()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal toBigDecimal()> -> _SOURCE_
<android.icu.math.BigDecimal: java.math.BigInteger toBigInteger()> -> _SOURCE_
<android.icu.math.BigDecimal: java.math.BigInteger toBigIntegerExact()> -> _SOURCE_
<android.icu.math.BigDecimal: char[] toCharArray()> -> _SOURCE_
<android.icu.math.BigDecimal: java.lang.String toString()> -> _SOURCE_
<android.icu.number.NumberFormatter: LocalizedNumberFormatter withLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.number.NumberFormatter: LocalizedNumberFormatter withLocale(android.icu.util.ULocale)> -> _SINK_
<android.icu.math.MathContext: int getDigits()> -> _SOURCE_
<android.icu.math.MathContext: int getForm()> -> _SOURCE_
<android.icu.math.MathContext: boolean getLostDigits()> -> _SOURCE_
<android.icu.math.MathContext: int getRoundingMode()> -> _SOURCE_
<android.icu.math.MathContext: java.lang.String toString()> -> _SOURCE_
<android.icu.number.Scale: Scale byBigDecimal(android.icu.math.BigDecimal)> -> _SINK_
<android.icu.number.Scale: Scale byDouble(double)> -> _SINK_
<android.icu.number.Scale: Scale byDoubleAndPowerOfTen(double,int)> -> _SINK_
<android.icu.number.Scale: Scale none()> -> _SINK_
<android.icu.number.Scale: Scale powerOfTen(int)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T decimal(android.icu.number.NumberFormatter.DecimalSeparatorDisplay)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T grouping(android.icu.number.NumberFormatter.GroupingStrategy)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T integerWidth(android.icu.number.IntegerWidth)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T notation(android.icu.number.Notation)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T perUnit(android.icu.util.MeasureUnit)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T precision(android.icu.number.Precision)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T roundingMode(java.math.RoundingMode)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T scale(android.icu.number.Scale)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T sign(android.icu.number.NumberFormatter.SignDisplay)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T symbols(android.icu.text.NumberingSystem)> -> _SOURCE_
<android.icu.number.NumberFormatterSettings: T symbols(android.icu.text.DecimalFormatSymbols)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T unit(android.icu.util.MeasureUnit)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T unitWidth(android.icu.number.NumberFormatter.UnitWidth)> -> _SINK_
<android.icu.number.NumberFormatterSettings: T usage(java.lang.String)> -> _SINK_
<android.icu.number.Precision: CurrencyPrecision currency(android.icu.util.Currency.CurrencyUsage)> -> _SINK_
<android.icu.number.Precision: Precision fixedSignificantDigits(int)> -> _SOURCE_
<android.icu.number.Precision: Precision increment(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.number.Precision: FractionPrecision integer()> -> _SOURCE_
<android.icu.number.Precision: Precision maxSignificantDigits(int)> -> _SINK_
<android.icu.number.Precision: FractionPrecision minFraction(int)> -> _SINK_
<android.icu.number.Precision: FractionPrecision minMaxFraction(int,int)> -> _SINK_
<android.icu.number.Precision: Precision minMaxSignificantDigits(int,int)> -> _SINK_
<android.icu.number.Precision: Precision minSignificantDigits(int)> -> _SOURCE_
<android.icu.number.Precision: Precision unlimited()> -> _SOURCE_
<android.icu.number.ScientificNotation: android.icu.number.ScientificNotation withMinExponentDigits(int)> -> _SINK_
<android.icu.number.NumberRangeFormatterSettings: T collapse(android.icu.number.NumberRangeFormatter.RangeCollapse)> -> _SINK_
<android.icu.number.NumberRangeFormatterSettings: T identityFallback(android.icu.number.NumberRangeFormatter.RangeIdentityFallback)> -> _SINK_
<android.icu.number.NumberRangeFormatterSettings: T numberFormatterBoth(android.icu.number.UnlocalizedNumberFormatter)> -> _SINK_
<android.icu.number.NumberRangeFormatterSettings: T numberFormatterFirst(android.icu.number.UnlocalizedNumberFormatter)> -> _SINK_
<android.icu.number.NumberRangeFormatterSettings: T numberFormatterSecond(android.icu.number.UnlocalizedNumberFormatter)> -> _SINK_
<android.icu.number.UnlocalizedNumberRangeFormatter: android.icu.number.LocalizedNumberRangeFormatter locale(android.icu.util.ULocale)> -> _SINK_
<android.icu.number.UnlocalizedNumberRangeFormatter: android.icu.number.LocalizedNumberRangeFormatter locale(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.number.IntegerWidth: IntegerWidth zeroFillTo(int)> -> _SINK_
<android.icu.number.UnlocalizedNumberFormatter: android.icu.number.LocalizedNumberFormatter locale(android.icu.util.ULocale)> -> _SINK_
<android.icu.number.UnlocalizedNumberFormatter: android.icu.number.LocalizedNumberFormatter locale(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.number.FormattedNumber: <A extends Appendable> A appendTo(A)> -> _SINK_
<android.icu.number.FormattedNumber: char charAt(int)> -> _SOURCE_
<android.icu.number.FormattedNumber: android.icu.util.MeasureUnit getOutputUnit()> -> _SOURCE_
<android.icu.number.FormattedNumber: int length()> -> _SOURCE_
<android.icu.number.FormattedNumber: boolean nextPosition(android.icu.text.ConstrainedFieldPosition)> -> _SOURCE_
<android.icu.number.FormattedNumber: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.icu.number.FormattedNumber: java.text.AttributedCharacterIterator toCharacterIterator()> -> _SOURCE_
<android.icu.number.FormattedNumber: java.lang.String toString()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.Bucket: java.lang.String getLabel()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.Bucket: int size()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.Bucket: java.lang.String toString()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.ImmutableIndex: Bucket<V> getBucket(int)> -> _SOURCE_
<android.icu.text.AlphabeticIndex.ImmutableIndex: int getBucketCount()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.ImmutableIndex: int getBucketIndex(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title adjustToCased()> -> _SOURCE_
<android.icu.text.CaseMap.Title: java.lang.String apply(androidx.compose.ui.text.intl.Locale,android.icu.text.BreakIterator,java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.CaseMap.Title: <A extends Appendable> A apply(androidx.compose.ui.text.intl.Locale,android.icu.text.BreakIterator,java.lang.CharSequence,A,android.icu.text.Edits)> -> _SOURCE_
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title sentences()> -> _SOURCE_
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title wholeString()> -> _SOURCE_
<android.icu.text.BidiClassifier: java.lang.Object getContext()> -> _SOURCE_
<android.icu.text.BidiClassifier: void setContext(java.lang.Object)> -> _SINK_
<android.icu.text.CaseMap.Fold: java.lang.String apply(java.lang.CharSequence)> -> _SINK_
<android.icu.text.CaseMap.Fold: android.icu.text.CaseMap.Fold turkic()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> addLabels(Locale[])> -> _SINK_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> addLabels(android.icu.text.UnicodeSet)> -> _SINK_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> addLabels(ULocale[])> -> _SINK_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> addRecord(java.lang.CharSequence,V)> -> _SINK_
<android.icu.text.AlphabeticIndex: int getBucketCount()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: int getBucketIndex(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.AlphabeticIndex: List<String> getBucketLabels()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: java.lang.String getInflowLabel()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: int getMaxLabelCount()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: java.lang.String getOverflowLabel()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: int getRecordCount()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: java.lang.String getUnderflowLabel()> -> _SOURCE_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> setInflowLabel(java.lang.String)> -> _SINK_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> setMaxLabelCount(int)> -> _SINK_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> setOverflowLabel(java.lang.String)> -> _SINK_
<android.icu.text.AlphabeticIndex: AlphabeticIndex<V> setUnderflowLabel(java.lang.String)> -> _SINK_
<android.icu.text.CaseMap.Upper: java.lang.String apply(androidx.compose.ui.text.intl.Locale,java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.Bidi: boolean baseIsLeftToRight()> -> _SOURCE_
<android.icu.text.Bidi: int countParagraphs()> -> _SOURCE_
<android.icu.text.Bidi: int countRuns()> -> _SOURCE_
<android.icu.text.Bidi: byte getBaseDirection(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.Bidi: android.icu.text.BidiClassifier getCustomClassifier()> -> _SOURCE_
<android.icu.text.Bidi: int getCustomizedClass(int)> -> _SOURCE_
<android.icu.text.Bidi: byte getDirection()> -> _SOURCE_
<android.icu.text.Bidi: int getLength()> -> _SOURCE_
<android.icu.text.Bidi: byte getLevelAt(int)> -> _SOURCE_
<android.icu.text.Bidi: byte[] getLevels()> -> _SOURCE_
<android.icu.text.Bidi: int getLogicalIndex(int)> -> _SOURCE_
<android.icu.text.Bidi: int[] getLogicalMap()> -> _SOURCE_
<android.icu.text.Bidi: byte getParaLevel()> -> _SOURCE_
<android.icu.text.Bidi: android.icu.text.BidiRun getParagraph(int)> -> _SOURCE_
<android.icu.text.Bidi: android.icu.text.BidiRun getParagraphByIndex(int)> -> _SOURCE_
<android.icu.text.Bidi: int getParagraphIndex(int)> -> _SOURCE_
<android.icu.text.Bidi: int getProcessedLength()> -> _SOURCE_
<android.icu.text.Bidi: int getReorderingMode()> -> _SINK_
<android.icu.text.Bidi: int getReorderingOptions()> -> _SINK_
<android.icu.text.Bidi: int getResultLength()> -> _SOURCE_
<android.icu.text.Bidi: int getRunCount()> -> _SOURCE_
<android.icu.text.Bidi: char[] getText()> -> _SOURCE_
<android.icu.text.Bidi: java.lang.String getTextAsString()> -> _SOURCE_
<android.icu.text.Bidi: int getVisualIndex(int)> -> _SOURCE_
<android.icu.text.Bidi: int[] getVisualMap()> -> _SOURCE_
<android.icu.text.Bidi: android.icu.text.BidiRun getVisualRun(int)> -> _SOURCE_
<android.icu.text.Bidi: boolean isLeftToRight()> -> _SOURCE_
<android.icu.text.Bidi: boolean isRightToLeft()> -> _SOURCE_
<android.icu.text.Bidi: void setContext(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.text.Bidi: void setCustomClassifier(android.icu.text.BidiClassifier)> -> _SOURCE_
<android.icu.text.Bidi: void setInverse(boolean)> -> _SINK_
<android.icu.text.Bidi: android.icu.text.Bidi setLine(int,int)> -> _SINK_
<android.icu.text.Bidi: void setPara(char[],byte,byte[])> -> _SINK_
<android.icu.text.Bidi: void setPara(java.lang.String,byte,byte[])> -> _SINK_
<android.icu.text.Bidi: void setReorderingMode(int)> -> _SINK_
<android.icu.text.Bidi: void setReorderingOptions(int)> -> _SINK_
<android.icu.text.Bidi: java.lang.String writeReordered(int)> -> _SINK_
<android.icu.text.BidiRun: byte getDirection()> -> _SOURCE_
<android.icu.text.BidiRun: byte getEmbeddingLevel()> -> _SOURCE_
<android.icu.text.BidiRun: int getLength()> -> _SOURCE_
<android.icu.text.BidiRun: int getLimit()> -> _SOURCE_
<android.icu.text.BidiRun: int getStart()> -> _SOURCE_
<android.icu.text.BidiRun: boolean isOddRun()> -> _SOURCE_
<android.icu.text.BidiRun: java.lang.String toString()> -> _SINK_
<android.icu.text.Collator: android.icu.text.Collator freeze()> -> _SINK_
<android.icu.text.Collator: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.Collator: ULocale[] getAvailableULocales()> -> _SOURCE_
<android.icu.text.Collator: int getDecomposition()> -> _SOURCE_
<android.icu.text.Collator: String getDisplayName(androidx.compose.ui.text.intl.Locale,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.Collator: String getDisplayName(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.Collator: String getDisplayName(android.icu.util.ULocale,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.Collator: String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.Collator: Collator getInstance()> -> _SOURCE_
<android.icu.text.Collator: Collator getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.Collator: Collator getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.Collator: String[] getKeywordValues(java.lang.String)> -> _SOURCE_
<android.icu.text.Collator: String[] getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)> -> _SOURCE_
<android.icu.text.Collator: String[] getKeywords()> -> _SOURCE_
<android.icu.text.Collator: int[] getReorderCodes()> -> _SINK_
<android.icu.text.Collator: int getStrength()> -> _SOURCE_
<android.icu.text.Collator: VersionInfo getUCAVersion()> -> _SOURCE_
<android.icu.text.Collator: int getVariableTop()> -> _SINK_
<android.icu.text.Collator: VersionInfo getVersion()> -> _SOURCE_
<android.icu.text.Collator: void setDecomposition(int)> -> _SINK_
<android.icu.text.Collator: android.icu.text.Collator setMaxVariable(int)> -> _SINK_
<android.icu.text.Collator: void setReorderCodes(int[])> -> _SINK_
<android.icu.text.Collator: void setStrength(int)> -> _SINK_
<android.icu.number.CurrencyPrecision: android.icu.number.Precision withCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.BreakIterator: int current()> -> _SOURCE_
<android.icu.text.BreakIterator: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.BreakIterator: int getRuleStatus()> -> _SOURCE_
<android.icu.text.BreakIterator: int getRuleStatusVec(int[])> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getSentenceInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getSentenceInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: CharacterIterator getText()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getTitleInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getTitleInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getTitleInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getWordInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getWordInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: int next(int)> -> _SINK_
<android.icu.text.CollationElementIterator: int getMaxExpansion(int)> -> _SOURCE_
<android.icu.text.CollationElementIterator: int getOffset()> -> _SOURCE_
<android.icu.text.CollationElementIterator: int next()> -> _SOURCE_
<android.icu.text.CollationElementIterator: int previous()> -> _SOURCE_
<android.icu.text.CollationElementIterator: void setOffset(int)> -> _SINK_
<android.icu.text.CollationElementIterator: void setText(java.lang.String)> -> _SINK_
<android.icu.text.CollationElementIterator: void setText(java.text.CharacterIterator)> -> _SINK_
<android.icu.text.CollationElementIterator: void setText(android.icu.text.UCharacterIterator)> -> _SINK_
<android.icu.text.CollationKey: android.icu.text.CollationKey getBound(int,int)> -> _SINK_
<android.icu.text.CollationKey: java.lang.String getSourceString()> -> _SOURCE_
<android.icu.text.CollationKey: int hashCode()> -> _SOURCE_
<android.icu.text.CollationKey: android.icu.text.CollationKey merge(android.icu.text.CollationKey)> -> _SINK_
<android.icu.text.CollationKey: byte[] toByteArray()> -> _SOURCE_
<android.icu.text.CompactDecimalFormat: CompactDecimalFormat getInstance(android.icu.util.ULocale,android.icu.text.CompactDecimalFormat.CompactStyle)> -> _SOURCE_
<android.icu.text.CompactDecimalFormat: CompactDecimalFormat getInstance(androidx.compose.ui.text.intl.Locale,android.icu.text.CompactDecimalFormat.CompactStyle)> -> _SOURCE_
<android.icu.text.CompactDecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.CompactDecimalFormat: android.icu.util.CurrencyAmount parseCurrency(java.lang.CharSequence,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.CaseMap.Lower: java.lang.String apply(androidx.compose.ui.text.intl.Locale,java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.DateFormat.Field: int getCalendarField()> -> _SOURCE_
<android.icu.text.DateFormat.Field: DateFormat.Field ofCalendarField(int)> -> _SOURCE_
<android.icu.text.DateIntervalInfo: void setFallbackIntervalPattern(java.lang.String)> -> _SINK_
<android.icu.text.DateIntervalInfo: void setIntervalPattern(java.lang.String,int,java.lang.String)> -> _SINK_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: <A extends Appendable> A appendTo(A)> -> _SINK_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: char charAt(int)> -> _SOURCE_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: int length()> -> _SOURCE_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: boolean nextPosition(android.icu.text.ConstrainedFieldPosition)> -> _SOURCE_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: java.text.AttributedCharacterIterator toCharacterIterator()> -> _SOURCE_
<android.icu.text.DateIntervalFormat.FormattedDateInterval: java.lang.String toString()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.Record: V getData()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.Record: java.lang.CharSequence getName()> -> _SOURCE_
<android.icu.text.AlphabeticIndex.Record: java.lang.String toString()> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.Object clone()> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String getAppendItemFormat(int)> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String getAppendItemName(int)> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: Set<String> getBaseSkeletons(Set<String>)> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String getBestPattern(java.lang.String,int)> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String getBestPattern(java.lang.String)> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String getDateTimeFormat()> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String getDecimal()> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: DateFormat.HourCycle getDefaultHourCycle()> -> _SINK_
<android.icu.text.DateTimePatternGenerator: java.lang.String getFieldDisplayName(int,android.icu.text.DateTimePatternGenerator.DisplayWidth)> -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: DateTimePatternGenerator getInstance()> -> _SINK_
<android.icu.text.DateTimePatternGenerator: DateTimePatternGenerator getInstance(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.DateTimePatternGenerator: DateTimePatternGenerator getInstance(android.icu.util.ULocale)> -> _SINK_
<android.icu.text.DateTimePatternGenerator: java.util.Map getSkeletons(java.util.Map -> _SOURCE_
<android.icu.text.DateTimePatternGenerator: java.lang.String replaceFieldTypes(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.text.DateTimePatternGenerator: java.lang.String replaceFieldTypes(java.lang.String,java.lang.String,int)> -> _SINK_
<android.icu.text.DateTimePatternGenerator: void setAppendItemName(int,java.lang.String)> -> _SINK_
<android.icu.text.DateTimePatternGenerator: void setDateTimeFormat(java.lang.String)> -> _SINK_
<android.icu.text.DateTimePatternGenerator: void setDecimal(java.lang.String)> -> _SINK_
<android.icu.text.DateFormat: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DateFormat: java.lang.StringBuffer format(java.sql.Date,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DateFormat: String format(java.sql.Date)> -> _SOURCE_
<android.icu.text.DateFormat: StringBuffer format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DateFormat: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.DateFormat: boolean getBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute)> -> _SOURCE_
<android.icu.text.DateFormat: android.icu.util.Calendar getCalendar()> -> _SOURCE_
<android.icu.text.DateFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(android.icu.util.Calendar,int)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getDateInstance(android.icu.util.Calendar,int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(android.icu.util.Calendar,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(int,int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(android.icu.util.Calendar,int,int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(android.icu.util.Calendar,int,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(int,int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(int,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(android.icu.util.Calendar,int,int)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getInstance(android.icu.util.Calendar,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstance(android.icu.util.Calendar)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstance(android.icu.util.Calendar,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstance()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstanceForSkeleton(android.icu.util.Calendar,java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getInstanceForSkeleton(android.icu.util.Calendar,java.lang.String,android.icu.util.ULocale)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getInstanceForSkeleton(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstanceForSkeleton(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstanceForSkeleton(java.lang.String)> -> _SINK_
<android.icu.text.DateFormat: android.icu.text.NumberFormat getNumberFormat()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getPatternInstance(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getPatternInstance(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getPatternInstance(java.lang.String)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getPatternInstance(android.icu.util.Calendar,java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getPatternInstance(android.icu.util.Calendar,java.lang.String,android.icu.util.ULocale)> -> _SINK_
<android.icu.text.DateFormat: DateFormat getTimeInstance(android.icu.util.Calendar,int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(android.icu.util.Calendar,int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(android.icu.util.Calendar,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: android.icu.util.TimeZone getTimeZone()> -> _SOURCE_
<android.icu.text.DateFormat: android.icu.text.DateFormat setBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute,boolean)> -> _SINK_
<android.icu.text.DateFormat: void setCalendar(android.icu.util.Calendar)> -> _SINK_
<android.icu.text.DateFormat: void setContext(android.icu.text.DisplayContext)> -> _SINK_
<android.icu.text.DateFormat: void setLenient(boolean)> -> _SINK_
<android.icu.text.DateFormat: void setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<android.icu.text.DateIntervalFormat: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DateIntervalFormat: StringBuffer format(android.icu.util.Calendar,android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DateIntervalFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type)> -> _SOURCE_
<android.icu.text.DateIntervalFormat: android.icu.text.DateFormat getDateFormat()> -> _SOURCE_
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalInfo getDateIntervalInfo()> -> _SOURCE_
<android.icu.text.DateIntervalFormat: DateIntervalFormat getInstance(java.lang.String)> -> _SINK_
<android.icu.text.DateIntervalFormat: DateIntervalFormat getInstance(java.lang.String,androidx.compose.ui.text.intl.Locale,android.icu.text.DateIntervalInfo)> -> _SINK_
<android.icu.text.DateIntervalFormat: DateIntervalFormat getInstance(java.lang.String,android.icu.util.ULocale,android.icu.text.DateIntervalInfo)> -> _SINK_
<android.icu.text.DateIntervalFormat: DateIntervalFormat getInstance(java.lang.String,android.icu.text.DateIntervalInfo)> -> _SINK_
<android.icu.text.DateIntervalFormat: android.icu.util.TimeZone getTimeZone()> -> _SOURCE_
<android.icu.text.DateIntervalFormat: void setContext(android.icu.text.DisplayContext)> -> _SINK_
<android.icu.text.DateIntervalFormat: void setDateIntervalInfo(android.icu.text.DateIntervalInfo)> -> _SINK_
<android.icu.text.DateIntervalFormat: void setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<android.icu.text.IDNA: IDNA getUTS46Instance(int)> -> _SOURCE_
<android.icu.text.IDNA: StringBuilder labelToASCII(java.lang.CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)> -> _SOURCE_
<android.icu.text.IDNA: StringBuilder labelToUnicode(java.lang.CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)> -> _SOURCE_
<android.icu.text.IDNA: StringBuilder nameToASCII(java.lang.CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)> -> _SOURCE_
<android.icu.text.IDNA: StringBuilder nameToUnicode(java.lang.CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: java.lang.String getCurrencyPluralPattern(java.lang.String)> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: CurrencyPluralInfo getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: CurrencyPluralInfo getInstance()> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: CurrencyPluralInfo getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: android.icu.util.ULocale getLocale()> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: android.icu.text.PluralRules getPluralRules()> -> _SOURCE_
<android.icu.text.CurrencyPluralInfo: void setCurrencyPluralPattern(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.text.CurrencyPluralInfo: void setLocale(android.icu.util.ULocale)> -> _SINK_
<android.icu.text.CurrencyPluralInfo: void setPluralRules(java.lang.String)> -> _SINK_
<android.icu.text.FormattedValue: <A extends Appendable> A appendTo(A)> -> _SINK_
<android.icu.text.FormattedValue: boolean nextPosition(android.icu.text.ConstrainedFieldPosition)> -> _SOURCE_
<android.icu.text.FormattedValue: AttributedCharacterIterator toCharacterIterator()> -> _SOURCE_
<android.icu.text.FormattedValue: String toString()> -> _SOURCE_
<android.icu.text.Edits.Iterator: boolean hasChange()> -> _SOURCE_
<android.icu.text.Edits.Iterator: int oldLength()> -> _SOURCE_
<android.icu.text.Edits.Iterator: int sourceIndex()> -> _SOURCE_
<android.icu.text.IDNA.Info: Set<IDNA.Error> getErrors()> -> _SOURCE_
<android.icu.text.LocaleDisplayNames.UiListItem: Comparator<LocaleDisplayNames.UiListItem> getComparator(Comparator<Object>,boolean)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames.UiListItem: java.lang.String toString()> -> _SOURCE_
<android.icu.text.DateIntervalInfo.PatternInfo: java.lang.String getFirstPart()> -> _SOURCE_
<android.icu.text.DateIntervalInfo.PatternInfo: java.lang.String getSecondPart()> -> _SOURCE_
<android.icu.text.DateIntervalInfo.PatternInfo: int hashCode()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols forNumberingSystem(android.icu.util.ULocale,android.icu.text.NumberingSystem)> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols forNumberingSystem(androidx.compose.ui.text.intl.Locale,android.icu.text.NumberingSystem)> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: ULocale[] getAvailableULocales()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getDecimalSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getDecimalSeparatorString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getDigit()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: String[] getDigitStrings()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char[] getDigits()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getGroupingSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getGroupingSeparatorString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols getInstance()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getMinusSign()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getMinusSignString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getMonetaryDecimalSeparatorString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getNaN()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getPatternForCurrencySpacing(int,boolean)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: char getPatternSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getPerMill()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getPerMillString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getPercent()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getPercentString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getPlusSign()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getPlusSignString()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getSignificantDigit()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: android.icu.util.ULocale getULocale()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getZeroDigit()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: void setCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparatorString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setDigitStrings(String[])> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setExponentMultiplicationSign(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparatorString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setInfinity(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMinusSign(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMinusSignString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparatorString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMonetaryGroupingSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMonetaryGroupingSeparatorString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setNaN(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPadEscape(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPatternForCurrencySpacing(int,boolean,java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPerMill(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPerMillString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPercentString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPlusSign(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPlusSignString(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setSignificantDigit(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setZeroDigit(char)> -> _SINK_
<android.icu.text.MessageFormat: void applyPattern(java.lang.String)> -> _SINK_
<android.icu.text.MessageFormat: void applyPattern(java.lang.String,android.icu.text.MessagePattern.ApostropheMode)> -> _SINK_
<android.icu.text.MessageFormat: StringBuffer format(Object[],java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.MessageFormat: String format(java.lang.String,java.util.Map -> _SINK_
<android.icu.text.MessageFormat: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.MessageFormat: StringBuffer format(java.util.Map -> _SINK_
<android.icu.text.MessageFormat: String format(java.lang.String,Object[])> -> _SINK_
<android.icu.text.MessageFormat: Set<String> getArgumentNames()> -> _SOURCE_
<android.icu.text.MessageFormat: java.text.Format getFormatByArgumentName(java.lang.String)> -> _SOURCE_
<android.icu.text.MessageFormat: Format[] getFormats()> -> _SOURCE_
<android.icu.text.MessageFormat: Format[] getFormatsByArgumentIndex()> -> _SOURCE_
<android.icu.text.MessageFormat: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<android.icu.text.MessageFormat: android.icu.util.ULocale getULocale()> -> _SOURCE_
<android.icu.text.MessageFormat: Object[] parse(java.lang.String)> -> _SINK_
<android.icu.text.MessageFormat: java.util.Map parseToMap(java.lang.String,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.MessageFormat: void setFormat(int,java.text.Format)> -> _SINK_
<android.icu.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)> -> _SINK_
<android.icu.text.MessageFormat: void setFormatByArgumentName(java.lang.String,java.text.Format)> -> _SINK_
<android.icu.text.MessageFormat: void setFormats(Format[])> -> _SINK_
<android.icu.text.MessageFormat: void setFormatsByArgumentIndex(Format[])> -> _SINK_
<android.icu.text.MessageFormat: void setFormatsByArgumentName(java.util.Map -> _SOURCE_
<android.icu.text.MessageFormat: void setLocale(android.icu.util.ULocale)> -> _SINK_
<android.icu.text.MessageFormat: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.MessageFormat: java.lang.String toPattern()> -> _SOURCE_
<android.icu.text.MeasureFormat: boolean equals(java.lang.Object)> -> _SINK_
<android.icu.text.MeasureFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.MeasureFormat: java.lang.StringBuilder formatMeasurePerUnit(android.icu.util.Measure,android.icu.util.MeasureUnit,java.lang.StringBuilder,java.text.FieldPosition)> -> _SINK_
<android.icu.text.MeasureFormat: MeasureFormat getCurrencyFormat()> -> _SOURCE_
<android.icu.text.MeasureFormat: MeasureFormat getCurrencyFormat(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.MeasureFormat: MeasureFormat getCurrencyFormat(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.MeasureFormat: MeasureFormat getInstance(androidx.compose.ui.text.intl.Locale,android.icu.text.MeasureFormat.FormatWidth,android.icu.text.NumberFormat)> -> _SINK_
<android.icu.text.MeasureFormat: MeasureFormat getInstance(androidx.compose.ui.text.intl.Locale,android.icu.text.MeasureFormat.FormatWidth)> -> _SINK_
<android.icu.text.MeasureFormat: MeasureFormat getInstance(android.icu.util.ULocale,android.icu.text.MeasureFormat.FormatWidth)> -> _SINK_
<android.icu.text.MeasureFormat: MeasureFormat getInstance(android.icu.util.ULocale,android.icu.text.MeasureFormat.FormatWidth,android.icu.text.NumberFormat)> -> _SINK_
<android.icu.text.MeasureFormat: ULocale getLocale()> -> _SOURCE_
<android.icu.text.MeasureFormat: android.icu.text.NumberFormat getNumberFormat()> -> _SOURCE_
<android.icu.text.MeasureFormat: java.lang.String getUnitDisplayName(android.icu.util.MeasureUnit)> -> _SOURCE_
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat.FormatWidth getWidth()> -> _SOURCE_
<android.icu.text.ListFormatter: java.lang.String format(Object[])> -> _SINK_
<android.icu.text.ListFormatter: ListFormatter getInstance(androidx.compose.ui.text.intl.Locale,ListFormatter.Type,ListFormatter.Width)> -> _SINK_
<android.icu.text.ListFormatter: ListFormatter getInstance(android.icu.util.ULocale)> -> _SINK_
<android.icu.text.ListFormatter: ListFormatter getInstance(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.ListFormatter: ListFormatter getInstance()> -> _SINK_
<android.icu.text.ListFormatter: ListFormatter getInstance(android.icu.util.ULocale,ListFormatter.Type,ListFormatter.Width)> -> _SINK_
<android.icu.text.ListFormatter: java.lang.String getPatternForNumItems(int)> -> _SOURCE_
<android.icu.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean areSignificantDigitsUsed()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean equals(java.lang.Object)> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(android.icu.util.CurrencyAmount,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.DecimalFormat: android.icu.text.CurrencyPluralInfo getCurrencyPluralInfo()> -> _SOURCE_
<android.icu.text.DecimalFormat: android.icu.util.Currency.CurrencyUsage getCurrencyUsage()> -> _SINK_
<android.icu.text.DecimalFormat: android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getFormatWidth()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getGroupingSize()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMaximumFractionDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMaximumIntegerDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMaximumSignificantDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMinimumFractionDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMinimumIntegerDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMinimumSignificantDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMultiplier()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getNegativePrefix()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getNegativeSuffix()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getPadPosition()> -> _SINK_
<android.icu.text.DecimalFormat: int getParseMaxDigits()> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.String getPositivePrefix()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getPositiveSuffix()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getRoundingMode()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getSecondaryGroupingSize()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean isExponentSignAlwaysShown()> -> _SINK_
<android.icu.text.DecimalFormat: boolean isGroupingUsed()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean isParseBigDecimal()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean isParseCaseSensitive()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean isScientificNotation()> -> _SOURCE_
<android.icu.text.DecimalFormat: void setCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.DecimalFormat: void setCurrencyPluralInfo(android.icu.text.CurrencyPluralInfo)> -> _SINK_
<android.icu.text.DecimalFormat: void setCurrencyUsage(android.icu.util.Currency.CurrencyUsage)> -> _SINK_
<android.icu.text.DecimalFormat: void setDecimalFormatSymbols(android.icu.text.DecimalFormatSymbols)> -> _SINK_
<android.icu.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setExponentSignAlwaysShown(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setFormatWidth(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setGroupingSize(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setGroupingUsed(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setMathContext(android.icu.math.MathContext)> -> _SINK_
<android.icu.text.DecimalFormat: void setMathContextICU(android.icu.math.MathContext)> -> _SINK_
<android.icu.text.DecimalFormat: void setMaximumFractionDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMaximumIntegerDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMaximumSignificantDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumExponentDigits(byte)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumFractionDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumGroupingDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumIntegerDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumSignificantDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMultiplier(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setNegativeSuffix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setPadCharacter(char)> -> _SINK_
<android.icu.text.DecimalFormat: void setPadPosition(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setParseBigDecimal(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setParseMaxDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setPositivePrefix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setPositiveSuffix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setRoundingIncrement(android.icu.math.BigDecimal)> -> _SINK_
<android.icu.text.DecimalFormat: void setRoundingIncrement(android.icu.math.BigDecimal)> -> _SINK_
<android.icu.text.DecimalFormat: void setRoundingIncrement(double)> -> _SINK_
<android.icu.text.DecimalFormat: void setRoundingMode(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setSecondaryGroupingSize(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setSignAlwaysShown(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setSignificantDigitsUsed(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.String toLocalizedPattern()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String toString()> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: DisplayContext getContext(android.icu.text.DisplayContext.Type)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: LocaleDisplayNames.DialectHandling getDialectHandling()> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: LocaleDisplayNames getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: LocaleDisplayNames getInstance(android.icu.util.ULocale,android.icu.text.LocaleDisplayNames.DialectHandling)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: LocaleDisplayNames getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: LocaleDisplayNames getInstance(androidx.compose.ui.text.intl.Locale,DisplayContext[])> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: LocaleDisplayNames getInstance(android.icu.util.ULocale,DisplayContext[])> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: ULocale getLocale()> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: List<LocaleDisplayNames.UiListItem> getUiList(Set<ULocale>,boolean,Comparator<Object>)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: List<LocaleDisplayNames.UiListItem> getUiListCompareWholeItems(Set<ULocale>,Comparator<LocaleDisplayNames.UiListItem>)> -> _SINK_
<android.icu.text.LocaleDisplayNames: String keyDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String keyValueDisplayName(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String languageDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String localeDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String localeDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String localeDisplayName(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String regionDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String scriptDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String scriptDisplayName(int)> -> _SOURCE_
<android.icu.text.LocaleDisplayNames: String variantDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: void constrainClass(Class<?>)> -> _SINK_
<android.icu.text.ConstrainedFieldPosition: void constrainField(java.text.Format.Field)> -> _SINK_
<android.icu.text.ConstrainedFieldPosition: java.text.Format.Field getField()> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: java.lang.Object getFieldValue()> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: long getInt64IterationContext()> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: int getLimit()> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: int getStart()> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: boolean matchesField(java.text.Format.Field,java.lang.Object)> -> _SINK_
<android.icu.text.ConstrainedFieldPosition: void setInt64IterationContext(long)> -> _SOURCE_
<android.icu.text.ConstrainedFieldPosition: void setState(java.text.Format.Field,java.lang.Object,int,int)> -> _SINK_
<android.icu.text.PluralRules: PluralRules createRules(java.lang.String)> -> _SOURCE_
<android.icu.text.PluralRules: PluralRules forLocale(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType)> -> _SOURCE_
<android.icu.text.PluralRules: PluralRules forLocale(androidx.compose.ui.text.intl.Locale,android.icu.text.PluralRules.PluralType)> -> _SOURCE_
<android.icu.text.PluralRules: PluralRules forLocale(android.icu.util.ULocale)> -> _SINK_
<android.icu.text.PluralRules: PluralRules forLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.PluralRules: Collection<Double> getAllKeywordValues(java.lang.String)> -> _SOURCE_
<android.icu.text.PluralRules: Set<String> getKeywords()> -> _SOURCE_
<android.icu.text.PluralRules: Collection<Double> getSamples(java.lang.String)> -> _SOURCE_
<android.icu.text.PluralRules: double getUniqueKeywordValue(java.lang.String)> -> _SOURCE_
<android.icu.text.PluralRules: PluralRules parseDescription(java.lang.String)> -> _SOURCE_
<android.icu.text.PluralRules: java.lang.String select(double)> -> _SOURCE_
<android.icu.text.PluralRules: java.lang.String select(android.icu.number.FormattedNumber)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getAmPmStrings()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getEraNames()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getEras()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: DateFormatSymbols getInstance()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: DateFormatSymbols getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: DateFormatSymbols getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: java.lang.String getLocalPatternChars()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getMonths(int,int)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getMonths()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getNarrowEras()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getQuarters(int,int)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getShortMonths()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getShortWeekdays()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getWeekdays(int,int)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getWeekdays()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getYearNames(int,int)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getZodiacNames(int,int)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[][] getZoneStrings()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: void setAmPmStrings(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setEraNames(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setEras(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setMonths(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setMonths(String[],int,int)> -> _SINK_
<android.icu.text.DateFormatSymbols: void setNarrowEras(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setQuarters(String[],int,int)> -> _SINK_
<android.icu.text.DateFormatSymbols: void setShortMonths(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setShortWeekdays(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setWeekdays(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setWeekdays(String[],int,int)> -> _SINK_
<android.icu.text.DateFormatSymbols: void setYearNames(String[],int,int)> -> _SINK_
<android.icu.text.DateFormatSymbols: void setZodiacNames(String[],int,int)> -> _SINK_
<android.icu.text.DateFormatSymbols: void setZoneStrings(String[][])> -> _SINK_
<android.icu.text.MessagePattern.Part: android.icu.text.MessagePattern.ArgType getArgType()> -> _SOURCE_
<android.icu.text.MessagePattern.Part: int getIndex()> -> _SOURCE_
<android.icu.text.MessagePattern.Part: int getLength()> -> _SOURCE_
<android.icu.text.MessagePattern.Part: int getLimit()> -> _SOURCE_
<android.icu.text.MessagePattern.Part: android.icu.text.MessagePattern.Part.Type getType()> -> _SOURCE_
<android.icu.text.MessagePattern.Part: int getValue()> -> _SOURCE_
<android.icu.text.MessagePattern.Part: java.lang.String toString()> -> _SOURCE_
<android.icu.text.NumberFormat: StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: String format(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.text.NumberFormat: StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: String format(android.icu.math.BigDecimal)> -> _SINK_
<android.icu.text.NumberFormat: String format(double)> -> _SINK_
<android.icu.text.NumberFormat: String format(long)> -> _SINK_
<android.icu.text.NumberFormat: java.lang.StringBuffer format(android.icu.util.CurrencyAmount,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: String format(android.icu.util.CurrencyAmount)> -> _SINK_
<android.icu.text.NumberFormat: StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.NumberFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type)> -> _SOURCE_
<android.icu.text.NumberFormat: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getCurrencyInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getCurrencyInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getCurrencyInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance(android.icu.util.ULocale,int)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance(androidx.compose.ui.text.intl.Locale,int)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance(int)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getIntegerInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getIntegerInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getIntegerInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: int getMaximumFractionDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: int getMaximumIntegerDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: int getMinimumFractionDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: int getMinimumIntegerDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getNumberInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getNumberInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getNumberInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getPercentInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getPercentInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getPercentInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberFormat: int getRoundingMode()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getScientificInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getScientificInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getScientificInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: void setContext(android.icu.text.DisplayContext)> -> _SINK_
<android.icu.text.NumberFormat: void setCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.NumberFormat: void setGroupingUsed(boolean)> -> _SINK_
<android.icu.text.NumberFormat: void setMaximumFractionDigits(int)> -> _SINK_
<android.icu.text.NumberFormat: void setMinimumFractionDigits(int)> -> _SINK_
<android.icu.text.NumberFormat: void setMinimumIntegerDigits(int)> -> _SINK_
<android.icu.text.NumberFormat: void setParseIntegerOnly(boolean)> -> _SINK_
<android.icu.text.NumberFormat: void setRoundingMode(int)> -> _SINK_
<android.icu.text.PluralFormat: void applyPattern(java.lang.String)> -> _SINK_
<android.icu.text.PluralFormat: String format(double)> -> _SINK_
<android.icu.text.PluralFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.PluralFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.icu.text.PluralFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.icu.text.PluralFormat: void setNumberFormat(android.icu.text.NumberFormat)> -> _SINK_
<android.icu.text.PluralFormat: java.lang.String toPattern()> -> _SOURCE_
<android.icu.text.PluralFormat: java.lang.String toString()> -> _SOURCE_
<android.icu.text.NumberingSystem: String[] getAvailableNames()> -> _SOURCE_
<android.icu.text.NumberingSystem: java.lang.String getDescription()> -> _SOURCE_
<android.icu.text.NumberingSystem: NumberingSystem getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.NumberingSystem: NumberingSystem getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberingSystem: NumberingSystem getInstance()> -> _SOURCE_
<android.icu.text.NumberingSystem: NumberingSystem getInstanceByName(java.lang.String)> -> _SOURCE_
<android.icu.text.NumberingSystem: java.lang.String getName()> -> _SOURCE_
<android.icu.text.NumberingSystem: int getRadix()> -> _SOURCE_
<android.icu.text.NumberingSystem: boolean isAlgorithmic()> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: java.lang.String format(double,android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.RelativeUnit)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter: java.lang.String format(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter: java.lang.String formatNumeric(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime formatNumericToValue(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime formatToValue(double,android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.RelativeUnit)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime formatToValue(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.DisplayContext getCapitalizationContext()> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: RelativeDateTimeFormatter getInstance(android.icu.util.ULocale,android.icu.text.NumberFormat,android.icu.text.RelativeDateTimeFormatter.Style,android.icu.text.DisplayContext)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: RelativeDateTimeFormatter getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: RelativeDateTimeFormatter getInstance()> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: RelativeDateTimeFormatter getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: RelativeDateTimeFormatter getInstance(android.icu.util.ULocale,android.icu.text.NumberFormat)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: RelativeDateTimeFormatter getInstance(androidx.compose.ui.text.intl.Locale,android.icu.text.NumberFormat)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.NumberFormat getNumberFormat()> -> _SOURCE_
<android.icu.text.Normalizer2: String getDecomposition(int)> -> _SOURCE_
<android.icu.text.Normalizer2: Normalizer2 getInstance(java.io.InputStream,java.lang.String,android.icu.text.Normalizer2.Mode)> -> _SOURCE_
<android.icu.text.Normalizer2: Normalizer2 getNFCInstance()> -> _SOURCE_
<android.icu.text.Normalizer2: Normalizer2 getNFDInstance()> -> _SOURCE_
<android.icu.text.Normalizer2: Normalizer2 getNFKCCasefoldInstance()> -> _SOURCE_
<android.icu.text.Normalizer2: Normalizer2 getNFKCInstance()> -> _SOURCE_
<android.icu.text.Normalizer2: Normalizer2 getNFKDInstance()> -> _SOURCE_
<android.icu.text.Normalizer2: java.lang.String getRawDecomposition(int)> -> _SOURCE_
<android.icu.text.Normalizer2: boolean isNormalized(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.Normalizer2: java.lang.String normalize(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.Normalizer2: Appendable normalize(java.lang.CharSequence,java.lang.Appendable)> -> _SINK_
<android.icu.text.Normalizer2: Normalizer.QuickCheckResult quickCheck(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.Normalizer2: int spanQuickCheckYes(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.SelectFormat: void applyPattern(java.lang.String)> -> _SINK_
<android.icu.text.SelectFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.SelectFormat: String format(java.lang.String)> -> _SOURCE_
<android.icu.text.SelectFormat: java.lang.String toPattern()> -> _SOURCE_
<android.icu.text.SelectFormat: java.lang.String toString()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: android.icu.text.Collator freeze()> -> _SINK_
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(android.icu.text.UCharacterIterator)> -> _SOURCE_
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(java.lang.String)> -> _SOURCE_
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)> -> _SOURCE_
<android.icu.text.RuleBasedCollator: android.icu.text.CollationKey getCollationKey(java.lang.String)> -> _SINK_
<android.icu.text.RuleBasedCollator: int getDecomposition()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: boolean getNumericCollation()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: int[] getReorderCodes()> -> _SINK_
<android.icu.text.RuleBasedCollator: java.lang.String getRules()> -> _SINK_
<android.icu.text.RuleBasedCollator: java.lang.String getRules(boolean)> -> _SOURCE_
<android.icu.text.RuleBasedCollator: int getStrength()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: android.icu.text.UnicodeSet getTailoredSet()> -> _SINK_
<android.icu.text.RuleBasedCollator: android.icu.util.VersionInfo getUCAVersion()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: int getVariableTop()> -> _SINK_
<android.icu.text.RuleBasedCollator: android.icu.util.VersionInfo getVersion()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: int hashCode()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: boolean isCaseLevel()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: boolean isFrenchCollation()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: void setAlternateHandlingDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setAlternateHandlingShifted(boolean)> -> _SINK_
<android.icu.text.RuleBasedCollator: void setCaseFirstDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setCaseLevelDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setDecomposition(int)> -> _SINK_
<android.icu.text.RuleBasedCollator: void setDecompositionDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setFrenchCollation(boolean)> -> _SINK_
<android.icu.text.RuleBasedCollator: void setFrenchCollationDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setLowerCaseFirst(boolean)> -> _SINK_
<android.icu.text.RuleBasedCollator: android.icu.text.RuleBasedCollator setMaxVariable(int)> -> _SINK_
<android.icu.text.RuleBasedCollator: void setNumericCollation(boolean)> -> _SINK_
<android.icu.text.RuleBasedCollator: void setNumericCollationDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setReorderCodes(int[])> -> _SINK_
<android.icu.text.RuleBasedCollator: void setStrength(int)> -> _SINK_
<android.icu.text.RuleBasedCollator: void setStrengthDefault()> -> _SINK_
<android.icu.text.RuleBasedCollator: void setUpperCaseFirst(boolean)> -> _SINK_
<android.icu.text.SearchIterator: int first()> -> _SOURCE_
<android.icu.text.SearchIterator: int following(int)> -> _SOURCE_
<android.icu.text.SearchIterator: android.icu.text.SearchIterator.ElementComparisonType getElementComparisonType()> -> _SOURCE_
<android.icu.text.SearchIterator: int getIndex()> -> _SOURCE_
<android.icu.text.SearchIterator: int getMatchLength()> -> _SOURCE_
<android.icu.text.SearchIterator: int getMatchStart()> -> _SOURCE_
<android.icu.text.SearchIterator: java.lang.String getMatchedText()> -> _SOURCE_
<android.icu.text.SearchIterator: java.text.CharacterIterator getTarget()> -> _SOURCE_
<android.icu.text.SearchIterator: int last()> -> _SOURCE_
<android.icu.text.SearchIterator: int next()> -> _SOURCE_
<android.icu.text.SearchIterator: int preceding(int)> -> _SOURCE_
<android.icu.text.SearchIterator: int previous()> -> _SOURCE_
<android.icu.text.SearchIterator: void setElementComparisonType(android.icu.text.SearchIterator.ElementComparisonType)> -> _SINK_
<android.icu.text.SearchIterator: void setIndex(int)> -> _SINK_
<android.icu.text.SearchIterator: void setTarget(java.text.CharacterIterator)> -> _SINK_
<android.icu.text.Replaceable: int char32At(int)> -> _SOURCE_
<android.icu.text.Replaceable: char charAt(int)> -> _SOURCE_
<android.icu.text.Replaceable: boolean hasMetaData()> -> _SOURCE_
<android.icu.text.Replaceable: int length()> -> _SOURCE_
<android.icu.text.Replaceable: void replace(int,int,char[],int,int)> -> _SINK_
<android.icu.text.Replaceable: void replace(int,int,java.lang.String)> -> _SINK_
<android.icu.text.TimeZoneFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.TimeZoneFormat: java.lang.String format(android.icu.text.TimeZoneFormat.Style,android.icu.util.TimeZone,long,Output<TimeZoneFormat.TimeType>)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: String format(android.icu.text.TimeZoneFormat.Style,android.icu.util.TimeZone,long)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: String formatOffsetISO8601Basic(int,boolean,boolean,boolean)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: String formatOffsetISO8601Extended(int,boolean,boolean,boolean)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetLocalizedGMT(int)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetShortLocalizedGMT(int)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: EnumSet<TimeZoneFormat.ParseOption> getDefaultParseOptions()> -> _SOURCE_
<android.icu.text.TimeZoneFormat: java.lang.String getGMTOffsetDigits()> -> _SOURCE_
<android.icu.text.TimeZoneFormat: java.lang.String getGMTOffsetPattern(android.icu.text.TimeZoneFormat.GMTOffsetPatternType)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: java.lang.String getGMTPattern()> -> _SOURCE_
<android.icu.text.TimeZoneFormat: java.lang.String getGMTZeroFormat()> -> _SOURCE_
<android.icu.text.TimeZoneFormat: TimeZoneFormat getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: TimeZoneFormat getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneNames getTimeZoneNames()> -> _SOURCE_
<android.icu.text.TimeZoneFormat: TimeZone parse(java.lang.String)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: TimeZone parse(java.lang.String,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat.Style,java.lang.String,java.text.ParsePosition,Output<TimeZoneFormat.TimeType>)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat.Style,java.lang.String,java.text.ParsePosition,EnumSet<TimeZoneFormat.ParseOption>,Output<TimeZoneFormat.TimeType>)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: int parseOffsetISO8601(java.lang.String,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: int parseOffsetLocalizedGMT(java.lang.String,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: int parseOffsetShortLocalizedGMT(java.lang.String,java.text.ParsePosition)> -> _SOURCE_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setDefaultParseOptions(EnumSet<TimeZoneFormat.ParseOption>)> -> _SINK_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTOffsetDigits(java.lang.String)> -> _SINK_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTOffsetPattern(android.icu.text.TimeZoneFormat.GMTOffsetPatternType,java.lang.String)> -> _SINK_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTPattern(java.lang.String)> -> _SINK_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTZeroFormat(java.lang.String)> -> _SINK_
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setTimeZoneNames(android.icu.text.TimeZoneNames)> -> _SINK_
<android.icu.text.StringSearch: android.icu.text.RuleBasedCollator getCollator()> -> _SOURCE_
<android.icu.text.StringSearch: int getIndex()> -> _SOURCE_
<android.icu.text.StringSearch: java.lang.String getPattern()> -> _SOURCE_
<android.icu.text.StringSearch: void setCanonical(boolean)> -> _SINK_
<android.icu.text.StringSearch: void setCollator(android.icu.text.RuleBasedCollator)> -> _SINK_
<android.icu.text.StringSearch: void setIndex(int)> -> _SINK_
<android.icu.text.StringSearch: void setPattern(java.lang.String)> -> _SINK_
<android.icu.text.StringSearch: void setTarget(java.text.CharacterIterator)> -> _SINK_
<android.icu.text.ScientificNumberFormatter: ScientificNumberFormatter getMarkupInstance(android.icu.text.DecimalFormat,java.lang.String,java.lang.String)> -> _SINK_
<android.icu.text.ScientificNumberFormatter: ScientificNumberFormatter getMarkupInstance(android.icu.util.ULocale,java.lang.String,java.lang.String)> -> _SINK_
<android.icu.text.ScientificNumberFormatter: ScientificNumberFormatter getSuperscriptInstance(android.icu.text.DecimalFormat)> -> _SOURCE_
<android.icu.text.ScientificNumberFormatter: ScientificNumberFormatter getSuperscriptInstance(android.icu.util.ULocale)> -> _SINK_
<android.icu.text.StringPrepParseException: boolean equals(java.lang.Object)> -> _SOURCE_
<android.icu.text.StringPrepParseException: int getError()> -> _SOURCE_
<android.icu.text.StringPrepParseException: java.lang.String toString()> -> _SOURCE_
<android.icu.text.TimeZoneNames: Set<String> getAvailableMetaZoneIDs()> -> _SOURCE_
<android.icu.text.TimeZoneNames: Set<String> getAvailableMetaZoneIDs(java.lang.String)> -> _SOURCE_
<android.icu.text.TimeZoneNames: String getDisplayName(java.lang.String,android.icu.text.TimeZoneNames.NameType,long)> -> _SOURCE_
<android.icu.text.TimeZoneNames: java.lang.String getExemplarLocationName(java.lang.String)> -> _SOURCE_
<android.icu.text.TimeZoneNames: TimeZoneNames getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.TimeZoneNames: TimeZoneNames getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.TimeZoneNames: String getMetaZoneDisplayName(java.lang.String,android.icu.text.TimeZoneNames.NameType)> -> _SOURCE_
<android.icu.text.TimeZoneNames: String getMetaZoneID(java.lang.String,long)> -> _SOURCE_
<android.icu.text.TimeZoneNames: String getReferenceZoneID(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.text.TimeZoneNames: TimeZoneNames getTZDBInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.TimeZoneNames: String getTimeZoneDisplayName(java.lang.String,android.icu.text.TimeZoneNames.NameType)> -> _SOURCE_
<android.icu.text.SymbolTable: char[] lookup(java.lang.String)> -> _SOURCE_
<android.icu.text.SymbolTable: UnicodeMatcher lookupMatcher(int)> -> _SOURCE_
<android.icu.text.SymbolTable: String parseReference(java.lang.String,java.text.ParsePosition,int)> -> _SOURCE_
<android.icu.text.Transliterator.Position: java.lang.String toString()> -> _SOURCE_
<android.icu.text.Transliterator.Position: void validate(int)> -> _SOURCE_
<android.icu.text.UnicodeMatcher: void addMatchSetTo(android.icu.text.UnicodeSet)> -> _SINK_
<android.icu.text.UnicodeMatcher: int matches(android.icu.text.Replaceable,int[],int,boolean)> -> _SOURCE_
<android.icu.text.UnicodeMatcher: boolean matchesIndexValue(int)> -> _SOURCE_
<android.icu.text.UnicodeMatcher: String toPattern(boolean)> -> _SOURCE_
<android.icu.text.Transliterator: Transliterator createFromRules(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.icu.text.Transliterator: Enumeration<String> getAvailableIDs()> -> _SOURCE_
<android.icu.text.Transliterator: Enumeration<String> getAvailableSources()> -> _SOURCE_
<android.icu.text.Transliterator: Enumeration<String> getAvailableTargets(java.lang.String)> -> _SOURCE_
<android.icu.text.Transliterator: Enumeration<String> getAvailableVariants(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.text.Transliterator: String getDisplayName(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.Transliterator: String getDisplayName(java.lang.String)> -> _SOURCE_
<android.icu.text.Transliterator: String getDisplayName(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.text.Transliterator: Transliterator[] getElements()> -> _SOURCE_
<android.icu.text.Transliterator: UnicodeFilter getFilter()> -> _SOURCE_
<android.icu.text.Transliterator: String getID()> -> _SOURCE_
<android.icu.text.Transliterator: Transliterator getInstance(java.lang.String,int)> -> _SOURCE_
<android.icu.text.Transliterator: Transliterator getInstance(java.lang.String)> -> _SOURCE_
<android.icu.text.Transliterator: int getMaximumContextLength()> -> _SOURCE_
<android.icu.text.Transliterator: UnicodeSet getSourceSet()> -> _SOURCE_
<android.icu.text.Transliterator: void setFilter(android.icu.text.UnicodeFilter)> -> _SINK_
<android.icu.text.Transliterator: java.lang.String toRules(boolean)> -> _SOURCE_
<android.icu.text.Transliterator: String transliterate(java.lang.String)> -> _SOURCE_
<android.icu.text.UnicodeSetSpanner: int countIn(java.lang.CharSequence,android.icu.text.UnicodeSetSpanner.CountMethod,android.icu.text.UnicodeSet.SpanCondition)> -> _SOURCE_
<android.icu.text.UnicodeSetSpanner: int countIn(java.lang.CharSequence,android.icu.text.UnicodeSetSpanner.CountMethod)> -> _SOURCE_
<android.icu.text.UnicodeSetSpanner: android.icu.text.UnicodeSet getUnicodeSet()> -> _SOURCE_
<android.icu.text.UnicodeSetSpanner: java.lang.CharSequence trim(java.lang.CharSequence,android.icu.text.UnicodeSetSpanner.TrimOption,android.icu.text.UnicodeSet.SpanCondition)> -> _SOURCE_
<android.icu.text.UnicodeSetSpanner: java.lang.CharSequence trim(java.lang.CharSequence,android.icu.text.UnicodeSetSpanner.TrimOption)> -> _SOURCE_
<android.icu.text.UnicodeSetSpanner: java.lang.CharSequence trim(java.lang.CharSequence)> -> _SOURCE_
<android.icu.text.UnicodeSetIterator: java.lang.String getString()> -> _SOURCE_
<android.icu.text.UnicodeSetIterator: boolean next()> -> _SOURCE_
<android.icu.text.UnicodeSetIterator: boolean nextRange()> -> _SOURCE_
<android.icu.text.UCharacterIterator: int current()> -> _SOURCE_
<android.icu.text.UCharacterIterator: int currentCodePoint()> -> _SOURCE_
<android.icu.text.UCharacterIterator: java.text.CharacterIterator getCharacterIterator()> -> _SOURCE_
<android.icu.text.UCharacterIterator: int getIndex()> -> _SOURCE_
<android.icu.text.UCharacterIterator: UCharacterIterator getInstance(java.lang.String)> -> _SOURCE_
<android.icu.text.UCharacterIterator: UCharacterIterator getInstance(java.lang.StringBuffer)> -> _SOURCE_
<android.icu.text.UCharacterIterator: UCharacterIterator getInstance(android.icu.text.Replaceable)> -> _SOURCE_
<android.icu.text.UCharacterIterator: UCharacterIterator getInstance(java.text.CharacterIterator)> -> _SOURCE_
<android.icu.text.UCharacterIterator: UCharacterIterator getInstance(char[],int,int)> -> _SOURCE_
<android.icu.text.UCharacterIterator: UCharacterIterator getInstance(char[])> -> _SOURCE_
<android.icu.text.UCharacterIterator: int getLength()> -> _SOURCE_
<android.icu.text.UCharacterIterator: java.lang.String getText()> -> _SOURCE_
<android.icu.text.UCharacterIterator: int getText(char[])> -> _SOURCE_
<android.icu.text.UCharacterIterator: int moveCodePointIndex(int)> -> _SINK_
<android.icu.text.UCharacterIterator: int next()> -> _SOURCE_
<android.icu.text.UCharacterIterator: int nextCodePoint()> -> _SOURCE_
<android.icu.text.UCharacterIterator: void setIndex(int)> -> _SINK_
<android.icu.text.UCharacterIterator: void setToLimit()> -> _SINK_
<android.icu.text.UCharacterIterator: void setToStart()> -> _SINK_
<android.icu.util.Calendar.WeekData: java.lang.String toString()> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: <A extends Appendable> A appendTo(A)> -> _SINK_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: char charAt(int)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: int length()> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: boolean nextPosition(android.icu.text.ConstrainedFieldPosition)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: java.text.AttributedCharacterIterator toCharacterIterator()> -> _SOURCE_
<android.icu.text.RelativeDateTimeFormatter.FormattedRelativeDateTime: java.lang.String toString()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: java.lang.StringBuffer format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.SimpleDateFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)> -> _SOURCE_
<android.icu.text.SimpleDateFormat: java.sql.Date get2DigitYearStart()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: android.icu.text.DateFormatSymbols getDateFormatSymbols()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: android.icu.text.NumberFormat getNumberFormat(char)> -> _SOURCE_
<android.icu.text.SimpleDateFormat: android.icu.text.TimeZoneFormat getTimeZoneFormat()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: void set2DigitYearStart(java.sql.Date)> -> _SINK_
<android.icu.text.SimpleDateFormat: void setContext(android.icu.text.DisplayContext)> -> _SINK_
<android.icu.text.SimpleDateFormat: void setDateFormatSymbols(android.icu.text.DateFormatSymbols)> -> _SINK_
<android.icu.text.SimpleDateFormat: void setNumberFormat(java.lang.String,android.icu.text.NumberFormat)> -> _SINK_
<android.icu.text.SimpleDateFormat: void setNumberFormat(android.icu.text.NumberFormat)> -> _SINK_
<android.icu.text.SimpleDateFormat: void setTimeZoneFormat(android.icu.text.TimeZoneFormat)> -> _SINK_
<android.icu.text.SimpleDateFormat: java.lang.String toPattern()> -> _SOURCE_
<android.icu.util.CurrencyAmount: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.UnicodeSet.EntryRange: java.lang.String toString()> -> _SOURCE_
<android.icu.util.ChineseCalendar: void add(int,int)> -> _SINK_
<android.icu.util.ChineseCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.ChineseCalendar: void roll(int,int)> -> _SINK_
<android.icu.util.IllformedLocaleException: int getErrorIndex()> -> _SOURCE_
<android.icu.util.HebrewCalendar: void add(int,int)> -> _SINK_
<android.icu.util.HebrewCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.Calendar: void add(int,int)> -> _SINK_
<android.icu.util.Calendar: boolean after(java.lang.Object)> -> _SOURCE_
<android.icu.util.Calendar: boolean before(java.lang.Object)> -> _SOURCE_
<android.icu.util.Calendar: void clear()> -> _SINK_
<android.icu.util.Calendar: void clear(int)> -> _SINK_
<android.icu.util.Calendar: int fieldDifference(java.sql.Date,int)> -> _SOURCE_
<android.icu.util.Calendar: int get(int)> -> _SOURCE_
<android.icu.util.Calendar: int getActualMaximum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getActualMinimum(int)> -> _SOURCE_
<android.icu.util.Calendar: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.util.Calendar: android.icu.text.DateFormat getDateTimeFormat(int,int,android.icu.util.ULocale)> -> _SINK_
<android.icu.util.Calendar: android.icu.text.DateFormat getDateTimeFormat(int,int,androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.util.Calendar: java.lang.String getDisplayName(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.Calendar: java.lang.String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Calendar: int getFieldCount()> -> _SOURCE_
<android.icu.util.Calendar: int getGreatestMinimum(int)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance()> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance(android.icu.util.TimeZone,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance(android.icu.util.TimeZone,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance(android.icu.util.TimeZone)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.Calendar: String[] getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)> -> _SOURCE_
<android.icu.util.Calendar: int getLeastMaximum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getMaximum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getMinimum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getRepeatedWallTimeOption()> -> _SINK_
<android.icu.util.Calendar: int getSkippedWallTimeOption()> -> _SINK_
<android.icu.util.Calendar: Date getTime()> -> _SOURCE_
<android.icu.util.Calendar: long getTimeInMillis()> -> _SOURCE_
<android.icu.util.Calendar: android.icu.util.TimeZone getTimeZone()> -> _SOURCE_
<android.icu.util.Calendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.Calendar: int hashCode()> -> _SOURCE_
<android.icu.util.Calendar: boolean isSet(int)> -> _SOURCE_
<android.icu.util.Calendar: void set(int,int,int,int,int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int,int,int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int,int)> -> _SINK_
<android.icu.util.Calendar: void setFirstDayOfWeek(int)> -> _SINK_
<android.icu.util.Calendar: void setMinimalDaysInFirstWeek(int)> -> _SINK_
<android.icu.util.Calendar: void setRepeatedWallTimeOption(int)> -> _SINK_
<android.icu.util.Calendar: void setSkippedWallTimeOption(int)> -> _SINK_
<android.icu.util.Calendar: void setTime(java.sql.Date)> -> _SINK_
<android.icu.util.Calendar: void setTimeInMillis(long)> -> _SINK_
<android.icu.util.Calendar: void setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<android.icu.util.Calendar: android.icu.util.Calendar setWeekData(android.icu.util.Calendar.WeekData)> -> _SINK_
<android.icu.util.Calendar: java.lang.String toString()> -> _SOURCE_
<android.icu.util.Currency: Currency fromJavaCurrency(android.icu.util.Currency)> -> _SOURCE_
<android.icu.util.Currency: Set<Currency> getAvailableCurrencies()> -> _SOURCE_
<android.icu.util.Currency: String[] getAvailableCurrencyCodes(android.icu.util.ULocale,java.sql.Date)> -> _SOURCE_
<android.icu.util.Currency: String[] getAvailableCurrencyCodes(androidx.compose.ui.text.intl.Locale,java.sql.Date)> -> _SOURCE_
<android.icu.util.Currency: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.util.Currency: ULocale[] getAvailableULocales()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getCurrencyCode()> -> _SOURCE_
<android.icu.util.Currency: int getDefaultFractionDigits()> -> _SOURCE_
<android.icu.util.Currency: int getDefaultFractionDigits(android.icu.util.Currency.CurrencyUsage)> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getDisplayName()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Currency: Currency getInstance(java.lang.String)> -> _SOURCE_
<android.icu.util.Currency: Currency getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Currency: Currency getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.Currency: String[] getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getName(androidx.compose.ui.text.intl.Locale,int,java.lang.String,boolean[])> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getName(androidx.compose.ui.text.intl.Locale,int,boolean[])> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getName(android.icu.util.ULocale,int,boolean[])> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getName(android.icu.util.ULocale,int,java.lang.String,boolean[])> -> _SOURCE_
<android.icu.util.Currency: int getNumericCode()> -> _SOURCE_
<android.icu.util.Currency: double getRoundingIncrement()> -> _SOURCE_
<android.icu.util.Currency: double getRoundingIncrement(android.icu.util.Currency.CurrencyUsage)> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getSymbol()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getSymbol(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getSymbol(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.Currency: boolean isAvailable(java.lang.String,java.sql.Date,java.sql.Date)> -> _SOURCE_
<android.icu.util.Currency: android.icu.util.Currency toJavaCurrency()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String toString()> -> _SOURCE_
<android.icu.util.LocaleData.PaperSize: int getHeight()> -> _SOURCE_
<android.icu.util.LocaleData.PaperSize: int getWidth()> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getActualMaximum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getActualMinimum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.GregorianCalendar: void roll(int,int)> -> _SINK_
<android.icu.util.GregorianCalendar: void setGregorianChange(java.sql.Date)> -> _SINK_
<android.icu.util.DateInterval: long getFromDate()> -> _SOURCE_
<android.icu.util.DateInterval: long getToDate()> -> _SOURCE_
<android.icu.util.DateInterval: java.lang.String toString()> -> _SINK_
<android.icu.util.BuddhistCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.JapaneseCalendar: int getActualMaximum(int)> -> _SOURCE_
<android.icu.util.JapaneseCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.LocaleData: VersionInfo getCLDRVersion()> -> _SOURCE_
<android.icu.util.LocaleData: java.lang.String getDelimiter(int)> -> _SOURCE_
<android.icu.util.LocaleData: LocaleData getInstance(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.LocaleData: LocaleData getInstance()> -> _SOURCE_
<android.icu.util.LocaleData: LocaleData.MeasurementSystem getMeasurementSystem(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.LocaleData: LocaleData.PaperSize getPaperSize(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.Measure: java.lang.Number getNumber()> -> _SOURCE_
<android.icu.util.Measure: android.icu.util.MeasureUnit getUnit()> -> _SOURCE_
<android.icu.util.Measure: int hashCode()> -> _SOURCE_
<android.icu.util.Measure: java.lang.String toString()> -> _SOURCE_
<android.icu.util.EthiopicCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.EthiopicCalendar: boolean isAmeteAlemEra()> -> _SOURCE_
<android.icu.util.EthiopicCalendar: void setAmeteAlemEra(boolean)> -> _SINK_
<android.icu.util.CopticCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.IslamicCalendar: android.icu.util.IslamicCalendar.CalculationType getCalculationType()> -> _SOURCE_
<android.icu.util.IslamicCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.IslamicCalendar: void setCalculationType(android.icu.util.IslamicCalendar.CalculationType)> -> _SINK_
<android.icu.util.RangeValueIterator: boolean next(android.icu.util.RangeValueIterator.Element)> -> _SOURCE_
<android.icu.util.MeasureUnit: MeasureUnit forIdentifier(java.lang.String)> -> _SOURCE_
<android.icu.util.MeasureUnit: Set<MeasureUnit> getAvailable(java.lang.String)> -> _SOURCE_
<android.icu.util.MeasureUnit: Set<MeasureUnit> getAvailable()> -> _SINK_
<android.icu.util.MeasureUnit: Set<String> getAvailableTypes()> -> _SOURCE_
<android.icu.util.MeasureUnit: MeasureUnit.Complexity getComplexity()> -> _SOURCE_
<android.icu.util.MeasureUnit: int getDimensionality()> -> _SOURCE_
<android.icu.util.MeasureUnit: java.lang.String getIdentifier()> -> _SOURCE_
<android.icu.util.MeasureUnit: java.lang.String getSubtype()> -> _SOURCE_
<android.icu.util.MeasureUnit: java.lang.String getType()> -> _SOURCE_
<android.icu.util.MeasureUnit: android.icu.util.MeasureUnit product(android.icu.util.MeasureUnit)> -> _SOURCE_
<android.icu.util.MeasureUnit: List<MeasureUnit> splitToSingleUnits()> -> _SOURCE_
<android.icu.util.MeasureUnit: java.lang.String toString()> -> _SOURCE_
<android.icu.util.MeasureUnit: android.icu.util.MeasureUnit withDimensionality(int)> -> _SINK_
<android.icu.util.TimeZone: int countEquivalentIDs(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: String[] getAvailableIDs()> -> _SOURCE_
<android.icu.util.TimeZone: String[] getAvailableIDs(int)> -> _SOURCE_
<android.icu.util.TimeZone: Set<String> getAvailableIDs(android.icu.util.TimeZone.SystemTimeZoneType,java.lang.String,java.lang.Integer)> -> _SOURCE_
<android.icu.util.TimeZone: String[] getAvailableIDs(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: String getCanonicalID(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: String getCanonicalID(java.lang.String,boolean[])> -> _SOURCE_
<android.icu.util.TimeZone: int getDSTSavings()> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getDefault()> -> _SOURCE_
<android.icu.util.TimeZone: java.lang.String getDisplayName(boolean,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName()> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.TimeZone: java.lang.String getDisplayName(boolean,int,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName(boolean,int)> -> _SOURCE_
<android.icu.util.TimeZone: String getEquivalentID(java.lang.String,int)> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getFrozenTimeZone(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: java.lang.String getID()> -> _SOURCE_
<android.icu.util.TimeZone: void getOffset(long,boolean,int[])> -> _SOURCE_
<android.icu.util.TimeZone: int getOffset(long)> -> _SOURCE_
<android.icu.util.TimeZone: int getOffset(int,int,int,int,int,int)> -> _SOURCE_
<android.icu.util.TimeZone: int getRawOffset()> -> _SINK_
<android.icu.util.TimeZone: String getRegion(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: String getTZDataVersion()> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getTimeZone(java.lang.String,int)> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getTimeZone(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: boolean inDaylightTime(java.sql.Date)> -> _SOURCE_
<android.icu.util.TimeZone: boolean observesDaylightTime()> -> _SOURCE_
<android.icu.util.TimeZone: void setID(java.lang.String)> -> _SINK_
<android.icu.util.TimeZone: void setRawOffset(int)> -> _SINK_
<android.icu.util.TimeZone: boolean useDaylightTime()> -> _SOURCE_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder addUnicodeLocaleAttribute(java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale build()> -> _SOURCE_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder removeUnicodeLocaleAttribute(java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setExtension(char,java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setLanguage(java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setRegion(java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setScript(java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setVariant(java.lang.String)> -> _SINK_
<android.icu.util.UniversalTimeScale: BigDecimal bigDecimalFrom(android.icu.math.BigDecimal,int)> -> _SOURCE_
<android.icu.util.UniversalTimeScale: long getTimeScaleValue(int,int)> -> _SOURCE_
<android.icu.util.TaiwanCalendar: java.lang.String getType()> -> _SOURCE_
<android.icu.util.ValueIterator: void reset()> -> _SINK_
<android.icu.util.ULocale: ULocale acceptLanguage(ULocale[],boolean[])> -> _SINK_
<android.icu.util.ULocale: ULocale acceptLanguage(java.lang.String,ULocale[],boolean[])> -> _SOURCE_
<android.icu.util.ULocale: ULocale acceptLanguage(ULocale[],ULocale[],boolean[])> -> _SINK_
<android.icu.util.ULocale: ULocale acceptLanguage(java.lang.String,boolean[])> -> _SOURCE_
<android.icu.util.ULocale: ULocale addLikelySubtags(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String canonicalize(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.Object clone()> -> _SOURCE_
<android.icu.util.ULocale: ULocale createCanonical(java.lang.String)> -> _SINK_
<android.icu.util.ULocale: ULocale forLanguageTag(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: ULocale forLocale(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.ULocale: ULocale[] getAvailableLocales()> -> _SOURCE_
<android.icu.util.ULocale: Collection<ULocale> getAvailableLocalesByType(android.icu.util.ULocale.AvailableType)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getBaseName()> -> _SOURCE_
<android.icu.util.ULocale: String getBaseName(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getCharacterOrientation()> -> _SOURCE_
<android.icu.util.ULocale: String getCountry(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getCountry()> -> _SOURCE_
<android.icu.util.ULocale: ULocale getDefault()> -> _SOURCE_
<android.icu.util.ULocale: ULocale getDefault(android.icu.util.ULocale.Category)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayCountry()> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayCountry(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.util.ULocale: java.lang.String getDisplayCountry(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayCountry(java.lang.String,android.icu.util.ULocale)> -> _SINK_
<android.icu.util.ULocale: String getDisplayKeyword(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayKeyword(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayKeyword(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayLanguage(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayLanguage(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayLanguage(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayLanguage()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayLanguageWithDialect(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayName()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayName(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayName(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayName(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayNameWithDialect(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect()> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayScript(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.util.ULocale: String getDisplayScript(java.lang.String,android.icu.util.ULocale)> -> _SINK_
<android.icu.util.ULocale: java.lang.String getDisplayScript()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayScript(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayVariant(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayVariant()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getDisplayVariant(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: String getDisplayVariant(java.lang.String,android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getExtension(char)> -> _SOURCE_
<android.icu.util.ULocale: Set<Character> getExtensionKeys()> -> _SOURCE_
<android.icu.util.ULocale: android.icu.util.ULocale getFallback()> -> _SINK_
<android.icu.util.ULocale: String getFallback(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getISO3Country()> -> _SOURCE_
<android.icu.util.ULocale: String getISO3Country(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getISO3Language()> -> _SOURCE_
<android.icu.util.ULocale: String getISO3Language(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: String[] getISOCountries()> -> _SOURCE_
<android.icu.util.ULocale: String[] getISOLanguages()> -> _SOURCE_
<android.icu.util.ULocale: String getKeywordValue(java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: Iterator<String> getKeywords(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: Iterator<String> getKeywords()> -> _SOURCE_
<android.icu.util.ULocale: String getLanguage(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getLanguage()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getName()> -> _SOURCE_
<android.icu.util.ULocale: String getName(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getScript()> -> _SOURCE_
<android.icu.util.ULocale: String getScript(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: Set<String> getUnicodeLocaleAttributes()> -> _SOURCE_
<android.icu.util.ULocale: Set<String> getUnicodeLocaleKeys()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getUnicodeLocaleType(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String getVariant()> -> _SOURCE_
<android.icu.util.ULocale: String getVariant(java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: int hashCode()> -> _SOURCE_
<android.icu.util.ULocale: boolean isRightToLeft()> -> _SOURCE_
<android.icu.util.ULocale: ULocale minimizeSubtags(android.icu.util.ULocale)> -> _SOURCE_
<android.icu.util.ULocale: android.icu.util.ULocale setKeywordValue(java.lang.String,java.lang.String)> -> _SINK_
<android.icu.util.ULocale: String setKeywordValue(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String toLanguageTag()> -> _SOURCE_
<android.icu.util.ULocale: java.lang.String toString()> -> _SOURCE_
<android.icu.util.VersionInfo: int compareTo(android.icu.util.VersionInfo)> -> _SOURCE_
<android.icu.util.VersionInfo: boolean equals(java.lang.Object)> -> _SOURCE_
<android.icu.util.VersionInfo: VersionInfo getInstance(java.lang.String)> -> _SOURCE_
<android.icu.util.VersionInfo: VersionInfo getInstance(int,int,int,int)> -> _SOURCE_
<android.icu.util.VersionInfo: VersionInfo getInstance(int,int)> -> _SOURCE_
<android.icu.util.VersionInfo: VersionInfo getInstance(int,int,int)> -> _SOURCE_
<android.icu.util.VersionInfo: VersionInfo getInstance(int)> -> _SOURCE_
<android.icu.util.VersionInfo: int getMajor()> -> _SOURCE_
<android.icu.util.VersionInfo: int getMicro()> -> _SOURCE_
<android.icu.util.VersionInfo: int getMilli()> -> _SOURCE_
<android.icu.util.VersionInfo: int getMinor()> -> _SOURCE_
<android.icu.util.VersionInfo: int hashCode()> -> _SOURCE_
<android.icu.util.VersionInfo: java.lang.String toString()> -> _SOURCE_
<android.icu.util.Output: java.lang.String toString()> -> _SOURCE_
<android.icu.util.IndianCalendar: java.lang.String getType()> -> _SOURCE_
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void onText(java.lang.CharSequence)> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: boolean isEnabled()> -> _SOURCE_
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void setEnabled(boolean)> -> _SINK_
<android.location.Geocoder: List<Address> getFromLocation(double,double,int)> -> _SOURCE_
<android.location.Geocoder: void getFromLocation(double,double,int,Geocoder.GeocodeListener)> -> _SOURCE_
<android.location.Geocoder: List<Address> getFromLocationName(java.lang.String,int,double,double,double,double)> -> _SOURCE_
<android.location.Geocoder: void getFromLocationName(java.lang.String,int,double,double,double,double,Geocoder.GeocodeListener)> -> _SOURCE_
<android.location.Geocoder: void getFromLocationName(java.lang.String,int,Geocoder.GeocodeListener)> -> _SOURCE_
<android.location.Geocoder: List<Address> getFromLocationName(java.lang.String,int)> -> _SOURCE_
<android.location.Geocoder: boolean isPresent()> -> _SOURCE_
<android.inputmethodservice.ExtractEditText: boolean hasFocus()> -> _SINK_
<android.inputmethodservice.ExtractEditText: boolean hasWindowFocus()> -> _SINK_
<android.inputmethodservice.ExtractEditText: boolean isFocused()> -> _SINK_
<android.inputmethodservice.ExtractEditText: boolean isInputMethodTarget()> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setExtractedText(android.view.inputmethod.ExtractedText)> -> _SINK_
<android.inputmethodservice.ExtractEditText: void startInternalChanges()> -> _SINK_
<android.location.Criteria: int describeContents()> -> _SOURCE_
<android.location.Criteria: int getAccuracy()> -> _SOURCE_
<android.location.Criteria: int getBearingAccuracy()> -> _SOURCE_
<android.location.Criteria: int getHorizontalAccuracy()> -> _SOURCE_
<android.location.Criteria: int getPowerRequirement()> -> _SOURCE_
<android.location.Criteria: int getSpeedAccuracy()> -> _SOURCE_
<android.location.Criteria: int getVerticalAccuracy()> -> _SOURCE_
<android.location.Criteria: boolean isAltitudeRequired()> -> _SOURCE_
<android.location.Criteria: boolean isBearingRequired()> -> _SOURCE_
<android.location.Criteria: boolean isCostAllowed()> -> _SOURCE_
<android.location.Criteria: boolean isSpeedRequired()> -> _SOURCE_
<android.location.Criteria: void setAccuracy(int)> -> _SINK_
<android.location.Criteria: void setAltitudeRequired(boolean)> -> _SINK_
<android.location.Criteria: void setBearingAccuracy(int)> -> _SINK_
<android.location.Criteria: void setBearingRequired(boolean)> -> _SINK_
<android.location.Criteria: void setCostAllowed(boolean)> -> _SINK_
<android.location.Criteria: void setHorizontalAccuracy(int)> -> _SINK_
<android.location.Criteria: void setPowerRequirement(int)> -> _SINK_
<android.location.Criteria: void setSpeedAccuracy(int)> -> _SINK_
<android.location.Criteria: void setSpeedRequired(boolean)> -> _SINK_
<android.location.Criteria: void setVerticalAccuracy(int)> -> _SINK_
<android.location.Criteria: java.lang.String toString()> -> _SOURCE_
<android.location.GnssAntennaInfo.Builder: android.location.GnssAntennaInfo build()> -> _SOURCE_
<android.location.GnssAntennaInfo.Builder: android.location.GnssAntennaInfo.Builder setCarrierFrequencyMHz(double)> -> _SINK_
<android.location.GnssAntennaInfo.Builder: android.location.GnssAntennaInfo.Builder setPhaseCenterOffset(android.location.GnssAntennaInfo.PhaseCenterOffset)> -> _SINK_
<android.location.GnssAntennaInfo.Builder: android.location.GnssAntennaInfo.Builder setPhaseCenterVariationCorrections(android.location.GnssAntennaInfo.SphericalCorrections)> -> _SINK_
<android.location.GnssAntennaInfo.Builder: android.location.GnssAntennaInfo.Builder setSignalGainCorrections(android.location.GnssAntennaInfo.SphericalCorrections)> -> _SINK_
<android.location.GnssAntennaInfo.SphericalCorrections: int describeContents()> -> _SOURCE_
<android.location.GnssAntennaInfo.SphericalCorrections: double[][] getCorrectionUncertaintiesArray()> -> _SOURCE_
<android.location.GnssAntennaInfo.SphericalCorrections: double[][] getCorrectionsArray()> -> _SINK_
<android.location.GnssAntennaInfo.SphericalCorrections: double getDeltaPhi()> -> _SINK_
<android.location.GnssAntennaInfo.SphericalCorrections: double getDeltaTheta()> -> _SINK_
<android.location.GnssAntennaInfo.SphericalCorrections: java.lang.String toString()> -> _SOURCE_
<android.location.GnssNavigationMessage: int describeContents()> -> _SOURCE_
<android.location.GnssNavigationMessage: byte[] getData()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getMessageId()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getStatus()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getSubmessageId()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getSvid()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getType()> -> _SOURCE_
<android.location.GnssNavigationMessage: java.lang.String toString()> -> _SOURCE_
<android.location.GnssMeasurementRequest: int describeContents()> -> _SOURCE_
<android.location.GnssMeasurementRequest: int getIntervalMillis()> -> _SOURCE_
<android.location.GnssMeasurementRequest: boolean isFullTracking()> -> _SINK_
<android.location.GnssMeasurementRequest: java.lang.String toString()> -> _SOURCE_
<android.location.GnssMeasurementRequest.Builder: android.location.GnssMeasurementRequest build()> -> _SINK_
<android.location.GnssMeasurementRequest.Builder: android.location.GnssMeasurementRequest.Builder setFullTracking(boolean)> -> _SINK_
<android.location.GnssMeasurementRequest.Builder: android.location.GnssMeasurementRequest.Builder setIntervalMillis(int)> -> _SINK_
<android.location.GnssMeasurementsEvent: int describeContents()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: android.location.GnssClock getClock()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: Collection<GnssAutomaticGainControl> getGnssAutomaticGainControls()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: Collection<GnssMeasurement> getMeasurements()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: java.lang.String toString()> -> _SOURCE_
<android.location.GnssClock: int describeContents()> -> _SOURCE_
<android.location.GnssClock: double getBiasUncertaintyNanos()> -> _SOURCE_
<android.location.GnssClock: double getDriftNanosPerSecond()> -> _SOURCE_
<android.location.GnssClock: double getDriftUncertaintyNanosPerSecond()> -> _SOURCE_
<android.location.GnssClock: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.location.GnssClock: double getElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.location.GnssClock: long getFullBiasNanos()> -> _SOURCE_
<android.location.GnssClock: int getHardwareClockDiscontinuityCount()> -> _SOURCE_
<android.location.GnssClock: double getReferenceCarrierFrequencyHzForIsb()> -> _SOURCE_
<android.location.GnssClock: java.lang.String getReferenceCodeTypeForIsb()> -> _SOURCE_
<android.location.GnssClock: int getReferenceConstellationTypeForIsb()> -> _SOURCE_
<android.location.GnssClock: long getTimeNanos()> -> _SOURCE_
<android.location.GnssClock: double getTimeUncertaintyNanos()> -> _SOURCE_
<android.location.GnssClock: boolean hasBiasNanos()> -> _SOURCE_
<android.location.GnssClock: boolean hasBiasUncertaintyNanos()> -> _SOURCE_
<android.location.GnssClock: boolean hasDriftNanosPerSecond()> -> _SOURCE_
<android.location.GnssClock: boolean hasDriftUncertaintyNanosPerSecond()> -> _SOURCE_
<android.location.GnssClock: boolean hasElapsedRealtimeNanos()> -> _SOURCE_
<android.location.GnssClock: boolean hasElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.location.GnssClock: boolean hasFullBiasNanos()> -> _SOURCE_
<android.location.GnssClock: boolean hasLeapSecond()> -> _SOURCE_
<android.location.GnssClock: boolean hasReferenceCarrierFrequencyHzForIsb()> -> _SOURCE_
<android.location.GnssClock: boolean hasReferenceCodeTypeForIsb()> -> _SOURCE_
<android.location.GnssClock: boolean hasReferenceConstellationTypeForIsb()> -> _SOURCE_
<android.location.GnssClock: boolean hasTimeUncertaintyNanos()> -> _SOURCE_
<android.location.GnssClock: java.lang.String toString()> -> _SOURCE_
<android.inputmethodservice.Keyboard.Key: int[] getCurrentDrawableState()> -> _SOURCE_
<android.inputmethodservice.Keyboard.Key: int squaredDistanceFrom(int,int)> -> _SOURCE_
<android.location.Address: int describeContents()> -> _SOURCE_
<android.location.Address: java.lang.String getAddressLine(int)> -> _SOURCE_
<android.location.Address: java.lang.String getAdminArea()> -> _SOURCE_
<android.location.Address: java.lang.String getCountryCode()> -> _SOURCE_
<android.location.Address: java.lang.String getCountryName()> -> _SOURCE_
<android.location.Address: android.os.Bundle getExtras()> -> _SOURCE_
<android.location.Address: java.lang.String getFeatureName()> -> _SOURCE_
<android.location.Address: double getLatitude()> -> _SOURCE_
<android.location.Address: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<android.location.Address: java.lang.String getLocality()> -> _SOURCE_
<android.location.Address: double getLongitude()> -> _SOURCE_
<android.location.Address: int getMaxAddressLineIndex()> -> _SOURCE_
<android.location.Address: java.lang.String getPhone()> -> _SOURCE_
<android.location.Address: java.lang.String getPostalCode()> -> _SOURCE_
<android.location.Address: java.lang.String getPremises()> -> _SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()> -> _SOURCE_
<android.location.Address: java.lang.String getSubLocality()> -> _SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()> -> _SOURCE_
<android.location.Address: java.lang.String getThoroughfare()> -> _SOURCE_
<android.location.Address: java.lang.String getUrl()> -> _SOURCE_
<android.location.Address: boolean hasLatitude()> -> _SOURCE_
<android.location.Address: boolean hasLongitude()> -> _SOURCE_
<android.location.Address: void setAddressLine(int,java.lang.String)> -> _SINK_
<android.location.Address: void setAdminArea(java.lang.String)> -> _SINK_
<android.location.Address: void setCountryCode(java.lang.String)> -> _SINK_
<android.location.Address: void setCountryName(java.lang.String)> -> _SINK_
<android.location.Address: void setExtras(android.os.Bundle)> -> _SINK_
<android.location.Address: void setFeatureName(java.lang.String)> -> _SOURCE_
<android.location.Address: void setLatitude(double)> -> _SINK_
<android.location.Address: void setLocality(java.lang.String)> -> _SINK_
<android.location.Address: void setLongitude(double)> -> _SINK_
<android.location.Address: void setPhone(java.lang.String)> -> _SINK_
<android.location.Address: void setPostalCode(java.lang.String)> -> _SINK_
<android.location.Address: void setPremises(java.lang.String)> -> _SINK_
<android.location.Address: void setSubAdminArea(java.lang.String)> -> _SINK_
<android.location.Address: void setSubLocality(java.lang.String)> -> _SINK_
<android.location.Address: void setSubThoroughfare(java.lang.String)> -> _SINK_
<android.location.Address: void setThoroughfare(java.lang.String)> -> _SINK_
<android.location.Address: void setUrl(java.lang.String)> -> _SINK_
<android.location.Address: java.lang.String toString()> -> _SOURCE_
<android.location.GnssCapabilities.Builder: android.location.GnssCapabilities build()> -> _SINK_
<android.location.GnssCapabilities.Builder: android.location.GnssCapabilities.Builder setHasAntennaInfo(boolean)> -> _SINK_
<android.location.GnssCapabilities.Builder: android.location.GnssCapabilities.Builder setHasMeasurements(boolean)> -> _SINK_
<android.location.GnssCapabilities.Builder: android.location.GnssCapabilities.Builder setHasNavigationMessages(boolean)> -> _SINK_
<android.location.GnssStatus.Callback: void onFirstFix(int)> -> _SOURCE_
<android.location.GnssMeasurementsEvent.Callback: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)> -> _SOURCE_
<android.location.GnssMeasurementsEvent.Callback: void onStatusChanged(int)> -> _SOURCE_
<android.location.GnssStatus.Builder: android.location.GnssStatus build()> -> _SINK_
<android.location.GnssNavigationMessage.Callback: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)> -> _SOURCE_
<android.location.GnssNavigationMessage.Callback: void onStatusChanged(int)> -> _SOURCE_
<android.inputmethodservice.AbstractInputMethodService: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: int describeContents()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: double getXOffsetMm()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: double getXOffsetUncertaintyMm()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: double getYOffsetMm()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: double getYOffsetUncertaintyMm()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: double getZOffsetMm()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: double getZOffsetUncertaintyMm()> -> _SOURCE_
<android.location.GnssAntennaInfo.PhaseCenterOffset: java.lang.String toString()> -> _SOURCE_
<android.location.GpsStatus: GpsStatus create(android.location.GnssStatus,int)> -> _SOURCE_
<android.location.GpsStatus: int getMaxSatellites()> -> _SOURCE_
<android.location.GpsStatus: Iterable<GpsSatellite> getSatellites()> -> _SOURCE_
<android.location.GpsStatus: int getTimeToFirstFix()> -> _SOURCE_
<android.location.LocationListener: default void onLocationChanged(List<Location>)> -> _SINK_
<android.location.LocationProvider: int getAccuracy()> -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()> -> _SOURCE_
<android.location.LocationProvider: int getPowerRequirement()> -> _SOURCE_
<android.location.LocationProvider: boolean hasMonetaryCost()> -> _SOURCE_
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)> -> _SOURCE_
<android.location.LocationProvider: boolean requiresCell()> -> _SOURCE_
<android.location.LocationProvider: boolean requiresNetwork()> -> _SOURCE_
<android.location.LocationProvider: boolean requiresSatellite()> -> _SOURCE_
<android.location.LocationProvider: boolean supportsAltitude()> -> _SOURCE_
<android.location.LocationProvider: boolean supportsBearing()> -> _SOURCE_
<android.location.LocationProvider: boolean supportsSpeed()> -> _SOURCE_
<android.location.GnssStatus: int describeContents()> -> _SOURCE_
<android.location.GnssStatus: float getAzimuthDegrees(int)> -> _SOURCE_
<android.location.GnssStatus: float getBasebandCn0DbHz(int)> -> _SOURCE_
<android.location.GnssStatus: float getCarrierFrequencyHz(int)> -> _SOURCE_
<android.location.GnssStatus: float getCn0DbHz(int)> -> _SOURCE_
<android.location.GnssStatus: int getConstellationType(int)> -> _SOURCE_
<android.location.GnssStatus: float getElevationDegrees(int)> -> _SOURCE_
<android.location.GnssStatus: int getSatelliteCount()> -> _SOURCE_
<android.location.GnssStatus: int getSvid(int)> -> _SOURCE_
<android.location.GnssStatus: boolean hasAlmanacData(int)> -> _SOURCE_
<android.location.GnssStatus: boolean hasBasebandCn0DbHz(int)> -> _SOURCE_
<android.location.GnssStatus: boolean hasCarrierFrequencyHz(int)> -> _SOURCE_
<android.location.GnssStatus: boolean hasEphemerisData(int)> -> _SOURCE_
<android.location.GnssCapabilities: int describeContents()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasAntennaInfo()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasGnssAntennaInfo()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasMeasurements()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasNavigationMessages()> -> _SOURCE_
<android.location.GnssCapabilities: java.lang.String toString()> -> _SOURCE_
<android.location.OnNmeaMessageListener: void onNmeaMessage(java.lang.String,long)> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: ApplicationMediaCapabilities createFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: int describeContents()> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: List<String> getSupportedHdrTypes()> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: List<String> getSupportedVideoMimeTypes()> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: List<String> getUnsupportedHdrTypes()> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: List<String> getUnsupportedVideoMimeTypes()> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: boolean isFormatSpecified(java.lang.String)> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: boolean isHdrTypeSupported(java.lang.String)> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: boolean isVideoMimeTypeSupported(java.lang.String)> -> _SOURCE_
<android.media.ApplicationMediaCapabilities: java.lang.String toString()> -> _SOURCE_
<android.location.provider.ProviderProperties: int describeContents()> -> _SOURCE_
<android.location.provider.ProviderProperties: int getAccuracy()> -> _SOURCE_
<android.location.provider.ProviderProperties: int getPowerUsage()> -> _SOURCE_
<android.location.provider.ProviderProperties: boolean hasAltitudeSupport()> -> _SINK_
<android.location.provider.ProviderProperties: boolean hasBearingSupport()> -> _SINK_
<android.location.provider.ProviderProperties: boolean hasCellRequirement()> -> _SINK_
<android.location.provider.ProviderProperties: boolean hasMonetaryCost()> -> _SINK_
<android.location.provider.ProviderProperties: boolean hasNetworkRequirement()> -> _SINK_
<android.location.provider.ProviderProperties: boolean hasSatelliteRequirement()> -> _SINK_
<android.location.provider.ProviderProperties: boolean hasSpeedSupport()> -> _SINK_
<android.location.provider.ProviderProperties: java.lang.String toString()> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(java.util.concurrent.Executor,android.location.OnNmeaMessageListener)> -> _SINK_
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties)> -> _SINK_
<android.location.LocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,Set<String>)> -> _SINK_
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> -> _SINK_
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> -> _SINK_
<android.location.LocationManager: List<String> getAllProviders()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.location.LocationManager: void getCurrentLocation(java.lang.String,android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)> -> _SOURCE_
<android.location.LocationManager: void getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)> -> _SOURCE_
<android.location.LocationManager: List<GnssAntennaInfo> getGnssAntennaInfos()> -> _SOURCE_
<android.location.LocationManager: android.location.GnssCapabilities getGnssCapabilities()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getGnssHardwareModelName()> -> _SOURCE_
<android.location.LocationManager: int getGnssYearOfHardware()> -> _SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: List<String> getProviders(boolean)> -> _SOURCE_
<android.location.LocationManager: List<String> getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<android.location.LocationManager: boolean hasProvider(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean isLocationEnabled()> -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,android.location.LocationRequest,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.location.Location: float bearingTo(android.location.Location)> -> _SOURCE_
<android.location.Location: double convert(java.lang.String)> -> _SOURCE_
<android.location.Location: int describeContents()> -> _SOURCE_
<android.location.Location: float distanceTo(android.location.Location)> -> _SOURCE_
<android.location.Location: void dump(android.util.Printer,java.lang.String)> -> _SOURCE_
<android.location.Location: float getAccuracy()> -> _SOURCE_
<android.location.Location: double getAltitude()> -> _SOURCE_
<android.location.Location: float getBearing()> -> _SOURCE_
<android.location.Location: float getBearingAccuracyDegrees()> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeAgeMillis(long)> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeAgeMillis()> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeMillis()> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.location.Location: double getElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<android.location.Location: java.lang.String getProvider()> -> _SOURCE_
<android.location.Location: float getSpeed()> -> _SOURCE_
<android.location.Location: float getSpeedAccuracyMetersPerSecond()> -> _SOURCE_
<android.location.Location: long getTime()> -> _SOURCE_
<android.location.Location: float getVerticalAccuracyMeters()> -> _SOURCE_
<android.location.Location: boolean hasAccuracy()> -> _SOURCE_
<android.location.Location: boolean hasAltitude()> -> _SOURCE_
<android.location.Location: boolean hasBearingAccuracy()> -> _SOURCE_
<android.location.Location: boolean hasElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.location.Location: boolean hasSpeedAccuracy()> -> _SOURCE_
<android.location.Location: boolean hasVerticalAccuracy()> -> _SOURCE_
<android.location.Location: boolean isComplete()> -> _SOURCE_
<android.location.Location: boolean isMock()> -> _SOURCE_
<android.location.Location: void removeAccuracy()> -> _SINK_
<android.location.Location: void removeAltitude()> -> _SINK_
<android.location.Location: void removeElapsedRealtimeUncertaintyNanos()> -> _SINK_
<android.location.Location: void removeSpeed()> -> _SINK_
<android.location.Location: void removeSpeedAccuracy()> -> _SINK_
<android.location.Location: void removeVerticalAccuracy()> -> _SINK_
<android.location.Location: void reset()> -> _SINK_
<android.location.Location: void setAccuracy(float)> -> _SINK_
<android.location.Location: void setAltitude(double)> -> _SINK_
<android.location.Location: void setElapsedRealtimeNanos(long)> -> _SINK_
<android.location.Location: void setElapsedRealtimeUncertaintyNanos(double)> -> _SOURCE_
<android.location.Location: void setExtras(android.os.Bundle)> -> _SINK_
<android.location.Location: void setLatitude(double)> -> _SINK_
<android.location.Location: void setLongitude(double)> -> _SINK_
<android.location.Location: void setMock(boolean)> -> _SINK_
<android.location.Location: void setProvider(java.lang.String)> -> _SINK_
<android.location.Location: void setSpeed(float)> -> _SINK_
<android.location.Location: void setSpeedAccuracyMetersPerSecond(float)> -> _SINK_
<android.location.Location: void setTime(long)> -> _SINK_
<android.location.Location: void setVerticalAccuracyMeters(float)> -> _SINK_
<android.location.Location: java.lang.String toString()> -> _SOURCE_
<android.media.ApplicationMediaCapabilities.Builder: android.media.ApplicationMediaCapabilities.Builder addSupportedHdrType(java.lang.String)> -> _SINK_
<android.media.ApplicationMediaCapabilities.Builder: android.media.ApplicationMediaCapabilities.Builder addSupportedVideoMimeType(java.lang.String)> -> _SINK_
<android.media.ApplicationMediaCapabilities.Builder: android.media.ApplicationMediaCapabilities.Builder addUnsupportedHdrType(java.lang.String)> -> _SINK_
<android.media.ApplicationMediaCapabilities.Builder: android.media.ApplicationMediaCapabilities.Builder addUnsupportedVideoMimeType(java.lang.String)> -> _SINK_
<android.media.ApplicationMediaCapabilities.Builder: android.media.ApplicationMediaCapabilities build()> -> _SOURCE_
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setContentType(int)> -> _SINK_
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setFlags(int)> -> _SINK_
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setLegacyStreamType(int)> -> _SINK_
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setSpatializationBehavior(int)> -> _SINK_
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setUsage(int)> -> _SINK_
<android.location.GpsSatellite: float getAzimuth()> -> _SOURCE_
<android.location.GpsSatellite: float getElevation()> -> _SOURCE_
<android.location.GpsSatellite: int getPrn()> -> _SOURCE_
<android.location.GpsSatellite: float getSnr()> -> _SOURCE_
<android.location.GpsSatellite: boolean hasAlmanac()> -> _SOURCE_
<android.location.GpsSatellite: boolean hasEphemeris()> -> _SOURCE_
<android.location.GpsSatellite: boolean usedInFix()> -> _SOURCE_
<android.media.AudioFocusRequest: boolean acceptsDelayedFocusGain()> -> _SOURCE_
<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.media.AudioFocusRequest: int getFocusGain()> -> _SOURCE_
<android.media.AudioAttributes: int describeContents()> -> _SOURCE_
<android.media.AudioAttributes: int getContentType()> -> _SOURCE_
<android.media.AudioAttributes: int getFlags()> -> _SINK_
<android.media.AudioAttributes: int getUsage()> -> _SOURCE_
<android.media.AudioAttributes: int getVolumeControlStream()> -> _SOURCE_
<android.media.AudioAttributes: boolean isContentSpatialized()> -> _SOURCE_
<android.media.AudioAttributes: java.lang.String toString()> -> _SOURCE_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setAccuracy(int)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasAltitudeSupport(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasBearingSupport(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasCellRequirement(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasMonetaryCost(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasNetworkRequirement(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasSatelliteRequirement(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setHasSpeedSupport(boolean)> -> _SINK_
<android.location.provider.ProviderProperties.Builder: android.location.provider.ProviderProperties.Builder setPowerUsage(int)> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAcceptsDelayedFocusGain(boolean)> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setFocusGain(int)> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setForceDucking(boolean)> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)> -> _SINK_
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,android.os.Handler)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest build()> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder clearMinUpdateIntervalMillis()> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setDurationMillis(long)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setIntervalMillis(long)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setMaxUpdateDelayMillis(long)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setMaxUpdates(int)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setMinUpdateDistanceMeters(float)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setMinUpdateIntervalMillis(long)> -> _SINK_
<android.location.LocationRequest.Builder: android.location.LocationRequest.Builder setQuality(int)> -> _SINK_
<android.media.AudioFormat: int describeContents()> -> _SOURCE_
<android.media.AudioFormat: int getChannelCount()> -> _SOURCE_
<android.media.AudioFormat: int getChannelIndexMask()> -> _SOURCE_
<android.media.AudioFormat: int getChannelMask()> -> _SINK_
<android.media.AudioFormat: int getEncoding()> -> _SOURCE_
<android.media.AudioFormat: int getFrameSizeInBytes()> -> _SOURCE_
<android.media.AudioFormat: int getSampleRate()> -> _SOURCE_
<android.media.AudioFormat: java.lang.String toString()> -> _SOURCE_
<android.location.SettingInjectorService: void onStart(android.content.Intent,int)> -> _SINK_
<android.location.SettingInjectorService: void refreshSettings(android.content.Context)> -> _SINK_
<android.location.LocationRequest: int describeContents()> -> _SOURCE_
<android.location.LocationRequest: long getDurationMillis()> -> _SOURCE_
<android.location.LocationRequest: long getIntervalMillis()> -> _SOURCE_
<android.location.LocationRequest: long getMaxUpdateDelayMillis()> -> _SOURCE_
<android.location.LocationRequest: float getMinUpdateDistanceMeters()> -> _SOURCE_
<android.location.LocationRequest: long getMinUpdateIntervalMillis()> -> _SOURCE_
<android.location.LocationRequest: int getQuality()> -> _SOURCE_
<android.location.LocationRequest: java.lang.String toString()> -> _SOURCE_
<android.media.AudioMetadata.Key: String getName()> -> _SOURCE_
<android.media.AudioMetadata.Key: Class getValueClass()> -> _SOURCE_
<android.media.AudioManager.OnModeChangedListener: void onModeChanged(int)> -> _SINK_
<android.media.AudioMetadataReadMap:  boolean containsKey(Key)> -> _SOURCE_
<android.media.AudioMetadataReadMap:  T get(Key)> -> _SOURCE_
<android.media.AudioMetadataReadMap: int size()> -> _SOURCE_
<android.media.AudioMetadataMap:  T set(Key,T)> -> _SINK_
<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)> -> _SINK_
<android.media.AudioManager: void addOnCommunicationDeviceChangedListener(java.util.concurrent.Executor,android.media.AudioManager.OnCommunicationDeviceChangedListener)> -> _SINK_
<android.media.AudioManager: void addOnModeChangedListener(java.util.concurrent.Executor,android.media.AudioManager.OnModeChangedListener)> -> _SINK_
<android.media.AudioManager: void adjustStreamVolume(int,int,int)> -> _SINK_
<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)> -> _SINK_
<android.media.AudioManager: void clearCommunicationDevice()> -> _SINK_
<android.media.AudioManager: int generateAudioSessionId()> -> _SOURCE_
<android.media.AudioManager: List<AudioPlaybackConfiguration> getActivePlaybackConfigurations()> -> _SOURCE_
<android.media.AudioManager: List<AudioRecordingConfiguration> getActiveRecordingConfigurations()> -> _SOURCE_
<android.media.AudioManager: List<AudioDeviceInfo> getAudioDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioManager: int getAudioHwSyncForSession(int)> -> _SOURCE_
<android.media.AudioManager: List<AudioDeviceInfo> getAvailableCommunicationDevices()> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceInfo getCommunicationDevice()> -> _SOURCE_
<android.media.AudioManager: AudioDeviceInfo[] getDevices(int)> -> _SOURCE_
<android.media.AudioManager: int getDirectPlaybackSupport(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioManager: List<AudioProfile> getDirectProfilesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioManager: int getEncodedSurroundMode()> -> _SINK_
<android.media.AudioManager: List<MicrophoneInfo> getMicrophones()> -> _SOURCE_
<android.media.AudioManager: int getMode()> -> _SOURCE_
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)> -> _SOURCE_
<android.media.AudioManager: int getPlaybackOffloadSupport(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.media.AudioManager: int getRingerMode()> -> _SOURCE_
<android.media.AudioManager: int getRouting(int)> -> _SOURCE_
<android.media.AudioManager: android.media.Spatializer getSpatializer()> -> _SOURCE_
<android.media.AudioManager: int getStreamMaxVolume(int)> -> _SOURCE_
<android.media.AudioManager: int getStreamMinVolume(int)> -> _SOURCE_
<android.media.AudioManager: int getStreamVolume(int)> -> _SOURCE_
<android.media.AudioManager: float getStreamVolumeDb(int,int,int)> -> _SOURCE_
<android.media.AudioManager: int getVibrateSetting(int)> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothA2dpOn()> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()> -> _SINK_
<android.media.AudioManager: boolean isBluetoothScoOn()> -> _SOURCE_
<android.media.AudioManager: boolean isHapticPlaybackSupported()> -> _SOURCE_
<android.media.AudioManager: boolean isMicrophoneMute()> -> _SOURCE_
<android.media.AudioManager: boolean isMusicActive()> -> _SOURCE_
<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioManager: boolean isRampingRingerEnabled()> -> _SOURCE_
<android.media.AudioManager: boolean isSpeakerphoneOn()> -> _SOURCE_
<android.media.AudioManager: boolean isStreamMute(int)> -> _SOURCE_
<android.media.AudioManager: boolean isSurroundFormatEnabled(int)> -> _SOURCE_
<android.media.AudioManager: boolean isWiredHeadsetOn()> -> _SOURCE_
<android.media.AudioManager: void loadSoundEffects()> -> _SINK_
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)> -> _SOURCE_
<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)> -> _SINK_
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)> -> _SINK_
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,int,int)> -> _SOURCE_
<android.media.AudioManager: void setAllowedCapturePolicy(int)> -> _SINK_
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)> -> _SOURCE_
<android.media.AudioManager: void setBluetoothScoOn(boolean)> -> _SINK_
<android.media.AudioManager: boolean setCommunicationDevice(android.media.AudioDeviceInfo)> -> _SINK_
<android.media.AudioManager: boolean setEncodedSurroundMode(int)> -> _SINK_
<android.media.AudioManager: void setMicrophoneMute(boolean)> -> _SINK_
<android.media.AudioManager: void setMode(int)> -> _SINK_
<android.media.AudioManager: void setParameters(java.lang.String)> -> _SINK_
<android.media.AudioManager: void setRingerMode(int)> -> _SINK_
<android.media.AudioManager: void setRouting(int,int,int)> -> _SINK_
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> -> _SINK_
<android.media.AudioManager: void setStreamMute(int,boolean)> -> _SINK_
<android.media.AudioManager: void setStreamSolo(int,boolean)> -> _SINK_
<android.media.AudioManager: void setStreamVolume(int,int,int)> -> _SINK_
<android.media.AudioManager: boolean setSurroundFormatEnabled(int,boolean)> -> _SINK_
<android.media.AudioManager: void setVibrateSetting(int,int)> -> _SOURCE_
<android.media.AudioManager: void setWiredHeadsetOn(boolean)> -> _SOURCE_
<android.media.AudioManager: boolean shouldVibrate(int)> -> _SOURCE_
<android.media.AudioManager: void startBluetoothSco()> -> _SINK_
<android.media.AudioManager: void stopBluetoothSco()> -> _SINK_
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)> -> _SOURCE_
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)> -> _SOURCE_
<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)> -> _SOURCE_
<android.media.AudioMetadata: AudioMetadataMap createMap()> -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation build()> -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setHasAudioDescription(boolean)> -> _SOURCE_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setHasDialogueEnhancement(boolean)> -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setHasSpokenSubtitles(boolean)> -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setLabels(java.util.Map -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setLocale(android.icu.util.ULocale)> -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setMasteringIndication(int)> -> _SINK_
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setProgramId(int)> -> _SINK_
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder addMatchingUid(int)> -> _SINK_
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder addMatchingUsage(int)> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration build()> -> _SINK_
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder excludeUid(int)> -> _SINK_
<android.media.AudioPlaybackConfiguration: int describeContents()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.AudioDeviceInfo getAudioDeviceInfo()> -> _SOURCE_
<android.media.AudioRecord.OnRecordPositionUpdateListener: void onMarkerReached(android.media.AudioRecord)> -> _SINK_
<android.media.AudioRecordingConfiguration: int describeContents()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getAudioSource()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getClientAudioSessionId()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getClientAudioSource()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: List<AudioEffect.Descriptor> getClientEffects()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: List<AudioEffect.Descriptor> getEffects()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: boolean isClientSilenced()> -> _SOURCE_
<android.media.AudioRouting: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)> -> _SINK_
<android.media.AudioRouting: AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.media.AudioRouting: AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.media.AudioRouting: boolean setPreferredDevice(android.media.AudioDeviceInfo)> -> _SINK_
<android.media.AudioRecordingMonitor: AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.media.AudioRecordingMonitor: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)> -> _SINK_
<android.location.GnssMeasurement: int describeContents()> -> _SOURCE_
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeMeters()> -> _SOURCE_
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeUncertaintyMeters()> -> _SOURCE_
<android.location.GnssMeasurement: double getAutomaticGainControlLevelDb()> -> _SOURCE_
<android.location.GnssMeasurement: double getBasebandCn0DbHz()> -> _SOURCE_
<android.location.GnssMeasurement: long getCarrierCycles()> -> _SOURCE_
<android.location.GnssMeasurement: float getCarrierFrequencyHz()> -> _SOURCE_
<android.location.GnssMeasurement: double getCarrierPhase()> -> _SOURCE_
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()> -> _SOURCE_
<android.location.GnssMeasurement: double getCn0DbHz()> -> _SOURCE_
<android.location.GnssMeasurement: java.lang.String getCodeType()> -> _SOURCE_
<android.location.GnssMeasurement: int getConstellationType()> -> _SINK_
<android.location.GnssMeasurement: double getFullInterSignalBiasNanos()> -> _SOURCE_
<android.location.GnssMeasurement: double getFullInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.location.GnssMeasurement: int getMultipathIndicator()> -> _SOURCE_
<android.location.GnssMeasurement: double getPseudorangeRateMetersPerSecond()> -> _SOURCE_
<android.location.GnssMeasurement: double getPseudorangeRateUncertaintyMetersPerSecond()> -> _SOURCE_
<android.location.GnssMeasurement: long getReceivedSvTimeNanos()> -> _SOURCE_
<android.location.GnssMeasurement: long getReceivedSvTimeUncertaintyNanos()> -> _SOURCE_
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.location.GnssMeasurement: double getSnrInDb()> -> _SOURCE_
<android.location.GnssMeasurement: int getState()> -> _SOURCE_
<android.location.GnssMeasurement: int getSvid()> -> _SOURCE_
<android.location.GnssMeasurement: double getTimeOffsetNanos()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasAutomaticGainControlLevelDb()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasBasebandCn0DbHz()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierCycles()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierFrequencyHz()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierPhase()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCodeType()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasFullInterSignalBiasNanos()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasFullInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasSatelliteInterSignalBiasNanos()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasSatelliteInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasSnrInDb()> -> _SOURCE_
<android.location.GnssMeasurement: java.lang.String toString()> -> _SOURCE_
<android.media.AudioTrack.Builder: android.media.AudioTrack build()> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setAudioAttributes(android.media.AudioAttributes)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setAudioFormat(android.media.AudioFormat)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setBufferSizeInBytes(int)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setEncapsulationMode(int)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setOffloadedPlayback(boolean)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setPerformanceMode(int)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setSessionId(int)> -> _SINK_
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setTransferMode(int)> -> _SINK_
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int)> -> _SOURCE_
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)> -> _SOURCE_
<android.media.AudioTrack: void addOnCodecFormatChangedListener(java.util.concurrent.Executor,android.media.AudioTrack.OnCodecFormatChangedListener)> -> _SINK_
<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)> -> _SINK_
<android.media.AudioTrack: int attachAuxEffect(int)> -> _SINK_
<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.media.AudioTrack: float getAudioDescriptionMixLeveldB()> -> _SOURCE_
<android.media.AudioTrack: int getAudioFormat()> -> _SOURCE_
<android.media.AudioTrack: int getAudioSessionId()> -> _SOURCE_
<android.media.AudioTrack: int getBufferCapacityInFrames()> -> _SOURCE_
<android.media.AudioTrack: int getBufferSizeInFrames()> -> _SOURCE_
<android.media.AudioTrack: int getChannelConfiguration()> -> _SOURCE_
<android.media.AudioTrack: int getChannelCount()> -> _SOURCE_
<android.media.AudioTrack: int getDualMonoMode()> -> _SINK_
<android.media.AudioTrack: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.media.AudioTrack: android.media.metrics.LogSessionId getLogSessionId()> -> _SOURCE_
<android.media.AudioTrack: float getMaxVolume()> -> _SOURCE_
<android.media.AudioTrack: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.media.AudioTrack: int getMinBufferSize(int,int,int)> -> _SOURCE_
<android.media.AudioTrack: float getMinVolume()> -> _SOURCE_
<android.media.AudioTrack: int getNativeOutputSampleRate(int)> -> _SOURCE_
<android.media.AudioTrack: int getNotificationMarkerPosition()> -> _SOURCE_
<android.media.AudioTrack: int getOffloadDelay()> -> _SOURCE_
<android.media.AudioTrack: int getOffloadPadding()> -> _SOURCE_
<android.media.AudioTrack: int getPerformanceMode()> -> _SOURCE_
<android.media.AudioTrack: int getPlayState()> -> _SOURCE_
<android.media.AudioTrack: int getPlaybackHeadPosition()> -> _SOURCE_
<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()> -> _SOURCE_
<android.media.AudioTrack: int getPlaybackRate()> -> _SOURCE_
<android.media.AudioTrack: int getPositionNotificationPeriod()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.media.AudioTrack: int getSampleRate()> -> _SOURCE_
<android.media.AudioTrack: int getStartThresholdInFrames()> -> _SOURCE_
<android.media.AudioTrack: int getState()> -> _SOURCE_
<android.media.AudioTrack: int getStreamType()> -> _SOURCE_
<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)> -> _SOURCE_
<android.media.AudioTrack: int getUnderrunCount()> -> _SOURCE_
<android.media.AudioTrack: boolean isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioTrack: boolean isOffloadedPlayback()> -> _SOURCE_
<android.media.AudioTrack: int reloadStaticData()> -> _SINK_
<android.media.AudioTrack: boolean setAudioDescriptionMixLeveldB(float)> -> _SINK_
<android.media.AudioTrack: int setAuxEffectSendLevel(float)> -> _SINK_
<android.media.AudioTrack: int setBufferSizeInFrames(int)> -> _SINK_
<android.media.AudioTrack: boolean setDualMonoMode(int)> -> _SINK_
<android.media.AudioTrack: void setLogSessionId(android.media.metrics.LogSessionId)> -> _SINK_
<android.media.AudioTrack: int setLoopPoints(int,int,int)> -> _SINK_
<android.media.AudioTrack: int setNotificationMarkerPosition(int)> -> _SINK_
<android.media.AudioTrack: void setOffloadDelayPadding(int,int)> -> _SINK_
<android.media.AudioTrack: int setPlaybackHeadPosition(int)> -> _SINK_
<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)> -> _SINK_
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener,android.os.Handler)> -> _SINK_
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener)> -> _SINK_
<android.media.AudioTrack: int setPlaybackRate(int)> -> _SINK_
<android.media.AudioTrack: int setPositionNotificationPeriod(int)> -> _SINK_
<android.media.AudioTrack: boolean setPreferredDevice(android.media.AudioDeviceInfo)> -> _SINK_
<android.media.AudioTrack: int setPresentation(android.media.AudioPresentation)> -> _SINK_
<android.media.AudioTrack: int setStartThresholdInFrames(int)> -> _SINK_
<android.media.AudioTrack: int setStereoVolume(float,float)> -> _SINK_
<android.media.AudioTrack: int setVolume(float)> -> _SINK_
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)> -> _SINK_
<android.media.CamcorderProfile: CamcorderProfile get(int)> -> _SOURCE_
<android.media.CamcorderProfile: CamcorderProfile get(int,int)> -> _SOURCE_
<android.media.CamcorderProfile: EncoderProfiles getAll(java.lang.String,int)> -> _SOURCE_
<android.media.CamcorderProfile: boolean hasProfile(int,int)> -> _SOURCE_
<android.media.CamcorderProfile: boolean hasProfile(int)> -> _SOURCE_
<android.media.DrmInitData: DrmInitData.SchemeInitData get(java.util.UUID)> -> _SOURCE_
<android.media.DrmInitData: android.media.DrmInitData.SchemeInitData getSchemeInitDataAt(int)> -> _SOURCE_
<android.media.DrmInitData: int getSchemeInitDataCount()> -> _SOURCE_
<android.media.EncoderProfiles.VideoProfile: int getBitDepth()> -> _SOURCE_
<android.media.EncoderProfiles.VideoProfile: int getBitrate()> -> _SINK_
<android.media.EncoderProfiles.VideoProfile: int getChromaSubsampling()> -> _SOURCE_
<android.media.EncoderProfiles.VideoProfile: int getFrameRate()> -> _SINK_
<android.media.EncoderProfiles.VideoProfile: int getHdrFormat()> -> _SINK_
<android.media.EncoderProfiles.VideoProfile: int getHeight()> -> _SOURCE_
<android.media.EncoderProfiles.VideoProfile: java.lang.String getMediaType()> -> _SOURCE_
<android.media.EncoderProfiles.VideoProfile: int getProfile()> -> _SINK_
<android.media.EncoderProfiles.VideoProfile: int getWidth()> -> _SOURCE_
<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)> -> _SINK_
<android.media.AudioRecord: List<MicrophoneInfo> getActiveMicrophones()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.media.AudioRecord: int getAudioFormat()> -> _SOURCE_
<android.media.AudioRecord: int getAudioSessionId()> -> _SOURCE_
<android.media.AudioRecord: int getAudioSource()> -> _SOURCE_
<android.media.AudioRecord: int getBufferSizeInFrames()> -> _SOURCE_
<android.media.AudioRecord: int getChannelConfiguration()> -> _SOURCE_
<android.media.AudioRecord: int getChannelCount()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.media.AudioRecord: android.media.metrics.LogSessionId getLogSessionId()> -> _SOURCE_
<android.media.AudioRecord: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.media.AudioRecord: int getMinBufferSize(int,int,int)> -> _SOURCE_
<android.media.AudioRecord: int getNotificationMarkerPosition()> -> _SOURCE_
<android.media.AudioRecord: int getPositionNotificationPeriod()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.media.AudioRecord: int getRecordingState()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.media.AudioRecord: int getSampleRate()> -> _SOURCE_
<android.media.AudioRecord: int getState()> -> _SOURCE_
<android.media.AudioRecord: int getTimestamp(android.media.AudioTimestamp,int)> -> _SINK_
<android.media.AudioRecord: boolean isPrivacySensitive()> -> _SOURCE_
<android.media.AudioRecord: int read(short[],int,int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(short[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(byte[],int,int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(byte[],int,int)> -> _SOURCE_
<android.media.AudioRecord: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)> -> _SINK_
<android.media.AudioRecord: void setLogSessionId(android.media.metrics.LogSessionId)> -> _SINK_
<android.media.AudioRecord: int setNotificationMarkerPosition(int)> -> _SINK_
<android.media.AudioRecord: int setPositionNotificationPeriod(int)> -> _SINK_
<android.media.AudioRecord: boolean setPreferredDevice(android.media.AudioDeviceInfo)> -> _SINK_
<android.media.AudioRecord: boolean setPreferredMicrophoneFieldDimension(float)> -> _SINK_
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener)> -> _SINK_
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener,android.os.Handler)> -> _SINK_
<android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)> -> _SOURCE_
<android.media.AudioRecord: void startRecording()> -> _SINK_
<android.media.ExifInterface: double getAltitude(double)> -> _SOURCE_
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: byte[] getAttributeBytes(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)> -> _SOURCE_
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)> -> _SOURCE_
<android.media.ExifInterface: long[] getAttributeRange(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: long getDateTime()> -> _SOURCE_
<android.media.ExifInterface: long getDateTimeDigitized()> -> _SOURCE_
<android.media.ExifInterface: long getDateTimeOriginal()> -> _SOURCE_
<android.media.ExifInterface: long getGpsDateTime()> -> _SOURCE_
<android.media.ExifInterface: boolean getLatLong(float[])> -> _SINK_
<android.media.ExifInterface: byte[] getThumbnail()> -> _SOURCE_
<android.media.ExifInterface: android.graphics.Bitmap getThumbnailBitmap()> -> _SOURCE_
<android.media.ExifInterface: byte[] getThumbnailBytes()> -> _SOURCE_
<android.media.ExifInterface: long[] getThumbnailRange()> -> _SOURCE_
<android.media.ExifInterface: boolean hasAttribute(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: boolean hasThumbnail()> -> _SOURCE_
<android.media.ExifInterface: boolean isSupportedMimeType(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: boolean isThumbnailCompressed()> -> _SOURCE_
<android.media.ExifInterface: void saveAttributes()> -> _SINK_
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.media.Image.Plane: ByteBuffer getBuffer()> -> _SOURCE_
<android.media.Image.Plane: int getPixelStride()> -> _SOURCE_
<android.media.Image.Plane: int getRowStride()> -> _SINK_
<android.media.EncoderProfiles.AudioProfile: int getBitrate()> -> _SOURCE_
<android.media.EncoderProfiles.AudioProfile: int getChannels()> -> _SINK_
<android.media.EncoderProfiles.AudioProfile: java.lang.String getMediaType()> -> _SOURCE_
<android.media.EncoderProfiles.AudioProfile: int getProfile()> -> _SINK_
<android.media.EncoderProfiles.AudioProfile: int getSampleRate()> -> _SINK_
<android.media.EncoderProfiles: List<EncoderProfiles.AudioProfile> getAudioProfiles()> -> _SOURCE_
<android.media.EncoderProfiles: int getDefaultDurationSeconds()> -> _SINK_
<android.media.EncoderProfiles: int getRecommendedFileFormat()> -> _SINK_
<android.media.EncoderProfiles: List<EncoderProfiles.VideoProfile> getVideoProfiles()> -> _SOURCE_
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,Face[])> -> _SOURCE_
<android.media.ImageReader: int getDataSpace()> -> _SOURCE_
<android.media.ImageReader: int getHardwareBufferFormat()> -> _SINK_
<android.media.ImageReader: int getHeight()> -> _SOURCE_
<android.media.ImageReader: int getImageFormat()> -> _SINK_
<android.media.ImageReader: int getMaxImages()> -> _SOURCE_
<android.media.ImageReader: long getUsage()> -> _SOURCE_
<android.media.ImageReader: int getWidth()> -> _SOURCE_
<android.media.FaceDetector.Face: float confidence()> -> _SOURCE_
<android.media.FaceDetector.Face: void getMidPoint(android.graphics.PointF)> -> _SINK_
<android.media.FaceDetector.Face: float pose(int)> -> _SOURCE_
<android.media.MediaActionSound: void load(int)> -> _SINK_
<android.media.MediaActionSound: boolean mustPlayShutterSound()> -> _SOURCE_
<android.media.MediaActionSound: void play(int)> -> _SINK_
<android.media.Image: android.graphics.Rect getCropRect()> -> _SOURCE_
<android.media.Image: int getDataSpace()> -> _SOURCE_
<android.media.Image: SyncFence getFence()> -> _SOURCE_
<android.media.Image: int getFormat()> -> _SOURCE_
<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.media.Image: int getHeight()> -> _SOURCE_
<android.media.Image: Plane[] getPlanes()> -> _SOURCE_
<android.media.Image: long getTimestamp()> -> _SOURCE_
<android.media.Image: int getWidth()> -> _SOURCE_
<android.media.Image: void setCropRect(android.graphics.Rect)> -> _SINK_
<android.media.Image: void setDataSpace(int)> -> _SINK_
<android.media.Image: void setTimestamp(long)> -> _SINK_
<android.media.MediaCas.Session: boolean equals(java.lang.Object)> -> _SOURCE_
<android.media.MediaCas.Session: byte[] getSessionId()> -> _SOURCE_
<android.media.MediaCas.Session: void processEcm(byte[])> -> _SINK_
<android.media.MediaCas.Session: void processEcm(byte[],int,int)> -> _SINK_
<android.media.MediaCas.Session: void sendSessionEvent(int,int,byte[])> -> _SOURCE_
<android.media.MediaCas.Session: void setPrivateData(byte[])> -> _SINK_
<android.media.MediaCas: PluginDescriptor[] enumeratePlugins()> -> _SOURCE_
<android.media.MediaCas: boolean isSystemIdSupported(int)> -> _SOURCE_
<android.media.MediaCas: android.media.MediaCas.Session openSession(int,int)> -> _SINK_
<android.media.MediaCas: android.media.MediaCas.Session openSession()> -> _SINK_
<android.media.MediaCas: void sendEvent(int,int,byte[])> -> _SINK_
<android.media.MediaCas: void setEventListener(android.media.MediaCas.EventListener,android.os.Handler)> -> _SINK_
<android.media.MediaCas: void setPrivateData(byte[])> -> _SINK_
<android.media.ImageWriter: int getDataSpace()> -> _SINK_
<android.media.ImageWriter: int getFormat()> -> _SINK_
<android.media.ImageWriter: int getHardwareBufferFormat()> -> _SOURCE_
<android.media.ImageWriter: int getHeight()> -> _SOURCE_
<android.media.ImageWriter: long getUsage()> -> _SOURCE_
<android.media.ImageWriter: int getWidth()> -> _SOURCE_
<android.media.ImageWriter: ImageWriter newInstance(android.view.Surface,int,int)> -> _SINK_
<android.media.ImageWriter: ImageWriter newInstance(android.view.Surface,int)> -> _SINK_
<android.media.MediaCasStateException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<android.media.JetPlayer: int getMaxTracks()> -> _SOURCE_
<android.media.JetPlayer: boolean loadJetFile(java.lang.String)> -> _SINK_
<android.media.JetPlayer: boolean setMuteArray(boolean[],boolean)> -> _SINK_
<android.media.JetPlayer: boolean setMuteFlags(int,boolean)> -> _SINK_
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)> -> _SINK_
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,int,android.media.MediaDescrambler)> -> _SINK_
<android.media.MediaCodec: MediaCodec createDecoderByType(java.lang.String)> -> _SOURCE_
<android.media.MediaCodec: MediaCodec createEncoderByType(java.lang.String)> -> _SOURCE_
<android.media.MediaCodec: int dequeueInputBuffer(long)> -> _SOURCE_
<android.media.MediaCodec: java.lang.String getCanonicalName()> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaFormat getInputFormat()> -> _SINK_
<android.media.MediaCodec: android.media.Image getInputImage(int)> -> _SOURCE_
<android.media.MediaCodec: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.media.MediaCodec: java.lang.String getName()> -> _SOURCE_
<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat(int)> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaCodec.OutputFrame getOutputFrame(int)> -> _SOURCE_
<android.media.MediaCodec: android.media.Image getOutputImage(int)> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaCodec.ParameterDescriptor getParameterDescriptor(java.lang.String)> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaCodec.QueueRequest getQueueRequest(int)> -> _SOURCE_
<android.media.MediaCodec: List<String> getSupportedVendorParameters()> -> _SOURCE_
<android.media.MediaCodec: Image mapHardwareBuffer(android.hardware.HardwareBuffer)> -> _SOURCE_
<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)> -> _SINK_
<android.media.MediaCodec: void setAudioPresentation(android.media.AudioPresentation)> -> _SINK_
<android.media.MediaCodec: void setOutputSurface(android.view.Surface)> -> _SINK_
<android.media.MediaCodec: void setVideoScalingMode(int)> -> _SINK_
<android.media.MediaCas.EventListener: void onEvent(android.media.MediaCas,int,int,byte[])> -> _SINK_
<android.media.MediaCodec.CryptoInfo: android.media.MediaCodec.CryptoInfo.Pattern getPattern()> -> _SOURCE_
<android.media.MediaCodec.CryptoInfo: void set(int,int[],int[],byte[],byte[],int)> -> _SINK_
<android.media.MediaCodec.CryptoInfo: void setPattern(android.media.MediaCodec.CryptoInfo.Pattern)> -> _SINK_
<android.media.MediaCodec.CryptoInfo: java.lang.String toString()> -> _SOURCE_
<android.media.MediaCodec.CodecException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<android.media.MediaCodec.CodecException: int getErrorCode()> -> _SOURCE_
<android.media.MediaCodec.CodecException: boolean isRecoverable()> -> _SOURCE_
<android.media.MediaCodec.CodecException: boolean isTransient()> -> _SOURCE_
<android.media.MediaCodec.CryptoException: int getErrorCode()> -> _SOURCE_
<android.media.MediaCodec.ParameterDescriptor: java.lang.String getName()> -> _SOURCE_
<android.media.MediaCodec.ParameterDescriptor: int getType()> -> _SOURCE_
<android.media.AudioFormat.Builder: android.media.AudioFormat build()> -> _SINK_
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setChannelIndexMask(int)> -> _SINK_
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setChannelMask(int)> -> _SINK_
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setEncoding(int)> -> _SINK_
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setSampleRate(int)> -> _SINK_
<android.media.MediaCodec.LinearBlock: java.nio.ByteBuffer map()> -> _SOURCE_
<android.media.MediaCodec.QueueRequest: void queue()> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setByteBufferParameter(java.lang.String,java.nio.ByteBuffer)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setEncryptedLinearBlock(android.media.MediaCodec.LinearBlock,int,int,android.media.MediaCodec.CryptoInfo)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setFlags(int)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setFloatParameter(java.lang.String,float)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setIntegerParameter(java.lang.String,int)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setLinearBlock(android.media.MediaCodec.LinearBlock,int,int)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setLongParameter(java.lang.String,long)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setPresentationTimeUs(long)> -> _SINK_
<android.media.MediaCodec.QueueRequest: android.media.MediaCodec.QueueRequest setStringParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaCodecInfo.VideoCapabilities: boolean areSizeAndRateSupported(int,int,double)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Double> getAchievableFrameRatesFor(int,int)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Integer> getBitrateRange()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: int getHeightAlignment()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Integer> getSupportedFrameRates()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Double> getSupportedFrameRatesFor(int,int)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Integer> getSupportedHeights()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Integer> getSupportedHeightsFor(int)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: List<MediaCodecInfo.VideoCapabilities.PerformancePoint> getSupportedPerformancePoints()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Integer> getSupportedWidths()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: Range<Integer> getSupportedWidthsFor(int)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: int getWidthAlignment()> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities: boolean isSizeSupported(int,int)> -> _SOURCE_
<android.media.MediaCodecList: java.lang.String findDecoderForFormat(android.media.MediaFormat)> -> _SOURCE_
<android.media.MediaCodecList: java.lang.String findEncoderForFormat(android.media.MediaFormat)> -> _SOURCE_
<android.media.MediaCodecList: int getCodecCount()> -> _SOURCE_
<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)> -> _SOURCE_
<android.media.MediaCodecList: MediaCodecInfo[] getCodecInfos()> -> _SOURCE_
<android.media.MediaCodecInfo.EncoderCapabilities: Range<Integer> getComplexityRange()> -> _SOURCE_
<android.media.MediaCodecInfo.EncoderCapabilities: Range<Integer> getQualityRange()> -> _SOURCE_
<android.media.MediaCodecInfo.EncoderCapabilities: boolean isBitrateModeSupported(int)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: boolean covers(android.media.MediaFormat)> -> _SOURCE_
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: java.lang.String toString()> -> _SOURCE_
<android.media.MediaController2: android.media.Session2Token getConnectedToken()> -> _SOURCE_
<android.media.MediaController2: boolean isPlaybackActive()> -> _SOURCE_
<android.media.MediaController2: java.lang.Object sendSessionCommand(android.media.Session2Command,android.os.Bundle)> -> _SINK_
<android.media.MediaCommunicationManager: List<Session2Token> getSession2Tokens()> -> _SOURCE_
<android.media.MediaCommunicationManager: int getVersion()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: MediaCodecInfo.CodecCapabilities createFromProfileLevel(java.lang.String,int,int)> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.AudioCapabilities getAudioCapabilities()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaFormat getDefaultFormat()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.EncoderCapabilities getEncoderCapabilities()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: int getMaxSupportedInstances()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: java.lang.String getMimeType()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.VideoCapabilities getVideoCapabilities()> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: boolean isFeatureRequired(java.lang.String)> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: boolean isFeatureSupported(java.lang.String)> -> _SOURCE_
<android.media.MediaCodecInfo.CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)> -> _SOURCE_
<android.media.MediaCodec.OutputFrame: Set<String> getChangedKeys()> -> _SOURCE_
<android.media.MediaCodec.OutputFrame: int getFlags()> -> _SOURCE_
<android.media.MediaCodec.OutputFrame: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.media.MediaCodec.OutputFrame: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.media.MediaCodec.OutputFrame: android.media.MediaCodec.LinearBlock getLinearBlock()> -> _SOURCE_
<android.media.MediaCodec.OutputFrame: long getPresentationTimeUs()> -> _SOURCE_
<android.media.MediaDescrambler: int descramble(java.nio.ByteBuffer,java.nio.ByteBuffer,android.media.MediaCodec.CryptoInfo)> -> _SOURCE_
<android.media.MediaDescrambler: boolean requiresSecureDecoderComponent(java.lang.String)> -> _SOURCE_
<android.media.MediaDescrambler: void setMediaCasSession(android.media.MediaCas.Session)> -> _SINK_
<android.media.MediaController2.Builder: android.media.MediaController2 build()> -> _SINK_
<android.media.MediaController2.Builder: android.media.MediaController2.Builder setConnectionHints(android.os.Bundle)> -> _SINK_
<android.media.MediaDataSource: long getSize()> -> _SOURCE_
<android.media.MediaDataSource: int readAt(long,byte[],int,int)> -> _SOURCE_
<android.media.MediaDrm.KeyStatus: byte[] getKeyId()> -> _SOURCE_
<android.media.MediaDrm.KeyStatus: int getStatusCode()> -> _SOURCE_
<android.media.MediaDescription: int describeContents()> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()> -> _SOURCE_
<android.media.MediaDescription: android.net.Uri getIconUri()> -> _SOURCE_
<android.media.MediaDescription: java.lang.String getMediaId()> -> _SOURCE_
<android.media.MediaDescription: android.net.Uri getMediaUri()> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.media.MediaDescription: java.lang.String toString()> -> _SOURCE_
<android.media.MediaDrm.MediaDrmStateException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<android.media.MediaDrm.MediaDrmStateException: int getErrorCode()> -> _SOURCE_
<android.media.MediaDrm.MediaDrmStateException: boolean isTransient()> -> _SOURCE_
<android.media.MediaCodecInfo: java.lang.String getCanonicalName()> -> _SOURCE_
<android.media.MediaCodecInfo: android.media.MediaCodecInfo.CodecCapabilities getCapabilitiesForType(java.lang.String)> -> _SOURCE_
<android.media.MediaCodecInfo: java.lang.String getName()> -> _SOURCE_
<android.media.MediaCodecInfo: String[] getSupportedTypes()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isAlias()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isEncoder()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isHardwareAccelerated()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isSoftwareOnly()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isVendor()> -> _SOURCE_
<android.media.MediaDescription.Builder: android.media.MediaDescription build()> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setIconBitmap(android.graphics.Bitmap)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setIconUri(android.net.Uri)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setMediaId(java.lang.String)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setMediaUri(android.net.Uri)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.media.MediaDrm.KeyRequest: byte[] getData()> -> _SOURCE_
<android.media.MediaDrm.KeyRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.media.MediaDrm.KeyRequest: int getRequestType()> -> _SOURCE_
<android.media.MediaCodec.CryptoInfo.Pattern: int getEncryptBlocks()> -> _SOURCE_
<android.media.MediaCodec.CryptoInfo.Pattern: int getSkipBlocks()> -> _SOURCE_
<android.media.MediaCodec.CryptoInfo.Pattern: void set(int,int)> -> _SINK_
<android.media.MediaDrm.CryptoSession: byte[] decrypt(byte[],byte[],byte[])> -> _SOURCE_
<android.media.MediaDrm.CryptoSession: byte[] encrypt(byte[],byte[],byte[])> -> _SOURCE_
<android.media.MediaDrm.CryptoSession: boolean verify(byte[],byte[],byte[])> -> _SOURCE_
<android.media.MediaDrm.ProvisionRequest: byte[] getData()> -> _SOURCE_
<android.media.MediaDrm.ProvisionRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.media.MediaDrm.LogMessage: java.lang.String getMessage()> -> _SOURCE_
<android.media.MediaDrm.LogMessage: int getPriority()> -> _SINK_
<android.media.MediaDrm.LogMessage: java.lang.String toString()> -> _SOURCE_
<android.media.MediaDrm.PlaybackComponent: android.media.metrics.LogSessionId getLogSessionId()> -> _SOURCE_
<android.media.MediaDrm.PlaybackComponent: void setLogSessionId(android.media.metrics.LogSessionId)> -> _SOURCE_
<android.media.MediaDrm.SessionException: int getErrorCode()> -> _SOURCE_
<android.media.MediaDrm.SessionException: boolean isTransient()> -> _SOURCE_
<android.media.MediaExtractor.CasInfo: byte[] getPrivateData()> -> _SOURCE_
<android.media.MediaExtractor.CasInfo: android.media.MediaCas.Session getSession()> -> _SOURCE_
<android.media.MediaExtractor.CasInfo: int getSystemId()> -> _SOURCE_
<android.media.MediaMetadataRetriever.BitmapParams: android.graphics.Bitmap.Config getActualConfig()> -> _SOURCE_
<android.media.MediaMetadataRetriever.BitmapParams: android.graphics.Bitmap.Config getPreferredConfig()> -> _SINK_
<android.media.MediaMetadataRetriever.BitmapParams: void setPreferredConfig(android.graphics.Bitmap.Config)> -> _SINK_
<android.media.MediaMetadata: boolean containsKey(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: int describeContents()> -> _SOURCE_
<android.media.MediaMetadata: boolean equals(java.lang.Object)> -> _SOURCE_
<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: int getBitmapDimensionLimit()> -> _SOURCE_
<android.media.MediaMetadata: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.media.MediaMetadata: long getLong(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: Set<String> keySet()> -> _SOURCE_
<android.media.MediaMetadata: int size()> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtIndex(int)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)> -> _SOURCE_
<android.media.MediaMetadataRetriever: List<Bitmap> getFramesAtIndex(int,int)> -> _SOURCE_
<android.media.MediaMetadataRetriever: List<Bitmap> getFramesAtIndex(int,int,android.media.MediaMetadataRetriever.BitmapParams)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage()> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getScaledFrameAtTime(long,int,int,int,android.media.MediaMetadataRetriever.BitmapParams)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getScaledFrameAtTime(long,int,int,int)> -> _SOURCE_
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(android.media.MediaDataSource)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor,long,long)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map -> _SINK_
<android.media.MediaFormat: boolean containsFeature(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: boolean containsKey(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: MediaFormat createSubtitleFormat(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.ByteBuffer)> -> _SOURCE_
<android.media.MediaFormat: boolean getFeatureEnabled(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: Set<String> getFeatures()> -> _SOURCE_
<android.media.MediaFormat: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.media.MediaFormat: float getFloat(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: int getInteger(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: int getInteger(java.lang.String,int)> -> _SOURCE_
<android.media.MediaFormat: Set<String> getKeys()> -> _SOURCE_
<android.media.MediaFormat: long getLong(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: long getLong(java.lang.String,long)> -> _SOURCE_
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String,java.lang.Number)> -> _SOURCE_
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: int getValueTypeForKey(java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)> -> _SINK_
<android.media.MediaFormat: void setFeatureEnabled(java.lang.String,boolean)> -> _SINK_
<android.media.MediaFormat: void setFloat(java.lang.String,float)> -> _SINK_
<android.media.MediaFormat: void setInteger(java.lang.String,int)> -> _SINK_
<android.media.MediaFormat: void setLong(java.lang.String,long)> -> _SINK_
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaFormat: java.lang.String toString()> -> _SOURCE_
<android.media.MediaMetadataEditor: void apply()> -> _SINK_
<android.media.MediaMetadataEditor: android.graphics.Bitmap getBitmap(int,android.graphics.Bitmap)> -> _SOURCE_
<android.media.MediaMetadataEditor: int[] getEditableKeys()> -> _SOURCE_
<android.media.MediaMetadataEditor: long getLong(int,long)> -> _SOURCE_
<android.media.MediaMetadataEditor: java.lang.Object getObject(int,java.lang.Object)> -> _SOURCE_
<android.media.MediaMetadataEditor: java.lang.String getString(int,java.lang.String)> -> _SOURCE_
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)> -> _SINK_
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putLong(int,long)> -> _SINK_
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)> -> _SOURCE_
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)> -> _SINK_
<android.media.MediaParser.SeekableInputReader: void seekToPosition(long)> -> _SINK_
<android.media.MediaPlayer.DrmInfo: java.util.Map getPssh()> -> _SOURCE_
<android.media.MediaPlayer.DrmInfo: UUID[] getSupportedSchemes()> -> _SOURCE_
<android.media.MediaParser.InputReader: long getLength()> -> _SOURCE_
<android.media.MediaParser.InputReader: long getPosition()> -> _SOURCE_
<android.media.MediaParser.InputReader: int read(byte[],int,int)> -> _SOURCE_
<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)> -> _SINK_
<android.media.MediaMuxer: void setLocation(float,float)> -> _SINK_
<android.media.MediaMuxer: void setOrientationHint(int)> -> _SINK_
<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec.BufferInfo)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata build()> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putBitmap(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putLong(java.lang.String,long)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putRating(java.lang.String,android.media.Rating)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putString(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putText(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder setBitmapDimensionLimit(int)> -> _SINK_
<android.media.MediaParser.SeekMap: long getDurationMicros()> -> _SOURCE_
<android.media.MediaParser.SeekMap: Pair<MediaParser.SeekPoint, MediaParser.SeekPoint> getSeekPoints(long)> -> _SOURCE_
<android.media.MediaParser.SeekMap: boolean isSeekable()> -> _SOURCE_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void attachAuxEffect(int)> -> _SINK_
<android.media.MediaPlayer: int getAudioSessionId()> -> _SOURCE_
<android.media.MediaPlayer: int getCurrentPosition()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaPlayer.DrmInfo getDrmInfo()> -> _SOURCE_
<android.media.MediaPlayer: java.lang.String getDrmPropertyString(java.lang.String)> -> _SOURCE_
<android.media.MediaPlayer: int getDuration()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaDrm.KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.Map -> _SOURCE_
<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()> -> _SOURCE_
<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.media.MediaPlayer: int getSelectedTrack(int)> -> _SOURCE_
<android.media.MediaPlayer: android.media.SyncParams getSyncParams()> -> _SINK_
<android.media.MediaPlayer: android.media.MediaTimestamp getTimestamp()> -> _SOURCE_
<android.media.MediaPlayer: TrackInfo[] getTrackInfo()> -> _SOURCE_
<android.media.MediaPlayer: int getVideoHeight()> -> _SOURCE_
<android.media.MediaPlayer: int getVideoWidth()> -> _SOURCE_
<android.media.MediaPlayer: boolean isLooping()> -> _SOURCE_
<android.media.MediaPlayer: boolean isPlaying()> -> _SOURCE_
<android.media.MediaPlayer: byte[] provideKeyResponse(byte[],byte[])> -> _SOURCE_
<android.media.MediaPlayer: void seekTo(int)> -> _SINK_
<android.media.MediaPlayer: void seekTo(long,int)> -> _SINK_
<android.media.MediaPlayer: void selectTrack(int)> -> _SINK_
<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)> -> _SINK_
<android.media.MediaPlayer: void setAudioSessionId(int)> -> _SINK_
<android.media.MediaPlayer: void setAudioStreamType(int)> -> _SINK_
<android.media.MediaPlayer: void setAuxEffectSendLevel(float)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.media.MediaDataSource)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)> -> _SINK_
<android.media.MediaPlayer: void setDrmPropertyString(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void setNextMediaPlayer(android.media.MediaPlayer)> -> _SOURCE_
<android.media.MediaPlayer: void setPlaybackParams(android.media.PlaybackParams)> -> _SINK_
<android.media.MediaPlayer: boolean setPreferredDevice(android.media.AudioDeviceInfo)> -> _SOURCE_
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)> -> _SINK_
<android.media.MediaPlayer: void setSurface(android.view.Surface)> -> _SINK_
<android.media.MediaPlayer: void setSyncParams(android.media.SyncParams)> -> _SINK_
<android.media.MediaPlayer: void setVideoScalingMode(int)> -> _SINK_
<android.media.MediaPlayer: void setVolume(float,float)> -> _SINK_
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> -> _SINK_
<android.media.MediaPlayer.TrackInfo: int describeContents()> -> _SOURCE_
<android.media.MediaPlayer.TrackInfo: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.media.MediaPlayer.TrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.media.MediaPlayer.TrackInfo: int getTrackType()> -> _SOURCE_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder addFeature(java.lang.String)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder addFeatures(Collection<String>)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info build()> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder clearFeatures()> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setClientPackageName(java.lang.String)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setConnectionState(int)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setDeduplicationIds(Set<String>)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setIconUri(android.net.Uri)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setVolume(int)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setVolumeHandling(int)> -> _SINK_
<android.media.MediaRoute2Info.Builder: android.media.MediaRoute2Info.Builder setVolumeMax(int)> -> _SINK_
<android.media.MediaPlayer.OnDrmConfigHelper: void onDrmConfig(android.media.MediaPlayer)> -> _SINK_
<android.media.MediaRoute2Info: int describeContents()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getClientPackageName()> -> _SOURCE_
<android.media.MediaRoute2Info: int getConnectionState()> -> _SOURCE_
<android.media.MediaRoute2Info: Set<String> getDeduplicationIds()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.media.MediaRoute2Info: android.os.Bundle getExtras()> -> _SINK_
<android.media.MediaRoute2Info: List<String> getFeatures()> -> _SOURCE_
<android.media.MediaRoute2Info: android.net.Uri getIconUri()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getId()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.CharSequence getName()> -> _SOURCE_
<android.media.MediaRoute2Info: int getVolume()> -> _SOURCE_
<android.media.MediaRoute2Info: int getVolumeHandling()> -> _SINK_
<android.media.MediaRoute2Info: int getVolumeMax()> -> _SOURCE_
<android.media.MediaRoute2Info: boolean isSystemRoute()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter.Callback,int)> -> _SINK_
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter.Callback)> -> _SINK_
<android.media.MediaRouter: void addUserRoute(android.media.MediaRouter.UserRouteInfo)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter.RouteCategory createRouteCategory(int,boolean)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter.RouteCategory createRouteCategory(java.lang.CharSequence,boolean)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter.UserRouteInfo createUserRoute(android.media.MediaRouter.RouteCategory)> -> _SINK_
<android.media.MediaRouter: android.media.MediaRouter.RouteCategory getCategoryAt(int)> -> _SOURCE_
<android.media.MediaRouter: int getCategoryCount()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter.RouteInfo getDefaultRoute()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter.RouteInfo getRouteAt(int)> -> _SOURCE_
<android.media.MediaRouter: int getRouteCount()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter.RouteInfo getSelectedRoute(int)> -> _SOURCE_
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter.RouteInfo)> -> _SINK_
<android.media.MediaRoute2ProviderService: List<RoutingSessionInfo> getAllSessionInfo()> -> _SOURCE_
<android.media.MediaRoute2ProviderService: RoutingSessionInfo getSessionInfo(java.lang.String)> -> _SOURCE_
<android.media.MediaRoute2ProviderService: void notifySessionUpdated(android.media.RoutingSessionInfo)> -> _SINK_
<android.media.MediaRoute2ProviderService: void onSetRouteVolume(long,java.lang.String,int)> -> _SINK_
<android.media.MediaParser.SeekPoint: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter.VolumeCallback: void onVolumeSetRequest(android.media.MediaRouter.RouteInfo,int)> -> _SINK_
<android.media.MediaRouter.VolumeCallback: void onVolumeUpdateRequest(android.media.MediaRouter.RouteInfo,int)> -> _SINK_
<android.media.MediaRecorder: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)> -> _SINK_
<android.media.MediaRecorder: List<MicrophoneInfo> getActiveMicrophones()> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.media.MediaRecorder: int getAudioSourceMax()> -> _SOURCE_
<android.media.MediaRecorder: android.media.metrics.LogSessionId getLogSessionId()> -> _SOURCE_
<android.media.MediaRecorder: int getMaxAmplitude()> -> _SOURCE_
<android.media.MediaRecorder: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.media.MediaRecorder: android.view.Surface getSurface()> -> _SOURCE_
<android.media.MediaRecorder: boolean isPrivacySensitive()> -> _SOURCE_
<android.media.MediaRecorder: void prepare()> -> _SINK_
<android.media.MediaRecorder: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)> -> _SINK_
<android.media.MediaRecorder: void resume()> -> _SINK_
<android.media.MediaRecorder: void setAudioChannels(int)> -> _SINK_
<android.media.MediaRecorder: void setAudioEncoder(int)> -> _SINK_
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)> -> _SINK_
<android.media.MediaRecorder: void setAudioProfile(android.media.EncoderProfiles.AudioProfile)> -> _SINK_
<android.media.MediaRecorder: void setAudioSamplingRate(int)> -> _SINK_
<android.media.MediaRecorder: void setAudioSource(int)> -> _SINK_
<android.media.MediaRecorder: void setCamera(android.graphics.Camera)> -> _SOURCE_
<android.media.MediaRecorder: void setCaptureRate(double)> -> _SINK_
<android.media.MediaRecorder: void setInputSurface(android.view.Surface)> -> _SINK_
<android.media.MediaRecorder: void setLocation(float,float)> -> _SINK_
<android.media.MediaRecorder: void setLogSessionId(android.media.metrics.LogSessionId)> -> _SINK_
<android.media.MediaRecorder: void setMaxDuration(int)> -> _SINK_
<android.media.MediaRecorder: void setMaxFileSize(long)> -> _SINK_
<android.media.MediaRecorder: void setNextOutputFile(java.io.File)> -> _SINK_
<android.media.MediaRecorder: void setOrientationHint(int)> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.lang.String)> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.File)> -> _SINK_
<android.media.MediaRecorder: void setOutputFormat(int)> -> _SINK_
<android.media.MediaRecorder: boolean setPreferredDevice(android.media.AudioDeviceInfo)> -> _SOURCE_
<android.media.MediaRecorder: boolean setPreferredMicrophoneFieldDimension(float)> -> _SINK_
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> -> _SINK_
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)> -> _SINK_
<android.media.MediaRecorder: void setVideoEncoder(int)> -> _SINK_
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)> -> _SINK_
<android.media.MediaRecorder: void setVideoEncodingProfileLevel(int,int)> -> _SINK_
<android.media.MediaRecorder: void setVideoFrameRate(int)> -> _SINK_
<android.media.MediaRecorder: void setVideoProfile(android.media.EncoderProfiles.VideoProfile)> -> _SINK_
<android.media.MediaRecorder: void setVideoSize(int,int)> -> _SINK_
<android.media.MediaRecorder: void setVideoSource(int)> -> _SINK_
<android.media.MediaRecorder: void start()> -> _SINK_
<android.media.MediaSession2: List<MediaSession2.ControllerInfo> getConnectedControllers()> -> _SOURCE_
<android.media.MediaSession2: java.lang.String getId()> -> _SOURCE_
<android.media.MediaSession2: android.media.Session2Token getToken()> -> _SOURCE_
<android.media.MediaSession2: boolean isPlaybackActive()> -> _SOURCE_
<android.media.MediaSession2: java.lang.Object sendSessionCommand(android.media.MediaSession2.ControllerInfo,android.media.Session2Command,android.os.Bundle)> -> _SINK_
<android.media.MediaSession2: void setPlaybackActive(boolean)> -> _SINK_
<android.media.MediaScannerConnection: boolean isConnected()> -> _SOURCE_
<android.media.MediaScannerConnection: void scanFile(android.content.Context,String[],String[],android.media.MediaScannerConnection.OnScanCompletedListener)> -> _SINK_
<android.media.MediaSession2Service.MediaNotification: int getNotificationId()> -> _SOURCE_
<android.media.MicrophoneDirection: boolean setPreferredMicrophoneFieldDimension(float)> -> _SINK_
<android.media.MediaTimestamp: long getAnchorMediaTimeUs()> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorSystemNanoTime()> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorSytemNanoTime()> -> _SOURCE_
<android.media.MediaTimestamp: float getMediaClockRate()> -> _SOURCE_
<android.media.MediaTimestamp: java.lang.String toString()> -> _SOURCE_
<android.media.MediaSync: android.media.PlaybackParams getPlaybackParams()> -> _SOURCE_
<android.media.MediaSync: android.media.SyncParams getSyncParams()> -> _SINK_
<android.media.MediaSync: android.media.MediaTimestamp getTimestamp()> -> _SOURCE_
<android.media.MediaSync: void queueAudio(java.nio.ByteBuffer,int,long)> -> _SINK_
<android.media.MediaSync: void setAudioTrack(android.media.AudioTrack)> -> _SINK_
<android.media.MediaSync: void setCallback(android.media.MediaSync.Callback,android.os.Handler)> -> _SINK_
<android.media.MediaSync: void setPlaybackParams(android.media.PlaybackParams)> -> _SINK_
<android.media.MediaSync: void setSurface(android.view.Surface)> -> _SINK_
<android.media.MediaSync: void setSyncParams(android.media.SyncParams)> -> _SINK_
<android.media.MicrophoneInfo: java.lang.String getAddress()> -> _SOURCE_
<android.media.MicrophoneInfo: List<Pair<Integer, Integer>> getChannelMapping()> -> _SOURCE_
<android.media.MicrophoneInfo: java.lang.String getDescription()> -> _SOURCE_
<android.media.MicrophoneInfo: int getDirectionality()> -> _SOURCE_
<android.media.MicrophoneInfo: List<Pair<Float, Float>> getFrequencyResponse()> -> _SOURCE_
<android.media.MicrophoneInfo: int getGroup()> -> _SOURCE_
<android.media.MicrophoneInfo: int getId()> -> _SOURCE_
<android.media.MicrophoneInfo: int getIndexInTheGroup()> -> _SOURCE_
<android.media.MicrophoneInfo: int getLocation()> -> _SOURCE_
<android.media.MicrophoneInfo: float getMaxSpl()> -> _SOURCE_
<android.media.MicrophoneInfo: float getMinSpl()> -> _SOURCE_
<android.media.MicrophoneInfo: android.media.MicrophoneInfo.Coordinate3F getOrientation()> -> _SOURCE_
<android.media.MicrophoneInfo: android.media.MicrophoneInfo.Coordinate3F getPosition()> -> _SOURCE_
<android.media.MicrophoneInfo: float getSensitivity()> -> _SOURCE_
<android.media.MicrophoneInfo: int getType()> -> _SOURCE_
<android.media.MediaRouter.UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()> -> _SOURCE_
<android.media.MediaRouter.UserRouteInfo: void requestSetVolume(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void requestUpdateVolume(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setDescription(java.lang.CharSequence)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setIconDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setIconResource(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setName(java.lang.CharSequence)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setName(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setPlaybackStream(int)> -> _SOURCE_
<android.media.MediaRouter.UserRouteInfo: void setPlaybackType(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setRemoteControlClient(android.media.RemoteControlClient)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setStatus(java.lang.CharSequence)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setVolume(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setVolumeHandling(int)> -> _SINK_
<android.media.MediaRouter.UserRouteInfo: void setVolumeMax(int)> -> _SINK_
<android.media.MediaRouter2: android.media.MediaRouter2.RoutingController getController(java.lang.String)> -> _SOURCE_
<android.media.MediaRouter2: List<MediaRouter2.RoutingController> getControllers()> -> _SOURCE_
<android.media.MediaRouter2: MediaRouter2 getInstance(android.content.Context)> -> _SOURCE_
<android.media.MediaRouter2: List<MediaRoute2Info> getRoutes()> -> _SOURCE_
<android.media.MediaRouter2: android.media.MediaRouter2.RoutingController getSystemController()> -> _SOURCE_
<android.media.MediaRouter2: void registerTransferCallback(java.util.concurrent.Executor,android.media.MediaRouter2.TransferCallback)> -> _SOURCE_
<android.media.MediaRouter2: void setOnGetControllerHintsListener(android.media.MediaRouter2.OnGetControllerHintsListener)> -> _SINK_
<android.media.MediaRouter2: void transferTo(android.media.MediaRoute2Info)> -> _SOURCE_
<android.media.MediaSession2Service: void addSession(android.media.MediaSession2)> -> _SINK_
<android.media.MediaSession2Service: List<MediaSession2> getSessions()> -> _SOURCE_
<android.media.MediaSession2Service: MediaSession2Service.MediaNotification onUpdateNotification(android.media.MediaSession2)> -> _SINK_
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putBitmap(int,android.graphics.Bitmap)> -> _SINK_
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putLong(int,long)> -> _SINK_
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putObject(int,java.lang.Object)> -> _SOURCE_
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putString(int,java.lang.String)> -> _SINK_
<android.media.MediaSession2.Builder: android.media.MediaSession2 build()> -> _SINK_
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setId(java.lang.String)> -> _SINK_
<android.media.RemoteControlClient.OnGetPlaybackPositionListener: long onGetPlaybackPosition()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: int describeContents()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: List<String> getAllowedPackages()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: List<String> getDeduplicationPackageOrder()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: List<String> getPreferredFeatures()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: boolean shouldRemoveDuplicates()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: java.lang.String toString()> -> _SOURCE_
<android.media.Rating: int describeContents()> -> _SOURCE_
<android.media.Rating: float getPercentRating()> -> _SOURCE_
<android.media.Rating: int getRatingStyle()> -> _SINK_
<android.media.Rating: float getStarRating()> -> _SOURCE_
<android.media.Rating: boolean hasHeart()> -> _SOURCE_
<android.media.Rating: boolean isRated()> -> _SOURCE_
<android.media.Rating: boolean isThumbUp()> -> _SOURCE_
<android.media.Rating: Rating newHeartRating(boolean)> -> _SOURCE_
<android.media.Rating: Rating newPercentageRating(float)> -> _SOURCE_
<android.media.Rating: Rating newStarRating(int,float)> -> _SOURCE_
<android.media.Rating: Rating newThumbRating(boolean)> -> _SOURCE_
<android.media.Rating: Rating newUnratedRating(int)> -> _SOURCE_
<android.media.MediaSyncEvent: int describeContents()> -> _SOURCE_
<android.media.MediaSyncEvent: int getAudioSessionId()> -> _SOURCE_
<android.media.MediaSyncEvent: int getType()> -> _SOURCE_
<android.media.MediaSyncEvent: android.media.MediaSyncEvent setAudioSessionId(int)> -> _SINK_
<android.media.MediaSyncEvent: java.lang.String toString()> -> _SOURCE_
<android.media.RemoteControlClient: android.media.RemoteControlClient.MetadataEditor editMetadata(boolean)> -> _SINK_
<android.media.RemoteControlClient: void setOnGetPlaybackPositionListener(android.media.RemoteControlClient.OnGetPlaybackPositionListener)> -> _SINK_
<android.media.RemoteControlClient: void setPlaybackPositionUpdateListener(android.media.RemoteControlClient.OnPlaybackPositionUpdateListener)> -> _SINK_
<android.media.RemoteControlClient: void setPlaybackState(int,long,float)> -> _SINK_
<android.media.RemoteControlClient: void setPlaybackState(int)> -> _SINK_
<android.media.RemoteControlClient: void setTransportControlFlags(int)> -> _SINK_
<android.media.Ringtone: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.media.Ringtone: int getStreamType()> -> _SINK_
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> -> _SOURCE_
<android.media.Ringtone: float getVolume()> -> _SOURCE_
<android.media.Ringtone: boolean isHapticGeneratorEnabled()> -> _SOURCE_
<android.media.Ringtone: boolean isLooping()> -> _SOURCE_
<android.media.Ringtone: boolean isPlaying()> -> _SOURCE_
<android.media.Ringtone: void play()> -> _SINK_
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)> -> _SINK_
<android.media.Ringtone: void setStreamType(int)> -> _SINK_
<android.media.Ringtone: void setVolume(float)> -> _SINK_
<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()> -> _SINK_
<android.media.PlaybackParams: int describeContents()> -> _SOURCE_
<android.media.PlaybackParams: int getAudioFallbackMode()> -> _SINK_
<android.media.PlaybackParams: float getPitch()> -> _SOURCE_
<android.media.PlaybackParams: float getSpeed()> -> _SOURCE_
<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)> -> _SINK_
<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)> -> _SINK_
<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)> -> _SINK_
<android.media.RouteDiscoveryPreference.Builder: android.media.RouteDiscoveryPreference build()> -> _SINK_
<android.media.RouteDiscoveryPreference.Builder: android.media.RouteDiscoveryPreference.Builder setAllowedPackages(List<String>)> -> _SINK_
<android.media.RouteDiscoveryPreference.Builder: android.media.RouteDiscoveryPreference.Builder setPreferredFeatures(List<String>)> -> _SINK_
<android.media.RemoteControlClient.OnPlaybackPositionUpdateListener: void onPlaybackPositionUpdate(long)> -> _SINK_
<android.media.Session2Command.Result: int getResultCode()> -> _SOURCE_
<android.media.Session2Command.Result: android.os.Bundle getResultData()> -> _SOURCE_
<android.media.RoutingSessionInfo: int describeContents()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getClientPackageName()> -> _SOURCE_
<android.media.RoutingSessionInfo: List<String> getDeselectableRoutes()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getId()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.media.RoutingSessionInfo: List<String> getSelectableRoutes()> -> _SOURCE_
<android.media.RoutingSessionInfo: List<String> getSelectedRoutes()> -> _SOURCE_
<android.media.RoutingSessionInfo: List<String> getTransferableRoutes()> -> _SOURCE_
<android.media.RoutingSessionInfo: int getVolume()> -> _SOURCE_
<android.media.RoutingSessionInfo: int getVolumeHandling()> -> _SOURCE_
<android.media.RoutingSessionInfo: int getVolumeMax()> -> _SOURCE_
<android.media.RemoteController: long getEstimatedMediaPosition()> -> _SOURCE_
<android.media.RemoteController: boolean seekTo(long)> -> _SINK_
<android.media.RemoteController: boolean setArtworkConfiguration(int,int)> -> _SINK_
<android.media.RemoteController: boolean setSynchronizationMode(int)> -> _SINK_
<android.media.Session2CommandGroup: int describeContents()> -> _SOURCE_
<android.media.Session2CommandGroup: Set<Session2Command> getCommands()> -> _SOURCE_
<android.media.Session2CommandGroup: boolean hasCommand(int)> -> _SOURCE_
<android.media.Session2Command: int describeContents()> -> _SOURCE_
<android.media.Session2Command: int getCommandCode()> -> _SOURCE_
<android.media.Session2Command: java.lang.String getCustomAction()> -> _SOURCE_
<android.media.Session2Command: android.os.Bundle getCustomExtras()> -> _SOURCE_
<android.media.SoundPool: int load(android.content.Context,int,int)> -> _SOURCE_
<android.media.SoundPool: int load(java.lang.String,int)> -> _SOURCE_
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)> -> _SOURCE_
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)> -> _SOURCE_
<android.media.SoundPool: int play(int,float,float,int,int,float)> -> _SOURCE_
<android.media.SoundPool: void setRate(int,float)> -> _SINK_
<android.media.SoundPool: void setVolume(int,float,float)> -> _SINK_
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup.Builder addCommand(android.media.Session2Command)> -> _SINK_
<android.media.SubtitleData: byte[] getData()> -> _SOURCE_
<android.media.SubtitleData: long getDurationUs()> -> _SOURCE_
<android.media.SubtitleData: long getStartTimeUs()> -> _SOURCE_
<android.media.SubtitleData: int getTrackIndex()> -> _SOURCE_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder addDeselectableRoute(java.lang.String)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder addSelectableRoute(java.lang.String)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder addSelectedRoute(java.lang.String)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder addTransferableRoute(java.lang.String)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo build()> -> _SOURCE_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder clearTransferableRoutes()> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder setControlHints(android.os.Bundle)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder setName(java.lang.CharSequence)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder setVolume(int)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder setVolumeHandling(int)> -> _SINK_
<android.media.RoutingSessionInfo.Builder: android.media.RoutingSessionInfo.Builder setVolumeMax(int)> -> _SINK_
<android.media.Spatializer: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)> -> _SOURCE_
<android.media.Spatializer: int getImmersiveAudioLevel()> -> _SOURCE_
<android.media.Spatializer: boolean isAvailable()> -> _SOURCE_
<android.media.Spatializer: boolean isEnabled()> -> _SOURCE_
<android.media.ThumbnailUtils: Bitmap createAudioThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)> -> _SOURCE_
<android.media.ThumbnailUtils: Bitmap createImageThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)> -> _SOURCE_
<android.media.ThumbnailUtils: Bitmap createVideoThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)> -> _SOURCE_
<android.media.SyncParams: android.media.SyncParams allowDefaults()> -> _SINK_
<android.media.SyncParams: int getAudioAdjustMode()> -> _SINK_
<android.media.SyncParams: float getFrameRate()> -> _SOURCE_
<android.media.SyncParams: int getSyncSource()> -> _SOURCE_
<android.media.SyncParams: float getTolerance()> -> _SOURCE_
<android.media.SyncParams: android.media.SyncParams setAudioAdjustMode(int)> -> _SINK_
<android.media.SyncParams: android.media.SyncParams setFrameRate(float)> -> _SINK_
<android.media.SyncParams: android.media.SyncParams setSyncSource(int)> -> _SINK_
<android.media.SyncParams: android.media.SyncParams setTolerance(float)> -> _SINK_
<android.media.TimedText: android.graphics.Rect getBounds()> -> _SOURCE_
<android.media.TimedText: java.lang.String getText()> -> _SOURCE_
<android.media.ToneGenerator: int getAudioSessionId()> -> _SOURCE_
<android.media.ToneGenerator: boolean startTone(int,int)> -> _SINK_
<android.media.ToneGenerator: boolean startTone(int)> -> _SINK_
<android.media.VolumeProvider: int getCurrentVolume()> -> _SOURCE_
<android.media.VolumeProvider: int getMaxVolume()> -> _SINK_
<android.media.VolumeProvider: int getVolumeControl()> -> _SINK_
<android.media.VolumeProvider: String getVolumeControlId()> -> _SOURCE_
<android.media.VolumeProvider: void onAdjustVolume(int)> -> _SINK_
<android.media.VolumeProvider: void onSetVolumeTo(int)> -> _SINK_
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setCurve(float[],float[])> -> _SINK_
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setDuration(long)> -> _SINK_
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setInterpolatorType(int)> -> _SINK_
<android.media.VolumeShaper.Operation: int describeContents()> -> _SOURCE_
<android.media.VolumeShaper.Operation: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.AutomaticGainControl: AutomaticGainControl create(int)> -> _SINK_
<android.media.audiofx.AutomaticGainControl: boolean isAvailable()> -> _SOURCE_
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect.Descriptor getDescriptor()> -> _SOURCE_
<android.media.audiofx.AudioEffect: boolean getEnabled()> -> _SOURCE_
<android.media.audiofx.AudioEffect: int getId()> -> _SOURCE_
<android.media.audiofx.AudioEffect: Descriptor[] queryEffects()> -> _SOURCE_
<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect.OnControlStatusChangeListener)> -> _SINK_
<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect.OnEnableStatusChangeListener)> -> _SINK_
<android.media.audiofx.AudioEffect: int setEnabled(boolean)> -> _SINK_
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost.Settings getProperties()> -> _SINK_
<android.media.audiofx.BassBoost: short getRoundedStrength()> -> _SOURCE_
<android.media.audiofx.BassBoost: boolean getStrengthSupported()> -> _SOURCE_
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost.Settings)> -> _SINK_
<android.media.audiofx.BassBoost: void setStrength(short)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.BandBase: float getCutoffFrequency()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.BandBase: boolean isEnabled()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.BandBase: void setCutoffFrequency(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.BandBase: void setEnabled(boolean)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.BandBase: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.EqBand: float getGain()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.EqBand: void setGain(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.EqBand: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.BassBoost.Settings: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: float getAttackTime()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: int getLinkGroup()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: float getPostGain()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: float getRatio()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: float getReleaseTime()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: float getThreshold()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Limiter: void setAttackTime(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Limiter: void setLinkGroup(int)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Limiter: void setPostGain(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Limiter: void setRatio(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Limiter: void setReleaseTime(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Limiter: void setThreshold(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Limiter: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Eq: android.media.audiofx.DynamicsProcessing.EqBand getBand(int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Eq: void setBand(int,android.media.audiofx.DynamicsProcessing.EqBand)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Eq: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper: float getVolume()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getAttackTime()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getExpanderRatio()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getKneeWidth()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getNoiseGateThreshold()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getPostGain()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getPreGain()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getRatio()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getReleaseTime()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: float getThreshold()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setAttackTime(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setExpanderRatio(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setKneeWidth(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setNoiseGateThreshold(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setPostGain(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setPreGain(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setRatio(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setReleaseTime(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: void setThreshold(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.MbcBand: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper.Configuration: int describeContents()> -> _SOURCE_
<android.media.VolumeShaper.Configuration: long getDuration()> -> _SOURCE_
<android.media.VolumeShaper.Configuration: int getInterpolatorType()> -> _SOURCE_
<android.media.VolumeShaper.Configuration: int getMaximumCurvePoints()> -> _SINK_
<android.media.VolumeShaper.Configuration: float[] getTimes()> -> _SOURCE_
<android.media.VolumeShaper.Configuration: float[] getVolumes()> -> _SOURCE_
<android.media.VolumeShaper.Configuration: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.BandStage: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Mbc: android.media.audiofx.DynamicsProcessing.MbcBand getBand(int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Mbc: void setBand(int,android.media.audiofx.DynamicsProcessing.MbcBand)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Mbc: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Channel: float getInputGain()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Limiter getLimiter()> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Mbc getMbc()> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.MbcBand getMbcBand(int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Eq getPostEq()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.EqBand getPreEqBand(int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Channel: void setInputGain(float)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setLimiter(android.media.audiofx.DynamicsProcessing.Limiter)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setMbc(android.media.audiofx.DynamicsProcessing.Mbc)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setMbcBand(int,android.media.audiofx.DynamicsProcessing.MbcBand)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setPostEq(android.media.audiofx.DynamicsProcessing.Eq)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setPostEqBand(int,android.media.audiofx.DynamicsProcessing.EqBand)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setPreEq(android.media.audiofx.DynamicsProcessing.Eq)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: void setPreEqBand(int,android.media.audiofx.DynamicsProcessing.EqBand)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Channel: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.AcousticEchoCanceler: AcousticEchoCanceler create(int)> -> _SINK_
<android.media.audiofx.Equalizer.Settings: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.Equalizer: short getBand(int)> -> _SOURCE_
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)> -> _SOURCE_
<android.media.audiofx.Equalizer: short getBandLevel(short)> -> _SOURCE_
<android.media.audiofx.Equalizer: short[] getBandLevelRange()> -> _SOURCE_
<android.media.audiofx.Equalizer: int getCenterFreq(short)> -> _SOURCE_
<android.media.audiofx.Equalizer: short getCurrentPreset()> -> _SOURCE_
<android.media.audiofx.Equalizer: short getNumberOfBands()> -> _SOURCE_
<android.media.audiofx.Equalizer: short getNumberOfPresets()> -> _SOURCE_
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)> -> _SOURCE_
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer.Settings getProperties()> -> _SOURCE_
<android.media.audiofx.Equalizer: void setBandLevel(short,short)> -> _SINK_
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer.Settings)> -> _SINK_
<android.media.audiofx.Equalizer: void usePreset(short)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb.Settings: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.Virtualizer.Settings: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.LoudnessEnhancer: float getTargetGain()> -> _SOURCE_
<android.media.audiofx.LoudnessEnhancer: void setTargetGain(int)> -> _SINK_
<android.media.audiofx.NoiseSuppressor: NoiseSuppressor create(int)> -> _SINK_
<android.media.audiofx.NoiseSuppressor: boolean isAvailable()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getDecayHFRatio()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getDensity()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: android.media.audiofx.EnvironmentalReverb.Settings getProperties()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getReflectionsLevel()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getRoomHFLevel()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getRoomLevel()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: void setDecayHFRatio(short)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setDecayTime(int)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setDiffusion(short)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setProperties(android.media.audiofx.EnvironmentalReverb.Settings)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setReflectionsDelay(int)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setReverbDelay(int)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setReverbLevel(short)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setRoomHFLevel(short)> -> _SINK_
<android.media.audiofx.EnvironmentalReverb: void setRoomLevel(short)> -> _SINK_
<android.media.audiofx.PresetReverb.Settings: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getCaptureSize()> -> _SOURCE_
<android.media.audiofx.Visualizer: int[] getCaptureSizeRange()> -> _SOURCE_
<android.media.audiofx.Visualizer: boolean getEnabled()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getFft(byte[])> -> _SOURCE_
<android.media.audiofx.Visualizer: int getMaxCaptureRate()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getMeasurementMode()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getMeasurementPeakRms(android.media.audiofx.Visualizer.MeasurementPeakRms)> -> _SOURCE_
<android.media.audiofx.Visualizer: int getSamplingRate()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getScalingMode()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getWaveForm(byte[])> -> _SOURCE_
<android.media.audiofx.Visualizer: int setCaptureSize(int)> -> _SINK_
<android.media.audiofx.Visualizer: int setDataCaptureListener(android.media.audiofx.Visualizer.OnDataCaptureListener,int,boolean,boolean)> -> _SINK_
<android.media.audiofx.Visualizer: int setMeasurementMode(int)> -> _SINK_
<android.media.audiofx.Visualizer: int setScalingMode(int)> -> _SINK_
<android.media.audiofx.Visualizer.OnDataCaptureListener: void onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)> -> _SINK_
<android.media.browse.MediaBrowser: void connect()> -> _SINK_
<android.media.browse.MediaBrowser: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.browse.MediaBrowser: void getItem(java.lang.String,android.media.browse.MediaBrowser.ItemCallback)> -> _SOURCE_
<android.media.browse.MediaBrowser: java.lang.String getRoot()> -> _SOURCE_
<android.media.browse.MediaBrowser: android.content.ComponentName getServiceComponent()> -> _SOURCE_
<android.media.browse.MediaBrowser: android.media.session.MediaSession.Token getSessionToken()> -> _SOURCE_
<android.media.browse.MediaBrowser: boolean isConnected()> -> _SOURCE_
<android.media.browse.MediaBrowser: void subscribe(java.lang.String,android.os.Bundle,android.media.browse.MediaBrowser.SubscriptionCallback)> -> _SINK_
<android.media.browse.MediaBrowser: void subscribe(java.lang.String,android.media.browse.MediaBrowser.SubscriptionCallback)> -> _SOURCE_
<android.media.audiofx.Virtualizer: boolean canVirtualize(int,int)> -> _SINK_
<android.media.audiofx.Virtualizer: boolean forceVirtualizationMode(int)> -> _SINK_
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer.Settings getProperties()> -> _SOURCE_
<android.media.audiofx.Virtualizer: short getRoundedStrength()> -> _SOURCE_
<android.media.audiofx.Virtualizer: boolean getSpeakerAngles(int,int,int[])> -> _SOURCE_
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()> -> _SOURCE_
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer.Settings)> -> _SINK_
<android.media.audiofx.Virtualizer: void setStrength(short)> -> _SINK_
<android.media.browse.MediaBrowser.MediaItem: int describeContents()> -> _SOURCE_
<android.media.browse.MediaBrowser.MediaItem: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.media.browse.MediaBrowser.MediaItem: int getFlags()> -> _SOURCE_
<android.media.browse.MediaBrowser.MediaItem: java.lang.String getMediaId()> -> _SOURCE_
<android.media.browse.MediaBrowser.MediaItem: boolean isBrowsable()> -> _SOURCE_
<android.media.browse.MediaBrowser.MediaItem: boolean isPlayable()> -> _SOURCE_
<android.media.browse.MediaBrowser.MediaItem: java.lang.String toString()> -> _SOURCE_
<android.media.effect.Effect: void apply(int,int,int,int)> -> _SINK_
<android.media.effect.Effect: void release()> -> _SINK_
<android.media.effect.Effect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Stage: boolean isEnabled()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing.Stage: void setEnabled(boolean)> -> _SINK_
<android.media.audiofx.DynamicsProcessing.Stage: java.lang.String toString()> -> _SOURCE_
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()> -> _SOURCE_
<android.app.admin.NetworkEvent: int describeContents()> -> _SOURCE_
<android.app.admin.NetworkEvent: android.os.Bundle getMetricsBundle()> -> _SOURCE_
<android.app.admin.NetworkEvent: int getNetworkType()> -> _SOURCE_
<android.app.admin.NetworkEvent: long getTimeSinceCreatedMillis()> -> _SOURCE_
<android.media.metrics.PlaybackErrorEvent.Builder: android.media.metrics.PlaybackErrorEvent build()> -> _SINK_
<android.media.metrics.PlaybackErrorEvent.Builder: android.media.metrics.PlaybackErrorEvent.Builder setErrorCode(int)> -> _SINK_
<android.media.metrics.PlaybackErrorEvent.Builder: android.media.metrics.PlaybackErrorEvent.Builder setException(java.lang.Exception)> -> _SINK_
<android.media.metrics.PlaybackErrorEvent.Builder: android.media.metrics.PlaybackErrorEvent.Builder setMetricsBundle(android.os.Bundle)> -> _SINK_
<android.media.metrics.PlaybackErrorEvent.Builder: android.media.metrics.PlaybackErrorEvent.Builder setSubErrorCode(int)> -> _SINK_
<android.media.metrics.Event: android.os.Bundle getMetricsBundle()> -> _SOURCE_
<android.media.metrics.Event: long getTimeSinceCreatedMillis()> -> _SOURCE_
<android.media.metrics.NetworkEvent.Builder: android.app.admin.NetworkEvent build()> -> _SINK_
<android.media.metrics.NetworkEvent.Builder: android.media.metrics.NetworkEvent.Builder setMetricsBundle(android.os.Bundle)> -> _SINK_
<android.media.metrics.NetworkEvent.Builder: android.media.metrics.NetworkEvent.Builder setNetworkType(int)> -> _SINK_
<android.media.metrics.NetworkEvent.Builder: android.media.metrics.NetworkEvent.Builder setTimeSinceCreatedMillis(long)> -> _SINK_
<android.media.metrics.LogSessionId: java.lang.String getStringId()> -> _SOURCE_
<android.media.metrics.LogSessionId: java.lang.String toString()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics build()> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setAudioUnderrunCount(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setContentType(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setDrmSessionId(byte[])> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setDrmType(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setLocalBytesRead(long)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setMediaDurationMillis(long)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setMetricsBundle(android.os.Bundle)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setNetworkBytesRead(long)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setNetworkTransferDurationMillis(long)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setPlaybackType(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setPlayerName(java.lang.String)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setPlayerVersion(java.lang.String)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setStreamSource(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setStreamType(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setVideoFramesDropped(int)> -> _SINK_
<android.media.metrics.PlaybackMetrics.Builder: android.media.metrics.PlaybackMetrics.Builder setVideoFramesPlayed(int)> -> _SINK_
<android.media.metrics.PlaybackErrorEvent: int describeContents()> -> _SOURCE_
<android.media.metrics.PlaybackErrorEvent: int getErrorCode()> -> _SOURCE_
<android.media.metrics.PlaybackErrorEvent: android.os.Bundle getMetricsBundle()> -> _SOURCE_
<android.media.metrics.PlaybackErrorEvent: long getTimeSinceCreatedMillis()> -> _SOURCE_
<android.media.effect.EffectFactory: boolean isEffectSupported(java.lang.String)> -> _SOURCE_
<android.media.browse.MediaBrowser.ItemCallback: void onError(java.lang.String)> -> _SOURCE_
<android.media.metrics.PlaybackStateEvent.Builder: android.media.metrics.PlaybackStateEvent build()> -> _SINK_
<android.media.metrics.PlaybackStateEvent.Builder: android.media.metrics.PlaybackStateEvent.Builder setMetricsBundle(android.os.Bundle)> -> _SINK_
<android.media.metrics.PlaybackStateEvent.Builder: android.media.metrics.PlaybackStateEvent.Builder setState(int)> -> _SINK_
<android.media.metrics.PlaybackStateEvent.Builder: android.media.metrics.PlaybackStateEvent.Builder setTimeSinceCreatedMillis(long)> -> _SINK_
<android.media.metrics.TrackChangeEvent: int describeContents()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: int getAudioSampleRate()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: int getChannelCount()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: java.lang.String getCodecName()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: java.lang.String getContainerMimeType()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: int getHeight()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: java.lang.String getLanguage()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: java.lang.String getLanguageRegion()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: android.os.Bundle getMetricsBundle()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: java.lang.String getSampleMimeType()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: long getTimeSinceCreatedMillis()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: int getTrackChangeReason()> -> _SINK_
<android.media.metrics.TrackChangeEvent: int getTrackState()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: int getTrackType()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: float getVideoFrameRate()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent: int getWidth()> -> _SOURCE_
<android.media.midi.MidiDevice: android.media.midi.MidiDevice.MidiConnection connectPorts(android.media.midi.MidiInputPort,int)> -> _SINK_
<android.media.midi.MidiDevice: android.media.midi.MidiDeviceInfo getInfo()> -> _SOURCE_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent build()> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setAudioSampleRate(int)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setBitrate(int)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setChannelCount(int)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setCodecName(java.lang.String)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setContainerMimeType(java.lang.String)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setHeight(int)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setLanguage(java.lang.String)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setLanguageRegion(java.lang.String)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setMetricsBundle(android.os.Bundle)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setSampleMimeType(java.lang.String)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setTimeSinceCreatedMillis(long)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setTrackChangeReason(int)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setTrackState(int)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setVideoFrameRate(float)> -> _SINK_
<android.media.metrics.TrackChangeEvent.Builder: android.media.metrics.TrackChangeEvent.Builder setWidth(int)> -> _SINK_
<android.media.midi.MidiManager: MidiDeviceInfo[] getDevices()> -> _SOURCE_
<android.media.midi.MidiManager: Set<MidiDeviceInfo> getDevicesForTransport(int)> -> _SOURCE_
<android.media.midi.MidiManager: void openDevice(android.media.midi.MidiDeviceInfo,android.media.midi.MidiManager.OnDeviceOpenedListener,android.os.Handler)> -> _SINK_
<android.media.midi.MidiDeviceInfo: int describeContents()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getDefaultProtocol()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getId()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getInputPortCount()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getOutputPortCount()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: PortInfo[] getPorts()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: android.os.Bundle getProperties()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getType()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: boolean isPrivate()> -> _SOURCE_
<android.media.midi.MidiInputPort: int getPortNumber()> -> _SOURCE_
<android.media.audiofx.PresetReverb: short getPreset()> -> _SOURCE_
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb.Settings getProperties()> -> _SOURCE_
<android.media.audiofx.PresetReverb: void setPreset(short)> -> _SINK_
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb.Settings)> -> _SINK_
<android.media.metrics.PlaybackStateEvent: int describeContents()> -> _SOURCE_
<android.media.metrics.PlaybackStateEvent: android.os.Bundle getMetricsBundle()> -> _SOURCE_
<android.media.metrics.PlaybackStateEvent: int getState()> -> _SOURCE_
<android.media.metrics.PlaybackStateEvent: long getTimeSinceCreatedMillis()> -> _SOURCE_
<android.media.midi.MidiOutputPort: int getPortNumber()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: int describeContents()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: int getOutputPortOpenCount(int)> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: boolean isInputPortOpen(int)> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: java.lang.String toString()> -> _SOURCE_
<android.media.midi.MidiDeviceService: MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.media.midi.MidiDeviceService: MidiReceiver[] getOutputPortReceivers()> -> _SOURCE_
<android.media.midi.MidiDeviceService: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)> -> _SINK_
<android.media.midi.MidiDeviceService: MidiReceiver[] onGetInputPortReceivers()> -> _SOURCE_
<android.media.projection.MediaProjectionManager: android.content.Intent createScreenCaptureIntent()> -> _SOURCE_
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjection getMediaProjection(int,android.content.Intent)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo.PortInfo: java.lang.String getName()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo.PortInfo: int getPortNumber()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo.PortInfo: int getType()> -> _SOURCE_
<android.media.session.MediaController: void adjustVolume(int,int)> -> _SINK_
<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)> -> _SINK_
<android.media.session.MediaController: long getFlags()> -> _SOURCE_
<android.media.session.MediaController: android.media.MediaMetadata getMetadata()> -> _SOURCE_
<android.media.session.MediaController: java.lang.String getPackageName()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController.PlaybackInfo getPlaybackInfo()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()> -> _SOURCE_
<android.media.session.MediaController: List<MediaSession.QueueItem> getQueue()> -> _SOURCE_
<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()> -> _SOURCE_
<android.media.session.MediaController: int getRatingType()> -> _SOURCE_
<android.media.session.MediaController: android.os.Bundle getSessionInfo()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaSession.Token getSessionToken()> -> _SOURCE_
<android.media.session.MediaController: java.lang.String getTag()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController.TransportControls getTransportControls()> -> _SINK_
<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)> -> _SINK_
<android.media.session.MediaController: void setVolumeTo(int,int)> -> _SINK_
<android.media.session.MediaController.TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.TransportControls: void setPlaybackSpeed(float)> -> _SINK_
<android.media.session.MediaController.TransportControls: void setRating(android.media.Rating)> -> _SINK_
<android.media.session.MediaController.TransportControls: void skipToQueueItem(long)> -> _SOURCE_
<android.media.midi.MidiReceiver: int getMaxMessageSize()> -> _SOURCE_
<android.media.midi.MidiReceiver: void send(byte[],int,int)> -> _SINK_
<android.media.midi.MidiReceiver: void send(byte[],int,int,long)> -> _SINK_
<android.media.session.MediaController.PlaybackInfo: int describeContents()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: int getCurrentVolume()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: int getMaxVolume()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: int getPlaybackType()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: int getVolumeControl()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: java.lang.String getVolumeControlId()> -> _SOURCE_
<android.media.session.MediaController.PlaybackInfo: java.lang.String toString()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: int describeContents()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: int getContentType()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: byte[] getDrmSessionId()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: long[] getExperimentIds()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: long getLocalBytesRead()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: long getMediaDurationMillis()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: android.os.Bundle getMetricsBundle()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: long getNetworkBytesRead()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: long getNetworkTransferDurationMillis()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: int getPlaybackType()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: java.lang.String getPlayerName()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: java.lang.String getPlayerVersion()> -> _SINK_
<android.media.metrics.PlaybackMetrics: int getStreamSource()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: int getStreamType()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: int getVideoFramesPlayed()> -> _SOURCE_
<android.media.metrics.PlaybackMetrics: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaSession.QueueItem: int describeContents()> -> _SOURCE_
<android.media.session.MediaSession.QueueItem: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.media.session.MediaSession.QueueItem: long getQueueId()> -> _SOURCE_
<android.media.session.MediaSession.QueueItem: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaController.Callback: void onAudioInfoChanged(android.media.session.MediaController.PlaybackInfo)> -> _SINK_
<android.media.session.MediaController.Callback: void onExtrasChanged(android.os.Bundle)> -> _SINK_
<android.media.session.MediaController.Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)> -> _SINK_
<android.media.session.MediaSession: android.media.session.MediaSessionManager.RemoteUserInfo getCurrentControllerInfo()> -> _SOURCE_
<android.media.session.MediaSession: android.media.session.MediaSession.Token getSessionToken()> -> _SOURCE_
<android.media.session.MediaSession: boolean isActive()> -> _SOURCE_
<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)> -> _SINK_
<android.media.session.MediaSession: void setActive(boolean)> -> _SINK_
<android.media.session.MediaSession: void setExtras(android.os.Bundle)> -> _SINK_
<android.media.session.MediaSession: void setFlags(int)> -> _SINK_
<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)> -> _SINK_
<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)> -> _SINK_
<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)> -> _SINK_
<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)> -> _SINK_
<android.media.session.MediaSession: void setQueueTitle(java.lang.CharSequence)> -> _SINK_
<android.media.session.MediaSession: void setRatingType(int)> -> _SINK_
<android.media.session.PlaybackState.CustomAction: int describeContents()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction: java.lang.String getAction()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction: int getIcon()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction: java.lang.CharSequence getName()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction: java.lang.String toString()> -> _SOURCE_
<android.media.session.PlaybackState: int describeContents()> -> _SOURCE_
<android.media.session.PlaybackState: long getActions()> -> _SOURCE_
<android.media.session.PlaybackState: long getActiveQueueItemId()> -> _SOURCE_
<android.media.session.PlaybackState: long getBufferedPosition()> -> _SOURCE_
<android.media.session.PlaybackState: List<PlaybackState.CustomAction> getCustomActions()> -> _SOURCE_
<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()> -> _SOURCE_
<android.media.session.PlaybackState: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.session.PlaybackState: long getLastPositionUpdateTime()> -> _SOURCE_
<android.media.session.PlaybackState: float getPlaybackSpeed()> -> _SOURCE_
<android.media.session.PlaybackState: long getPosition()> -> _SOURCE_
<android.media.session.PlaybackState: int getState()> -> _SOURCE_
<android.media.session.PlaybackState: boolean isActive()> -> _SOURCE_
<android.media.session.PlaybackState: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaSession.Callback: void onSetPlaybackSpeed(float)> -> _SINK_
<android.media.session.MediaSession.Callback: void onSetRating(android.media.Rating)> -> _SINK_
<android.media.tv.TvContract.Programs.Genres: String[] decode(java.lang.String)> -> _SINK_
<android.media.tv.TvContract.Programs.Genres: String encode(String[])> -> _SINK_
<android.media.tv.TvContract.Programs.Genres: boolean isCanonical(java.lang.String)> -> _SOURCE_
<android.media.tv.TvContentRating: boolean contains(android.media.tv.TvContentRating)> -> _SOURCE_
<android.media.tv.TvContentRating: TvContentRating createRating(java.lang.String,java.lang.String,java.lang.String,String[])> -> _SINK_
<android.media.tv.TvContentRating: java.lang.String flattenToString()> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getDomain()> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getMainRating()> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getRatingSystem()> -> _SOURCE_
<android.media.tv.TvContentRating: List<String> getSubRatings()> -> _SOURCE_
<android.media.tv.TvContentRating: TvContentRating unflattenFromString(java.lang.String)> -> _SOURCE_
<android.media.tv.TvContract.Channels: String getVideoResolution(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo build()> -> _SINK_
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setCanRecord(boolean)> -> _SINK_
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setTunerCount(int)> -> _SINK_
<android.media.session.MediaSession.Token: int describeContents()> -> _SOURCE_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder addCustomAction(java.lang.String,java.lang.String,int)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder addCustomAction(android.media.session.PlaybackState.CustomAction)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState build()> -> _SOURCE_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setActions(long)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setActiveQueueItemId(long)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setBufferedPosition(long)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setErrorMessage(java.lang.CharSequence)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setState(int,long,float)> -> _SINK_
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setState(int,long,float,long)> -> _SINK_
<android.media.tv.TvInputInfo: boolean canRecord()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.content.Intent createSettingsIntent()> -> _SINK_
<android.media.tv.TvInputInfo: android.content.Intent createSetupIntent()> -> _SINK_
<android.media.tv.TvInputInfo: int describeContents()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String getId()> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String getParentId()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.media.tv.TvInputInfo: int getTunerCount()> -> _SOURCE_
<android.media.tv.TvInputInfo: int getType()> -> _SOURCE_
<android.media.tv.TvInputInfo: boolean isPassthroughInput()> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.CharSequence loadCustomLabel(android.content.Context)> -> _SINK_
<android.media.tv.TvInputInfo: java.lang.CharSequence loadLabel(android.content.Context)> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String toString()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction.Builder: android.media.session.PlaybackState.CustomAction build()> -> _SOURCE_
<android.media.session.PlaybackState.CustomAction.Builder: android.media.session.PlaybackState.CustomAction.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener,android.content.ComponentName)> -> _SINK_
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)> -> _SINK_
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager.OnSession2TokensChangedListener)> -> _SOURCE_
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager.OnSession2TokensChangedListener,android.os.Handler)> -> _SOURCE_
<android.media.session.MediaSessionManager: List<MediaController> getActiveSessions(android.content.ComponentName)> -> _SOURCE_
<android.media.session.MediaSessionManager: android.media.session.MediaSession.Token getMediaKeyEventSession()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.lang.String getMediaKeyEventSessionPackageName()> -> _SOURCE_
<android.media.session.MediaSessionManager: List<Session2Token> getSession2Tokens()> -> _SOURCE_
<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager.RemoteUserInfo)> -> _SOURCE_
<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager.OnSession2TokensChangedListener)> -> _SOURCE_
<android.media.tv.TvInputService.HardwareSession: String getHardwareInputId()> -> _SOURCE_
<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri,android.os.Bundle)> -> _SOURCE_
<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.media.tv.TvInputManager: List<TvContentRating> getBlockedRatings()> -> _SOURCE_
<android.media.tv.TvInputManager: int getInputState(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputManager: List<TvInputInfo> getTvInputList()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isParentalControlsEnabled()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isRatingBlocked(android.media.tv.TvContentRating)> -> _SOURCE_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo build()> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setAudioChannelCount(int)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setAudioDescription(boolean)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setAudioSampleRate(int)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setEncoding(java.lang.String)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setEncrypted(boolean)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setExtra(android.os.Bundle)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setHardOfHearing(boolean)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setLanguage(java.lang.String)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setSpokenSubtitle(boolean)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoActiveFormatDescription(byte)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoFrameRate(float)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoHeight(int)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoPixelAspectRatio(float)> -> _SINK_
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoWidth(int)> -> _SINK_
<android.media.tv.TvTrackInfo: int describeContents()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getAudioChannelCount()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getAudioSampleRate()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getEncoding()> -> _SOURCE_
<android.media.tv.TvTrackInfo: android.os.Bundle getExtra()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getId()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getType()> -> _SOURCE_
<android.media.tv.TvTrackInfo: byte getVideoActiveFormatDescription()> -> _SOURCE_
<android.media.tv.TvTrackInfo: float getVideoFrameRate()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getVideoHeight()> -> _SOURCE_
<android.media.tv.TvTrackInfo: float getVideoPixelAspectRatio()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getVideoWidth()> -> _SOURCE_
<android.media.tv.TvTrackInfo: boolean isAudioDescription()> -> _SOURCE_
<android.media.tv.TvTrackInfo: boolean isEncrypted()> -> _SOURCE_
<android.media.tv.TvTrackInfo: boolean isHardOfHearing()> -> _SOURCE_
<android.media.tv.TvTrackInfo: boolean isSpokenSubtitle()> -> _SOURCE_
<android.mtp.MtpDevice: int getDeviceId()> -> _SOURCE_
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.mtp.MtpDevice: java.lang.String getDeviceName()> -> _SOURCE_
<android.mtp.MtpDevice: byte[] getObject(int,int)> -> _SOURCE_
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)> -> _SOURCE_
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)> -> _SOURCE_
<android.mtp.MtpDevice: long getParent(int)> -> _SOURCE_
<android.mtp.MtpDevice: long getPartialObject(int,long,long,byte[])> -> _SINK_
<android.mtp.MtpDevice: long getPartialObject64(int,long,long,byte[])> -> _SINK_
<android.mtp.MtpDevice: long getStorageId(int)> -> _SOURCE_
<android.mtp.MtpDevice: int[] getStorageIds()> -> _SOURCE_
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)> -> _SOURCE_
<android.mtp.MtpDevice: byte[] getThumbnail(int)> -> _SOURCE_
<android.mtp.MtpDevice: boolean importFile(int,java.lang.String)> -> _SINK_
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo sendObjectInfo(android.mtp.MtpObjectInfo)> -> _SINK_
<android.mtp.MtpDevice: java.lang.String toString()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: int[] getEventsSupported()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: String getManufacturer()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: String getModel()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: int[] getOperationsSupported()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: String getSerialNumber()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: String getVersion()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: boolean isEventSupported(int)> -> _SOURCE_
<android.mtp.MtpDeviceInfo: boolean isOperationSupported(int)> -> _SOURCE_
<android.net.CaptivePortal: int describeContents()> -> _SOURCE_
<android.net.CaptivePortal: void ignoreNetwork()> -> _SINK_
<android.mtp.MtpStorageInfo: java.lang.String getDescription()> -> _SOURCE_
<android.mtp.MtpStorageInfo: long getFreeSpace()> -> _SOURCE_
<android.mtp.MtpStorageInfo: long getMaxCapacity()> -> _SOURCE_
<android.mtp.MtpStorageInfo: int getStorageId()> -> _SOURCE_
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()> -> _SOURCE_
<android.media.tv.TvInputService.Session: void notifyAitInfoUpdated(AitInfo)> -> _SINK_
<android.media.tv.TvInputService.Session: void notifyBroadcastInfoResponse(BroadcastInfoResponse)> -> _SINK_
<android.media.tv.TvInputService.Session: void notifyContentAllowed()> -> _SINK_
<android.media.tv.TvInputService.Session: void notifyTimeShiftStatusChanged(int)> -> _SINK_
<android.media.tv.TvInputService.Session: void notifyTrackSelected(int,java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputService.Session: void notifyTracksChanged(List<TvTrackInfo>)> -> _SINK_
<android.media.tv.TvInputService.Session: void notifyTuned(android.net.Uri)> -> _SINK_
<android.media.tv.TvInputService.Session: void notifyVideoAvailable()> -> _SINK_
<android.media.tv.TvInputService.Session: boolean onSelectTrack(int,java.lang.String)> -> _SINK_
<android.media.tv.TvInputService.Session: void onSetCaptionEnabled(boolean)> -> _SINK_
<android.media.tv.TvInputService.Session: void onSetInteractiveAppNotificationEnabled(boolean)> -> _SINK_
<android.media.tv.TvInputService.Session: void onSetStreamVolume(float)> -> _SINK_
<android.media.tv.TvInputService.Session: boolean onSetSurface(android.view.Surface)> -> _SINK_
<android.media.tv.TvInputService.Session: long onTimeShiftGetCurrentPosition()> -> _SOURCE_
<android.media.tv.TvInputService.Session: long onTimeShiftGetStartPosition()> -> _SOURCE_
<android.media.tv.TvInputService.Session: void onTimeShiftSetPlaybackParams(android.media.PlaybackParams)> -> _SINK_
<android.media.tv.TvInputService.Session: boolean onTrackballEvent(android.view.MotionEvent)> -> _SOURCE_
<android.media.tv.TvInputService.Session: boolean onTune(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.media.tv.TvInputService.Session: boolean onTune(android.net.Uri)> -> _SINK_
<android.media.tv.TvInputService.Session: void onUnblockContent(android.media.tv.TvContentRating)> -> _SINK_
<android.media.tv.TvInputService.RecordingSession: void notifyTuned(android.net.Uri)> -> _SINK_
<android.media.tv.TvInputService.RecordingSession: void onTune(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.media.tv.TvInputService.RecordingSession: void onTune(android.net.Uri)> -> _SINK_
<android.mtp.MtpEvent: int getDevicePropCode()> -> _SOURCE_
<android.mtp.MtpEvent: int getEventCode()> -> _SOURCE_
<android.mtp.MtpEvent: int getObjectFormatCode()> -> _SOURCE_
<android.mtp.MtpEvent: int getObjectHandle()> -> _SOURCE_
<android.mtp.MtpEvent: int getObjectPropCode()> -> _SOURCE_
<android.mtp.MtpEvent: int getParameter1()> -> _SOURCE_
<android.mtp.MtpEvent: int getParameter2()> -> _SOURCE_
<android.mtp.MtpEvent: int getParameter3()> -> _SOURCE_
<android.mtp.MtpEvent: int getStorageId()> -> _SOURCE_
<android.mtp.MtpEvent: int getTransactionId()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.ConnectivityReport: int describeContents()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.ConnectivityReport: android.os.PersistableBundle getAdditionalInfo()> -> _SINK_
<android.net.ConnectivityDiagnosticsManager.ConnectivityReport: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.ConnectivityReport: android.net.Network getNetwork()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.ConnectivityReport: android.net.NetworkCapabilities getNetworkCapabilities()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.ConnectivityReport: long getReportTimestamp()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getAssociationDesc()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getAssociationType()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getCompressedSize()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getCompressedSizeLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getDateCreated()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getDateModified()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getFormat()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getImagePixDepth()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getImagePixDepthLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getImagePixHeight()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getImagePixHeightLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getImagePixWidth()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getImagePixWidthLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()> -> _SOURCE_
<android.mtp.MtpObjectInfo: java.lang.String getName()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getObjectHandle()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getParent()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getProtectionStatus()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getSequenceNumber()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getSequenceNumberLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getStorageId()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getThumbCompressedSizeLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getThumbFormat()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getThumbPixHeight()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getThumbPixHeightLong()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getThumbPixWidth()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getThumbPixWidthLong()> -> _SOURCE_
<android.net.DnsResolver: DnsResolver getInstance()> -> _SOURCE_
<android.net.DnsResolver: void query(android.net.Network,java.lang.String,int,java.util.concurrent.Executor,android.os.CancellationSignal,Callback<?)> -> _SINK_
<android.net.DnsResolver: void query(android.net.Network,java.lang.String,int,int,java.util.concurrent.Executor,android.os.CancellationSignal,Callback<?)> -> _SINK_
<android.net.DnsResolver: void rawQuery(android.net.Network,byte[],int,java.util.concurrent.Executor,android.os.CancellationSignal,Callback<?)> -> _SOURCE_
<android.net.DnsResolver: void rawQuery(android.net.Network,java.lang.String,int,int,int,java.util.concurrent.Executor,android.os.CancellationSignal,Callback<?)> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.DataStallReport: int describeContents()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.DataStallReport: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.DataStallReport: android.net.Network getNetwork()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.DataStallReport: android.net.NetworkCapabilities getNetworkCapabilities()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.DataStallReport: long getReportTimestamp()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager.DataStallReport: android.os.PersistableBundle getStallDetails()> -> _SINK_
<android.net.InetAddresses: InetAddress parseNumericAddress(java.lang.String)> -> _SOURCE_
<android.net.DhcpInfo: java.lang.String toString()> -> _SOURCE_
<android.net.DnsResolver.Callback: void onAnswer(T,int)> -> _SOURCE_
<android.net.DnsResolver.Callback: void onError(android.net.DnsResolver.DnsException)> -> _SOURCE_
<android.net.IpPrefix: boolean contains(java.net.InetAddress)> -> _SOURCE_
<android.net.IpPrefix: boolean equals(java.lang.Object)> -> _SOURCE_
<android.net.IpPrefix: java.net.InetAddress getAddress()> -> _SOURCE_
<android.net.IpPrefix: int getPrefixLength()> -> _SOURCE_
<android.net.IpPrefix: byte[] getRawAddress()> -> _SOURCE_
<android.net.IpPrefix: int hashCode()> -> _SOURCE_
<android.net.IpPrefix: java.lang.String toString()> -> _SOURCE_
<android.net.ConnectivityManager: void addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)> -> _SINK_
<android.net.ConnectivityManager: android.net.SocketKeepalive createSocketKeepalive(android.net.Network,android.net.IpSecManager.UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)> -> _SINK_
<android.net.ConnectivityManager: android.net.Network getActiveNetwork()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
<android.net.ConnectivityManager: NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
<android.net.ConnectivityManager: Network[] getAllNetworks()> -> _SOURCE_
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()> -> _SOURCE_
<android.net.ConnectivityManager: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)> -> _SOURCE_
<android.net.ConnectivityManager: int getMultipathPreference(android.net.Network)> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)> -> _SOURCE_
<android.net.ConnectivityManager: int getNetworkPreference()> -> _SINK_
<android.net.ConnectivityManager: Network getProcessDefaultNetwork()> -> _SOURCE_
<android.net.ConnectivityManager: int getRestrictBackgroundStatus()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isDefaultNetworkActive()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)> -> _SOURCE_
<android.net.ConnectivityManager: void registerBestMatchingNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)> -> _SOURCE_
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)> -> _SOURCE_
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)> -> _SOURCE_
<android.net.ConnectivityManager: void reportBadNetwork(android.net.Network)> -> _SOURCE_
<android.net.ConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)> -> _SOURCE_
<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)> -> _SOURCE_
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)> -> _SOURCE_
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,int)> -> _SINK_
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)> -> _SOURCE_
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)> -> _SOURCE_
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler,int)> -> _SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)> -> _SINK_
<android.net.Ikev2VpnProfile: List<String> getAllowedAlgorithms()> -> _SOURCE_
<android.net.Ikev2VpnProfile: int getMaxMtu()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getPassword()> -> _SOURCE_
<android.net.Ikev2VpnProfile: byte[] getPresharedKey()> -> _SOURCE_
<android.net.Ikev2VpnProfile: android.net.ProxyInfo getProxyInfo()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.PrivateKey getRsaPrivateKey()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getServerAddr()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getServerRootCaCert()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getUserCert()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getUserIdentity()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getUsername()> -> _SOURCE_
<android.net.Ikev2VpnProfile: boolean isBypassable()> -> _SOURCE_
<android.net.Ikev2VpnProfile: boolean isMetered()> -> _SOURCE_
<android.media.tv.TvView: boolean gatherTransparentRegion(android.graphics.Region)> -> _SINK_
<android.media.tv.TvView: java.lang.String getSelectedTrack(int)> -> _SOURCE_
<android.media.tv.TvView: List<TvTrackInfo> getTracks(int)> -> _SOURCE_
<android.media.tv.TvView: void selectTrack(int,java.lang.String)> -> _SINK_
<android.media.tv.TvView: void setCaptionEnabled(boolean)> -> _SINK_
<android.media.tv.TvView: void setInteractiveAppNotificationEnabled(boolean)> -> _SINK_
<android.media.tv.TvView: void setStreamVolume(float)> -> _SINK_
<android.media.tv.TvView: void setTimeShiftPositionCallback(android.media.tv.TvView.TimeShiftPositionCallback)> -> _SINK_
<android.media.tv.TvView: void setZOrderMediaOverlay(boolean)> -> _SINK_
<android.media.tv.TvView: void setZOrderOnTop(boolean)> -> _SINK_
<android.media.tv.TvView: void timeShiftPlay(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.media.tv.TvView: void timeShiftSeekTo(long)> -> _SINK_
<android.media.tv.TvView: void timeShiftSetPlaybackParams(android.media.PlaybackParams)> -> _SINK_
<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri,android.os.Bundle)> -> _SINK_
<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri)> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile build()> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setAllowedAlgorithms(List<String>)> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setAuthDigitalSignature(java.security.cert.X509Certificate,java.security.PrivateKey,java.security.cert.X509Certificate)> -> _SOURCE_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setAuthPsk(byte[])> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setAuthUsernamePassword(java.lang.String,java.lang.String,java.security.cert.X509Certificate)> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setBypassable(boolean)> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setLocalRoutesExcluded(boolean)> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setMaxMtu(int)> -> _SINK_
<android.net.Ikev2VpnProfile.Builder: android.net.Ikev2VpnProfile.Builder setProxy(android.net.ProxyInfo)> -> _SINK_
<android.net.IpSecManager: android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress)> -> _SINK_
<android.net.IpSecManager: android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress,int)> -> _SINK_
<android.net.IpSecManager: void applyTransportModeTransform(java.net.DatagramSocket,int,android.net.IpSecTransform)> -> _SINK_
<android.net.IpSecManager: void removeTransportModeTransforms(java.net.DatagramSocket)> -> _SINK_
<android.net.LinkAddress: boolean equals(java.lang.Object)> -> _SOURCE_
<android.net.LinkAddress: java.net.InetAddress getAddress()> -> _SOURCE_
<android.net.LinkAddress: int getFlags()> -> _SOURCE_
<android.net.LinkAddress: int getPrefixLength()> -> _SOURCE_
<android.net.LinkAddress: int getScope()> -> _SOURCE_
<android.net.LinkAddress: int hashCode()> -> _SOURCE_
<android.net.LinkAddress: java.lang.String toString()> -> _SOURCE_
<android.net.IpSecManager.SecurityParameterIndex: void close()> -> _SINK_
<android.net.IpSecManager.SecurityParameterIndex: int getSpi()> -> _SOURCE_
<android.net.IpSecManager.SecurityParameterIndex: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputService: TvInputService.Session onCreateSession(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputService: android.media.tv.TvInputService.Session onCreateSession(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.IpSecManager.UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.net.IpSecManager.UdpEncapsulationSocket: int getPort()> -> _SOURCE_
<android.net.IpSecManager.UdpEncapsulationSocket: java.lang.String toString()> -> _SOURCE_
<android.net.IpSecTransform.Builder: android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress,android.net.IpSecManager.SecurityParameterIndex)> -> _SINK_
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setAuthenticatedEncryption(android.net.IpSecAlgorithm)> -> _SINK_
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setAuthentication(android.net.IpSecAlgorithm)> -> _SINK_
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setEncryption(android.net.IpSecAlgorithm)> -> _SINK_
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setIpv4Encapsulation(android.net.IpSecManager.UdpEncapsulationSocket,int)> -> _SINK_
<android.net.IpSecAlgorithm: int describeContents()> -> _SINK_
<android.net.IpSecAlgorithm: byte[] getKey()> -> _SOURCE_
<android.net.IpSecAlgorithm: java.lang.String getName()> -> _SOURCE_
<android.net.IpSecAlgorithm: Set<String> getSupportedAlgorithms()> -> _SOURCE_
<android.net.IpSecAlgorithm: int getTruncationLengthBits()> -> _SOURCE_
<android.net.IpSecAlgorithm: java.lang.String toString()> -> _SOURCE_
<android.net.IpSecAlgorithm: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.IpSecManager.SpiUnavailableException: int getSpi()> -> _SOURCE_
<android.net.IpSecTransform: boolean equals(java.lang.Object)> -> _SOURCE_
<android.net.IpSecTransform: java.lang.String toString()> -> _SOURCE_
<android.net.Network: void bindSocket(java.net.DatagramSocket)> -> _SINK_
<android.net.Network: void bindSocket(java.io.FileDescriptor)> -> _SINK_
<android.net.Network: int describeContents()> -> _SOURCE_
<android.net.Network: Network fromNetworkHandle(long)> -> _SOURCE_
<android.net.Network: InetAddress[] getAllByName(java.lang.String)> -> _SOURCE_
<android.net.Network: java.net.InetAddress getByName(java.lang.String)> -> _SOURCE_
<android.net.Network: long getNetworkHandle()> -> _SOURCE_
<android.net.Network: javax.net.SocketFactory getSocketFactory()> -> _SOURCE_
<android.net.Network: java.net.URLConnection openConnection(java.net.URL)> -> _SINK_
<android.net.Network: java.net.URLConnection openConnection(java.net.URL,android.net.Proxy)> -> _SINK_
<android.net.Network: java.lang.String toString()> -> _SOURCE_
<android.net.LocalSocketAddress: java.lang.String getName()> -> _SOURCE_
<android.net.LocalSocketAddress: android.net.LocalSocketAddress.Namespace getNamespace()> -> _SOURCE_
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SOURCE_
<android.net.MailTo: java.lang.String getBody()> -> _SOURCE_
<android.net.MailTo: java.lang.String getCc()> -> _SOURCE_
<android.net.MailTo: java.util.Map getHeaders()> -> _SOURCE_
<android.net.MailTo: java.lang.String getSubject()> -> _SOURCE_
<android.net.MailTo: java.lang.String getTo()> -> _SOURCE_
<android.net.MailTo: boolean isMailTo(java.lang.String)> -> _SOURCE_
<android.net.MailTo: MailTo parse(java.lang.String)> -> _SOURCE_
<android.net.MailTo: java.lang.String toString()> -> _SOURCE_
<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)> -> _SINK_
<android.net.LinkProperties: java.net.Inet4Address getDhcpServerAddress()> -> _SOURCE_
<android.net.LinkProperties: List<InetAddress> getDnsServers()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getDomains()> -> _SOURCE_
<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getInterfaceName()> -> _SOURCE_
<android.net.LinkProperties: List<LinkAddress> getLinkAddresses()> -> _SOURCE_
<android.net.LinkProperties: int getMtu()> -> _SOURCE_
<android.net.LinkProperties: android.net.IpPrefix getNat64Prefix()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getPrivateDnsServerName()> -> _SOURCE_
<android.net.LinkProperties: List<RouteInfo> getRoutes()> -> _SOURCE_
<android.net.LinkProperties: boolean isPrivateDnsActive()> -> _SOURCE_
<android.net.LinkProperties: boolean isWakeOnLanSupported()> -> _SOURCE_
<android.net.LinkProperties: void setDhcpServerAddress(java.net.Inet4Address)> -> _SINK_
<android.net.LinkProperties: void setDomains(java.lang.String)> -> _SINK_
<android.net.LinkProperties: void setHttpProxy(android.net.ProxyInfo)> -> _SINK_
<android.net.LinkProperties: void setInterfaceName(java.lang.String)> -> _SOURCE_
<android.net.LinkProperties: void setMtu(int)> -> _SINK_
<android.net.LinkProperties: void setNat64Prefix(android.net.IpPrefix)> -> _SINK_
<android.net.LinkProperties: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkInfo: int describeContents()> -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo.DetailedState getDetailedState()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getExtraInfo()> -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo.State getState()> -> _SOURCE_
<android.net.NetworkInfo: int getSubtype()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getSubtypeName()> -> _SOURCE_
<android.net.NetworkInfo: int getType()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getTypeName()> -> _SOURCE_
<android.net.NetworkInfo: boolean isAvailable()> -> _SOURCE_
<android.net.NetworkInfo: boolean isConnected()> -> _SOURCE_
<android.net.NetworkInfo: boolean isConnectedOrConnecting()> -> _SOURCE_
<android.net.NetworkInfo: boolean isFailover()> -> _SOURCE_
<android.net.NetworkInfo: boolean isRoaming()> -> _SOURCE_
<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo.DetailedState,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String toString()> -> _SOURCE_
<android.net.SocketKeepalive.Callback: void onDataReceived()> -> _SINK_
<android.net.Proxy: String getDefaultHost()> -> _SOURCE_
<android.net.Proxy: int getDefaultPort()> -> _SOURCE_
<android.net.PlatformVpnProfile: boolean areLocalRoutesExcluded()> -> _SOURCE_
<android.net.PlatformVpnProfile: boolean getRequiresInternetValidation()> -> _SOURCE_
<android.net.PlatformVpnProfile: int getType()> -> _SOURCE_
<android.net.PlatformVpnProfile: String getTypeString()> -> _SOURCE_
<android.net.ProxyInfo: ProxyInfo buildDirectProxy(java.lang.String,int,List<String>)> -> _SINK_
<android.net.ProxyInfo: ProxyInfo buildDirectProxy(java.lang.String,int)> -> _SINK_
<android.net.ProxyInfo: ProxyInfo buildPacProxy(android.net.Uri,int)> -> _SINK_
<android.net.ProxyInfo: ProxyInfo buildPacProxy(android.net.Uri)> -> _SINK_
<android.net.ProxyInfo: String[] getExclusionList()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String getHost()> -> _SOURCE_
<android.net.ProxyInfo: android.net.Uri getPacFileUrl()> -> _SOURCE_
<android.net.ProxyInfo: int getPort()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkCapabilities: int describeContents()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getCapabilities()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getEnterpriseIds()> -> _SOURCE_
<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()> -> _SOURCE_
<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()> -> _SOURCE_
<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()> -> _SOURCE_
<android.net.NetworkCapabilities: int getOwnerUid()> -> _SOURCE_
<android.net.NetworkCapabilities: int getSignalStrength()> -> _SOURCE_
<android.net.NetworkCapabilities: android.net.TransportInfo getTransportInfo()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean hasEnterpriseId(int)> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String toString()> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier.Builder: android.net.TelephonyNetworkSpecifier build()> -> _SINK_
<android.net.TelephonyNetworkSpecifier.Builder: android.net.TelephonyNetworkSpecifier.Builder setSubscriptionId(int)> -> _SINK_
<android.net.RouteInfo: boolean equals(java.lang.Object)> -> _SOURCE_
<android.net.RouteInfo: android.net.IpPrefix getDestination()> -> _SOURCE_
<android.net.RouteInfo: java.net.InetAddress getGateway()> -> _SOURCE_
<android.net.RouteInfo: java.lang.String getInterface()> -> _SOURCE_
<android.net.RouteInfo: int getType()> -> _SOURCE_
<android.net.RouteInfo: boolean hasGateway()> -> _SOURCE_
<android.net.RouteInfo: int hashCode()> -> _SOURCE_
<android.net.RouteInfo: boolean isDefaultRoute()> -> _SINK_
<android.net.RouteInfo: boolean matches(java.net.InetAddress)> -> _SOURCE_
<android.net.RouteInfo: java.lang.String toString()> -> _SOURCE_
<android.net.Uri: String decode(java.lang.String)> -> _SINK_
<android.net.Uri: String encode(java.lang.String,java.lang.String)> -> _SINK_
<android.net.Uri: String encode(java.lang.String)> -> _SINK_
<android.net.Uri: Uri fromFile(java.io.File)> -> _SOURCE_
<android.net.Uri: Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.Uri: String getAuthority()> -> _SOURCE_
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)> -> _SOURCE_
<android.net.Uri: String getEncodedAuthority()> -> _SOURCE_
<android.net.Uri: String getEncodedFragment()> -> _SOURCE_
<android.net.Uri: String getEncodedPath()> -> _SOURCE_
<android.net.Uri: String getEncodedQuery()> -> _SOURCE_
<android.net.Uri: String getEncodedSchemeSpecificPart()> -> _SOURCE_
<android.net.Uri: String getEncodedUserInfo()> -> _SOURCE_
<android.net.Uri: String getFragment()> -> _SOURCE_
<android.net.Uri: String getHost()> -> _SOURCE_
<android.net.Uri: String getLastPathSegment()> -> _SOURCE_
<android.net.Uri: String getPath()> -> _SOURCE_
<android.net.Uri: List<String> getPathSegments()> -> _SOURCE_
<android.net.Uri: int getPort()> -> _SOURCE_
<android.net.Uri: String getQuery()> -> _SOURCE_
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> -> _SOURCE_
<android.net.Uri: Set<String> getQueryParameterNames()> -> _SOURCE_
<android.net.Uri: List<String> getQueryParameters(java.lang.String)> -> _SOURCE_
<android.net.Uri: String getScheme()> -> _SOURCE_
<android.net.Uri: String getSchemeSpecificPart()> -> _SOURCE_
<android.net.Uri: String getUserInfo()> -> _SOURCE_
<android.net.Uri: int hashCode()> -> _SOURCE_
<android.net.Uri: boolean isAbsolute()> -> _SOURCE_
<android.net.Uri: boolean isHierarchical()> -> _SOURCE_
<android.net.Uri: boolean isOpaque()> -> _SOURCE_
<android.net.Uri: boolean isRelative()> -> _SOURCE_
<android.net.Uri: android.net.Uri normalizeScheme()> -> _SOURCE_
<android.net.Uri: Uri parse(java.lang.String)> -> _SINK_
<android.net.Uri: String toString()> -> _SOURCE_
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: String[] getDefaultCipherSuites()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: String[] getSupportedCipherSuites()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setTrustManagers(TrustManager[])> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)> -> _SINK_
<android.net.TelephonyNetworkSpecifier: int describeContents()> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier: int getSubscriptionId()> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier: java.lang.String toString()> -> _SOURCE_
<android.net.UrlQuerySanitizer.ValueSanitizer: String sanitize(java.lang.String)> -> _SINK_
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder addCapability(int)> -> _SINK_
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder addTransportType(int)> -> _SINK_
<android.net.NetworkRequest.Builder: android.net.NetworkRequest build()> -> _SOURCE_
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setNetworkSpecifier(android.net.NetworkSpecifier)> -> _SINK_
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setNetworkSpecifier(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder appendQueryParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder authority(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri build()> -> _SOURCE_
<android.net.Uri.Builder: android.net.Uri.Builder encodedAuthority(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder encodedFragment(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder encodedOpaquePart(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder encodedPath(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder encodedQuery(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder fragment(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder opaquePart(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder path(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder query(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: android.net.Uri.Builder scheme(java.lang.String)> -> _SINK_
<android.net.Uri.Builder: java.lang.String toString()> -> _SOURCE_
<android.net.TrafficStats: void clearThreadStatsTag()> -> _SINK_
<android.net.TrafficStats: int getAndSetThreadStatsTag(int)> -> _SINK_
<android.net.TrafficStats: long getMobileRxBytes()> -> _SOURCE_
<android.net.TrafficStats: long getMobileRxPackets()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTxBytes()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTxPackets()> -> _SOURCE_
<android.net.TrafficStats: long getRxBytes(java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: long getRxPackets(java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: int getThreadStatsTag()> -> _SOURCE_
<android.net.TrafficStats: int getThreadStatsUid()> -> _SOURCE_
<android.net.TrafficStats: long getTotalRxBytes()> -> _SOURCE_
<android.net.TrafficStats: long getTotalRxPackets()> -> _SOURCE_
<android.net.TrafficStats: long getTotalTxBytes()> -> _SOURCE_
<android.net.TrafficStats: long getTotalTxPackets()> -> _SOURCE_
<android.net.TrafficStats: long getTxBytes(java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: long getTxPackets(java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: long getUidRxBytes(int)> -> _SINK_
<android.net.TrafficStats: long getUidRxPackets(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpRxBytes(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpRxSegments(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpTxBytes(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpTxSegments(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTxBytes(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTxPackets(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpRxBytes(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpRxPackets(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpTxBytes(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpTxPackets(int)> -> _SOURCE_
<android.net.TrafficStats: void incrementOperationCount(int)> -> _SOURCE_
<android.net.TrafficStats: void incrementOperationCount(int,int)> -> _SOURCE_
<android.net.TrafficStats: void setThreadStatsTag(int)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)> -> _SINK_
<android.net.TrafficStats: void tagDatagramSocket(java.net.DatagramSocket)> -> _SINK_
<android.net.TrafficStats: void tagFileDescriptor(java.io.FileDescriptor)> -> _SOURCE_
<android.net.TrafficStats: void tagSocket(java.net.Socket)> -> _SOURCE_
<android.net.TrafficStats: void untagDatagramSocket(java.net.DatagramSocket)> -> _SINK_
<android.net.TrafficStats: void untagFileDescriptor(java.io.FileDescriptor)> -> _SINK_
<android.net.TrafficStats: void untagSocket(java.net.Socket)> -> _SINK_
<android.net.eap.EapSessionConfig.EapTtlsConfig: android.net.eap.EapSessionConfig getInnerEapSessionConfig()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapTtlsConfig: java.security.cert.X509Certificate getServerCaCert()> -> _SOURCE_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig build()> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapAkaConfig(int,int,EapSessionConfig.EapAkaOption)> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapAkaConfig(int,int)> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapAkaPrimeConfig(int,int,java.lang.String,boolean)> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapIdentity(byte[])> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapMsChapV2Config(java.lang.String,java.lang.String)> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapSimConfig(int,int)> -> _SINK_
<android.net.eap.EapSessionConfig.Builder: android.net.eap.EapSessionConfig.Builder setEapTtlsConfig(java.security.cert.X509Certificate,android.net.eap.EapSessionConfig)> -> _SINK_
<android.net.eap.EapSessionConfig.EapAkaPrimeConfig: java.lang.String getNetworkName()> -> _SOURCE_
<android.net.SocketKeepalive: void start(int)> -> _SINK_
<android.net.SocketKeepalive: void stop()> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addAddress(java.net.InetAddress,int)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addAddress(java.lang.String,int)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addAllowedApplication(java.lang.String)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addDisallowedApplication(java.lang.String)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addDnsServer(java.lang.String)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addDnsServer(java.net.InetAddress)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addRoute(android.net.IpPrefix)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addRoute(java.net.InetAddress,int)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addRoute(java.lang.String,int)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder addSearchDomain(java.lang.String)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder allowBypass()> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder allowFamily(int)> -> _SINK_
<android.net.VpnService.Builder: android.os.ParcelFileDescriptor establish()> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder excludeRoute(android.net.IpPrefix)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder setBlocking(boolean)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder setConfigureIntent(android.app.PendingIntent)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder setHttpProxy(android.net.ProxyInfo)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder setMtu(int)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder setSession(java.lang.String)> -> _SINK_
<android.net.VpnService.Builder: android.net.VpnService.Builder setUnderlyingNetworks(Network[])> -> _SINK_
<android.net.http.X509TrustManagerExtensions: List<X509Certificate> checkServerTrusted(X509Certificate[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.http.X509TrustManagerExtensions: boolean isSameTrustConfiguration(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.http.X509TrustManagerExtensions: boolean isUserAddedCertificate(java.security.cert.X509Certificate)> -> _SOURCE_
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map -> _SOURCE_
<android.net.http.HttpResponseCache: int getHitCount()> -> _SOURCE_
<android.net.http.HttpResponseCache: HttpResponseCache getInstalled()> -> _SOURCE_
<android.net.http.HttpResponseCache: int getNetworkCount()> -> _SOURCE_
<android.net.http.HttpResponseCache: int getRequestCount()> -> _SOURCE_
<android.net.http.HttpResponseCache: long maxSize()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapMethodConfig: int getMethodType()> -> _SOURCE_
<android.net.ipsec.ike.ChildSaProposal: Set<Integer> getSupportedEncryptionAlgorithms()> -> _SOURCE_
<android.net.ipsec.ike.ChildSaProposal: Set<Integer> getSupportedIntegrityAlgorithms()> -> _SINK_
<android.net.http.SslError: boolean addError(int)> -> _SINK_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> -> _SOURCE_
<android.net.http.SslError: int getPrimaryError()> -> _SOURCE_
<android.net.http.SslError: java.lang.String getUrl()> -> _SOURCE_
<android.net.http.SslError: java.lang.String toString()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapMsChapV2Config: java.lang.String getPassword()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapMsChapV2Config: java.lang.String getUsername()> -> _SOURCE_
<android.net.ipsec.ike.ChildSaProposal.Builder: android.net.ipsec.ike.ChildSaProposal.Builder addDhGroup(int)> -> _SINK_
<android.net.ipsec.ike.ChildSaProposal.Builder: android.net.ipsec.ike.ChildSaProposal.Builder addEncryptionAlgorithm(int,int)> -> _SINK_
<android.net.ipsec.ike.ChildSaProposal.Builder: android.net.ipsec.ike.ChildSaProposal.Builder addIntegrityAlgorithm(int)> -> _SINK_
<android.net.VpnService: boolean isAlwaysOn()> -> _SOURCE_
<android.net.VpnService: boolean isLockdownEnabled()> -> _SOURCE_
<android.net.VpnService: Intent prepare(android.content.Context)> -> _SINK_
<android.net.VpnService: boolean setUnderlyingNetworks(Network[])> -> _SINK_
<android.net.eap.EapSessionConfig: android.net.eap.EapSessionConfig.EapAkaConfig getEapAkaConfig()> -> _SOURCE_
<android.net.eap.EapSessionConfig: android.net.eap.EapSessionConfig.EapAkaPrimeConfig getEapAkaPrimeConfig()> -> _SOURCE_
<android.net.eap.EapSessionConfig: byte[] getEapIdentity()> -> _SOURCE_
<android.net.eap.EapSessionConfig: android.net.eap.EapSessionConfig.EapMsChapV2Config getEapMsChapV2Config()> -> _SOURCE_
<android.net.eap.EapSessionConfig: android.net.eap.EapSessionConfig.EapSimConfig getEapSimConfig()> -> _SOURCE_
<android.net.eap.EapSessionConfig: android.net.eap.EapSessionConfig.EapTtlsConfig getEapTtlsConfig()> -> _SOURCE_
<android.net.VpnManager: android.content.Intent provisionVpnProfile(android.net.PlatformVpnProfile)> -> _SINK_
<android.net.VpnManager: void startProvisionedVpnProfile()> -> _SOURCE_
<android.net.VpnManager: java.lang.String startProvisionedVpnProfileSession()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapAkaConfig: int getAppType()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapAkaConfig: EapSessionConfig.EapAkaOption getEapAkaOption()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapAkaConfig: int getSubId()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionConfiguration: List<IkeTrafficSelector> getInboundTrafficSelectors()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionConfiguration: List<IkeTrafficSelector> getOutboundTrafficSelectors()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapSimConfig: int getAppType()> -> _SOURCE_
<android.net.eap.EapSessionConfig.EapSimConfig: int getSubId()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionConfiguration.Builder: android.net.ipsec.ike.ChildSessionConfiguration build()> -> _SINK_
<android.net.ipsec.ike.ChildSessionParams: List<ChildSaProposal> getChildSaProposals()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionParams: int getHardLifetimeSeconds()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionParams: List<IkeTrafficSelector> getInboundTrafficSelectors()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionParams: List<IkeTrafficSelector> getOutboundTrafficSelectors()> -> _SOURCE_
<android.net.ipsec.ike.ChildSessionParams: int getSoftLifetimeSeconds()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConfiguration: EapInfo getEapInfo()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConfiguration: android.net.ipsec.ike.IkeSessionConnectionInfo getIkeSessionConnectionInfo()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConfiguration: java.lang.String getRemoteApplicationVersion()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConfiguration: List<byte[]> getRemoteVendorIds()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConfiguration: boolean isIkeExtensionEnabled(int)> -> _SOURCE_
<android.net.ipsec.ike.IkeSaProposal: List<Integer> getPseudorandomFunctions()> -> _SOURCE_
<android.net.ipsec.ike.IkeSaProposal: Set<Integer> getSupportedEncryptionAlgorithms()> -> _SOURCE_
<android.net.ipsec.ike.IkeSaProposal.Builder: android.net.ipsec.ike.IkeSaProposal.Builder addDhGroup(int)> -> _SINK_
<android.net.ipsec.ike.IkeSaProposal.Builder: android.net.ipsec.ike.IkeSaProposal.Builder addEncryptionAlgorithm(int,int)> -> _SINK_
<android.net.ipsec.ike.IkeSaProposal.Builder: android.net.ipsec.ike.IkeSaProposal.Builder addIntegrityAlgorithm(int)> -> _SINK_
<android.net.ipsec.ike.IkeSaProposal.Builder: android.net.ipsec.ike.IkeSaProposal.Builder addPseudorandomFunction(int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.IkeAuthDigitalSignRemoteConfig: java.security.cert.X509Certificate getRemoteCaCert()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConnectionInfo: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConnectionInfo: android.net.Network getNetwork()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConnectionInfo: java.net.InetAddress getRemoteAddress()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.IkeAuthDigitalSignLocalConfig: java.security.cert.X509Certificate getClientEndCertificate()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.IkeAuthDigitalSignLocalConfig: List<X509Certificate> getIntermediateCertificates()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.IkeAuthDigitalSignLocalConfig: java.security.PrivateKey getPrivateKey()> -> _SOURCE_
<android.net.ipsec.ike.SaProposal: List<Integer> getDhGroups()> -> _SOURCE_
<android.net.ipsec.ike.SaProposal: List<Pair<Integer, Integer>> getEncryptionAlgorithms()> -> _SOURCE_
<android.net.ipsec.ike.SaProposal: List<Integer> getIntegrityAlgorithms()> -> _SOURCE_
<android.net.ipsec.ike.SaProposal: Set<Integer> getSupportedDhGroups()> -> _SINK_
<android.net.ipsec.ike.IkeTunnelConnectionParams: android.net.ipsec.ike.IkeSessionParams getIkeSessionParams()> -> _SOURCE_
<android.net.ipsec.ike.IkeTunnelConnectionParams: android.net.ipsec.ike.TunnelModeChildSessionParams getTunnelModeChildSessionParams()> -> _SOURCE_
<android.net.ipsec.ike.TransportModeChildSessionParams.Builder: android.net.ipsec.ike.TransportModeChildSessionParams.Builder addChildSaProposal(android.net.ipsec.ike.ChildSaProposal)> -> _SINK_
<android.net.ipsec.ike.TransportModeChildSessionParams.Builder: android.net.ipsec.ike.TransportModeChildSessionParams.Builder addInboundTrafficSelectors(android.net.ipsec.ike.IkeTrafficSelector)> -> _SINK_
<android.net.ipsec.ike.TransportModeChildSessionParams.Builder: android.net.ipsec.ike.TransportModeChildSessionParams.Builder addOutboundTrafficSelectors(android.net.ipsec.ike.IkeTrafficSelector)> -> _SINK_
<android.net.ipsec.ike.TransportModeChildSessionParams.Builder: android.net.ipsec.ike.TransportModeChildSessionParams.Builder setLifetimeSeconds(int,int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder addIkeOption(int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams build()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder removeIkeOption(int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setAuthDigitalSignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate,List<X509Certificate>,java.security.PrivateKey)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setAuthDigitalSignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate,java.security.PrivateKey)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setAuthPsk(byte[])> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setDpdDelaySeconds(int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setLifetimeSeconds(int,int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setLocalIdentification(android.net.ipsec.ike.IkeIdentification)> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setNattKeepAliveDelaySeconds(int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setNetwork(android.net.Network)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setRemoteIdentification(android.net.ipsec.ike.IkeIdentification)> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setRetransmissionTimeoutsMillis(int[])> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.Builder: android.net.ipsec.ike.IkeSessionParams.Builder setServerHostname(java.lang.String)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addChildSaProposal(android.net.ipsec.ike.ChildSaProposal)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addInboundTrafficSelectors(android.net.ipsec.ike.IkeTrafficSelector)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addInternalAddressRequest(int)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addInternalAddressRequest(java.net.Inet4Address)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addInternalAddressRequest(java.net.Inet6Address,int)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addInternalDhcpServerRequest(int)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addInternalDnsServerRequest(int)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder addOutboundTrafficSelectors(android.net.ipsec.ike.IkeTrafficSelector)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams build()> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.Builder: android.net.ipsec.ike.TunnelModeChildSessionParams.Builder setLifetimeSeconds(int,int)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.ConfigRequestIpv4Address: Inet4Address getAddress()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams.IkeAuthEapConfig: android.net.eap.EapSessionConfig getEapConfig()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionConfiguration.Builder: android.net.ipsec.ike.IkeSessionConfiguration.Builder setEapInfo(EapInfo)> -> _SINK_
<android.net.ipsec.ike.IkeSessionConfiguration.Builder: android.net.ipsec.ike.IkeSessionConfiguration.Builder setRemoteApplicationVersion(java.lang.String)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams: List<TunnelModeChildSessionParams.TunnelModeChildConfigRequest> getConfigurationRequests()> -> _SOURCE_
<android.net.ipsec.ike.exceptions.InvalidMajorVersionException: byte getMajorVersion()> -> _SOURCE_
<android.net.ipsec.ike.exceptions.InvalidKeException: int getDhGroup()> -> _SOURCE_
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.NetworkRequest,android.net.nsd.NsdManager.DiscoveryListener)> -> _SINK_
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.Network,android.net.nsd.NsdManager.DiscoveryListener)> -> _SINK_
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager.DiscoveryListener)> -> _SOURCE_
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager.RegistrationListener)> -> _SINK_
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager.ResolveListener)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams: int getDpdDelaySeconds()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: int getHardLifetimeSeconds()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: List<IkeSaProposal> getIkeSaProposals()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig getLocalAuthConfig()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: android.net.ipsec.ike.IkeIdentification getLocalIdentification()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: int getNattKeepAliveDelaySeconds()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: android.net.Network getNetwork()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig getRemoteAuthConfig()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: android.net.ipsec.ike.IkeIdentification getRemoteIdentification()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: int[] getRetransmissionTimeoutsMillis()> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams: java.lang.String getServerHostname()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: int getSoftLifetimeSeconds()> -> _SOURCE_
<android.net.ipsec.ike.IkeSessionParams: boolean hasIkeOption(int)> -> _SOURCE_
<android.net.ipsec.ike.exceptions.InvalidSelectorsException: byte[] getIpSecPacketInfo()> -> _SOURCE_
<android.net.ipsec.ike.exceptions.InvalidSelectorsException: int getIpSecSpi()> -> _SOURCE_
<android.net.rtp.AudioCodec: AudioCodec getCodec(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.rtp.AudioCodec: AudioCodec[] getCodecs()> -> _SOURCE_
<android.net.ipsec.ike.exceptions.IkeNetworkLostException: android.net.Network getNetwork()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.util.Map getAttributes()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: android.net.Network getNetwork()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: int getPort()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setHost(java.net.InetAddress)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setNetwork(android.net.Network)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setPort(int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setServiceName(java.lang.String)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)> -> _SINK_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()> -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()> -> _SOURCE_
<android.net.sip.SipAudioCall: int getState()> -> _SOURCE_
<android.net.sip.SipAudioCall: void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)> -> _SINK_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall.Listener,boolean)> -> _SINK_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall.Listener)> -> _SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> -> _SINK_
<android.net.sip.SipAudioCall: void toggleMute()> -> _SINK_
<android.net.rtp.AudioGroup: int getMode()> -> _SOURCE_
<android.net.rtp.AudioGroup: AudioStream[] getStreams()> -> _SOURCE_
<android.net.rtp.AudioGroup: void sendDtmf(int)> -> _SINK_
<android.net.rtp.AudioGroup: void setMode(int)> -> _SINK_
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()> -> _SOURCE_
<android.net.rtp.AudioStream: int getDtmfType()> -> _SOURCE_
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()> -> _SOURCE_
<android.net.rtp.AudioStream: boolean isBusy()> -> _SOURCE_
<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)> -> _SINK_
<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)> -> _SINK_
<android.net.rtp.AudioStream: void setDtmfType(int)> -> _SINK_
<android.net.ipsec.ike.IkeSessionParams.IkeAuthPskConfig: byte[] getPsk()> -> _SOURCE_
<android.net.sip.SipProfile: int describeContents()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getAuthUserName()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getDisplayName()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getPassword()> -> _SOURCE_
<android.net.sip.SipProfile: int getPort()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProfileName()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProtocol()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProxyAddress()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getSipDomain()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getUriString()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getUserName()> -> _SOURCE_
<android.net.sip.SipProfile: void setCallingUid(int)> -> _SINK_
<android.net.ipsec.ike.TunnelModeChildSessionParams.ConfigRequestIpv6Address: Inet6Address getAddress()> -> _SOURCE_
<android.net.ipsec.ike.TunnelModeChildSessionParams.ConfigRequestIpv6Address: int getPrefixLength()> -> _SOURCE_
<android.net.vcn.VcnConfig.Builder: android.net.vcn.VcnConfig.Builder addGatewayConnectionConfig(android.net.vcn.VcnGatewayConnectionConfig)> -> _SINK_
<android.net.vcn.VcnConfig.Builder: android.net.vcn.VcnConfig build()> -> _SINK_
<android.net.ssl.SSLEngines: byte[] exportKeyingMaterial(javax.net.ssl.SSLEngine,java.lang.String,byte[],int)> -> _SOURCE_
<android.net.ssl.SSLEngines: boolean isSupportedEngine(javax.net.ssl.SSLEngine)> -> _SOURCE_
<android.net.ssl.SSLEngines: void setUseSessionTickets(javax.net.ssl.SSLEngine,boolean)> -> _SINK_
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<android.net.rtp.RtpStream: int getLocalPort()> -> _SOURCE_
<android.net.rtp.RtpStream: int getMode()> -> _SOURCE_
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()> -> _SOURCE_
<android.net.rtp.RtpStream: int getRemotePort()> -> _SOURCE_
<android.net.rtp.RtpStream: void setMode(int)> -> _SINK_
<android.net.ssl.SSLSockets: byte[] exportKeyingMaterial(javax.net.ssl.SSLSocket,java.lang.String,byte[],int)> -> _SOURCE_
<android.net.ssl.SSLSockets: boolean isSupportedSocket(javax.net.ssl.SSLSocket)> -> _SOURCE_
<android.net.ssl.SSLSockets: void setUseSessionTickets(javax.net.ssl.SSLSocket,boolean)> -> _SINK_
<android.net.vcn.VcnGatewayConnectionConfig.Builder: android.net.vcn.VcnGatewayConnectionConfig.Builder addExposedCapability(int)> -> _SINK_
<android.net.vcn.VcnGatewayConnectionConfig.Builder: android.net.vcn.VcnGatewayConnectionConfig build()> -> _SINK_
<android.net.vcn.VcnGatewayConnectionConfig.Builder: android.net.vcn.VcnGatewayConnectionConfig.Builder setMaxMtu(int)> -> _SINK_
<android.net.vcn.VcnGatewayConnectionConfig.Builder: android.net.vcn.VcnGatewayConnectionConfig.Builder setRetryIntervalsMillis(long[])> -> _SINK_
<android.net.vcn.VcnGatewayConnectionConfig.Builder: android.net.vcn.VcnGatewayConnectionConfig.Builder setVcnUnderlyingNetworkPriorities(List<VcnUnderlyingNetworkTemplate>)> -> _SINK_
<android.net.wifi.SoftApConfiguration: int describeContents()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: android.net.MacAddress getBssid()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: java.lang.String getPassphrase()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: int getSecurityType()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: java.lang.String getSsid()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: WifiSsid getWifiSsid()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: boolean isHiddenSsid()> -> _SOURCE_
<android.net.wifi.SoftApConfiguration: java.lang.String toString()> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession.Listener)> -> _SOURCE_
<android.net.sip.SipManager: String getCallId(android.content.Intent)> -> _SOURCE_
<android.net.sip.SipManager: String getOfferSessionDescription(android.content.Intent)> -> _SOURCE_
<android.net.sip.SipManager: boolean isApiSupported(android.content.Context)> -> _SOURCE_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> -> _SOURCE_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> -> _SOURCE_
<android.net.sip.SipManager: boolean isSipWifiOnly(android.content.Context)> -> _SOURCE_
<android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall.Listener,int)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> -> _SOURCE_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _SOURCE_
<android.net.vcn.VcnConfig: int describeContents()> -> _SOURCE_
<android.net.vcn.VcnConfig: Set<VcnGatewayConnectionConfig> getGatewayConnectionConfigs()> -> _SOURCE_
<android.net.wifi.ScanResult.InformationElement: java.nio.ByteBuffer getBytes()> -> _SOURCE_
<android.net.wifi.ScanResult.InformationElement: int getId()> -> _SOURCE_
<android.net.wifi.ScanResult.InformationElement: int getIdExt()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: android.net.ProxyInfo getHttpProxy()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: java.lang.String getKey()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: android.net.MacAddress getRandomizedMacAddress()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: boolean isDppConfigurator()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: boolean isPasspoint()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: void setHttpProxy(android.net.ProxyInfo)> -> _SINK_
<android.net.wifi.WifiConfiguration: void setSecurityParams(int)> -> _SINK_
<android.net.wifi.WifiConfiguration: java.lang.String toString()> -> _SOURCE_
<android.net.vcn.VcnManager: List<ParcelUuid> getConfiguredSubscriptionGroups()> -> _SOURCE_
<android.net.vcn.VcnManager: void setVcnConfig(android.os.ParcelUuid,android.net.vcn.VcnConfig)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: int describeContents()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: void enableTrustOnFirstUse(boolean)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAltSubjectMatch()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAnonymousIdentity()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getClientCertificate()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: X509Certificate[] getClientCertificateChain()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getClientKeyPairAlias()> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey getClientPrivateKey()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getDecoratedIdentityPrefix()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getDomainSuffixMatch()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: int getEapMethod()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getIdentity()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPassword()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: int getPhase2Method()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPlmn()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getRealm()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: boolean hasCaCertificate()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: boolean isAuthenticationSimBased()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: boolean isEapMethodServerCertUsed()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: boolean isServerCertValidationEnabled()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: boolean isTrustOnFirstUseEnabled()> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setAltSubjectMatch(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setAnonymousIdentity(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntry(java.security.PrivateKey,java.security.cert.X509Certificate)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntryWithCertificateChain(java.security.PrivateKey,X509Certificate[])> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyPairAlias(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setDecoratedIdentityPrefix(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setDomainSuffixMatch(java.lang.String)> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: void setEapMethod(int)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setIdentity(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setPassword(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setPhase2Method(int)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setPlmn(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void setRealm(java.lang.String)> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String toString()> -> _SOURCE_
<android.net.sip.SipSession: void answerCall(java.lang.String,int)> -> _SOURCE_
<android.net.sip.SipSession: void changeCall(java.lang.String,int)> -> _SINK_
<android.net.sip.SipSession: java.lang.String getCallId()> -> _SOURCE_
<android.net.sip.SipSession: java.lang.String getLocalIp()> -> _SOURCE_
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()> -> _SOURCE_
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()> -> _SOURCE_
<android.net.sip.SipSession: int getState()> -> _SOURCE_
<android.net.sip.SipSession: boolean isInCall()> -> _SOURCE_
<android.net.sip.SipSession: void register(int)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile build()> -> _SOURCE_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setAuthUserName(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setAutoRegistration(boolean)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setDisplayName(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setOutboundProxy(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setPassword(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setPort(int)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setProfileName(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setProtocol(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setSendKeepAlive(boolean)> -> _SINK_
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onStarted(android.net.wifi.WifiManager.LocalOnlyHotspotReservation)> -> _SINK_
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onStopped()> -> _SOURCE_
<android.net.vcn.VcnGatewayConnectionConfig: int[] getExposedCapabilities()> -> _SOURCE_
<android.net.vcn.VcnGatewayConnectionConfig: java.lang.String getGatewayConnectionName()> -> _SOURCE_
<android.net.vcn.VcnGatewayConnectionConfig: int getMaxMtu()> -> _SOURCE_
<android.net.vcn.VcnGatewayConnectionConfig: long[] getRetryIntervalsMillis()> -> _SOURCE_
<android.net.vcn.VcnGatewayConnectionConfig: List<VcnUnderlyingNetworkTemplate> getVcnUnderlyingNetworkPriorities()> -> _SOURCE_
<android.net.wifi.WifiManager.MulticastLock: void acquire()> -> _SINK_
<android.net.wifi.WifiManager.MulticastLock: void setReferenceCounted(boolean)> -> _SINK_
<android.net.wifi.WifiManager.MulticastLock: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.WifiManager.AddNetworkResult: int describeContents()> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier: int describeContents()> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier: int getBand()> -> _SOURCE_
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: android.net.wifi.SoftApConfiguration getSoftApConfiguration()> -> _SOURCE_
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: android.net.wifi.WifiConfiguration getWifiConfiguration()> -> _SOURCE_
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo build()> -> _SOURCE_
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setBssid(java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setCurrentSecurityType(int)> -> _SINK_
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setNetworkId(int)> -> _SINK_
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setRssi(int)> -> _SINK_
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setSsid(byte[])> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBand(int)> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBssid(android.net.MacAddress)> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBssidPattern(android.net.MacAddress,android.net.MacAddress)> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setIsHiddenSsid(boolean)> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setSsid(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setSsidPattern(android.os.PatternMatcher)> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa2Passphrase(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)> -> _SOURCE_
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa3Passphrase(java.lang.String)> -> _SOURCE_
<android.net.wifi.WpsInfo: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getMaxMatchFilterLength()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getMaxServiceNameLength()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getMaxServiceSpecificInfoLength()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getNumberOfSupportedDataInterfaces()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getNumberOfSupportedDataPaths()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getNumberOfSupportedPublishSessions()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getNumberOfSupportedSubscribeSessions()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: int getSupportedCipherSuites()> -> _SOURCE_
<android.net.wifi.aware.Characteristics: boolean isInstantCommunicationModeSupported()> -> _SINK_
<android.net.wifi.aware.ParcelablePeerHandle: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.AwareResources: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.AwareResources: int getAvailableDataPathsCount()> -> _SOURCE_
<android.net.wifi.aware.AwareResources: int getAvailablePublishSessionsCount()> -> _SOURCE_
<android.net.wifi.aware.AwareResources: int getAvailableSubscribeSessionsCount()> -> _SOURCE_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig build()> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)> -> _SOURCE_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setInstantCommunicationModeEnabled(boolean,int)> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setMatchFilter(List<byte[]>)> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setPublishType(int)> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setRangingEnabled(boolean)> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setServiceName(java.lang.String)> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setServiceSpecificInfo(byte[])> -> _SINK_
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setTtlSec(int)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion build()> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setBssid(android.net.MacAddress)> -> _SOURCE_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setCarrierMerged(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setCredentialSharedWithUser(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsAppInteractionRequired(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsHiddenSsid(boolean)> -> _SOURCE_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsInitialAutojoinEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsMetered(boolean)> -> _SOURCE_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsWpa3SaeH2eOnlyModeEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setPasspointConfig(android.net.wifi.hotspot2.PasspointConfiguration)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setPriority(int)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setPriorityGroup(int)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setRestricted(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setSsid(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setSubscriptionGroup(android.os.ParcelUuid)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setSubscriptionId(int)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setUntrusted(boolean)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWapiPassphrase(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa2Passphrase(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)> -> _SOURCE_
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa3Passphrase(java.lang.String)> -> _SOURCE_
<android.net.wifi.aware.AttachCallback: void onAttached(android.net.wifi.aware.WifiAwareSession)> -> _SINK_
<android.net.wifi.aware.AttachCallback: void onAwareSessionTerminated()> -> _SOURCE_
<android.net.wifi.aware.PublishConfig: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.PublishConfig: int getInstantCommunicationBand()> -> _SOURCE_
<android.net.wifi.aware.PublishConfig: WifiAwareDataPathSecurityConfig getSecurityConfig()> -> _SOURCE_
<android.net.wifi.aware.PublishConfig: boolean isInstantCommunicationModeEnabled()> -> _SINK_
<android.net.wifi.aware.PublishConfig: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierOpen(android.net.wifi.aware.PeerHandle)> -> _SOURCE_
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierPassphrase(android.net.wifi.aware.PeerHandle,java.lang.String)> -> _SOURCE_
<android.net.wifi.aware.DiscoverySession: void sendMessage(android.net.wifi.aware.PeerHandle,int,byte[])> -> _SINK_
<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)> -> _SOURCE_
<android.net.wifi.WifiManager.WpsCallback: void onStarted(java.lang.String)> -> _SOURCE_
<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkInfo: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkInfo: List<WifiAwareChannelInfo> getChannelInfoList()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkInfo: java.net.Inet6Address getPeerIpv6Addr()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkInfo: int getPort()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkInfo: int getTransportProtocol()> -> _SINK_
<android.net.wifi.aware.WifiAwareNetworkInfo: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.hotspot2.ConfigParser: PasspointConfiguration parsePasspointConfig(java.lang.String,byte[])> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: int describeContents()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: java.security.cert.X509Certificate getCaCertificate()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.CertificateCredential getCertCredential()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: X509Certificate[] getClientCertificateChain()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: java.security.PrivateKey getClientPrivateKey()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: java.lang.String getRealm()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.SimCredential getSimCredential()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.UserCredential getUserCredential()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential: void setCaCertificate(java.security.cert.X509Certificate)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void setCertCredential(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void setClientCertificateChain(X509Certificate[])> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void setClientPrivateKey(java.security.PrivateKey)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void setRealm(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void setSimCredential(android.net.wifi.hotspot2.pps.Credential.SimCredential)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void setUserCredential(android.net.wifi.hotspot2.pps.Credential.UserCredential)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: int describeContents()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.Credential getCredential()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String getDecoratedIdentityPrefix()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.HomeSp getHomeSp()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: long getSubscriptionExpirationTimeMillis()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String getUniqueId()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: boolean isOsuProvisioned()> -> _SOURCE_
<android.net.wifi.hotspot2.PasspointConfiguration: void setCredential(android.net.wifi.hotspot2.pps.Credential)> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: void setDecoratedIdentityPrefix(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: void setHomeSp(android.net.wifi.hotspot2.pps.HomeSp)> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: void setSubscriptionExpirationTimeInMillis(long)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int describeContents()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int getEapType()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.SimCredential: java.lang.String getImsi()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void setEapType(int)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void setImsi(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int describeContents()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int getEapType()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getNonEapInnerMethod()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getPassword()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getUsername()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setEapType(int)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setNonEapInnerMethod(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setPassword(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setUsername(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMaxDistanceMm(int)> -> _SINK_
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMinDistanceMm(int)> -> _SINK_
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setServiceName(java.lang.String)> -> _SINK_
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setServiceSpecificInfo(byte[])> -> _SINK_
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setSubscribeType(int)> -> _SINK_
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setTtlSec(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: List<ScanResult.InformationElement> getVendorElements()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDevice: android.net.wifi.p2p.WifiP2pWfdInfo getWfdInfo()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDevice: boolean isGroupOwner()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDevice: boolean isServiceDiscoveryCapable()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDevice: void update(android.net.wifi.p2p.WifiP2pDevice)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsDisplaySupported()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsKeypadSupported()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsPbcSupported()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig build()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder enablePersistentMode(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setDeviceAddress(android.net.MacAddress)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingBand(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingFrequency(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setNetworkName(java.lang.String)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setPassphrase(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: int getGroupOwnerBand()> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: int getNetworkId()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String getNetworkName()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String getPassphrase()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareManager: void attach(android.net.wifi.aware.AttachCallback,android.os.Handler)> -> _SINK_
<android.net.wifi.aware.WifiAwareManager: void attach(android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener,android.os.Handler)> -> _SINK_
<android.net.wifi.aware.WifiAwareManager: android.net.wifi.aware.AwareResources getAvailableAwareResources()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareManager: android.net.wifi.aware.Characteristics getCharacteristics()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareManager: boolean isAvailable()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareManager: boolean isDeviceAttached()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareManager: boolean isInstantCommunicationModeEnabled()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareManager: boolean isSetChannelOnDataPathSupported()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDeviceList: Collection<WifiP2pDevice> getDeviceList()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDeviceList: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pInfo: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener: void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier: int getChannelFrequencyMhz()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier: WifiAwareDataPathSecurityConfig getWifiAwareDataPathSecurityConfig()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier: boolean isChannelRequired()> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener: void onNetworkInfoAvailable(android.net.NetworkInfo)> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: int describeContents()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getFqdn()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getFriendlyName()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: long[] getMatchAllOis()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: long[] getMatchAnyOis()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: Collection<String> getOtherHomePartnersList()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: long[] getRoamingConsortiumOis()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.HomeSp: void setFqdn(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: void setFriendlyName(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: void setMatchAllOis(long[])> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: void setMatchAnyOis(long[])> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: void setOtherHomePartnersList(Collection<String>)> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: void setRoamingConsortiumOis(long[])> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: Collection<WifiP2pDevice> getClientList()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: int getFrequency()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: int getNetworkId()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: boolean isGroupOwner()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: int describeContents()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: byte[] getCertSha256Fingerprint()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: java.lang.String getCertType()> -> _SOURCE_
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void setCertType(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void addExternalApprover(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,WifiP2pManager.ExternalApproverRequestListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: int getP2pMaxAllowedVendorElementsLength()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager.Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.P2pStateListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PeerListListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setVendorElements(android.net.wifi.p2p.WifiP2pManager.Channel,List<ScanResult.InformationElement>,android.net.wifi.p2p.WifiP2pManager.ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void startListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)> -> _SINK_
<android.net.wifi.aware.SubscribeConfig: int describeContents()> -> _SOURCE_
<android.net.wifi.aware.SubscribeConfig: int getInstantCommunicationBand()> -> _SINK_
<android.net.wifi.aware.SubscribeConfig: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier build()> -> _SINK_
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setChannelFrequencyMhz(int,boolean)> -> _SINK_
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPmk(byte[])> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPort(int)> -> _SINK_
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPskPassphrase(java.lang.String)> -> _SOURCE_
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setTransportProtocol(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener: void onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener: void onUpnpServiceAvailable(List<String>,android.net.wifi.p2p.WifiP2pDevice)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener: void onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)> -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: WifiP2pServiceRequest newInstance(int,java.lang.String)> -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: WifiP2pServiceRequest newInstance(int)> -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: WifiP2pDnsSdServiceRequest newInstance()> -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: WifiP2pDnsSdServiceRequest newInstance(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: WifiP2pDnsSdServiceRequest newInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo: WifiP2pUpnpServiceInfo newInstance(java.lang.String,java.lang.String,List<String>)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo: WifiP2pDnsSdServiceInfo newInstance(java.lang.String,java.lang.String,java.util.Map -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: WifiP2pUpnpServiceRequest newInstance()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: WifiP2pUpnpServiceRequest newInstance(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener: void onDiscoveryStateAvailable(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager.PeerListListener: void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)> -> _SINK_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addAccessPoint(android.bluetooth.le.ScanResult)> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addAccessPoints(List<ScanResult>)> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addNon80211mcCapableAccessPoint(android.bluetooth.le.ScanResult)> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addNon80211mcCapableAccessPoints(List<ScanResult>)> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addResponder(ResponderConfig)> -> _SINK_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addResponders(List<ResponderConfig>)> -> _SINK_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addWifiAwarePeer(android.net.MacAddress)> -> _SINK_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addWifiAwarePeer(android.net.wifi.aware.PeerHandle)> -> _SINK_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest build()> -> _SINK_
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder setRttBurstSize(int)> -> _SINK_
<android.net.wifi.rtt.WifiRttManager: boolean isAvailable()> -> _SOURCE_
<android.net.wifi.rtt.WifiRttManager: void startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)> -> _SINK_
<android.nfc.NdefRecord: NdefRecord createExternal(java.lang.String,java.lang.String,byte[])> -> _SINK_
<android.nfc.NdefRecord: NdefRecord createMime(java.lang.String,byte[])> -> _SINK_
<android.nfc.NdefRecord: NdefRecord createTextRecord(java.lang.String,java.lang.String)> -> _SINK_
<android.nfc.NdefRecord: NdefRecord createUri(android.net.Uri)> -> _SINK_
<android.nfc.NdefRecord: NdefRecord createUri(java.lang.String)> -> _SINK_
<android.nfc.NdefRecord: int describeContents()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getId()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getPayload()> -> _SOURCE_
<android.nfc.NdefRecord: short getTnf()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getType()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] toByteArray()> -> _SOURCE_
<android.nfc.NdefRecord: java.lang.String toMimeType()> -> _SOURCE_
<android.nfc.NdefRecord: java.lang.String toString()> -> _SOURCE_
<android.nfc.NdefRecord: android.net.Uri toUri()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener: void onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener: void onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager.GroupInfoListener: void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)> -> _SINK_
<android.nfc.NfcAdapter.CreateNdefMessageCallback: NdefMessage createNdefMessage(android.nfc.NfcEvent)> -> _SINK_
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierOpen(int,byte[])> -> _SINK_
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierPassphrase(int,byte[],java.lang.String)> -> _SINK_
<android.net.wifi.aware.WifiAwareSession: void publish(android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)> -> _SINK_
<android.net.wifi.rtt.RangingRequest: int describeContents()> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest: int getDefaultRttBurstSize()> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest: int getMaxPeers()> -> _SINK_
<android.net.wifi.rtt.RangingRequest: int getMaxRttBurstSize()> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest: int getMinRttBurstSize()> -> _SOURCE_
<android.net.wifi.rtt.RangingRequest: int getRttBurstSize()> -> _SOURCE_
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)> -> _SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,IntentFilter[],String[][])> -> _SINK_
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)> -> _SINK_
<android.nfc.NfcAdapter: NfcAdapter getDefaultAdapter(android.content.Context)> -> _SOURCE_
<android.nfc.NfcAdapter: boolean invokeBeam(android.app.Activity)> -> _SINK_
<android.nfc.NfcAdapter: boolean isEnabled()> -> _SOURCE_
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()> -> _SINK_
<android.nfc.NfcAdapter: boolean isSecureNfcEnabled()> -> _SOURCE_
<android.nfc.NfcAdapter: boolean isSecureNfcSupported()> -> _SOURCE_
<android.nfc.NfcAdapter: void setBeamPushUris(Uri[],android.app.Activity)> -> _SINK_
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter.CreateBeamUrisCallback,android.app.Activity)> -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,Activity[])> -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,Activity[])> -> _SINK_
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter.OnNdefPushCompleteCallback,android.app.Activity,Activity[])> -> _SINK_
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()> -> _SOURCE_
<android.nfc.tech.IsoDep: IsoDep get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> -> _SOURCE_
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.IsoDep: int getTimeout()> -> _SOURCE_
<android.nfc.tech.IsoDep: boolean isConnected()> -> _SINK_
<android.nfc.tech.IsoDep: boolean isExtendedLengthApduSupported()> -> _SINK_
<android.nfc.tech.IsoDep: void setTimeout(int)> -> _SINK_
<android.nfc.tech.IsoDep: byte[] transceive(byte[])> -> _SOURCE_
<android.nfc.Tag: int describeContents()> -> _SOURCE_
<android.nfc.Tag: byte[] getId()> -> _SOURCE_
<android.nfc.Tag: String[] getTechList()> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: boolean enableService(android.app.Activity,android.content.ComponentName)> -> _SINK_
<android.nfc.cardemulation.NfcFCardEmulation: NfcFCardEmulation getInstance(android.nfc.NfcAdapter)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getNfcid2ForService(android.content.ComponentName)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getSystemCodeForService(android.content.ComponentName)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: boolean registerSystemCodeForService(android.content.ComponentName,java.lang.String)> -> _SINK_
<android.nfc.cardemulation.NfcFCardEmulation: boolean setNfcid2ForService(android.content.ComponentName,java.lang.String)> -> _SINK_
<android.nfc.cardemulation.HostApduService: void sendResponseApdu(byte[])> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean categoryAllowsForegroundPreference(java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: List<String> getAidsForPreferredPaymentService()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: List<String> getAidsForService(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.lang.CharSequence getDescriptionForPreferredPaymentService()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: CardEmulation getInstance(android.nfc.NfcAdapter)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.lang.String getRouteDestinationForPreferredPaymentService()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForAid(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean setOffHostForService(android.content.ComponentName,java.lang.String)> -> _SINK_
<android.nfc.cardemulation.CardEmulation: boolean setPreferredService(android.app.Activity,android.content.ComponentName)> -> _SINK_
<android.nfc.cardemulation.CardEmulation: boolean unsetPreferredService(android.app.Activity)> -> _SINK_
<android.nfc.NdefMessage: int describeContents()> -> _SOURCE_
<android.nfc.NdefMessage: int getByteArrayLength()> -> _SOURCE_
<android.nfc.NdefMessage: NdefRecord[] getRecords()> -> _SOURCE_
<android.nfc.NdefMessage: byte[] toByteArray()> -> _SOURCE_
<android.nfc.NdefMessage: java.lang.String toString()> -> _SOURCE_
<android.nfc.cardemulation.HostNfcFService: void sendResponsePacket(byte[])> -> _SOURCE_
<android.nfc.tech.MifareUltralight: MifareUltralight get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getTimeout()> -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getType()> -> _SOURCE_
<android.nfc.tech.MifareUltralight: boolean isConnected()> -> _SINK_
<android.nfc.tech.MifareUltralight: void setTimeout(int)> -> _SINK_
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])> -> _SOURCE_
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])> -> _SINK_
<android.nfc.tech.NfcA: NfcA get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.NfcA: byte[] getAtqa()> -> _SOURCE_
<android.nfc.tech.NfcA: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.NfcA: short getSak()> -> _SOURCE_
<android.nfc.tech.NfcA: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.NfcA: int getTimeout()> -> _SOURCE_
<android.nfc.tech.NfcA: boolean isConnected()> -> _SINK_
<android.nfc.tech.NfcA: void setTimeout(int)> -> _SINK_
<android.nfc.tech.NfcA: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.NfcBarcode: NfcBarcode get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.NfcBarcode: byte[] getBarcode()> -> _SOURCE_
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.NfcBarcode: int getType()> -> _SOURCE_
<android.nfc.tech.NfcBarcode: boolean isConnected()> -> _SINK_
<android.nfc.tech.NfcV: NfcV get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.NfcV: byte getDsfId()> -> _SOURCE_
<android.nfc.tech.NfcV: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.NfcV: byte getResponseFlags()> -> _SOURCE_
<android.nfc.tech.NfcV: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.NfcV: boolean isConnected()> -> _SINK_
<android.nfc.tech.NfcV: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.Ndef: boolean canMakeReadOnly()> -> _SINK_
<android.nfc.tech.Ndef: Ndef get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()> -> _SOURCE_
<android.nfc.tech.Ndef: int getMaxSize()> -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()> -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.Ndef: java.lang.String getType()> -> _SOURCE_
<android.nfc.tech.Ndef: boolean isConnected()> -> _SINK_
<android.nfc.tech.Ndef: boolean isWritable()> -> _SOURCE_
<android.nfc.tech.NfcF: NfcF get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.NfcF: byte[] getManufacturer()> -> _SOURCE_
<android.nfc.tech.NfcF: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.NfcF: byte[] getSystemCode()> -> _SOURCE_
<android.nfc.tech.NfcF: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.NfcF: int getTimeout()> -> _SOURCE_
<android.nfc.tech.NfcF: boolean isConnected()> -> _SINK_
<android.nfc.tech.NfcF: void setTimeout(int)> -> _SINK_
<android.nfc.tech.NfcF: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)> -> _SINK_
<android.nfc.tech.NdefFormatable: NdefFormatable get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.NdefFormatable: boolean isConnected()> -> _SINK_
<android.nfc.tech.NfcB: NfcB get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getApplicationData()> -> _SOURCE_
<android.nfc.tech.NfcB: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> -> _SOURCE_
<android.nfc.tech.NfcB: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.NfcB: boolean isConnected()> -> _SINK_
<android.nfc.tech.NfcB: byte[] transceive(byte[])> -> _SINK_
<android.nfc.tech.TagTechnology: Tag getTag()> -> _SOURCE_
<android.nfc.tech.TagTechnology: boolean isConnected()> -> _SINK_
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])> -> _SOURCE_
<android.nfc.tech.MifareClassic: int blockToSector(int)> -> _SOURCE_
<android.nfc.tech.MifareClassic: MifareClassic get(android.nfc.Tag)> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getBlockCount()> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getSectorCount()> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getSize()> -> _SOURCE_
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getTimeout()> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getType()> -> _SOURCE_
<android.nfc.tech.MifareClassic: void increment(int,int)> -> _SINK_
<android.nfc.tech.MifareClassic: boolean isConnected()> -> _SINK_
<android.nfc.tech.MifareClassic: byte[] readBlock(int)> -> _SOURCE_
<android.nfc.tech.MifareClassic: int sectorToBlock(int)> -> _SOURCE_
<android.nfc.tech.MifareClassic: void setTimeout(int)> -> _SINK_
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])> -> _SOURCE_
<android.nfc.tech.MifareClassic: void transfer(int)> -> _SINK_
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])> -> _SINK_
<android.opengl.ETC1Util.ETC1Texture: java.nio.ByteBuffer getData()> -> _SOURCE_
<android.opengl.ETC1Util.ETC1Texture: int getHeight()> -> _SOURCE_
<android.opengl.ETC1Util.ETC1Texture: int getWidth()> -> _SOURCE_
<android.opengl.ETC1: void decodeBlock(java.nio.Buffer,java.nio.Buffer)> -> _SOURCE_
<android.opengl.ETC1: void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)> -> _SOURCE_
<android.opengl.ETC1: void encodeBlock(java.nio.Buffer,int,java.nio.Buffer)> -> _SINK_
<android.opengl.ETC1: void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)> -> _SINK_
<android.opengl.ETC1: void formatHeader(java.nio.Buffer,int,int)> -> _SOURCE_
<android.opengl.ETC1: int getEncodedDataSize(int,int)> -> _SOURCE_
<android.opengl.ETC1: int getHeight(java.nio.Buffer)> -> _SOURCE_
<android.opengl.ETC1: int getWidth(java.nio.Buffer)> -> _SOURCE_
<android.opengl.ETC1: boolean isValid(java.nio.Buffer)> -> _SOURCE_
<android.opengl.ETC1Util: ETC1Util.ETC1Texture compressTexture(java.nio.Buffer,int,int,int,int)> -> _SINK_
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)> -> _SINK_
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,android.opengl.ETC1Util.ETC1Texture)> -> _SINK_
<android.opengl.ETC1Util: void writeTexture(android.opengl.ETC1Util.ETC1Texture,java.io.OutputStream)> -> _SINK_
<android.opengl.GLSurfaceView.EGLConfigChooser: EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,android.opengl.EGLDisplay)> -> _SINK_
<android.opengl.GLU: String gluErrorString(int)> -> _SOURCE_
<android.opengl.GLU: int gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)> -> _SOURCE_
<android.opengl.EGLObjectHandle: int getHandle()> -> _SOURCE_
<android.opengl.EGLObjectHandle: long getNativeHandle()> -> _SOURCE_
<android.graphics.Matrix: float length(float,float,float)> -> _SOURCE_
<android.graphics.Matrix: void orthoM(float[],int,float,float,float,float,float,float)> -> _SOURCE_
<android.graphics.Matrix: void perspectiveM(float[],int,float,float,float,float)> -> _SOURCE_
<android.graphics.Matrix: void setRotateEulerM(float[],int,float,float,float)> -> _SOURCE_
<android.opengl.GLUtils: String getEGLErrorString(int)> -> _SOURCE_
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)> -> _SOURCE_
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)> -> _SOURCE_
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)> -> _SOURCE_
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int)> -> _SOURCE_
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int,int)> -> _SOURCE_
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)> -> _SOURCE_
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)> -> _SOURCE_
<android.opengl.Visibility: int frustumCullSpheres(float[],int,float[],int,int,int[],int,int)> -> _SOURCE_
<android.opengl.Visibility: int visibilityTest(float[],int,float[],int,char[],int,int)> -> _SOURCE_
<android.os.BatteryManager: long computeChargeTimeRemaining()> -> _SOURCE_
<android.os.BatteryManager: int getIntProperty(int)> -> _SOURCE_
<android.os.BatteryManager: long getLongProperty(int)> -> _SOURCE_
<android.os.BatteryManager: boolean isCharging()> -> _SOURCE_
<android.os.BaseBundle: boolean containsKey(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.os.BaseBundle: boolean getBoolean(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: double getDouble(java.lang.String,double)> -> _SOURCE_
<android.os.BaseBundle: double getDouble(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: int getInt(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: int getInt(java.lang.String,int)> -> _SOURCE_
<android.os.BaseBundle: int[] getIntArray(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: long getLong(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: long getLong(java.lang.String,long)> -> _SOURCE_
<android.os.BaseBundle: long[] getLongArray(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: String[] getStringArray(java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: Set<String> keySet()> -> _SOURCE_
<android.os.BaseBundle: void putAll(android.os.PersistableBundle)> -> _SINK_
<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.os.BaseBundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.os.BaseBundle: void putInt(java.lang.String,int)> -> _SINK_
<android.os.BaseBundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.os.BaseBundle: void putLong(java.lang.String,long)> -> _SINK_
<android.os.BaseBundle: void putLongArray(java.lang.String,long[])> -> _SINK_
<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.os.BaseBundle: void putStringArray(java.lang.String,String[])> -> _SINK_
<android.os.BaseBundle: int size()> -> _SOURCE_
<android.os.Bundle: int describeContents()> -> _SINK_
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SOURCE_
<android.os.Bundle: byte getByte(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SOURCE_
<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String,char)> -> _SOURCE_
<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SOURCE_
<android.os.Bundle: CharSequence[] getCharSequenceArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: ArrayList<CharSequence> getCharSequenceArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.os.Bundle: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.os.Bundle: float getFloat(java.lang.String)> -> _SOURCE_
<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: ArrayList<Integer> getIntegerArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: <T extends Parcelable> T getParcelable(java.lang.String)> -> _SOURCE_
<android.os.Bundle: Parcelable[] getParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: <T extends Parcelable> ArrayList getParcelableArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String,short)> -> _SOURCE_
<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.util.Size getSize(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)> -> _SOURCE_
<android.os.Bundle: <T extends Parcelable> SparseArray getSparseParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: ArrayList<String> getStringArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: boolean hasFileDescriptors()> -> _SOURCE_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,Parcelable[])> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,ArrayList<?)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
<android.os.Bundle: void putSize(java.lang.String,android.util.Size)> -> _SINK_
<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)> -> _SINK_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,SparseArray<?)> -> _SINK_
<android.os.Bundle: void readFromParcel(android.os.Parcel)> -> _SINK_
<android.os.Bundle: java.lang.String toString()> -> _SOURCE_
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.Binder: long clearCallingIdentity()> -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,String[])> -> _SOURCE_
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,String[])> -> _SOURCE_
<android.os.Binder: int getCallingPid()> -> _SOURCE_
<android.os.Binder: int getCallingUid()> -> _SOURCE_
<android.os.Binder: int getCallingUidOrThrow()> -> _SOURCE_
<android.os.Binder: UserHandle getCallingUserHandle()> -> _SOURCE_
<android.os.Binder: int getCallingWorkSourceUid()> -> _SOURCE_
<android.os.Binder: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.Binder: boolean isBinderAlive()> -> _SOURCE_
<android.os.Binder: void joinThreadPool()> -> _SINK_
<android.os.Binder: android.os.IInterface queryLocalInterface(java.lang.String)> -> _SOURCE_
<android.os.Binder: void restoreCallingWorkSource(long)> -> _SOURCE_
<android.os.Binder: long setCallingWorkSourceUid(int)> -> _SINK_
<android.os.CombinedVibration: int describeContents()> -> _SOURCE_
<android.os.Build: List<Build.Partition> getFingerprintedPartitions()> -> _SOURCE_
<android.os.Build: String getRadioVersion()> -> _SOURCE_
<android.os.Build: String getSerial()> -> _SOURCE_
<android.os.AsyncTask: AsyncTask<Params, Progress, Result> execute(Params[])> -> _SINK_
<android.os.AsyncTask: AsyncTask<Params, Progress, Result> executeOnExecutor(java.util.concurrent.Executor,Params[])> -> _SINK_
<android.os.AsyncTask: Result get()> -> _SOURCE_
<android.os.AsyncTask: AsyncTask.Status getStatus()> -> _SOURCE_
<android.os.Debug.InstructionCount: boolean collect()> -> _SOURCE_
<android.os.Debug.InstructionCount: int globalMethodInvocations()> -> _SOURCE_
<android.os.Debug.InstructionCount: int globalTotal()> -> _SOURCE_
<android.os.BugreportManager: void startConnectivityBugreport(android.os.ParcelFileDescriptor,java.util.concurrent.Executor,android.os.BugreportManager.BugreportCallback)> -> _SINK_
<android.os.Debug: void changeDebugPort(int)> -> _SOURCE_
<android.os.Debug: void dumpHprofData(java.lang.String)> -> _SOURCE_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,String[])> -> _SINK_
<android.os.Debug: void enableEmulatorTraceOutput()> -> _SOURCE_
<android.os.Debug: int getBinderDeathObjectCount()> -> _SOURCE_
<android.os.Debug: int getBinderLocalObjectCount()> -> _SOURCE_
<android.os.Debug: int getBinderProxyObjectCount()> -> _SOURCE_
<android.os.Debug: int getBinderReceivedTransactions()> -> _SOURCE_
<android.os.Debug: int getBinderSentTransactions()> -> _SOURCE_
<android.os.Debug: int getGlobalAllocCount()> -> _SOURCE_
<android.os.Debug: int getGlobalAllocSize()> -> _SOURCE_
<android.os.Debug: int getGlobalClassInitCount()> -> _SOURCE_
<android.os.Debug: int getGlobalClassInitTime()> -> _SOURCE_
<android.os.Debug: int getGlobalExternalAllocCount()> -> _SOURCE_
<android.os.Debug: int getGlobalExternalAllocSize()> -> _SOURCE_
<android.os.Debug: int getGlobalExternalFreedCount()> -> _SOURCE_
<android.os.Debug: int getGlobalExternalFreedSize()> -> _SOURCE_
<android.os.Debug: int getGlobalFreedCount()> -> _SOURCE_
<android.os.Debug: int getGlobalFreedSize()> -> _SOURCE_
<android.os.Debug: int getGlobalGcInvocationCount()> -> _SOURCE_
<android.os.Debug: int getLoadedClassCount()> -> _SOURCE_
<android.os.Debug: void getMemoryInfo(android.os.Debug.MemoryInfo)> -> _SOURCE_
<android.os.Debug: long getNativeHeapAllocatedSize()> -> _SOURCE_
<android.os.Debug: long getNativeHeapFreeSize()> -> _SOURCE_
<android.os.Debug: long getNativeHeapSize()> -> _SOURCE_
<android.os.Debug: long getPss()> -> _SOURCE_
<android.os.Debug: String getRuntimeStat(java.lang.String)> -> _SOURCE_
<android.os.Debug: java.util.Map getRuntimeStats()> -> _SOURCE_
<android.os.Debug: int getThreadAllocCount()> -> _SOURCE_
<android.os.Debug: int getThreadAllocSize()> -> _SOURCE_
<android.os.Debug: int getThreadExternalAllocCount()> -> _SOURCE_
<android.os.Debug: int getThreadExternalAllocSize()> -> _SOURCE_
<android.os.Debug: int getThreadGcInvocationCount()> -> _SOURCE_
<android.os.Debug: boolean isDebuggerConnected()> -> _SOURCE_
<android.os.Debug: void printLoadedClasses(int)> -> _SOURCE_
<android.os.Debug: void resetAllCounts()> -> _SOURCE_
<android.os.Debug: void resetGlobalAllocCount()> -> _SOURCE_
<android.os.Debug: void resetGlobalAllocSize()> -> _SOURCE_
<android.os.Debug: void resetGlobalClassInitCount()> -> _SOURCE_
<android.os.Debug: void resetGlobalClassInitTime()> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalAllocCount()> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalAllocSize()> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalFreedCount()> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalFreedSize()> -> _SOURCE_
<android.os.Debug: void resetGlobalFreedCount()> -> _SOURCE_
<android.os.Debug: void resetGlobalFreedSize()> -> _SOURCE_
<android.os.Debug: void resetGlobalGcInvocationCount()> -> _SOURCE_
<android.os.Debug: void resetThreadAllocCount()> -> _SOURCE_
<android.os.Debug: void resetThreadAllocSize()> -> _SOURCE_
<android.os.Debug: void resetThreadExternalAllocCount()> -> _SOURCE_
<android.os.Debug: void resetThreadExternalAllocSize()> -> _SOURCE_
<android.os.Debug: void resetThreadGcInvocationCount()> -> _SOURCE_
<android.os.Debug: int setAllocationLimit(int)> -> _SOURCE_
<android.os.Debug: int setGlobalAllocationLimit(int)> -> _SOURCE_
<android.os.Debug: void startAllocCounting()> -> _SOURCE_
<android.os.Debug: void startMethodTracing()> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,int)> -> _SINK_
<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)> -> _SINK_
<android.os.Debug: void stopAllocCounting()> -> _SOURCE_
<android.os.Debug: long threadCpuTimeNanos()> -> _SOURCE_
<android.os.Debug: boolean waitingForDebugger()> -> _SOURCE_
<android.os.Environment: File getDataDirectory()> -> _SOURCE_
<android.os.Environment: File getDownloadCacheDirectory()> -> _SOURCE_
<android.os.Environment: File getExternalStorageDirectory()> -> _SOURCE_
<android.os.Environment: String getExternalStorageState()> -> _SOURCE_
<android.os.Environment: String getExternalStorageState(java.io.File)> -> _SOURCE_
<android.os.Environment: File getRootDirectory()> -> _SOURCE_
<android.os.Environment: File getStorageDirectory()> -> _SOURCE_
<android.os.Environment: String getStorageState(java.io.File)> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageEmulated()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageEmulated(java.io.File)> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageLegacy(java.io.File)> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageLegacy()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageManager()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageManager(java.io.File)> -> _SOURCE_
<android.os.DropBoxManager: void addData(java.lang.String,byte[],int)> -> _SINK_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)> -> _SINK_
<android.os.DropBoxManager: android.os.DropBoxManager.Entry getNextEntry(java.lang.String,long)> -> _SINK_
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)> -> _SOURCE_
<android.os.HandlerThread: int getThreadId()> -> _SOURCE_
<android.os.HandlerThread: void run()> -> _SOURCE_
<android.os.HardwarePropertiesManager: CpuUsageInfo[] getCpuUsages()> -> _SOURCE_
<android.os.HardwarePropertiesManager: float[] getDeviceTemperatures(int,int)> -> _SOURCE_
<android.os.HardwarePropertiesManager: float[] getFanSpeeds()> -> _SOURCE_
<android.os.IBinder: void dump(java.io.FileDescriptor,String[])> -> _SOURCE_
<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,String[])> -> _SOURCE_
<android.os.IBinder: String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IBinder: int getSuggestedMaxIpcSizeBytes()> -> _SINK_
<android.os.IBinder: boolean isBinderAlive()> -> _SOURCE_
<android.os.IBinder: IInterface queryLocalInterface(java.lang.String)> -> _SOURCE_
<android.os.Build.Partition: long getBuildTimeMillis()> -> _SOURCE_
<android.os.Build.Partition: java.lang.String getFingerprint()> -> _SOURCE_
<android.os.MemoryFile: java.io.InputStream getInputStream()> -> _SOURCE_
<android.os.MemoryFile: int length()> -> _SOURCE_
<android.os.MemoryFile: int readBytes(byte[],int,int,int)> -> _SOURCE_
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)> -> _SINK_
<android.os.Looper: Looper getMainLooper()> -> _SOURCE_
<android.os.Looper: java.lang.Thread getThread()> -> _SOURCE_
<android.os.Looper: void loop()> -> _SINK_
<android.os.Looper: Looper myLooper()> -> _SOURCE_
<android.os.Looper: MessageQueue myQueue()> -> _SOURCE_
<android.os.IInterface: IBinder asBinder()> -> _SOURCE_
<android.os.CpuUsageInfo: int describeContents()> -> _SOURCE_
<android.os.CpuUsageInfo: long getActive()> -> _SOURCE_
<android.os.CpuUsageInfo: long getTotal()> -> _SOURCE_
<android.os.Messenger: int describeContents()> -> _SOURCE_
<android.os.Messenger: android.os.IBinder getBinder()> -> _SOURCE_
<android.os.Messenger: Messenger readMessengerOrNullFromParcel(android.os.Parcel)> -> _SOURCE_
<android.os.ParcelFileDescriptor: boolean canDetectErrors()> -> _SOURCE_
<android.os.ParcelFileDescriptor: int describeContents()> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()> -> _SINK_
<android.os.ParcelFileDescriptor: ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)> -> _SINK_
<android.os.ParcelFileDescriptor: int getFd()> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.os.ParcelFileDescriptor: long getStatSize()> -> _SOURCE_
<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)> -> _SINK_
<android.os.ParcelFileDescriptor: ParcelFileDescriptor wrap(android.os.ParcelFileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor.OnCloseListener)> -> _SINK_
<android.os.ParcelUuid: int describeContents()> -> _SOURCE_
<android.os.ParcelUuid: java.util.UUID getUuid()> -> _SOURCE_
<android.os.ParcelUuid: java.lang.String toString()> -> _SOURCE_
<android.os.LocaleList: int describeContents()> -> _SOURCE_
<android.os.LocaleList: LocaleList forLanguageTags(java.lang.String)> -> _SOURCE_
<android.os.LocaleList: androidx.compose.ui.text.intl.Locale get(int)> -> _SOURCE_
<android.os.LocaleList: LocaleList getAdjustedDefault()> -> _SOURCE_
<android.os.LocaleList: LocaleList getDefault()> -> _SOURCE_
<android.os.LocaleList: LocaleList getEmptyLocaleList()> -> _SOURCE_
<android.os.LocaleList: androidx.compose.ui.text.intl.Locale getFirstMatch(String[])> -> _SOURCE_
<android.os.LocaleList: int indexOf(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.os.LocaleList: boolean isEmpty()> -> _SOURCE_
<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)> -> _SOURCE_
<android.os.LocaleList: void setDefault(android.os.LocaleList)> -> _SINK_
<android.os.LocaleList: int size()> -> _SOURCE_
<android.os.LocaleList: java.lang.String toLanguageTags()> -> _SOURCE_
<android.os.PerformanceHintManager: android.os.PerformanceHintManager.Session createHintSession(int[],long)> -> _SINK_
<android.os.PerformanceHintManager: long getPreferredUpdateRateNanos()> -> _SOURCE_
<android.os.PerformanceHintManager.Session: void reportActualWorkDuration(long)> -> _SOURCE_
<android.os.PerformanceHintManager.Session: void updateTargetWorkDuration(long)> -> _SINK_
<android.os.Parcelable: int describeContents()> -> _SOURCE_
<android.os.ParcelFileDescriptor.AutoCloseInputStream: int read()> -> _SOURCE_
<android.os.ParcelFileDescriptor.AutoCloseInputStream: int read(byte[],int,int)> -> _SOURCE_
<android.os.PowerManager.WakeLock: boolean isHeld()> -> _SOURCE_
<android.os.PowerManager.WakeLock: void setReferenceCounted(boolean)> -> _SOURCE_
<android.os.PowerManager.WakeLock: void setWorkSource(android.os.WorkSource)> -> _SINK_
<android.os.Parcelable.Creator: T createFromParcel(android.os.Parcel)> -> _SINK_
<android.os.ProxyFileDescriptorCallback: void onFsync()> -> _SINK_
<android.os.ProxyFileDescriptorCallback: long onGetSize()> -> _SOURCE_
<android.os.ProxyFileDescriptorCallback: int onRead(long,int,byte[])> -> _SOURCE_
<android.os.Process: long getElapsedCpuTime()> -> _SOURCE_
<android.os.Process: int getGidForName(java.lang.String)> -> _SOURCE_
<android.os.Process: long getStartElapsedRealtime()> -> _SOURCE_
<android.os.Process: long getStartRequestedElapsedRealtime()> -> _SOURCE_
<android.os.Process: long getStartRequestedUptimeMillis()> -> _SOURCE_
<android.os.Process: long getStartUptimeMillis()> -> _SOURCE_
<android.os.Process: int getThreadPriority(int)> -> _SOURCE_
<android.os.Process: int getUidForName(java.lang.String)> -> _SOURCE_
<android.os.Process: boolean is64Bit()> -> _SOURCE_
<android.os.Process: boolean isApplicationUid(int)> -> _SOURCE_
<android.os.Process: boolean isIsolated()> -> _SOURCE_
<android.os.Process: boolean isSupplemental()> -> _SOURCE_
<android.os.Process: int myPid()> -> _SOURCE_
<android.os.Process: String myProcessName()> -> _SOURCE_
<android.os.Process: int myTid()> -> _SOURCE_
<android.os.Process: int myUid()> -> _SOURCE_
<android.os.Process: UserHandle myUserHandle()> -> _SOURCE_
<android.os.Process: void sendSignal(int,int)> -> _SINK_
<android.os.Process: void setThreadPriority(int,int)> -> _SINK_
<android.os.Process: void setThreadPriority(int)> -> _SINK_
<android.os.Process: boolean supportsProcesses()> -> _SOURCE_
<android.os.RecoverySystem: void verifyPackage(java.io.File,android.os.RecoverySystem.ProgressListener,java.io.File)> -> _SOURCE_
<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()> -> _SOURCE_
<android.os.PowerManager: java.time.Duration getBatteryDischargePrediction()> -> _SOURCE_
<android.os.PowerManager: int getCurrentThermalStatus()> -> _SOURCE_
<android.os.PowerManager: float getThermalHeadroom(int)> -> _SOURCE_
<android.os.PowerManager: boolean isBatteryDischargePredictionPersonalized()> -> _SOURCE_
<android.os.PowerManager: boolean isDeviceIdleMode()> -> _SOURCE_
<android.os.PowerManager: boolean isDeviceLightIdleMode()> -> _SOURCE_
<android.os.PowerManager: boolean isIgnoringBatteryOptimizations(java.lang.String)> -> _SOURCE_
<android.os.PowerManager: boolean isInteractive()> -> _SOURCE_
<android.os.PowerManager: boolean isLowPowerStandbyEnabled()> -> _SOURCE_
<android.os.PowerManager: boolean isPowerSaveMode()> -> _SOURCE_
<android.os.PowerManager: boolean isScreenOn()> -> _SOURCE_
<android.os.PowerManager: boolean isSustainedPerformanceModeSupported()> -> _SOURCE_
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)> -> _SOURCE_
<android.os.PowerManager: android.os.PowerManager.WakeLock newWakeLock(int,java.lang.String)> -> _SINK_
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)> -> _SOURCE_
<android.os.RemoteCallbackList: E getBroadcastItem(int)> -> _SOURCE_
<android.os.RemoteCallbackList: java.lang.Object getRegisteredCallbackCookie(int)> -> _SOURCE_
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()> -> _SOURCE_
<android.os.Parcelable.ClassLoaderCreator: T createFromParcel(android.os.Parcel,java.lang.ClassLoader)> -> _SINK_
<android.os.StrictMode.ThreadPolicy: java.lang.String toString()> -> _SOURCE_
<android.os.StrictMode.VmPolicy: java.lang.String toString()> -> _SOURCE_
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectCustomSlowCalls()> -> _SINK_
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyFlashScreen()> -> _SINK_
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitCustomSlowCalls()> -> _SINK_
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitNetwork()> -> _SINK_
<android.os.ResultReceiver: int describeContents()> -> _SOURCE_
<android.os.ResultReceiver: void send(int,android.os.Bundle)> -> _SINK_
<android.os.PersistableBundle: int describeContents()> -> _SINK_
<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)> -> _SOURCE_
<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)> -> _SINK_
<android.os.PersistableBundle: PersistableBundle readFromStream(java.io.InputStream)> -> _SOURCE_
<android.os.PersistableBundle: java.lang.String toString()> -> _SOURCE_
<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)> -> _SINK_
<android.os.UserManager.UserOperationException: int getUserOperationResult()> -> _SOURCE_
<android.os.UserHandle: int describeContents()> -> _SOURCE_
<android.os.UserHandle: UserHandle getUserHandleForUid(int)> -> _SOURCE_
<android.os.UserHandle: UserHandle readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.os.Trace: void beginAsyncSection(java.lang.String,int)> -> _SINK_
<android.os.Trace: void beginSection(java.lang.String)> -> _SINK_
<android.os.UserManager: Intent createUserCreationIntent(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)> -> _SOURCE_
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: int getUserCount()> -> _SOURCE_
<android.os.UserManager: long getUserCreationTime(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)> -> _SOURCE_
<android.os.UserManager: java.lang.String getUserName()> -> _SOURCE_
<android.os.UserManager: List<UserHandle> getUserProfiles()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getUserRestrictions()> -> _SOURCE_
<android.os.UserManager: boolean hasUserRestriction(java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean isHeadlessSystemUserMode()> -> _SOURCE_
<android.os.UserManager: boolean isManagedProfile()> -> _SOURCE_
<android.os.UserManager: boolean isProfile()> -> _SOURCE_
<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlocked()> -> _SOURCE_
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle)> -> _SINK_
<android.os.UserManager: boolean setRestrictionsChallenge(java.lang.String)> -> _SOURCE_
<android.os.UserManager: void setUserRestriction(java.lang.String,boolean)> -> _SOURCE_
<android.os.UserManager: boolean supportsMultipleUsers()> -> _SOURCE_
<android.os.VibrationAttributes: int describeContents()> -> _SOURCE_
<android.os.VibrationAttributes: int getFlags()> -> _SINK_
<android.os.VibrationAttributes: boolean isFlagSet(int)> -> _SOURCE_
<android.os.VibrationAttributes: java.lang.String toString()> -> _SOURCE_
<android.os.StrictMode: StrictMode.ThreadPolicy getThreadPolicy()> -> _SOURCE_
<android.os.StrictMode: StrictMode.VmPolicy getVmPolicy()> -> _SOURCE_
<android.os.StrictMode: void noteSlowCall(java.lang.String)> -> _SINK_
<android.os.StrictMode: void setVmPolicy(android.os.StrictMode.VmPolicy)> -> _SINK_
<android.os.VibrationAttributes.Builder: android.os.VibrationAttributes build()> -> _SINK_
<android.os.VibrationAttributes.Builder: android.os.VibrationAttributes.Builder setFlags(int,int)> -> _SINK_
<android.os.VibrationAttributes.Builder: android.os.VibrationAttributes.Builder setUsage(int)> -> _SINK_
<android.os.VibrationEffect: int describeContents()> -> _SOURCE_
<android.os.VibrationEffect: VibrationEffect.WaveformBuilder startWaveform()> -> _SINK_
<android.os.VibratorManager: Vibrator getDefaultVibrator()> -> _SOURCE_
<android.os.VibratorManager: Vibrator getVibrator(int)> -> _SOURCE_
<android.os.VibratorManager: int[] getVibratorIds()> -> _SOURCE_
<android.os.StatFs: int getAvailableBlocks()> -> _SOURCE_
<android.os.StatFs: long getAvailableBlocksLong()> -> _SOURCE_
<android.os.StatFs: long getAvailableBytes()> -> _SOURCE_
<android.os.StatFs: int getBlockCount()> -> _SOURCE_
<android.os.StatFs: long getBlockCountLong()> -> _SOURCE_
<android.os.StatFs: int getBlockSize()> -> _SOURCE_
<android.os.StatFs: long getBlockSizeLong()> -> _SOURCE_
<android.os.StatFs: int getFreeBlocks()> -> _SOURCE_
<android.os.StatFs: long getFreeBlocksLong()> -> _SOURCE_
<android.os.StatFs: long getFreeBytes()> -> _SOURCE_
<android.os.StatFs: long getTotalBytes()> -> _SOURCE_
<android.os.TestLooperManager: android.os.MessageQueue getMessageQueue()> -> _SOURCE_
<android.os.SystemClock: Clock currentGnssTimeClock()> -> _SOURCE_
<android.os.SystemClock: Clock currentNetworkTimeClock()> -> _SOURCE_
<android.os.SystemClock: long currentThreadTimeMillis()> -> _SOURCE_
<android.os.SystemClock: long elapsedRealtime()> -> _SOURCE_
<android.os.SystemClock: long elapsedRealtimeNanos()> -> _SOURCE_
<android.os.SystemClock: boolean setCurrentTimeMillis(long)> -> _SINK_
<android.os.SystemClock: long uptimeMillis()> -> _SOURCE_
<android.os.Vibrator: int areAllEffectsSupported(int[])> -> _SOURCE_
<android.os.Vibrator: boolean areAllPrimitivesSupported(int[])> -> _SOURCE_
<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])> -> _SOURCE_
<android.os.Vibrator: VibratorFrequencyProfile getFrequencyProfile()> -> _SOURCE_
<android.os.Vibrator: int getId()> -> _SOURCE_
<android.os.Vibrator: int[] getPrimitiveDurations(int[])> -> _SOURCE_
<android.os.Vibrator: float getQFactor()> -> _SOURCE_
<android.os.Vibrator: float getResonantFrequency()> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeUidSnapshot(int)> -> _SOURCE_
<android.os.health.SystemHealthManager: HealthStats[] takeUidSnapshots(int[])> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectActivityLeaks()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectCleartextNetwork()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectContentUriWithoutPermission()> -> _SINK_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectCredentialProtectedWhileLocked()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectFileUriExposure()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectImplicitDirectBoot()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectNonSdkApiUsage()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectUntaggedSockets()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder permitNonSdkApiUsage()> -> _SOURCE_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder permitUnsafeIntentLaunch()> -> _SINK_
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder setClassInstanceLimit(java.lang.Class,int)> -> _SINK_
<android.os.storage.StorageVolume: android.content.Intent createOpenDocumentTreeIntent()> -> _SINK_
<android.os.storage.StorageVolume: int describeContents()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)> -> _SOURCE_
<android.os.storage.StorageVolume: java.io.File getDirectory()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getMediaStoreVolumeName()> -> _SOURCE_
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getState()> -> _SOURCE_
<android.os.storage.StorageVolume: java.util.UUID getStorageUuid()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getUuid()> -> _SOURCE_
<android.os.storage.StorageVolume: boolean isEmulated()> -> _SOURCE_
<android.os.storage.StorageVolume: boolean isPrimary()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String toString()> -> _SOURCE_
<android.os.health.TimerStat: int describeContents()> -> _SOURCE_
<android.os.health.TimerStat: long getTime()> -> _SOURCE_
<android.os.health.TimerStat: void setCount(int)> -> _SINK_
<android.os.health.TimerStat: void setTime(long)> -> _SINK_
<android.os.health.TimerStat: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)> -> _SINK_
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long)> -> _SINK_
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID)> -> _SOURCE_
<android.os.storage.StorageManager: long getCacheQuotaBytes(java.util.UUID)> -> _SOURCE_
<android.os.storage.StorageManager: long getCacheSizeBytes(java.util.UUID)> -> _SOURCE_
<android.os.storage.StorageManager: android.app.PendingIntent getManageSpaceActivityIntent(java.lang.String,int)> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryStorageVolume()> -> _SOURCE_
<android.os.storage.StorageManager: List<StorageVolume> getRecentStorageVolumes()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.net.Uri)> -> _SOURCE_
<android.os.storage.StorageManager: List<StorageVolume> getStorageVolumes()> -> _SOURCE_
<android.os.storage.StorageManager: List<StorageVolume> getStorageVolumesIncludingSharedProfiles()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isCacheBehaviorTombstone(java.io.File)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncrypted(java.io.File)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)> -> _SINK_
<android.os.storage.StorageManager: void setCacheBehaviorGroup(java.io.File,boolean)> -> _SINK_
<android.os.strictmode.UnsafeIntentLaunchViolation: android.content.Intent getIntent()> -> _SOURCE_
<android.os.strictmode.Violation: void setStackTrace(StackTraceElement[])> -> _SINK_
<android.preference.EditTextPreference: android.widget.EditText getEditText()> -> _SOURCE_
<android.preference.EditTextPreference: java.lang.String getText()> -> _SOURCE_
<android.preference.EditTextPreference: void setText(java.lang.String)> -> _SINK_
<android.preference.EditTextPreference: boolean shouldDisableDependents()> -> _SOURCE_
<android.preference.PreferenceCategory: boolean shouldDisableDependents()> -> _SOURCE_
<android.preference.Preference: android.content.Context getContext()> -> _SOURCE_
<android.preference.Preference: java.lang.String getDependency()> -> _SOURCE_
<android.preference.Preference: android.os.Bundle getExtras()> -> _SOURCE_
<android.preference.Preference: java.lang.String getFragment()> -> _SOURCE_
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<android.preference.Preference: android.content.Intent getIntent()> -> _SOURCE_
<android.preference.Preference: java.lang.String getKey()> -> _SOURCE_
<android.preference.Preference: int getLayoutResource()> -> _SOURCE_
<android.preference.Preference: int getOrder()> -> _SOURCE_
<android.preference.Preference: android.preference.PreferenceGroup getParent()> -> _SOURCE_
<android.preference.Preference: Set<String> getPersistedStringSet(Set<String>)> -> _SINK_
<android.preference.Preference: android.preference.PreferenceDataStore getPreferenceDataStore()> -> _SOURCE_
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()> -> _SOURCE_
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()> -> _SOURCE_
<android.preference.Preference: boolean getShouldDisableView()> -> _SOURCE_
<android.preference.Preference: java.lang.CharSequence getSummary()> -> _SOURCE_
<android.preference.Preference: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.preference.Preference: int getTitleRes()> -> _SOURCE_
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.preference.Preference: boolean hasKey()> -> _SOURCE_
<android.preference.Preference: boolean isIconSpaceReserved()> -> _SOURCE_
<android.preference.Preference: boolean isSingleLineTitle()> -> _SINK_
<android.preference.Preference: void notifyDependencyChange(boolean)> -> _SINK_
<android.preference.Preference: android.os.Bundle peekExtras()> -> _SOURCE_
<android.preference.Preference: boolean persistStringSet(Set<String>)> -> _SINK_
<android.preference.Preference: void saveHierarchyState(android.os.Bundle)> -> _SINK_
<android.preference.Preference: void setDefaultValue(java.lang.Object)> -> _SINK_
<android.preference.Preference: void setDependency(java.lang.String)> -> _SINK_
<android.preference.Preference: void setEnabled(boolean)> -> _SINK_
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.preference.Preference: void setIcon(int)> -> _SINK_
<android.preference.Preference: void setIconSpaceReserved(boolean)> -> _SINK_
<android.preference.Preference: void setIntent(android.content.Intent)> -> _SINK_
<android.preference.Preference: void setKey(java.lang.String)> -> _SINK_
<android.preference.Preference: void setLayoutResource(int)> -> _SINK_
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference.OnPreferenceChangeListener)> -> _SINK_
<android.preference.Preference: void setOrder(int)> -> _SINK_
<android.preference.Preference: void setPersistent(boolean)> -> _SINK_
<android.preference.Preference: void setPreferenceDataStore(android.preference.PreferenceDataStore)> -> _SINK_
<android.preference.Preference: void setSelectable(boolean)> -> _SINK_
<android.preference.Preference: void setShouldDisableView(boolean)> -> _SINK_
<android.preference.Preference: void setSingleLineTitle(boolean)> -> _SINK_
<android.preference.Preference: void setSummary(java.lang.CharSequence)> -> _SINK_
<android.preference.Preference: void setSummary(int)> -> _SINK_
<android.preference.Preference: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.preference.Preference: void setTitle(int)> -> _SINK_
<android.preference.Preference: void setWidgetLayoutResource(int)> -> _SINK_
<android.preference.Preference: boolean shouldCommit()> -> _SOURCE_
<android.preference.Preference: boolean shouldDisableDependents()> -> _SOURCE_
<android.preference.Preference: java.lang.String toString()> -> _SOURCE_
<android.preference.PreferenceDataStore: default boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.preference.PreferenceDataStore: default float getFloat(java.lang.String,float)> -> _SOURCE_
<android.preference.PreferenceDataStore: default int getInt(java.lang.String,int)> -> _SOURCE_
<android.preference.PreferenceDataStore: default long getLong(java.lang.String,long)> -> _SOURCE_
<android.preference.PreferenceDataStore: default String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.preference.PreferenceDataStore: default Set<String> getStringSet(java.lang.String,Set<String>)> -> _SOURCE_
<android.preference.PreferenceDataStore: default void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.preference.PreferenceDataStore: default void putFloat(java.lang.String,float)> -> _SINK_
<android.preference.PreferenceDataStore: default void putInt(java.lang.String,int)> -> _SINK_
<android.preference.PreferenceDataStore: default void putLong(java.lang.String,long)> -> _SINK_
<android.preference.PreferenceDataStore: default void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.preference.PreferenceDataStore: default void putStringSet(java.lang.String,Set<String>)> -> _SINK_
<android.preference.PreferenceManager.OnActivityDestroyListener: void onActivityDestroy()> -> _SOURCE_
<android.preference.PreferenceActivity: void addPreferencesFromIntent(android.content.Intent)> -> _SOURCE_
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)> -> _SOURCE_
<android.preference.PreferenceActivity: android.preference.Preference findPreference(java.lang.CharSequence)> -> _SOURCE_
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()> -> _SOURCE_
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()> -> _SOURCE_
<android.preference.PreferenceActivity: boolean hasHeaders()> -> _SOURCE_
<android.preference.PreferenceActivity: void invalidateHeaders()> -> _SINK_
<android.preference.PreferenceActivity: boolean isMultiPane()> -> _SOURCE_
<android.preference.PreferenceActivity: android.preference.PreferenceActivity.Header onGetInitialHeader()> -> _SOURCE_
<android.preference.PreferenceActivity: boolean onIsHidingHeaders()> -> _SOURCE_
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> -> _SOURCE_
<android.preference.PreferenceActivity: void setListFooter(android.view.View)> -> _SINK_
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)> -> _SOURCE_
<android.preference.PreferenceActivity: void showBreadCrumbs(java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)> -> _SOURCE_
<android.print.PageRange: int describeContents()> -> _SOURCE_
<android.print.PageRange: int getEnd()> -> _SOURCE_
<android.print.PageRange: int getStart()> -> _SOURCE_
<android.print.PageRange: java.lang.String toString()> -> _SOURCE_
<android.print.PrintAttributes: int describeContents()> -> _SOURCE_
<android.print.PrintAttributes: int getColorMode()> -> _SINK_
<android.print.PrintAttributes: android.print.PrintAttributes.MediaSize getMediaSize()> -> _SOURCE_
<android.print.PrintAttributes: android.print.PrintAttributes.Margins getMinMargins()> -> _SINK_
<android.print.PrintAttributes: android.print.PrintAttributes.Resolution getResolution()> -> _SOURCE_
<android.print.PrintAttributes: java.lang.String toString()> -> _SOURCE_
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setColorMode(int)> -> _SINK_
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setDuplexMode(int)> -> _SINK_
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setMediaSize(android.print.PrintAttributes.MediaSize)> -> _SINK_
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setMinMargins(android.print.PrintAttributes.Margins)> -> _SINK_
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setResolution(android.print.PrintAttributes.Resolution)> -> _SINK_
<android.print.PrintAttributes.Margins: int getBottomMils()> -> _SOURCE_
<android.print.PrintAttributes.Margins: int getLeftMils()> -> _SOURCE_
<android.print.PrintAttributes.Margins: int getRightMils()> -> _SOURCE_
<android.print.PrintAttributes.Margins: int getTopMils()> -> _SOURCE_
<android.print.PrintAttributes.Margins: java.lang.String toString()> -> _SOURCE_
<android.os.health.HealthStats: java.lang.String getDataType()> -> _SOURCE_
<android.os.health.HealthStats: long getMeasurement(int)> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementKeyAt(int)> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementKeyCount()> -> _SOURCE_
<android.os.health.HealthStats: java.util.Map getMeasurements(int)> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementsKeyAt(int)> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementsKeyCount()> -> _SOURCE_
<android.os.health.HealthStats: java.util.Map getStats(int)> -> _SOURCE_
<android.os.health.HealthStats: int getStatsKeyAt(int)> -> _SOURCE_
<android.os.health.HealthStats: int getStatsKeyCount()> -> _SOURCE_
<android.os.health.HealthStats: android.os.health.TimerStat getTimer(int)> -> _SOURCE_
<android.os.health.HealthStats: int getTimerCount(int)> -> _SOURCE_
<android.os.health.HealthStats: int getTimerKeyAt(int)> -> _SOURCE_
<android.os.health.HealthStats: int getTimerKeyCount()> -> _SOURCE_
<android.os.health.HealthStats: long getTimerTime(int)> -> _SOURCE_
<android.os.health.HealthStats: java.util.Map getTimers(int)> -> _SOURCE_
<android.os.health.HealthStats: int getTimersKeyAt(int)> -> _SOURCE_
<android.os.health.HealthStats: int getTimersKeyCount()> -> _SOURCE_
<android.os.health.HealthStats: boolean hasMeasurement(int)> -> _SOURCE_
<android.os.health.HealthStats: boolean hasMeasurements(int)> -> _SOURCE_
<android.os.health.HealthStats: boolean hasStats(int)> -> _SOURCE_
<android.os.health.HealthStats: boolean hasTimer(int)> -> _SOURCE_
<android.os.health.HealthStats: boolean hasTimers(int)> -> _SOURCE_
<android.print.PrintDocumentAdapter: void onWrite(PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter.WriteResultCallback)> -> _SINK_
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)> -> _SINK_
<android.preference.PreferenceGroup: android.preference.Preference findPreference(java.lang.CharSequence)> -> _SOURCE_
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)> -> _SOURCE_
<android.preference.PreferenceGroup: int getPreferenceCount()> -> _SOURCE_
<android.preference.PreferenceGroup: boolean isOrderingAsAdded()> -> _SINK_
<android.preference.PreferenceGroup: void notifyDependencyChange(boolean)> -> _SINK_
<android.preference.PreferenceGroup: void removeAll()> -> _SINK_
<android.preference.PreferenceGroup: boolean removePreference(android.preference.Preference)> -> _SINK_
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)> -> _SINK_
<android.print.PrintAttributes.Resolution: int getHorizontalDpi()> -> _SOURCE_
<android.print.PrintAttributes.Resolution: java.lang.String getId()> -> _SOURCE_
<android.print.PrintAttributes.Resolution: java.lang.String getLabel()> -> _SOURCE_
<android.print.PrintAttributes.Resolution: int getVerticalDpi()> -> _SOURCE_
<android.print.PrintAttributes.Resolution: java.lang.String toString()> -> _SOURCE_
<android.print.PrintDocumentInfo.Builder: android.print.PrintDocumentInfo.Builder setContentType(int)> -> _SINK_
<android.print.PrintDocumentInfo.Builder: android.print.PrintDocumentInfo.Builder setPageCount(int)> -> _SINK_
<android.print.PrintJob: android.print.PrintJobId getId()> -> _SOURCE_
<android.print.PrintJob: android.print.PrintJobInfo getInfo()> -> _SOURCE_
<android.print.PrintJob: boolean isBlocked()> -> _SOURCE_
<android.print.PrintJob: boolean isCompleted()> -> _SOURCE_
<android.print.PrintJob: boolean isFailed()> -> _SOURCE_
<android.preference.RingtonePreference: int getRingtoneType()> -> _SOURCE_
<android.preference.RingtonePreference: boolean getShowDefault()> -> _SOURCE_
<android.preference.RingtonePreference: boolean getShowSilent()> -> _SOURCE_
<android.preference.RingtonePreference: boolean onActivityResult(int,int,android.content.Intent)> -> _SOURCE_
<android.preference.RingtonePreference: void setRingtoneType(int)> -> _SINK_
<android.preference.RingtonePreference: void setShowDefault(boolean)> -> _SINK_
<android.preference.RingtonePreference: void setShowSilent(boolean)> -> _SINK_
<android.print.PrintJobInfo.Builder: void putAdvancedOption(java.lang.String,java.lang.String)> -> _SINK_
<android.print.PrintJobInfo.Builder: void putAdvancedOption(java.lang.String,int)> -> _SINK_
<android.print.PrintJobInfo.Builder: void setAttributes(android.print.PrintAttributes)> -> _SINK_
<android.print.PrintJobInfo.Builder: void setCopies(int)> -> _SINK_
<android.print.PrintJobInfo.Builder: void setPages(PageRange[])> -> _SINK_
<android.print.PrintJobId: int describeContents()> -> _SOURCE_
<android.print.PrintDocumentAdapter.WriteResultCallback: void onWriteFailed(java.lang.CharSequence)> -> _SINK_
<android.print.PrintDocumentAdapter.WriteResultCallback: void onWriteFinished(PageRange[])> -> _SINK_
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)> -> _SINK_
<android.printservice.PrintDocument: android.os.ParcelFileDescriptor getData()> -> _SOURCE_
<android.printservice.PrintDocument: android.print.PrintDocumentInfo getInfo()> -> _SOURCE_
<android.print.pdf.PrintedPdfDocument: android.graphics.Rect getPageContentRect()> -> _SOURCE_
<android.print.pdf.PrintedPdfDocument: int getPageHeight()> -> _SOURCE_
<android.print.pdf.PrintedPdfDocument: int getPageWidth()> -> _SOURCE_
<android.preference.PreferenceManager.OnActivityResultListener: boolean onActivityResult(int,int,android.content.Intent)> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder addMediaSize(android.print.PrintAttributes.MediaSize,boolean)> -> _SINK_
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder addResolution(android.print.PrintAttributes.Resolution,boolean)> -> _SINK_
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo build()> -> _SINK_
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder setColorModes(int,int)> -> _SINK_
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder setDuplexModes(int,int)> -> _SINK_
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder setMinMargins(android.print.PrintAttributes.Margins)> -> _SINK_
<android.print.PrintJob: int getAdvancedIntOption(java.lang.String)> -> _SOURCE_
<android.print.PrintJob: java.lang.String getAdvancedStringOption(java.lang.String)> -> _SOURCE_
<android.print.PrintJob: android.printservice.PrintDocument getDocument()> -> _SOURCE_
<android.print.PrintJob: android.print.PrintJobId getId()> -> _SOURCE_
<android.print.PrintJob: android.print.PrintJobInfo getInfo()> -> _SOURCE_
<android.print.PrintJob: java.lang.String getTag()> -> _SINK_
<android.print.PrintJob: boolean hasAdvancedOption(java.lang.String)> -> _SOURCE_
<android.print.PrintJob: boolean isBlocked()> -> _SOURCE_
<android.print.PrintJob: boolean isCompleted()> -> _SOURCE_
<android.print.PrintJob: boolean isFailed()> -> _SOURCE_
<android.print.PrintJob: void setProgress(float)> -> _SINK_
<android.print.PrintJob: void setStatus(java.lang.CharSequence)> -> _SINK_
<android.print.PrintJob: void setStatus(int)> -> _SINK_
<android.print.PrintJob: boolean setTag(java.lang.String)> -> _SINK_
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setCapabilities(android.print.PrinterCapabilitiesInfo)> -> _SINK_
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setDescription(java.lang.String)> -> _SINK_
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setIconResourceId(int)> -> _SINK_
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setInfoIntent(android.app.PendingIntent)> -> _SINK_
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setName(java.lang.String)> -> _SINK_
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setStatus(int)> -> _SINK_
<android.preference.PreferenceManager.OnActivityStopListener: void onActivityStop()> -> _SOURCE_
<android.printservice.PrinterDiscoverySession: void addPrinters(List<PrinterInfo>)> -> _SOURCE_
<android.printservice.PrinterDiscoverySession: List<PrinterInfo> getPrinters()> -> _SOURCE_
<android.printservice.PrinterDiscoverySession: List<PrinterId> getTrackedPrinters()> -> _SOURCE_
<android.printservice.PrinterDiscoverySession: boolean isDestroyed()> -> _SOURCE_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)> -> _SINK_
<android.print.PrintDocumentInfo: int describeContents()> -> _SOURCE_
<android.print.PrintDocumentInfo: int getContentType()> -> _SOURCE_
<android.print.PrintDocumentInfo: long getDataSize()> -> _SOURCE_
<android.print.PrintDocumentInfo: java.lang.String getName()> -> _SOURCE_
<android.print.PrintDocumentInfo: int getPageCount()> -> _SOURCE_
<android.print.PrintDocumentInfo: java.lang.String toString()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: android.print.PrintAttributes.MediaSize asLandscape()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: android.print.PrintAttributes.MediaSize asPortrait()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: int getHeightMils()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: java.lang.String getId()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: int getWidthMils()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: boolean isPortrait()> -> _SOURCE_
<android.print.PrintAttributes.MediaSize: java.lang.String toString()> -> _SOURCE_
<android.print.PrintJobInfo: int describeContents()> -> _SOURCE_
<android.print.PrintJobInfo: int getAdvancedIntOption(java.lang.String)> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getAdvancedStringOption(java.lang.String)> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrintAttributes getAttributes()> -> _SOURCE_
<android.print.PrintJobInfo: int getCopies()> -> _SOURCE_
<android.print.PrintJobInfo: long getCreationTime()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrintJobId getId()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getLabel()> -> _SINK_
<android.print.PrintJobInfo: PageRange[] getPages()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrinterId getPrinterId()> -> _SOURCE_
<android.print.PrintJobInfo: int getState()> -> _SOURCE_
<android.print.PrintJobInfo: boolean hasAdvancedOption(java.lang.String)> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String toString()> -> _SOURCE_
<android.printservice.PrintService: PrinterId generatePrinterId(java.lang.String)> -> _SOURCE_
<android.provider.CalendarContract.Attendees: Cursor query(android.content.ContentResolver,long,String[])> -> _SOURCE_
<android.print.PrinterInfo: int describeContents()> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String getDescription()> -> _SOURCE_
<android.print.PrinterInfo: android.print.PrinterId getId()> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String getName()> -> _SOURCE_
<android.print.PrinterInfo: int getStatus()> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String toString()> -> _SOURCE_
<android.print.PrinterId: int describeContents()> -> _SOURCE_
<android.print.PrinterId: java.lang.String getLocalId()> -> _SOURCE_
<android.print.PrinterId: java.lang.String toString()> -> _SOURCE_
<android.provider.BlockedNumberContract: boolean canCurrentUserBlockNumbers(android.content.Context)> -> _SOURCE_
<android.provider.BlockedNumberContract: boolean isBlocked(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.BlockedNumberContract: int unblock(android.content.Context,java.lang.String)> -> _SINK_
<android.print.PrinterCapabilitiesInfo: int describeContents()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: int getColorModes()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes getDefaults()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: int getDuplexModes()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: List<PrintAttributes.MediaSize> getMediaSizes()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes.Margins getMinMargins()> -> _SINK_
<android.print.PrinterCapabilitiesInfo: List<PrintAttributes.Resolution> getResolutions()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: java.lang.String toString()> -> _SOURCE_
<android.provider.CalendarContract.EventDays: Cursor query(android.content.ContentResolver,int,int,String[])> -> _SOURCE_
<android.provider.CalendarContract.Reminders: Cursor query(android.content.ContentResolver,long,String[])> -> _SOURCE_
<android.provider.CallLog.Calls: String getLastOutgoingCall(android.content.Context)> -> _SOURCE_
<android.provider.ContactsContract: boolean isProfileId(long)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Event: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Event: int getTypeResource(java.lang.Integer)> -> _SOURCE_
<android.provider.Contacts.People: void markAsContacted(android.content.ContentResolver,long)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.StructuredPostal: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.StructuredPostal: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.SipAddress: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.SipAddress: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Im: CharSequence getProtocolLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Im: int getProtocolLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Im: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Im: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Organization: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Organization: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Relation: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Relation: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder addNameParameter(java.lang.String)> -> _SINK_
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.net.Uri build()> -> _SINK_
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder setContactId(long)> -> _SINK_
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder setLimit(int)> -> _SINK_
<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Phone: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Email: CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.ContactsContract.CommonDataKinds.Email: int getTypeLabelResource(int)> -> _SOURCE_
<android.provider.ContactsContract.Directory: boolean isEnterpriseDirectoryId(long)> -> _SOURCE_
<android.provider.ContactsContract.Directory: boolean isRemoteDirectoryId(long)> -> _SOURCE_
<android.provider.ContactsContract.Contacts: boolean isEnterpriseContactId(long)> -> _SOURCE_
<android.provider.ContactsContract.Contacts: Uri lookupContact(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.ContactsContract.Contacts: void markAsContacted(android.content.ContentResolver,long)> -> _SOURCE_
<android.provider.ContactsContract.Contacts: InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.ContactsContract.Contacts: InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> -> _SOURCE_
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,String[],java.lang.String)> -> _SINK_
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,String[])> -> _SINK_
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,String[])> -> _SINK_
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,String[],java.lang.String)> -> _SINK_
<android.provider.ContactsContract.RawContacts: Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.ContactsContract.RawContacts: EntityIterator newEntityIterator(android.database.Cursor)> -> _SINK_
<android.provider.ContactsContract.Settings: Account getDefaultAccount(android.content.ContentResolver)> -> _SOURCE_
<android.provider.ContactsContract.StatusUpdates: int getPresenceIconResourceId(int)> -> _SOURCE_
<android.provider.ContactsContract.StatusUpdates: int getPresencePrecedence(int)> -> _SOURCE_
<android.provider.ContactsContract.SimContacts: List<ContactsContract.SimAccount> getSimAccounts(android.content.ContentResolver)> -> _SOURCE_
<android.provider.DocumentsContract: Uri buildChildDocumentsUri(java.lang.String,java.lang.String)> -> _SINK_
<android.provider.DocumentsContract: Uri buildChildDocumentsUriUsingTree(android.net.Uri,java.lang.String)> -> _SINK_
<android.provider.DocumentsContract: Uri buildDocumentUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsContract: Uri buildDocumentUriUsingTree(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsContract: Uri buildRecentDocumentsUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsContract: Uri buildRootUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsContract: Uri buildRootsUri(java.lang.String)> -> _SOURCE_
<android.provider.DocumentsContract: Uri buildSearchDocumentsUri(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.provider.DocumentsContract: Uri buildTreeDocumentUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsContract: Uri createDocument(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)> -> _SINK_
<android.provider.DocumentsContract: DocumentsContract.Path findDocumentPath(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: String getDocumentId(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: Bundle getDocumentMetadata(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: Bitmap getDocumentThumbnail(android.content.ContentResolver,android.net.Uri,android.graphics.Point,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsContract: String getRootId(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: String getSearchDocumentsQuery(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: String getTreeDocumentId(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: boolean isDocumentUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: boolean isRootsUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsContract.Path: int describeContents()> -> _SOURCE_
<android.provider.DocumentsContract.Path: List<String> getPath()> -> _SOURCE_
<android.provider.DocumentsContract.Path: java.lang.String getRootId()> -> _SOURCE_
<android.provider.DocumentsContract.Path: java.lang.String toString()> -> _SOURCE_
<android.provider.FontRequest: List<List<byte[]>> getCertificates()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getProviderAuthority()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getProviderPackage()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getQuery()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String toString()> -> _SOURCE_
<android.provider.MediaStore.Audio.Albums: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> -> _SOURCE_
<android.provider.DocumentsProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.provider.DocumentsProvider: android.net.Uri canonicalize(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: android.content.IntentSender createWebLinkIntent(java.lang.String,android.os.Bundle)> -> _SINK_
<android.provider.DocumentsProvider: int delete(android.net.Uri,java.lang.String,String[])> -> _SOURCE_
<android.provider.DocumentsProvider: android.provider.DocumentsContract.Path findDocumentPath(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: android.os.Bundle getDocumentMetadata(java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: String[] getDocumentStreamTypes(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String getDocumentType(java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SINK_
<android.provider.DocumentsProvider: String getType(android.net.Uri)> -> _SOURCE_
<android.provider.DocumentsProvider: Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String moveDocument(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.provider.DocumentsProvider: AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.provider.DocumentsProvider: AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedDocument(java.lang.String,java.lang.String,android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: Cursor query(android.net.Uri,String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,String[],android.os.Bundle)> -> _SOURCE_
<android.provider.DocumentsProvider: Cursor queryChildDocuments(java.lang.String,String[],java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: Cursor queryDocument(java.lang.String,String[])> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,String[])> -> _SOURCE_
<android.provider.DocumentsProvider: Cursor queryRoots(String[])> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,String[],android.os.Bundle)> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String,String[])> -> _SOURCE_
<android.provider.DocumentsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,String[])> -> _SOURCE_
<android.provider.FontsContract.FontInfo: FontVariationAxis[] getAxes()> -> _SOURCE_
<android.provider.FontsContract.FontInfo: int getResultCode()> -> _SOURCE_
<android.provider.FontsContract.FontInfo: int getTtcIndex()> -> _SOURCE_
<android.provider.FontsContract.FontInfo: android.net.Uri getUri()> -> _SOURCE_
<android.provider.FontsContract.FontInfo: int getWeight()> -> _SOURCE_
<android.provider.FontsContract.FontInfo: boolean isItalic()> -> _SOURCE_
<android.provider.MediaStore.Audio: String keyFor(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Audio.Artists: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Audio.Genres: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Audio.Genres: Uri getContentUriForAudioId(java.lang.String,int)> -> _SOURCE_
<android.provider.MediaStore: boolean canManageMedia(android.content.Context)> -> _SOURCE_
<android.provider.MediaStore: PendingIntent createFavoriteRequest(android.content.ContentResolver,Collection<Uri>,boolean)> -> _SINK_
<android.provider.MediaStore: PendingIntent createWriteRequest(android.content.ContentResolver,Collection<Uri>)> -> _SINK_
<android.provider.MediaStore: Uri getDocumentUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.provider.MediaStore: Set<String> getExternalVolumeNames(android.content.Context)> -> _SOURCE_
<android.provider.MediaStore: long getGeneration(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore: Uri getMediaScannerUri()> -> _SOURCE_
<android.provider.MediaStore: Uri getMediaUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.provider.MediaStore: ParcelFileDescriptor getOriginalMediaFormatFileDescriptor(android.content.Context,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.provider.MediaStore: int getPickImagesMaxLimit()> -> _SOURCE_
<android.provider.MediaStore: Set<String> getRecentExternalVolumeNames(android.content.Context)> -> _SOURCE_
<android.provider.MediaStore: Uri getRedactedUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.MediaStore: List<Uri> getRedactedUri(android.content.ContentResolver,List<Uri>)> -> _SOURCE_
<android.provider.MediaStore: boolean getRequireOriginal(android.net.Uri)> -> _SOURCE_
<android.provider.MediaStore: String getVersion(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore: String getVersion(android.content.Context)> -> _SOURCE_
<android.provider.MediaStore: String getVolumeName(android.net.Uri)> -> _SOURCE_
<android.provider.MediaStore: boolean isCurrentCloudMediaProviderAuthority(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore: boolean isCurrentSystemGallery(android.content.ContentResolver,int,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore: boolean isSupportedCloudMediaProviderAuthority(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore: boolean notifyCloudMediaChangedEvent(android.content.ContentResolver,java.lang.String)> -> _SINK_
<android.provider.MediaStore: Uri setIncludePending(android.net.Uri)> -> _SOURCE_
<android.provider.MediaStore.Audio.Media: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Audio.Media: Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.provider.MediaStore.Audio.Media: Uri getContentUriForPath(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Audio.Playlists: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Downloads: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Downloads: Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.provider.MediaStore.Files: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Files: Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.provider.FontsContract: Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,FontInfo[])> -> _SINK_
<android.provider.FontsContract: FontsContract.FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.provider.FontRequest)> -> _SOURCE_
<android.provider.MediaStore.Video.Media: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Video.Media: Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)> -> _SINK_
<android.provider.MediaStore.Images.Thumbnails: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Images.Media: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.MediaStore.Images.Media: Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.provider.Settings.Global: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.provider.Settings.Global: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Global: int getInt(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Global: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.provider.Settings.Global: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Global: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.provider.Settings.Global: String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Global: Uri getUriFor(java.lang.String)> -> _SINK_
<android.provider.Settings.Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> -> _SINK_
<android.provider.Settings.Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.provider.Settings.Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)> -> _SINK_
<android.provider.Settings.Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SINK_
<android.provider.SimPhonebookContract.ElementaryFiles: Uri getItemUri(int,int)> -> _SOURCE_
<android.provider.MediaStore.Video.Thumbnails: Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.provider.Telephony.CarrierId: Uri getSpecificCarrierIdUriForSubscriptionId(int)> -> _SOURCE_
<android.provider.Telephony.CarrierId: Uri getUriForSubscriptionId(int)> -> _SINK_
<android.provider.Telephony.Mms.Addr: Uri getAddrUriForMessage(java.lang.String)> -> _SINK_
<android.provider.Settings.System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)> -> _SOURCE_
<android.provider.Settings.System: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.provider.Settings.System: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.System: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.provider.Settings.System: int getInt(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.System: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.System: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.provider.Settings.System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)> -> _SOURCE_
<android.provider.Settings.System: String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.System: Uri getUriFor(java.lang.String)> -> _SINK_
<android.provider.Settings.System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)> -> _SINK_
<android.provider.Settings.System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> -> _SINK_
<android.provider.Settings.System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.provider.Settings.System: boolean putLong(android.content.ContentResolver,java.lang.String,long)> -> _SINK_
<android.provider.Settings.System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SINK_
<android.provider.Settings.System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)> -> _SOURCE_
<android.provider.Settings.Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.provider.Settings.Secure: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.provider.Settings.Secure: int getInt(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Secure: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.provider.Settings.Secure: String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Secure: Uri getUriFor(java.lang.String)> -> _SINK_
<android.provider.Settings.Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.Settings.Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> -> _SINK_
<android.provider.Settings.Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)> -> _SINK_
<android.provider.Settings.Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)> -> _SINK_
<android.provider.Settings.Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SINK_
<android.provider.Settings.Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)> -> _SOURCE_
<android.provider.SimPhonebookContract.SimRecords: Uri getContentUri(int,int)> -> _SOURCE_
<android.provider.SimPhonebookContract.SimRecords: int getEncodedNameLength(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.provider.SimPhonebookContract.SimRecords: Uri getItemUri(int,int,int)> -> _SOURCE_
<android.provider.Telephony.Sms: String getDefaultSmsPackage(android.content.Context)> -> _SOURCE_
<android.provider.Telephony.Sms.Intents: SmsMessage[] getMessagesFromIntent(android.content.Intent)> -> _SOURCE_
<android.provider.Telephony.ServiceStateTable: Uri getUriForSubscriptionId(int)> -> _SINK_
<android.provider.Telephony.ServiceStateTable: Uri getUriForSubscriptionIdAndField(int,java.lang.String)> -> _SINK_
<android.provider.Telephony.Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.Telephony.Threads: long getOrCreateThreadId(android.content.Context,Set<String>)> -> _SOURCE_
<android.provider.VoicemailContract.Status: Uri buildSourceUri(java.lang.String)> -> _SINK_
<android.provider.VoicemailContract.Voicemails: Uri buildSourceUri(java.lang.String)> -> _SINK_
<android.renderscript.Matrix2f: float get(int,int)> -> _SOURCE_
<android.renderscript.Matrix2f: float[] getArray()> -> _SOURCE_
<android.renderscript.Matrix2f: void load(android.renderscript.Matrix2f)> -> _SINK_
<android.renderscript.Matrix2f: void set(int,int,float)> -> _SINK_
<android.renderscript.Matrix4f: float get(int,int)> -> _SOURCE_
<android.renderscript.Matrix4f: float[] getArray()> -> _SOURCE_
<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)> -> _SINK_
<android.renderscript.Matrix4f: void loadFrustum(float,float,float,float,float,float)> -> _SOURCE_
<android.renderscript.Matrix4f: void loadOrthoWindow(int,int)> -> _SINK_
<android.renderscript.Matrix4f: void loadPerspective(float,float,float,float)> -> _SOURCE_
<android.renderscript.Matrix4f: void loadProjectionNormalized(int,int)> -> _SOURCE_
<android.renderscript.Matrix4f: void loadRotate(float,float,float,float)> -> _SOURCE_
<android.renderscript.Matrix4f: void set(int,int,float)> -> _SINK_
<android.renderscript.Matrix3f: float get(int,int)> -> _SOURCE_
<android.renderscript.Matrix3f: float[] getArray()> -> _SOURCE_
<android.renderscript.Matrix3f: void load(android.renderscript.Matrix3f)> -> _SINK_
<android.renderscript.Matrix3f: void loadRotate(float,float,float,float)> -> _SOURCE_
<android.renderscript.Matrix3f: void set(int,int,float)> -> _SINK_
<android.renderscript.ScriptGroup: Object[] execute(Object[])> -> _SINK_
<android.renderscript.ScriptGroup: void setOutput(android.renderscript.Script.KernelID,android.renderscript.Allocation)> -> _SOURCE_
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup.Builder addConnection(android.renderscript.Type,android.renderscript.Script.KernelID,android.renderscript.Script.FieldID)> -> _SINK_
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup.Builder addConnection(android.renderscript.Type,android.renderscript.Script.KernelID,android.renderscript.Script.KernelID)> -> _SINK_
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup create()> -> _SINK_
<android.renderscript.ScriptGroup.Builder2: android.renderscript.ScriptGroup.Input addInput()> -> _SINK_
<android.renderscript.ScriptIntrinsic3DLUT: ScriptIntrinsic3DLUT create(android.renderscript.RenderScript,android.renderscript.Element)> -> _SINK_
<android.renderscript.ScriptIntrinsic3DLUT: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.renderscript.ScriptIntrinsic3DLUT: void setLUT(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.Script.LaunchOptions: int getXEnd()> -> _SOURCE_
<android.renderscript.Script.LaunchOptions: int getXStart()> -> _SOURCE_
<android.renderscript.Script.LaunchOptions: int getYEnd()> -> _SOURCE_
<android.renderscript.Script.LaunchOptions: int getYStart()> -> _SOURCE_
<android.renderscript.Script.LaunchOptions: int getZEnd()> -> _SOURCE_
<android.renderscript.Script.LaunchOptions: int getZStart()> -> _SOURCE_
<android.renderscript.Script.LaunchOptions: android.renderscript.Script.LaunchOptions setX(int,int)> -> _SINK_
<android.renderscript.Script.LaunchOptions: android.renderscript.Script.LaunchOptions setY(int,int)> -> _SINK_
<android.renderscript.Script.LaunchOptions: android.renderscript.Script.LaunchOptions setZ(int,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: ScriptIntrinsicBlend create(android.renderscript.RenderScript,android.renderscript.Element)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstAtop()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstIn()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstOut()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstOver()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDMultiply()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrc()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcAtop()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcIn()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcOut()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcOver()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDXor()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicYuvToRGB: void forEach(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.Script.FieldID getFieldID_Input()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicYuvToRGB: void setInput(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicLUT: ScriptIntrinsicLUT create(android.renderscript.RenderScript,android.renderscript.Element)> -> _SINK_
<android.renderscript.ScriptIntrinsicLUT: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicLUT: void setAlpha(int,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicLUT: void setBlue(int,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicLUT: void setGreen(int,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicLUT: void setRed(int,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.Script.FieldID getFieldID_Input()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)> -> _SINK_
<android.renderscript.ScriptIntrinsicResize: android.renderscript.Script.FieldID getFieldID_Input()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicResize: android.renderscript.Script.KernelID getKernelID_bicubic()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicResize: void setInput(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void CHER(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void CHER2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void CHERK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void CSYMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void CTRMM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void CTRSM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBLAS: void CTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBLAS: void DGEMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBLAS: void DGER(double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBLAS: void SGER(float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicBLAS: void SSYMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void SSYMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void SSYR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void SSYR2K(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void STRMM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void ZGEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void ZGEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)> -> _SINK_
<android.renderscript.ScriptIntrinsicBLAS: void ZTRMM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)> -> _SINK_
<android.renderscript.Element: android.renderscript.Element getChild(java.lang.String)> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element getChild(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element requireChild(java.lang.String)> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element requireChild(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Element: void setEndElementListener(android.sax.EndElementListener)> -> _SOURCE_
<android.renderscript.ScriptIntrinsicHistogram: ScriptIntrinsicHistogram create(android.renderscript.RenderScript,android.renderscript.Element)> -> _SINK_
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script.FieldID getFieldID_Input()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script.KernelID getKernelID_Separate()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicHistogram: void setDotCoefficients(float,float,float,float)> -> _SINK_
<android.renderscript.ScriptIntrinsicHistogram: void setOutput(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.Type: int getCount()> -> _SOURCE_
<android.renderscript.Type: android.renderscript.Element getElement()> -> _SOURCE_
<android.renderscript.Type: int getX()> -> _SOURCE_
<android.renderscript.Type: int getY()> -> _SOURCE_
<android.renderscript.Type: int getYuv()> -> _SINK_
<android.renderscript.Type: int getZ()> -> _SOURCE_
<android.renderscript.Type: boolean hasFaces()> -> _SOURCE_
<android.renderscript.Type: boolean hasMipmaps()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(float,float,float,float)> -> _SINK_
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(android.renderscript.Float4)> -> _SINK_
<android.renderscript.ScriptIntrinsicColorMatrix: void setColorMatrix(android.renderscript.Matrix3f)> -> _SINK_
<android.renderscript.ScriptIntrinsicColorMatrix: void setColorMatrix(android.renderscript.Matrix4f)> -> _SINK_
<android.renderscript.ScriptIntrinsicColorMatrix: void setGreyscale()> -> _SINK_
<android.renderscript.ScriptIntrinsicColorMatrix: void setRGBtoYUV()> -> _SINK_
<android.se.omapi.Channel: byte[] getSelectResponse()> -> _SOURCE_
<android.se.omapi.Channel: android.se.omapi.Session getSession()> -> _SOURCE_
<android.se.omapi.Channel: boolean isBasicChannel()> -> _SOURCE_
<android.se.omapi.Channel: boolean selectNext()> -> _SINK_
<android.se.omapi.Channel: byte[] transmit(byte[])> -> _SINK_
<android.sax.RootElement: java.net.ContentHandler getContentHandler()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicConvolve3x3: void forEach(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicConvolve3x3: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.Script.FieldID getFieldID_Input()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.se.omapi.Reader: java.lang.String getName()> -> _SOURCE_
<android.se.omapi.Reader: android.se.omapi.SEService getSEService()> -> _SOURCE_
<android.se.omapi.Reader: boolean isSecureElementPresent()> -> _SOURCE_
<android.se.omapi.Reader: android.se.omapi.Session openSession()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicConvolve5x5: void forEach(android.renderscript.Allocation)> -> _SINK_
<android.renderscript.ScriptIntrinsicConvolve5x5: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)> -> _SINK_
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.Script.FieldID getFieldID_Input()> -> _SOURCE_
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.Script.KernelID getKernelID()> -> _SOURCE_
<android.renderscript.ScriptGroup.Closure: android.renderscript.ScriptGroup.Future getGlobal(android.renderscript.Script.FieldID)> -> _SOURCE_
<android.renderscript.ScriptGroup.Closure: android.renderscript.ScriptGroup.Future getReturn()> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Reader getReader()> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[])> -> _SINK_
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[],byte)> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[],byte)> -> _SINK_
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[])> -> _SINK_
<android.security.AppUriAuthenticationPolicy.Builder: android.security.AppUriAuthenticationPolicy.Builder addAppAndUriMapping(java.lang.String,android.net.Uri,java.lang.String)> -> _SINK_
<android.security.AttestedKeyPair: List<Certificate> getAttestationRecord()> -> _SOURCE_
<android.security.AttestedKeyPair: java.security.KeyPair getKeyPair()> -> _SOURCE_
<android.security.AppUriAuthenticationPolicy: int describeContents()> -> _SOURCE_
<android.security.AppUriAuthenticationPolicy: java.util.Map> getAppAndUriMappings()> -> _SOURCE_
<android.security.ConfirmationPrompt.Builder: android.security.ConfirmationPrompt.Builder setExtraData(byte[])> -> _SINK_
<android.security.ConfirmationPrompt.Builder: android.security.ConfirmationPrompt.Builder setPromptText(java.lang.CharSequence)> -> _SINK_
<android.security.FileIntegrityManager: boolean isApkVeritySupported()> -> _SOURCE_
<android.security.FileIntegrityManager: boolean isAppSourceCertificateTrusted(java.security.cert.X509Certificate)> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: android.content.Context getContext()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.sql.Date getEndDate()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: int getKeySize()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.lang.String getKeyType()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.lang.String getKeystoreAlias()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.math.BigInteger getSerialNumber()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.sql.Date getStartDate()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal getSubjectDN()> -> _SOURCE_
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)> -> _SOURCE_
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted()> -> _SOURCE_
<android.security.KeyStoreParameter.Builder: android.security.KeyStoreParameter build()> -> _SOURCE_
<android.security.KeyStoreParameter.Builder: android.security.KeyStoreParameter.Builder setEncryptionRequired(boolean)> -> _SINK_
<android.security.identity.AccessControlProfile.Builder: android.security.identity.AccessControlProfile.Builder setReaderCertificate(java.security.cert.X509Certificate)> -> _SINK_
<android.security.identity.AccessControlProfile.Builder: android.security.identity.AccessControlProfile.Builder setUserAuthenticationRequired(boolean)> -> _SINK_
<android.security.identity.AccessControlProfile.Builder: android.security.identity.AccessControlProfile.Builder setUserAuthenticationTimeout(long)> -> _SINK_
<android.security.ConfirmationPrompt: boolean isSupported(android.content.Context)> -> _SOURCE_
<android.security.KeyStoreParameter: boolean isEncryptionRequired()> -> _SINK_
<android.security.identity.IdentityCredentialStore: IdentityCredential getCredentialByName(java.lang.String,int)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: IdentityCredentialStore getDirectAccessInstance(android.content.Context)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: IdentityCredentialStore getInstance(android.content.Context)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: String[] getSupportedDocTypes()> -> _SOURCE_
<android.se.omapi.SEService: Reader[] getReaders()> -> _SOURCE_
<android.se.omapi.SEService: android.se.omapi.Reader getUiccReader(int)> -> _SOURCE_
<android.se.omapi.SEService: java.lang.String getVersion()> -> _SOURCE_
<android.se.omapi.SEService: boolean isConnected()> -> _SOURCE_
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,String[],Principal[],java.lang.String,int,java.lang.String)> -> _SINK_
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,String[],Principal[],android.net.Uri,java.lang.String)> -> _SINK_
<android.security.KeyChain: Intent createInstallIntent()> -> _SOURCE_
<android.security.KeyChain: Intent createManageCredentialsIntent(android.security.AppUriAuthenticationPolicy)> -> _SOURCE_
<android.security.KeyChain: X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)> -> _SOURCE_
<android.security.KeyChain: AppUriAuthenticationPolicy getCredentialManagementAppPolicy(android.content.Context)> -> _SOURCE_
<android.security.KeyChain: PrivateKey getPrivateKey(android.content.Context,java.lang.String)> -> _SOURCE_
<android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)> -> _SOURCE_
<android.security.KeyChain: boolean isCredentialManagementApp(android.content.Context)> -> _SOURCE_
<android.security.KeyChain: boolean isKeyAlgorithmSupported(java.lang.String)> -> _SOURCE_
<android.security.identity.WritableIdentityCredential: Collection<X509Certificate> getCredentialKeyCertificateChain(byte[])> -> _SOURCE_
<android.security.identity.WritableIdentityCredential: byte[] personalize(android.security.identity.PersonalizationData)> -> _SINK_
<android.security.identity.ResultData: byte[] getAuthenticatedData()> -> _SOURCE_
<android.security.identity.ResultData: byte[] getEntry(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: Collection<String> getEntryNames(java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: byte[] getMessageAuthenticationCode()> -> _SOURCE_
<android.security.identity.ResultData: Collection<String> getNamespaces()> -> _SOURCE_
<android.security.identity.ResultData: Collection<String> getRetrievedEntryNames(java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: byte[] getStaticAuthenticationData()> -> _SOURCE_
<android.security.identity.ResultData: int getStatus(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.keystore.BackendBusyException: long getBackOffHintMillis()> -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] decryptMessageFromReader(byte[])> -> _SINK_
<android.security.identity.IdentityCredential: byte[] encryptMessageToReader(byte[])> -> _SINK_
<android.security.identity.IdentityCredential: Collection<X509Certificate> getAuthKeysNeedingCertification()> -> _SOURCE_
<android.security.identity.IdentityCredential: int[] getAuthenticationDataUsageCount()> -> _SOURCE_
<android.security.identity.IdentityCredential: Collection<X509Certificate> getCredentialKeyCertificateChain()> -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] proveOwnership(byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,java.time.Instant,byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] update(android.security.identity.PersonalizationData)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String getAttestKeyAlias()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: String[] getBlockModes()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.sql.Date getCertificateNotAfter()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.sql.Date getCertificateNotBefore()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: String[] getDigests()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: String[] getEncryptionPaddings()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getKeySize()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.sql.Date getKeyValidityForConsumptionEnd()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.sql.Date getKeyValidityForOriginationEnd()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.sql.Date getKeyValidityStart()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getMaxUsageCount()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getPurposes()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: String[] getSignaturePaddings()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationType()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationValidityDurationSeconds()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isDevicePropertiesAttestationIncluded()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isUnlockedDeviceRequired()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationRequired()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isUserConfirmationRequired()> -> _SOURCE_
<android.security.identity.PersonalizationData.Builder: android.security.identity.PersonalizationData.Builder addAccessControlProfile(android.security.identity.AccessControlProfile)> -> _SINK_
<android.security.identity.AccessControlProfileId: int getId()> -> _SOURCE_
<android.security.keystore.KeyInfo: String[] getBlockModes()> -> _SOURCE_
<android.security.keystore.KeyInfo: String[] getDigests()> -> _SOURCE_
<android.security.keystore.KeyInfo: String[] getEncryptionPaddings()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getKeySize()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.sql.Date getKeyValidityForConsumptionEnd()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.sql.Date getKeyValidityForOriginationEnd()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.sql.Date getKeyValidityStart()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.lang.String getKeystoreAlias()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getOrigin()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getPurposes()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getRemainingUsageCount()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getSecurityLevel()> -> _SOURCE_
<android.security.keystore.KeyInfo: String[] getSignaturePaddings()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getUserAuthenticationType()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getUserAuthenticationValidityDurationSeconds()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isInsideSecureHardware()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isInvalidatedByBiometricEnrollment()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequired()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequirementEnforcedBySecureHardware()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isUserConfirmationRequired()> -> _SOURCE_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setBlockModes(String[])> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setDigests(String[])> -> _SOURCE_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setEncryptionPaddings(String[])> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setIsStrongBoxBacked(boolean)> -> _SOURCE_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setKeyValidityForConsumptionEnd(java.sql.Date)> -> _SOURCE_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setKeyValidityForOriginationEnd(java.sql.Date)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setMaxUsageCount(int)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setRandomizedEncryptionRequired(boolean)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setSignaturePaddings(String[])> -> _SOURCE_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUnlockedDeviceRequired(boolean)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationParameters(int,int)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationRequired(boolean)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationValidWhileOnBody(boolean)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationValidityDurationSeconds(int)> -> _SINK_
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserConfirmationRequired(boolean)> -> _SINK_
<android.service.autofill.CharSequenceTransformation: int describeContents()> -> _SOURCE_
<android.service.autofill.CharSequenceTransformation: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.BatchUpdates: int describeContents()> -> _SOURCE_
<android.service.autofill.BatchUpdates: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.DateValueSanitizer: int describeContents()> -> _SOURCE_
<android.service.autofill.DateValueSanitizer: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.FieldClassification: List<FieldClassification.Match> getMatches()> -> _SOURCE_
<android.service.autofill.FieldClassification: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec build()> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setAttestationChallenge(byte[])> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setBlockModes(String[])> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateNotAfter(java.sql.Date)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateNotBefore(java.sql.Date)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateSerialNumber(java.math.BigInteger)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateSubject(javax.security.auth.x500.X500Principal)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setDevicePropertiesAttestationIncluded(boolean)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setDigests(String[])> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setEncryptionPaddings(String[])> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setIsStrongBoxBacked(boolean)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeySize(int)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeyValidityForConsumptionEnd(java.sql.Date)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeyValidityForOriginationEnd(java.sql.Date)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setMaxUsageCount(int)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setRandomizedEncryptionRequired(boolean)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setSignaturePaddings(String[])> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUnlockedDeviceRequired(boolean)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationParameters(int,int)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationRequired(boolean)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationValidWhileOnBody(boolean)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationValidityDurationSeconds(int)> -> _SINK_
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserConfirmationRequired(boolean)> -> _SINK_
<android.service.autofill.FieldClassification.Match: java.lang.String getCategoryId()> -> _SOURCE_
<android.service.autofill.FieldClassification.Match: float getScore()> -> _SOURCE_
<android.service.autofill.FieldClassification.Match: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.DateTransformation: int describeContents()> -> _SOURCE_
<android.service.autofill.DateTransformation: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.AutofillService: FillEventHistory getFillEventHistory()> -> _SOURCE_
<android.service.autofill.AutofillService: void onFillRequest(android.service.autofill.FillRequest,android.os.CancellationSignal,android.service.autofill.FillCallback)> -> _SINK_
<android.service.autofill.AutofillService: void onSavedDatasetsInfoRequest(android.service.autofill.SavedDatasetsInfoCallback)> -> _SINK_
<android.service.autofill.CustomDescription: int describeContents()> -> _SOURCE_
<android.service.autofill.CustomDescription: java.lang.String toString()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec build()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)> -> _SINK_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setEncryptionRequired()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setEndDate(java.sql.Date)> -> _SINK_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setKeySize(int)> -> _SINK_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setKeyType(java.lang.String)> -> _SINK_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setSerialNumber(java.math.BigInteger)> -> _SINK_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setStartDate(java.sql.Date)> -> _SINK_
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setSubject(javax.security.auth.x500.X500Principal)> -> _SINK_
<android.service.autofill.Dataset: int describeContents()> -> _SOURCE_
<android.service.autofill.BatchUpdates.Builder: android.service.autofill.BatchUpdates.Builder transformChild(int,android.service.autofill.Transformation)> -> _SINK_
<android.service.autofill.BatchUpdates.Builder: android.service.autofill.BatchUpdates.Builder updateTemplate(android.widget.RemoteViews)> -> _SINK_
<android.service.autofill.FillContext: int describeContents()> -> _SOURCE_
<android.service.autofill.FillContext: int getRequestId()> -> _SOURCE_
<android.service.autofill.FillContext: android.app.assist.AssistStructure getStructure()> -> _SOURCE_
<android.service.autofill.FillContext: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setAuthentication(android.content.IntentSender)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setField(android.view.autofill.AutofillId,java.lang.reflect.Field)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setId(java.lang.String)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setInlinePresentation(android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setInlinePresentation(android.service.autofill.InlinePresentation)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews,android.service.autofill.InlinePresentation)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews,android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews,android.service.autofill.InlinePresentation)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews,android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)> -> _SINK_
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews)> -> _SINK_
<android.service.autofill.FillEventHistory.Event: java.util.Map getChangedFields()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: android.os.Bundle getClientState()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: java.lang.String getDatasetId()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: java.util.Map getFieldsClassification()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: Set<String> getIgnoredDatasetIds()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: java.util.Map> getManuallyEnteredField()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: int getNoSaveUiReason()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: Set<String> getSelectedDatasetIds()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: int getType()> -> _SOURCE_
<android.service.autofill.FillEventHistory.Event: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.FillEventHistory: int describeContents()> -> _SOURCE_
<android.service.autofill.FillEventHistory: android.os.Bundle getClientState()> -> _SOURCE_
<android.service.autofill.FillEventHistory: List<FillEventHistory.Event> getEvents()> -> _SOURCE_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder disableAutofill(long)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setClientState(android.os.Bundle)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setDialogHeader(android.widget.RemoteViews)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFieldClassificationIds(AutofillId[])> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFillDialogTriggerIds(AutofillId[])> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFlags(int)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFooter(android.widget.RemoteViews)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setHeader(android.widget.RemoteViews)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setSaveInfo(android.service.autofill.SaveInfo)> -> _SINK_
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setUserData(android.service.autofill.UserData)> -> _SINK_
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription.Builder addChild(int,android.service.autofill.Transformation)> -> _SINK_
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription.Builder batchUpdate(android.service.autofill.Validator,android.service.autofill.BatchUpdates)> -> _SINK_
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription build()> -> _SOURCE_
<android.service.autofill.FillCallback: void onSuccess(android.service.autofill.FillResponse)> -> _SINK_
<android.service.autofill.SavedDatasetsInfoCallback: void onSuccess(Set<SavedDatasetsInfo>)> -> _SINK_
<android.service.autofill.FillResponse: int describeContents()> -> _SOURCE_
<android.service.autofill.SaveRequest: int describeContents()> -> _SOURCE_
<android.service.autofill.SaveRequest: android.os.Bundle getClientState()> -> _SOURCE_
<android.service.autofill.SaveRequest: List<String> getDatasetIds()> -> _SOURCE_
<android.service.autofill.SaveRequest: List<FillContext> getFillContexts()> -> _SOURCE_
<android.service.autofill.RegexValidator: int describeContents()> -> _SOURCE_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder addSanitizer(android.service.autofill.Sanitizer,AutofillId[])> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setCustomDescription(android.service.autofill.CustomDescription)> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setFlags(int)> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setNegativeAction(int,android.content.IntentSender)> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setOptionalIds(AutofillId[])> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setPositiveAction(int)> -> _SINK_
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setValidator(android.service.autofill.Validator)> -> _SINK_
<android.service.autofill.LuhnChecksumValidator: int describeContents()> -> _SOURCE_
<android.service.autofill.ImageTransformation: int describeContents()> -> _SOURCE_
<android.service.autofill.SaveCallback: void onSuccess(android.content.IntentSender)> -> _SINK_
<android.service.autofill.SaveCallback: void onSuccess()> -> _SINK_
<android.service.autofill.TextValueSanitizer: int describeContents()> -> _SOURCE_
<android.service.autofill.SavedDatasetsInfo: int getCount()> -> _SOURCE_
<android.service.autofill.SavedDatasetsInfo: java.lang.String getType()> -> _SINK_
<android.service.autofill.InlinePresentation: InlinePresentation createTooltipPresentation(android.app.slice.Slice,android.widget.inline.InlinePresentationSpec)> -> _SINK_
<android.service.autofill.InlinePresentation: int describeContents()> -> _SOURCE_
<android.service.autofill.InlinePresentation: android.widget.inline.InlinePresentationSpec getInlinePresentationSpec()> -> _SINK_
<android.service.autofill.InlinePresentation: android.app.slice.Slice getSlice()> -> _SINK_
<android.service.autofill.VisibilitySetterAction.Builder: android.service.autofill.VisibilitySetterAction.Builder setVisibility(int,int)> -> _SINK_
<android.service.autofill.UserData.Builder: android.service.autofill.UserData.Builder add(java.lang.String,java.lang.String)> -> _SINK_
<android.service.autofill.UserData.Builder: android.service.autofill.UserData.Builder setFieldClassificationAlgorithm(java.lang.String,android.os.Bundle)> -> _SINK_
<android.service.autofill.UserData.Builder: android.service.autofill.UserData.Builder setFieldClassificationAlgorithmForCategory(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.service.autofill.FillRequest: int describeContents()> -> _SOURCE_
<android.service.autofill.FillRequest: android.os.Bundle getClientState()> -> _SOURCE_
<android.service.autofill.FillRequest: android.content.IntentSender getDelayedFillIntentSender()> -> _SINK_
<android.service.autofill.FillRequest: List<FillContext> getFillContexts()> -> _SOURCE_
<android.service.autofill.FillRequest: int getFlags()> -> _SOURCE_
<android.service.autofill.FillRequest: int getId()> -> _SOURCE_
<android.service.autofill.FillRequest: android.view.inputmethod.InlineSuggestionsRequest getInlineSuggestionsRequest()> -> _SOURCE_
<android.service.autofill.FillRequest: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: int describeContents()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: int getCarrierId()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getGid1()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getGid2()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getImsi()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getMcc()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getMnc()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: int getSpecificCarrierId()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getSpn()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.UserData: int describeContents()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getId()> -> _SOURCE_
<android.service.autofill.UserData: int getMaxFieldClassificationIdsSize()> -> _SOURCE_
<android.service.autofill.UserData: int getMaxUserDataSize()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService.SendMmsResult: byte[] getSendConfPdu()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService.SendMmsResult: int getSendStatus()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService.SendSmsResult: int getMessageRef()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService.SendSmsResult: int getSendStatus()> -> _SOURCE_
<android.service.carrier.MessagePdu: int describeContents()> -> _SOURCE_
<android.service.carrier.MessagePdu: List<byte[]> getPdus()> -> _SOURCE_
<android.service.chooser.ChooserTarget: int describeContents()> -> _SOURCE_
<android.service.chooser.ChooserTarget: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.service.chooser.ChooserTarget: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.service.chooser.ChooserTarget: android.os.Bundle getIntentExtras()> -> _SOURCE_
<android.service.chooser.ChooserTarget: float getScore()> -> _SOURCE_
<android.service.chooser.ChooserTarget: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.service.chooser.ChooserTarget: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService.SendMultipartSmsResult: int[] getMessageRefs()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService.SendMultipartSmsResult: int getSendStatus()> -> _SOURCE_
<android.service.autofill.SaveInfo: int describeContents()> -> _SOURCE_
<android.service.autofill.SaveInfo: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService: void onDownloadMms(android.net.Uri,int,android.net.Uri,ResultCallback<Integer>)> -> _SINK_
<android.service.carrier.CarrierMessagingService: void onFilterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,ResultCallback<Boolean>)> -> _SOURCE_
<android.service.carrier.CarrierMessagingService: void onReceiveTextSms(android.service.carrier.MessagePdu,java.lang.String,int,int,ResultCallback<Integer>)> -> _SINK_
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,java.lang.String,int,ResultCallback<CarrierMessagingService.SendSmsResult>)> -> _SOURCE_
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,java.lang.String,int,int,ResultCallback<CarrierMessagingService.SendSmsResult>)> -> _SINK_
<android.service.carrier.CarrierMessagingService: void onSendMms(android.net.Uri,int,android.net.Uri,ResultCallback<CarrierMessagingService.SendMmsResult>)> -> _SINK_
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(List<String>,int,java.lang.String,ResultCallback<CarrierMessagingService.SendMultipartSmsResult>)> -> _SOURCE_
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(List<String>,int,java.lang.String,int,ResultCallback<CarrierMessagingService.SendMultipartSmsResult>)> -> _SINK_
<android.service.carrier.CarrierMessagingService: void onSendTextSms(java.lang.String,int,java.lang.String,int,ResultCallback<CarrierMessagingService.SendSmsResult>)> -> _SINK_
<android.service.carrier.CarrierMessagingService: void onSendTextSms(java.lang.String,int,java.lang.String,ResultCallback<CarrierMessagingService.SendSmsResult>)> -> _SOURCE_
<android.service.autofill.VisibilitySetterAction: int describeContents()> -> _SOURCE_
<android.service.autofill.VisibilitySetterAction: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierService: void notifyCarrierNetworkChange(int,boolean)> -> _SINK_
<android.service.carrier.CarrierService: void notifyCarrierNetworkChange(boolean)> -> _SOURCE_
<android.service.carrier.CarrierService: PersistableBundle onLoadConfig(android.service.carrier.CarrierIdentifier)> -> _SOURCE_
<android.service.carrier.CarrierService: android.os.PersistableBundle onLoadConfig(int,android.service.carrier.CarrierIdentifier)> -> _SINK_
<android.service.controls.ControlsProviderService: Publisher<Control> createPublisherFor(List<String>)> -> _SOURCE_
<android.service.controls.ControlsProviderService: Publisher<Control> createPublisherForAllAvailable()> -> _SOURCE_
<android.service.controls.ControlsProviderService: Publisher<Control> createPublisherForSuggested()> -> _SINK_
<android.service.controls.templates.ControlButton: int describeContents()> -> _SOURCE_
<android.service.controls.templates.StatelessTemplate: int getTemplateType()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: float getCurrentValue()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: java.lang.CharSequence getFormatString()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: float getMaxValue()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: float getMinValue()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: int getTemplateType()> -> _SOURCE_
<android.service.controls.actions.FloatAction: int getActionType()> -> _SOURCE_
<android.service.controls.actions.FloatAction: float getNewValue()> -> _SINK_
<android.service.controls.actions.CommandAction: int getActionType()> -> _SOURCE_
<android.service.controls.actions.BooleanAction: int getActionType()> -> _SOURCE_
<android.service.media.MediaBrowserService.BrowserRoot: android.os.Bundle getExtras()> -> _SOURCE_
<android.service.media.MediaBrowserService.BrowserRoot: java.lang.String getRootId()> -> _SOURCE_
<android.service.dreams.DreamService: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)> -> _SINK_
<android.service.dreams.DreamService: <T extends View> T findViewById(int)> -> _SOURCE_
<android.service.dreams.DreamService: android.view.Window getWindow()> -> _SOURCE_
<android.service.dreams.DreamService: android.view.WindowManager getWindowManager()> -> _SOURCE_
<android.service.dreams.DreamService: boolean isFullscreen()> -> _SOURCE_
<android.service.dreams.DreamService: boolean isInteractive()> -> _SOURCE_
<android.service.dreams.DreamService: android.view.View onCreatePanelView(int)> -> _SOURCE_
<android.service.dreams.DreamService: <T extends View> T requireViewById(int)> -> _SOURCE_
<android.service.dreams.DreamService: void setContentView(android.view.View)> -> _SINK_
<android.service.dreams.DreamService: void setContentView(int)> -> _SINK_
<android.service.dreams.DreamService: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)> -> _SINK_
<android.service.dreams.DreamService: void setFullscreen(boolean)> -> _SINK_
<android.service.dreams.DreamService: void setScreenBright(boolean)> -> _SINK_
<android.service.notification.NotificationListenerService.Ranking: boolean canBubble()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: boolean canShowBadge()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: android.app.NotificationChannel getChannel()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: android.content.pm.ShortcutInfo getConversationShortcutInfo()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: int getImportance()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: java.lang.CharSequence getImportanceExplanation()> -> _SINK_
<android.service.notification.NotificationListenerService.Ranking: java.lang.String getKey()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: long getLastAudiblyAlertedMillis()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: int getLockscreenVisibilityOverride()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: java.lang.String getOverrideGroupKey()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: int getRank()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: List<Notification.Action> getSmartActions()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: List<CharSequence> getSmartReplies()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: int getUserSentiment()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: boolean isAmbient()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: boolean isConversation()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: boolean isSuspended()> -> _SOURCE_
<android.service.notification.NotificationListenerService.Ranking: boolean matchesInterruptionFilter()> -> _SOURCE_
<android.service.media.MediaBrowserService: void dump(java.io.FileDescriptor,java.io.PrintWriter,String[])> -> _SOURCE_
<android.service.media.MediaBrowserService: Bundle getBrowserRootHints()> -> _SOURCE_
<android.service.media.MediaBrowserService: MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()> -> _SOURCE_
<android.service.media.MediaBrowserService: android.media.session.MediaSession.Token getSessionToken()> -> _SOURCE_
<android.service.media.MediaBrowserService: MediaBrowserService.BrowserRoot onGetRoot(java.lang.String,int,android.os.Bundle)> -> _SOURCE_
<android.service.media.MediaBrowserService: void onLoadChildren(java.lang.String,Result<List<MediaBrowser.MediaItem>>)> -> _SOURCE_
<android.service.media.MediaBrowserService: void onLoadChildren(java.lang.String,Result<List<MediaBrowser.MediaItem>>,android.os.Bundle)> -> _SOURCE_
<android.service.media.MediaBrowserService: void onLoadItem(java.lang.String,Result<MediaBrowser.MediaItem>)> -> _SOURCE_
<android.service.media.MediaBrowserService: void setSessionToken(android.media.session.MediaSession.Token)> -> _SINK_
<android.service.media.MediaBrowserService.Result: void detach()> -> _SINK_
<android.service.media.MediaBrowserService.Result: void sendResult(T)> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int describeContents()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int getCardHeightPx()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int getCardWidthPx()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int getIconSizePx()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int getMaxCards()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsResponse: int describeContents()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsResponse: List<WalletCard> getWalletCards()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: int describeContents()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: android.graphics.drawable.Icon getCardIcon()> -> _SINK_
<android.service.quickaccesswallet.WalletCard: java.lang.String getCardId()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: android.graphics.drawable.Icon getCardImage()> -> _SINK_
<android.service.quickaccesswallet.WalletCard: java.lang.CharSequence getCardLabel()> -> _SINK_
<android.service.quickaccesswallet.WalletCard: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy build()> -> _SINK_
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder hideAllVisualEffects()> -> _SINK_
<android.service.notification.StatusBarNotification: int describeContents()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getId()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getKey()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getOpPkg()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getOverrideGroupKey()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()> -> _SOURCE_
<android.service.notification.StatusBarNotification: long getPostTime()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getTag()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getUid()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getUserId()> -> _SOURCE_
<android.service.notification.StatusBarNotification: boolean isAppGroup()> -> _SOURCE_
<android.service.notification.StatusBarNotification: boolean isGroup()> -> _SOURCE_
<android.service.notification.StatusBarNotification: void setOverrideGroupKey(java.lang.String)> -> _SINK_
<android.service.notification.StatusBarNotification: java.lang.String toString()> -> _SOURCE_
<android.service.notification.NotificationListenerService: StatusBarNotification[] getActiveNotifications()> -> _SOURCE_
<android.service.notification.NotificationListenerService: int getCurrentInterruptionFilter()> -> _SOURCE_
<android.service.notification.NotificationListenerService: int getCurrentListenerHints()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService.RankingMap getCurrentRanking()> -> _SOURCE_
<android.service.notification.NotificationListenerService: List<NotificationChannelGroup> getNotificationChannelGroups(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.service.notification.NotificationListenerService: List<NotificationChannel> getNotificationChannels(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.service.notification.NotificationListenerService: StatusBarNotification[] getSnoozedNotifications()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void requestInterruptionFilter(int)> -> _SINK_
<android.service.notification.NotificationListenerService: void requestListenerHints(int)> -> _SINK_
<android.service.notification.NotificationListenerService: void snoozeNotification(java.lang.String,long)> -> _SINK_
<android.service.quickaccesswallet.WalletCard.Builder: android.service.quickaccesswallet.WalletCard.Builder setCardIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.service.quickaccesswallet.WalletCard.Builder: android.service.quickaccesswallet.WalletCard.Builder setCardLabel(java.lang.CharSequence)> -> _SINK_
<android.service.quickaccesswallet.GetWalletCardsError: int describeContents()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsError: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsError: java.lang.CharSequence getMessage()> -> _SOURCE_
<android.service.notification.ZenPolicy: int describeContents()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryAlarms()> -> _SINK_
<android.service.notification.ZenPolicy: int getPriorityCategoryConversations()> -> _SINK_
<android.service.notification.ZenPolicy: int getPriorityCategoryMedia()> -> _SINK_
<android.service.notification.ZenPolicy: int getPriorityCategoryMessages()> -> _SINK_
<android.service.notification.ZenPolicy: int getPriorityCategoryRepeatCallers()> -> _SINK_
<android.service.notification.ZenPolicy: int getPriorityConversationSenders()> -> _SINK_
<android.service.notification.ZenPolicy: int getPriorityMessageSenders()> -> _SINK_
<android.service.notification.ZenPolicy: int getVisualEffectPeek()> -> _SINK_
<android.service.notification.ZenPolicy: java.lang.String toString()> -> _SOURCE_
<android.service.notification.NotificationListenerService.RankingMap: int describeContents()> -> _SOURCE_
<android.service.notification.NotificationListenerService.RankingMap: String[] getOrderedKeys()> -> _SOURCE_
<android.service.notification.NotificationListenerService.RankingMap: boolean getRanking(java.lang.String,android.service.notification.NotificationListenerService.Ranking)> -> _SOURCE_
<android.service.voice.VisibleActivityInfo: int describeContents()> -> _SOURCE_
<android.service.voice.VisibleActivityInfo: android.service.voice.VoiceInteractionSession.ActivityId getActivityId()> -> _SOURCE_
<android.service.voice.VisibleActivityInfo: java.lang.String toString()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()> -> _SOURCE_
<android.service.quicksettings.Tile: int describeContents()> -> _SOURCE_
<android.service.quicksettings.Tile: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.service.quicksettings.Tile: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.service.quicksettings.Tile: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.service.quicksettings.Tile: int getState()> -> _SOURCE_
<android.service.quicksettings.Tile: java.lang.CharSequence getStateDescription()> -> _SOURCE_
<android.service.quicksettings.Tile: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.service.quicksettings.Tile: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.service.quicksettings.Tile: void setIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.service.quicksettings.Tile: void setLabel(java.lang.CharSequence)> -> _SINK_
<android.service.quicksettings.Tile: void setState(int)> -> _SINK_
<android.service.quicksettings.Tile: void setStateDescription(java.lang.CharSequence)> -> _SINK_
<android.service.quicksettings.Tile: void setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: void sendConfirmationResult(boolean,android.os.Bundle)> -> _SOURCE_
<android.service.quickaccesswallet.SelectWalletCardRequest: int describeContents()> -> _SOURCE_
<android.service.quickaccesswallet.SelectWalletCardRequest: java.lang.String getCardId()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.CommandRequest: java.lang.String getCommand()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.CommandRequest: void sendResult(android.os.Bundle)> -> _SINK_
<android.service.quicksettings.TileService: Tile getQsTile()> -> _SINK_
<android.service.quicksettings.TileService: boolean isLocked()> -> _SOURCE_
<android.service.quicksettings.TileService: boolean isSecure()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.PickOptionRequest: Option[] getOptions()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.PickOptionRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: int getDesiredMinimumHeight()> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: int getDesiredMinimumWidth()> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: android.content.Context getDisplayContext()> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: android.view.SurfaceHolder getSurfaceHolder()> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: boolean isPreview()> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: void onApplyWindowInsets(android.view.WindowInsets)> -> _SINK_
<android.service.wallpaper.WallpaperService.Engine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SOURCE_
<android.service.wallpaper.WallpaperService.Engine: android.app.WallpaperColors onComputeColors()> -> _SOURCE_
<android.service.voice.VoiceInteractionService: int getDisabledShowContext()> -> _SOURCE_
<android.service.voice.VoiceInteractionService: Set<String> onGetSupportedVoiceActions(Set<String>)> -> _SOURCE_
<android.service.voice.VoiceInteractionService: void setUiHints(android.os.Bundle)> -> _SINK_
<android.service.voice.VoiceInteractionService: void showSession(android.os.Bundle,int)> -> _SINK_
<android.service.vr.VrListenerService: boolean isVrModePackageEnabled(android.content.Context,android.content.ComponentName)> -> _SOURCE_
<android.speech.RecognizerIntent: Intent getVoiceDetailsIntent(android.content.Context)> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: void connect()> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: android.os.Bundle getExtras()> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: void getItem(java.lang.String,android.support.v4.media.MediaBrowserCompat.ItemCallback)> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: java.lang.String getRoot()> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: android.content.ComponentName getServiceComponent()> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: android.support.v4.media.session.MediaSessionCompat.Token getSessionToken()> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: boolean isConnected()> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: void search(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.SearchCallback)> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat: void sendCustomAction(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.CustomActionCallback)> -> _SINK_
<android.support.v4.media.MediaBrowserCompat: void subscribe(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.SubscriptionCallback)> -> _SINK_
<android.support.v4.media.MediaBrowserCompat: void subscribe(java.lang.String,android.support.v4.media.MediaBrowserCompat.SubscriptionCallback)> -> _SOURCE_
<android.service.wallpaper.WallpaperService: IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.support.v4.media.MediaBrowserCompat.ConnectionCallback: void onConnected()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.Request: java.lang.String getCallingPackage()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.Request: int getCallingUid()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession.Request: java.lang.String toString()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: int getCallerUid()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.CharSequence getCharSequenceText()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: int getPitch()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: int getSpeechRate()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getText()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getVoiceName()> -> _SINK_
<android.speech.tts.TextToSpeech.EngineInfo: java.lang.String toString()> -> _SOURCE_
<android.speech.SpeechRecognizer: void checkRecognitionSupport(android.content.Intent,java.util.concurrent.Executor,RecognitionSupportCallback)> -> _SOURCE_
<android.speech.SpeechRecognizer: boolean isOnDeviceRecognitionAvailable(android.content.Context)> -> _SOURCE_
<android.speech.SpeechRecognizer: boolean isRecognitionAvailable(android.content.Context)> -> _SOURCE_
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> -> _SOURCE_
<android.speech.SpeechRecognizer: void triggerModelDownload(android.content.Intent)> -> _SOURCE_
<android.service.textservice.SpellCheckerService: IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat build()> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setIconBitmap(android.graphics.Bitmap)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setIconUri(android.net.Uri)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setMediaId(java.lang.String)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setMediaUri(android.net.Uri)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.support.v4.media.MediaDescriptionCompat.Builder: android.support.v4.media.MediaDescriptionCompat.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.support.v4.media.MediaBrowserCompat.SearchCallback: void onSearchResult(java.lang.String,android.os.Bundle,List<MediaBrowserCompat.MediaItem>)> -> _SOURCE_
<android.speech.RecognitionListener: void onBeginningOfSpeech()> -> _SOURCE_
<android.speech.RecognitionListener: void onPartialResults(android.os.Bundle)> -> _SOURCE_
<android.speech.tts.UtteranceProgressListener: void onError(java.lang.String)> -> _SOURCE_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,int)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.io.File)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,android.net.Uri)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.CharSequence,java.io.File)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,int)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.CharSequence,java.lang.String,int)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.CharSequence,android.net.Uri)> -> _SINK_
<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()> -> _SINK_
<android.speech.tts.TextToSpeech: Set<Locale> getAvailableLanguages()> -> _SOURCE_
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()> -> _SOURCE_
<android.speech.tts.TextToSpeech: androidx.compose.ui.text.intl.Locale getDefaultLanguage()> -> _SOURCE_
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getDefaultVoice()> -> _SOURCE_
<android.speech.tts.TextToSpeech: List<TextToSpeech.EngineInfo> getEngines()> -> _SOURCE_
<android.speech.tts.TextToSpeech: Set<String> getFeatures(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.speech.tts.TextToSpeech: androidx.compose.ui.text.intl.Locale getLanguage()> -> _SOURCE_
<android.speech.tts.TextToSpeech: int getMaxSpeechInputLength()> -> _SINK_
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getVoice()> -> _SOURCE_
<android.speech.tts.TextToSpeech: Set<Voice> getVoices()> -> _SOURCE_
<android.speech.tts.TextToSpeech: int isLanguageAvailable(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,Hashjava.util.Map -> _SOURCE_
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,android.os.Bundle,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int playSilentUtterance(long,int,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int setAudioAttributes(android.media.AudioAttributes)> -> _SINK_
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)> -> _SOURCE_
<android.speech.tts.TextToSpeech: int setLanguage(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech.OnUtteranceCompletedListener)> -> _SOURCE_
<android.speech.tts.TextToSpeech: int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)> -> _SINK_
<android.speech.tts.TextToSpeech: int setPitch(float)> -> _SINK_
<android.speech.tts.TextToSpeech: int setSpeechRate(float)> -> _SINK_
<android.speech.tts.TextToSpeech: int setVoice(android.speech.tts.Voice)> -> _SINK_
<android.speech.tts.TextToSpeech: int speak(java.lang.CharSequence,int,android.os.Bundle,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,Hashjava.util.Map -> _SOURCE_
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.CharSequence,android.os.Bundle,android.os.ParcelFileDescriptor,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.CharSequence,android.os.Bundle,java.io.File,java.lang.String)> -> _SINK_
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,Hashjava.util.Map -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: void adjustVolume(int,int)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat: android.os.Bundle getExtras()> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat: long getFlags()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: java.lang.Object getMediaController()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: MediaControllerCompat getMediaController(android.app.Activity)> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: android.support.v4.media.MediaMetadataCompat getMetadata()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: java.lang.String getPackageName()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: android.support.v4.media.session.MediaControllerCompat.PlaybackInfo getPlaybackInfo()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: android.support.v4.media.session.PlaybackStateCompat getPlaybackState()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: List<MediaSessionCompat.QueueItem> getQueue()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: java.lang.CharSequence getQueueTitle()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: int getRatingType()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: android.os.Bundle getSessionInfo()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: android.support.v4.media.session.MediaSessionCompat.Token getSessionToken()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: boolean isCaptioningEnabled()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: boolean isSessionReady()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat: void setMediaController(android.app.Activity,android.support.v4.media.session.MediaControllerCompat)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat: void setVolumeTo(int,int)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void setCaptioningEnabled(boolean)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void setPlaybackSpeed(float)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void setRating(android.support.v4.media.RatingCompat,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void setRating(android.support.v4.media.RatingCompat)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void setRepeatMode(int)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.TransportControls: void setShuffleMode(int)> -> _SINK_
<android.speech.RecognitionService.Callback: void bufferReceived(byte[])> -> _SINK_
<android.speech.RecognitionService.Callback: void endOfSegmentedSession()> -> _SINK_
<android.speech.RecognitionService.Callback: android.content.AttributionSource getCallingAttributionSource()> -> _SOURCE_
<android.speech.RecognitionService.Callback: int getCallingUid()> -> _SOURCE_
<android.speech.RecognitionService.Callback: void rmsChanged(float)> -> _SINK_
<android.speech.tts.TextToSpeechService: java.lang.String onGetDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.speech.tts.TextToSpeechService: List<Voice> onGetVoices()> -> _SINK_
<android.speech.tts.TextToSpeechService: int onIsValidVoiceName(java.lang.String)> -> _SOURCE_
<android.speech.tts.TextToSpeechService: int onLoadVoice(java.lang.String)> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.PlaybackInfo: androidx.media.AudioAttributesCompat getAudioAttributes()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat.PlaybackInfo: int getAudioStream()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat.PlaybackInfo: int getCurrentVolume()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat.PlaybackInfo: int getMaxVolume()> -> _SINK_
<android.support.v4.media.session.MediaControllerCompat.PlaybackInfo: int getPlaybackType()> -> _SOURCE_
<android.support.v4.media.session.MediaControllerCompat.PlaybackInfo: int getVolumeControl()> -> _SOURCE_
<android.speech.RecognitionService: android.content.Context createContext(android.content.ContextParams)> -> _SINK_
<android.speech.RecognitionService: void onCheckRecognitionSupport(android.content.Intent,RecognitionService.SupportCallback)> -> _SOURCE_
<android.speech.RecognitionService: void onTriggerModelDownload(android.content.Intent)> -> _SOURCE_
<android.support.v4.media.session.MediaSessionCompat: MediaSessionManager.RemoteUserInfo getCurrentControllerInfo()> -> _SOURCE_
<android.support.v4.media.session.MediaSessionCompat: java.lang.Object getMediaSession()> -> _SOURCE_
<android.support.v4.media.session.MediaSessionCompat: java.lang.Object getRemoteControlClient()> -> _SOURCE_
<android.support.v4.media.session.MediaSessionCompat: android.support.v4.media.session.MediaSessionCompat.Token getSessionToken()> -> _SOURCE_
<android.support.v4.media.session.MediaSessionCompat: boolean isActive()> -> _SOURCE_
<android.support.v4.media.session.MediaSessionCompat: void setActive(boolean)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setCaptioningEnabled(boolean)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setExtras(android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setFlags(int)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setMetadata(android.support.v4.media.MediaMetadataCompat)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setPlaybackToLocal(int)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setQueueTitle(java.lang.CharSequence)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setRatingType(int)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setRepeatMode(int)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setSessionActivity(android.app.PendingIntent)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat: void setShuffleMode(int)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder addCustomAction(java.lang.String,java.lang.String,int)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder addCustomAction(android.support.v4.media.session.PlaybackStateCompat.CustomAction)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setActions(long)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setActiveQueueItemId(long)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setBufferedPosition(long)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setErrorMessage(int,java.lang.CharSequence)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setState(int,long,float)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.Builder: android.support.v4.media.session.PlaybackStateCompat.Builder setState(int,long,float,long)> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.CustomAction.Builder: android.support.v4.media.session.PlaybackStateCompat.CustomAction build()> -> _SINK_
<android.support.v4.media.session.PlaybackStateCompat.CustomAction.Builder: android.support.v4.media.session.PlaybackStateCompat.CustomAction.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat.Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat.Callback: void onSetPlaybackSpeed(float)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat.Callback: void onSetRating(android.support.v4.media.RatingCompat)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat.Callback: void onSetRating(android.support.v4.media.RatingCompat,android.os.Bundle)> -> _SINK_
<android.support.v4.media.session.MediaSessionCompat.Callback: void onSetShuffleMode(int)> -> _SINK_
<android.support.v4.media.MediaMetadataCompat.Builder: android.support.v4.media.MediaMetadataCompat build()> -> _SINK_
<android.support.v4.media.MediaMetadataCompat.Builder: android.support.v4.media.MediaMetadataCompat.Builder putBitmap(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.support.v4.media.MediaMetadataCompat.Builder: android.support.v4.media.MediaMetadataCompat.Builder putLong(java.lang.String,long)> -> _SINK_
<android.support.v4.media.MediaMetadataCompat.Builder: android.support.v4.media.MediaMetadataCompat.Builder putRating(java.lang.String,android.support.v4.media.RatingCompat)> -> _SINK_
<android.support.v4.media.MediaMetadataCompat.Builder: android.support.v4.media.MediaMetadataCompat.Builder putString(java.lang.String,java.lang.String)> -> _SINK_
<android.support.v4.media.MediaMetadataCompat.Builder: android.support.v4.media.MediaMetadataCompat.Builder putText(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.system.Int64Ref: java.lang.String toString()> -> _SOURCE_
<android.system.ErrnoException: java.lang.String getMessage()> -> _SINK_
<android.system.StructStat: java.lang.String toString()> -> _SOURCE_
<android.system.StructPollfd: java.lang.String toString()> -> _SOURCE_
<android.telecom.Call.RttCall: int getRttAudioMode()> -> _SOURCE_
<android.telecom.Call.RttCall: java.lang.String read()> -> _SOURCE_
<android.telecom.Call.RttCall: void setRttMode(int)> -> _SINK_
<android.telecom.Call.RttCall: void write(java.lang.String)> -> _SINK_
<android.system.StructStatVfs: java.lang.String toString()> -> _SOURCE_
<android.system.StructUtsname: java.lang.String toString()> -> _SOURCE_
<android.telecom.Connection.RttTextStream: void write(java.lang.String)> -> _SINK_
<android.system.Os: boolean access(java.lang.String,int)> -> _SOURCE_
<android.system.Os: void chmod(java.lang.String,int)> -> _SINK_
<android.system.Os: void chown(java.lang.String,int,int)> -> _SINK_
<android.system.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)> -> _SINK_
<android.system.Os: void connect(java.io.FileDescriptor,java.net.SocketAddress)> -> _SINK_
<android.system.Os: String[] environ()> -> _SINK_
<android.system.Os: void fchown(java.io.FileDescriptor,int,int)> -> _SINK_
<android.system.Os: int fcntlInt(java.io.FileDescriptor,int,int)> -> _SINK_
<android.system.Os: StructStat fstat(java.io.FileDescriptor)> -> _SOURCE_
<android.system.Os: String gai_strerror(int)> -> _SOURCE_
<android.system.Os: int getegid()> -> _SOURCE_
<android.system.Os: String getenv(java.lang.String)> -> _SOURCE_
<android.system.Os: int geteuid()> -> _SOURCE_
<android.system.Os: int getgid()> -> _SOURCE_
<android.system.Os: SocketAddress getpeername(java.io.FileDescriptor)> -> _SOURCE_
<android.system.Os: int getpid()> -> _SOURCE_
<android.system.Os: int getppid()> -> _SOURCE_
<android.system.Os: SocketAddress getsockname(java.io.FileDescriptor)> -> _SOURCE_
<android.system.Os: StructTimeval getsockoptTimeval(java.io.FileDescriptor,int,int)> -> _SOURCE_
<android.system.Os: int gettid()> -> _SOURCE_
<android.system.Os: int getuid()> -> _SOURCE_
<android.system.Os: byte[] getxattr(java.lang.String,java.lang.String)> -> _SOURCE_
<android.system.Os: String if_indextoname(int)> -> _SOURCE_
<android.system.Os: int if_nametoindex(java.lang.String)> -> _SOURCE_
<android.system.Os: long lseek(java.io.FileDescriptor,long,int)> -> _SINK_
<android.system.Os: StructStat lstat(java.lang.String)> -> _SOURCE_
<android.system.Os: void mincore(long,long,byte[])> -> _SINK_
<android.system.Os: void mkdir(java.lang.String,int)> -> _SINK_
<android.system.Os: void mkfifo(java.lang.String,int)> -> _SOURCE_
<android.system.Os: void mlock(long,long)> -> _SOURCE_
<android.system.Os: void munlock(long,long)> -> _SOURCE_
<android.system.Os: void munmap(long,long)> -> _SINK_
<android.system.Os: FileDescriptor open(java.lang.String,int,int)> -> _SINK_
<android.system.Os: int poll(StructPollfd[],int)> -> _SINK_
<android.system.Os: int prctl(int,long,long,long,long)> -> _SOURCE_
<android.system.Os: int pwrite(java.io.FileDescriptor,byte[],int,int,long)> -> _SINK_
<android.system.Os: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)> -> _SINK_
<android.system.Os: String readlink(java.lang.String)> -> _SOURCE_
<android.system.Os: int readv(java.io.FileDescriptor,Object[],int[],int[])> -> _SOURCE_
<android.system.Os: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)> -> _SOURCE_
<android.system.Os: int recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)> -> _SOURCE_
<android.system.Os: int recvmsg(java.io.FileDescriptor,android.system.StructMsghdr,int)> -> _SOURCE_
<android.system.Os: void rename(java.lang.String,java.lang.String)> -> _SINK_
<android.system.Os: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.system.Int64Ref,long)> -> _SINK_
<android.system.Os: int sendmsg(java.io.FileDescriptor,android.system.StructMsghdr,int)> -> _SINK_
<android.system.Os: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.SocketAddress)> -> _SINK_
<android.system.Os: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> -> _SINK_
<android.system.Os: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> -> _SINK_
<android.system.Os: void setegid(int)> -> _SOURCE_
<android.system.Os: void setenv(java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.system.Os: void seteuid(int)> -> _SOURCE_
<android.system.Os: void setgid(int)> -> _SOURCE_
<android.system.Os: int setsid()> -> _SOURCE_
<android.system.Os: void setsockoptInt(java.io.FileDescriptor,int,int,int)> -> _SINK_
<android.system.Os: void setsockoptTimeval(java.io.FileDescriptor,int,int,android.system.StructTimeval)> -> _SINK_
<android.system.Os: void setuid(int)> -> _SOURCE_
<android.system.Os: void setxattr(java.lang.String,java.lang.String,byte[],int)> -> _SINK_
<android.system.Os: StructStat stat(java.lang.String)> -> _SOURCE_
<android.system.Os: StructStatVfs statvfs(java.lang.String)> -> _SOURCE_
<android.system.Os: String strsignal(int)> -> _SINK_
<android.system.Os: void symlink(java.lang.String,java.lang.String)> -> _SOURCE_
<android.system.Os: long sysconf(int)> -> _SOURCE_
<android.system.Os: void tcdrain(java.io.FileDescriptor)> -> _SINK_
<android.system.Os: void tcsendbreak(java.io.FileDescriptor,int)> -> _SOURCE_
<android.system.Os: int write(java.io.FileDescriptor,byte[],int,int)> -> _SINK_
<android.system.Os: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> -> _SINK_
<android.system.Os: int writev(java.io.FileDescriptor,Object[],int[],int[])> -> _SINK_
<android.system.OsConstants: boolean S_ISBLK(int)> -> _SOURCE_
<android.system.OsConstants: boolean S_ISCHR(int)> -> _SOURCE_
<android.system.OsConstants: boolean S_ISDIR(int)> -> _SOURCE_
<android.system.OsConstants: boolean S_ISFIFO(int)> -> _SOURCE_
<android.system.OsConstants: boolean S_ISLNK(int)> -> _SOURCE_
<android.system.OsConstants: boolean S_ISREG(int)> -> _SOURCE_
<android.system.OsConstants: boolean S_ISSOCK(int)> -> _SOURCE_
<android.system.OsConstants: int WEXITSTATUS(int)> -> _SOURCE_
<android.system.OsConstants: int WSTOPSIG(int)> -> _SOURCE_
<android.system.OsConstants: int WTERMSIG(int)> -> _SOURCE_
<android.system.OsConstants: String errnoName(int)> -> _SOURCE_
<android.system.OsConstants: String gaiName(int)> -> _SOURCE_
<android.telecom.DisconnectCause: int describeContents()> -> _SOURCE_
<android.telecom.DisconnectCause: int getCode()> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.String getReason()> -> _SOURCE_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder addSupportedUriScheme(java.lang.String)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount build()> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setAddress(android.net.Uri)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setCapabilities(int)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setExtras(android.os.Bundle)> -> _SOURCE_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setHighlightColor(int)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setShortDescription(java.lang.CharSequence)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setSubscriptionAddress(android.net.Uri)> -> _SINK_
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setSupportedUriSchemes(List<String>)> -> _SOURCE_
<android.telecom.GatewayInfo: int describeContents()> -> _SOURCE_
<android.telecom.GatewayInfo: android.net.Uri getGatewayAddress()> -> _SOURCE_
<android.telecom.GatewayInfo: java.lang.String getGatewayProviderPackageName()> -> _SOURCE_
<android.telecom.GatewayInfo: android.net.Uri getOriginalAddress()> -> _SOURCE_
<android.telecom.GatewayInfo: boolean isEmpty()> -> _SOURCE_
<android.telecom.CallRedirectionService: void placeCallUnmodified()> -> _SINK_
<android.telecom.RemoteConference: List<RemoteConnection> getConferenceableConnections()> -> _SOURCE_
<android.telecom.RemoteConference: int getConnectionCapabilities()> -> _SOURCE_
<android.telecom.RemoteConference: int getConnectionProperties()> -> _SOURCE_
<android.telecom.RemoteConference: List<RemoteConnection> getConnections()> -> _SOURCE_
<android.telecom.RemoteConference: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.telecom.RemoteConference: android.os.Bundle getExtras()> -> _SOURCE_
<android.telecom.RemoteConference: void playDtmfTone(char)> -> _SINK_
<android.telecom.RemoteConference: void setCallAudioState(android.telecom.CallAudioState)> -> _SINK_
<android.telecom.RemoteConference: void swap()> -> _SINK_
<android.telecom.RemoteConference.Callback: void onExtrasChanged(android.telecom.RemoteConference,android.os.Bundle)> -> _SINK_
<android.telecom.InCallService: CallAudioState getCallAudioState()> -> _SOURCE_
<android.telecom.InCallService: List<Call> getCalls()> -> _SOURCE_
<android.telecom.InCallService: void requestBluetoothAudio(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.telecom.InCallService: void setAudioRoute(int)> -> _SINK_
<android.telecom.InCallService: void setMuted(boolean)> -> _SINK_
<android.telecom.InCallService.VideoCall.Callback: void onCallDataUsageChanged(long)> -> _SINK_
<android.telecom.InCallService.VideoCall.Callback: void onCameraCapabilitiesChanged(android.telecom.VideoProfile.CameraCapabilities)> -> _SINK_
<android.telecom.InCallService.VideoCall.Callback: void onPeerDimensionsChanged(int,int)> -> _SINK_
<android.telecom.Call: List<Call> getChildren()> -> _SOURCE_
<android.telecom.Call: List<Call> getConferenceableCalls()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call.Details getDetails()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call getGenericConferenceActiveChildCall()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call getParent()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call.RttCall getRttCall()> -> _SOURCE_
<android.telecom.Call: int getState()> -> _SOURCE_
<android.telecom.Call: android.telecom.InCallService.VideoCall getVideoCall()> -> _SOURCE_
<android.telecom.Call: boolean isRttActive()> -> _SOURCE_
<android.telecom.Call: void mergeConference()> -> _SINK_
<android.telecom.Call: void playDtmfTone(char)> -> _SINK_
<android.telecom.Call: void postDialContinue(boolean)> -> _SINK_
<android.telecom.Call: void respondToRttRequest(int,boolean)> -> _SINK_
<android.telecom.Call: void sendCallEvent(java.lang.String,android.os.Bundle)> -> _SINK_
<android.telecom.Call: void sendRttRequest()> -> _SINK_
<android.telecom.Call: void swapConference()> -> _SINK_
<android.telecom.Call: java.lang.String toString()> -> _SOURCE_
<android.telecom.ConnectionService: void addConference(android.telecom.Conference)> -> _SINK_
<android.telecom.ConnectionService: void conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)> -> _SINK_
<android.telecom.ConnectionService: RemoteConnection createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)> -> _SINK_
<android.telecom.ConnectionService: Collection<Conference> getAllConferences()> -> _SOURCE_
<android.telecom.ConnectionService: Collection<Connection> getAllConnections()> -> _SOURCE_
<android.telecom.ConnectionService: void onConference(android.telecom.Connection,android.telecom.Connection)> -> _SINK_
<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)> -> _SINK_
<android.telecom.ConnectionService: void onRemoteConferenceAdded(android.telecom.RemoteConference)> -> _SINK_
<android.telecom.Connection.VideoProvider: void changeCameraCapabilities(android.telecom.VideoProfile.CameraCapabilities)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onRequestConnectionDataUsage()> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSendSessionModifyResponse(android.telecom.VideoProfile)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSetCamera(java.lang.String)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSetDeviceOrientation(int)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSetDisplaySurface(android.view.Surface)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSetPreviewSurface(android.view.Surface)> -> _SINK_
<android.telecom.Connection.VideoProvider: void onSetZoom(float)> -> _SINK_
<android.telecom.Connection.VideoProvider: void setCallDataUsage(long)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void requestCallDataUsage()> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void requestCameraCapabilities()> -> _SOURCE_
<android.telecom.RemoteConnection.VideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void setCamera(java.lang.String)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void setDeviceOrientation(int)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void setDisplaySurface(android.view.Surface)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void setPauseImage(android.net.Uri)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void setPreviewSurface(android.view.Surface)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider: void setZoom(float)> -> _SINK_
<android.telecom.RemoteConnection: void addConferenceParticipants(List<Uri>)> -> _SINK_
<android.telecom.RemoteConnection: void answer()> -> _SINK_
<android.telecom.RemoteConnection: android.net.Uri getAddress()> -> _SOURCE_
<android.telecom.RemoteConnection: int getAddressPresentation()> -> _SOURCE_
<android.telecom.RemoteConnection: java.lang.CharSequence getCallerDisplayName()> -> _SOURCE_
<android.telecom.RemoteConnection: int getCallerDisplayNamePresentation()> -> _SINK_
<android.telecom.RemoteConnection: android.telecom.RemoteConference getConference()> -> _SOURCE_
<android.telecom.RemoteConnection: List<RemoteConnection> getConferenceableConnections()> -> _SOURCE_
<android.telecom.RemoteConnection: int getConnectionCapabilities()> -> _SOURCE_
<android.telecom.RemoteConnection: int getConnectionProperties()> -> _SOURCE_
<android.telecom.RemoteConnection: android.os.Bundle getExtras()> -> _SOURCE_
<android.telecom.RemoteConnection: int getState()> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.StatusHints getStatusHints()> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.RemoteConnection.VideoProvider getVideoProvider()> -> _SOURCE_
<android.telecom.RemoteConnection: int getVideoState()> -> _SOURCE_
<android.telecom.RemoteConnection: boolean isVoipAudioMode()> -> _SOURCE_
<android.telecom.RemoteConnection: void playDtmfTone(char)> -> _SINK_
<android.telecom.RemoteConnection: void postDialContinue(boolean)> -> _SINK_
<android.telecom.RemoteConnection: void reject()> -> _SINK_
<android.telecom.RemoteConnection: void setCallAudioState(android.telecom.CallAudioState)> -> _SINK_
<android.telecom.RemoteConnection: void stopDtmfTone()> -> _SINK_
<android.telecom.RemoteConnection: void unhold()> -> _SINK_
<android.telecom.InCallService.VideoCall: void sendSessionModifyRequest(android.telecom.VideoProfile)> -> _SINK_
<android.telecom.InCallService.VideoCall: void sendSessionModifyResponse(android.telecom.VideoProfile)> -> _SINK_
<android.telecom.InCallService.VideoCall: void setCamera(java.lang.String)> -> _SINK_
<android.telecom.InCallService.VideoCall: void setDeviceOrientation(int)> -> _SINK_
<android.telecom.InCallService.VideoCall: void setDisplaySurface(android.view.Surface)> -> _SINK_
<android.telecom.InCallService.VideoCall: void setPauseImage(android.net.Uri)> -> _SOURCE_
<android.telecom.InCallService.VideoCall: void setPreviewSurface(android.view.Surface)> -> _SINK_
<android.telecom.InCallService.VideoCall: void setZoom(float)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider.Callback: void onSessionModifyRequestReceived(android.telecom.RemoteConnection.VideoProvider,android.telecom.VideoProfile)> -> _SINK_
<android.telecom.RemoteConnection.VideoProvider.Callback: void onVideoQualityChanged(android.telecom.RemoteConnection.VideoProvider,int)> -> _SINK_
<android.telecom.VideoProfile: int describeContents()> -> _SOURCE_
<android.telecom.VideoProfile: int getQuality()> -> _SINK_
<android.telecom.VideoProfile: int getVideoState()> -> _SOURCE_
<android.telecom.VideoProfile: boolean isAudioOnly(int)> -> _SOURCE_
<android.telecom.VideoProfile: boolean isBidirectional(int)> -> _SOURCE_
<android.telecom.VideoProfile: String videoStateToString(int)> -> _SOURCE_
<android.telecom.TelecomManager: void acceptRingingCall(int)> -> _SOURCE_
<android.telecom.TelecomManager: void acceptRingingCall()> -> _SOURCE_
<android.telecom.TelecomManager: android.content.Intent createManageBlockedNumbersIntent()> -> _SINK_
<android.telecom.TelecomManager: boolean endCall()> -> _SOURCE_
<android.telecom.TelecomManager: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telecom.TelecomManager: List<PhoneAccountHandle> getCallCapablePhoneAccounts()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)> -> _SINK_
<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telecom.TelecomManager: List<PhoneAccountHandle> getSelfManagedPhoneAccounts()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManagerForSubscription(int)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getSystemDialerPackage()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String)> -> _SINK_
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)> -> _SINK_
<android.telecom.TelecomManager: boolean hasManageOngoingCallsPermission()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInCall()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInManagedCall()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)> -> _SINK_
<android.telecom.TelecomManager: boolean isTtySupported()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: void placeCall(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.telecom.TelecomManager: void registerPhoneAccount(android.telecom.PhoneAccount)> -> _SINK_
<android.telecom.TelecomManager: void showInCallScreen(boolean)> -> _SINK_
<android.telecom.TelecomManager: void startConference(List<Uri>,android.os.Bundle)> -> _SINK_
<android.telecom.VideoProfile.CameraCapabilities: int describeContents()> -> _SOURCE_
<android.telecom.VideoProfile.CameraCapabilities: int getHeight()> -> _SOURCE_
<android.telecom.VideoProfile.CameraCapabilities: float getMaxZoom()> -> _SOURCE_
<android.telecom.VideoProfile.CameraCapabilities: int getWidth()> -> _SINK_
<android.telecom.VideoProfile.CameraCapabilities: boolean isZoomSupported()> -> _SOURCE_
<android.telecom.RemoteConnection.Callback: void onConferenceableConnectionsChanged(android.telecom.RemoteConnection,List<RemoteConnection>)> -> _SINK_
<android.telephony.AvailableNetworkInfo: int describeContents()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: List<Integer> getBands()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: List<String> getMccMncs()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int getPriority()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: List<RadioAccessSpecifier> getRadioAccessSpecifiers()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int getSubId()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getDbm()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getLevel()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfig()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigByComponentForSubId(java.lang.String,int)> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)> -> _SOURCE_
<android.telephony.CarrierConfigManager: boolean isConfigForIdentifiedCarrier(android.os.PersistableBundle)> -> _SOURCE_
<android.telephony.CarrierConfigManager: void notifyConfigChangedForSubId(int)> -> _SOURCE_
<android.telephony.BarringInfo: int describeContents()> -> _SOURCE_
<android.telephony.BarringInfo: android.telephony.BarringInfo.BarringServiceInfo getBarringServiceInfo(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getDbm()> -> _SINK_
<android.telephony.CellSignalStrengthTdscdma: int getLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getRscp()> -> _SINK_
<android.telephony.CellSignalStrengthNr: int describeContents()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: List<Integer> getCsiCqiReport()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiCqiTableIndex()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiRsrp()> -> _SINK_
<android.telephony.CellSignalStrengthNr: int getCsiRsrq()> -> _SINK_
<android.telephony.CellSignalStrengthNr: int getCsiSinr()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getDbm()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsRsrp()> -> _SINK_
<android.telephony.CellSignalStrengthNr: int getSsRsrq()> -> _SINK_
<android.telephony.CellSignalStrengthNr: int getSsSinr()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getCqi()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getCqiTableIndex()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getDbm()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRsrp()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRsrq()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRssi()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRssnr()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: java.lang.String toString()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getDbm()> -> _SINK_
<android.telephony.CellSignalStrengthWcdma: int getEcNo()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: java.lang.String toString()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getBitErrorRate()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getDbm()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getRssi()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getTimingAdvance()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: java.lang.String toString()> -> _SOURCE_
<android.telephony.MbmsStreamingSession: MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsStreamingSessionCallback)> -> _SINK_
<android.telephony.MbmsStreamingSession: void requestUpdateStreamingServices(List<String>)> -> _SOURCE_
<android.telephony.CellLocation: CellLocation getEmpty()> -> _SOURCE_
<android.telephony.CellLocation: void requestLocationUpdate()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int describeContents()> -> _SOURCE_
<android.telephony.NetworkScanRequest: boolean getIncrementalResults()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getIncrementalResultsPeriodicity()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getMaxSearchTime()> -> _SOURCE_
<android.telephony.NetworkScanRequest: ArrayList<String> getPlmns()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getScanType()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getSearchPeriodicity()> -> _SOURCE_
<android.telephony.NetworkScanRequest: RadioAccessSpecifier[] getSpecifiers()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()> -> _SINK_
<android.telephony.CellSignalStrengthCdma: int getDbm()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: java.lang.String toString()> -> _SOURCE_
<android.telephony.SignalStrengthUpdateRequest: int describeContents()> -> _SOURCE_
<android.telephony.SignalStrengthUpdateRequest: Collection<SignalThresholdInfo> getSignalThresholdInfos()> -> _SOURCE_
<android.telephony.SignalStrengthUpdateRequest: boolean isReportingRequestedWhileIdle()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: int getCsgIdentity()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: boolean getCsgIndicator()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: java.lang.String getHomeNodebName()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int describeContents()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int[] getBands()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int[] getChannels()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: void addServiceAnnouncement(byte[])> -> _SOURCE_
<android.telephony.MbmsDownloadSession: MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsDownloadSessionCallback)> -> _SINK_
<android.telephony.MbmsDownloadSession: int getMaximumServiceAnnouncementSize()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.io.File getTempFileRootDirectory()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: List<DownloadRequest> listPendingDownloads()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: void requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)> -> _SOURCE_
<android.telephony.MbmsDownloadSession: void requestUpdateFileServices(List<String>)> -> _SOURCE_
<android.telephony.MbmsDownloadSession: void setTempFileRootDirectory(java.io.File)> -> _SINK_
<android.telephony.SignalStrengthUpdateRequest.Builder: android.telephony.SignalStrengthUpdateRequest build()> -> _SINK_
<android.telephony.SignalStrengthUpdateRequest.Builder: android.telephony.SignalStrengthUpdateRequest.Builder setReportingRequestedWhileIdle(boolean)> -> _SINK_
<android.telephony.SignalThresholdInfo.Builder: android.telephony.SignalThresholdInfo.Builder setRadioAccessNetworkType(int)> -> _SINK_
<android.telephony.SignalThresholdInfo.Builder: android.telephony.SignalThresholdInfo.Builder setSignalMeasurementType(int)> -> _SINK_
<android.telephony.SignalThresholdInfo.Builder: android.telephony.SignalThresholdInfo.Builder setThresholds(int[])> -> _SINK_
<android.telephony.PhoneStateListener: void onActiveDataSubscriptionIdChanged(int)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onCellInfoChanged(List<CellInfo>)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onDataActivity(int)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onUserMobileDataStateChanged(boolean)> -> _SOURCE_
<android.telephony.SmsManager: android.telephony.SmsManager createForSubscriptionId(int)> -> _SOURCE_
<android.telephony.SmsManager: ArrayList<String> divideMessage(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)> -> _SOURCE_
<android.telephony.SmsManager: android.os.Bundle getCarrierConfigValues()> -> _SOURCE_
<android.telephony.SmsManager: SmsManager getDefault()> -> _SOURCE_
<android.telephony.SmsManager: int getDefaultSmsSubscriptionId()> -> _SOURCE_
<android.telephony.SmsManager: int getSmsCapacityOnIcc()> -> _SOURCE_
<android.telephony.SmsManager: void getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager.FinancialSmsCallback)> -> _SINK_
<android.telephony.SmsManager: java.lang.String getSmscAddress()> -> _SOURCE_
<android.telephony.SmsManager: int getSubscriptionId()> -> _SOURCE_
<android.telephony.SmsManager: void injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,List<String>,List<PendingIntent>,List<PendingIntent>,long)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,List<String>,List<PendingIntent>,List<PendingIntent>,java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,long)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: boolean setSmscAddress(java.lang.String)> -> _SINK_
<android.telephony.SmsManager.FinancialSmsCallback: void onFinancialSmsMessages(android.database.CursorWindow)> -> _SINK_
<android.telephony.MbmsGroupCallSession: MbmsGroupCallSession create(android.content.Context,int,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)> -> _SINK_
<android.telephony.MbmsGroupCallSession: MbmsGroupCallSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)> -> _SINK_
<android.telephony.TelephonyCallback.BarringInfoListener: void onBarringInfoChanged(android.telephony.BarringInfo)> -> _SOURCE_
<android.telephony.SignalStrength: int describeContents()> -> _SINK_
<android.telephony.SignalStrength: int getCdmaDbm()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaEcio()> -> _SOURCE_
<android.telephony.SignalStrength: <T extends CellSignalStrength> List getCellSignalStrengths(Class)> -> _SOURCE_
<android.telephony.SignalStrength: List<CellSignalStrength> getCellSignalStrengths()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoDbm()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoEcio()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoSnr()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmBitErrorRate()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmSignalStrength()> -> _SOURCE_
<android.telephony.SignalStrength: int getLevel()> -> _SOURCE_
<android.telephony.SignalStrength: long getTimestampMillis()> -> _SOURCE_
<android.telephony.SignalStrength: boolean isGsm()> -> _SOURCE_
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.telephony.SignalThresholdInfo: int describeContents()> -> _SOURCE_
<android.telephony.SignalThresholdInfo: int getMaximumNumberOfThresholdsAllowed()> -> _SOURCE_
<android.telephony.SignalThresholdInfo: int getMinimumNumberOfThresholdsAllowed()> -> _SOURCE_
<android.telephony.SignalThresholdInfo: int getRadioAccessNetworkType()> -> _SOURCE_
<android.telephony.SignalThresholdInfo: int getSignalMeasurementType()> -> _SOURCE_
<android.telephony.SignalThresholdInfo: int[] getThresholds()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int describeContents()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int getDataLimitBehavior()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataLimitBytes()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataUsageBytes()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataUsageTime()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int[] getNetworkTypes()> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.lang.CharSequence getSummary()> -> _SINK_
<android.telephony.SubscriptionPlan: java.lang.CharSequence getTitle()> -> _SINK_
<android.telephony.SubscriptionPlan: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager.CallComposerException: int getErrorCode()> -> _SOURCE_
<android.telephony.TelephonyManager.CallComposerException: java.io.IOException getIOException()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int describeContents()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int getNetworkType()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int getOverrideNetworkType()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager.NetworkSlicingException: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager.CellInfoCallback: void onCellInfo(List<CellInfo>)> -> _SOURCE_
<android.telephony.VisualVoicemailSms: int describeContents()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: android.os.Bundle getFields()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: java.lang.String getMessageBody()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings: int describeContents()> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings: java.lang.String toString()> -> _SOURCE_
<android.telephony.data.ApnSetting: int describeContents()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnName()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getApnTypeBitmask()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getAuthType()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getCarrierId()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getEntryName()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getId()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMmsProxyPort()> -> _SOURCE_
<android.telephony.data.ApnSetting: android.net.Uri getMmsc()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMtuV4()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMtuV6()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMvnoType()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getNetworkTypeBitmask()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getPassword()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getProtocol()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getProxyPort()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getRoamingProtocol()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getUser()> -> _SOURCE_
<android.telephony.data.ApnSetting: boolean isEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()> -> _SINK_
<android.telephony.TelephonyManager: int getActiveModemCount()> -> _SOURCE_
<android.telephony.TelephonyManager: List<CellInfo> getAllCellInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: long getAllowedNetworkTypesForReason(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallComposerStatus()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallStateForSubscription()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()> -> _SOURCE_
<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataState()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Map> getEmergencyNumberList()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Map> getEmergencyNumberList(int)> -> _SOURCE_
<android.telephony.TelephonyManager: List<String> getEquivalentHomePlmns()> -> _SOURCE_
<android.telephony.TelephonyManager: String[] getForbiddenPlmns()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getImei(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getImei()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManualNetworkSelectionPlmn()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode()> -> _SOURCE_
<android.telephony.TelephonyManager: long getMaximumCallComposerPictureSize()> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String getMeid()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMeid(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNai()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkSelectionMode()> -> _SOURCE_
<android.telephony.TelephonyManager: void getNetworkSlicingConfiguration(java.util.concurrent.Executor,OutcomeReceiver<NetworkSlicingConfig,)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneCount()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState(boolean,boolean)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCarrierId()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.CharSequence getSimCarrierIdName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimSpecificCarrierId()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.CharSequence getSimSpecificCarrierIdName()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSupportedModemCount()> -> _SOURCE_
<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)> -> _SOURCE_
<android.telephony.TelephonyManager: List<UiccCardInfo> getUiccCardsInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceNetworkType()> -> _SOURCE_
<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasIccCard()> -> _SOURCE_
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)> -> _SINK_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()> -> _SINK_
<android.telephony.TelephonyManager: boolean isDataCapable()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataEnabledForReason(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()> -> _SINK_
<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isModemEnabledForSlot(int)> -> _SINK_
<android.telephony.TelephonyManager: int isMultiSimSupported()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isNetworkRoaming()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRadioInterfaceCapabilitySupported(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRttSupported()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isSmsCapable()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isTtyModeSupported()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVoiceCapable()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isWorldPhone()> -> _SOURCE_
<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager.CellInfoCallback)> -> _SOURCE_
<android.telephony.TelephonyManager: void sendDialerSpecialCode(java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager.UssdResponseCallback,android.os.Handler)> -> _SINK_
<android.telephony.TelephonyManager: void sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.telephony.TelephonyManager: void setAllowedNetworkTypesForReason(int,long)> -> _SINK_
<android.telephony.TelephonyManager: void setCallComposerStatus(int)> -> _SINK_
<android.telephony.TelephonyManager: void setDataEnabled(boolean)> -> _SINK_
<android.telephony.TelephonyManager: void setDataEnabledForReason(int,boolean)> -> _SINK_
<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: void setNetworkSelectionModeAutomatic()> -> _SINK_
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean,int)> -> _SINK_
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean)> -> _SINK_
<android.telephony.TelephonyManager: boolean setOperatorBrandOverride(java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()> -> _SINK_
<android.telephony.TelephonyManager: void setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,Consumer<Integer>)> -> _SINK_
<android.telephony.TelephonyManager: void setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)> -> _SINK_
<android.telephony.TelephonyManager: boolean setVoiceMailNumber(java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: void switchMultiSimConfig(int)> -> _SINK_
<android.telephony.TelephonyManager: void updateAvailableNetworks(List<AvailableNetworkInfo>,java.util.concurrent.Executor,Consumer<Integer>)> -> _SOURCE_
<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.io.InputStream,java.lang.String,java.util.concurrent.Executor,OutcomeReceiver<ParcelUuid,)> -> _SINK_
<android.telephony.TelephonyManager: void uploadCallComposerPicture(android.graphics.Path,java.lang.String,java.util.concurrent.Executor,OutcomeReceiver<ParcelUuid,)> -> _SINK_
<android.telephony.data.NetworkSliceInfo: int describeContents()> -> _SOURCE_
<android.telephony.data.NetworkSliceInfo: int getMappedHplmnSliceDifferentiator()> -> _SOURCE_
<android.telephony.data.NetworkSliceInfo: int getMappedHplmnSliceServiceType()> -> _SOURCE_
<android.telephony.data.NetworkSliceInfo: int getSliceDifferentiator()> -> _SINK_
<android.telephony.data.NetworkSliceInfo: int getSliceServiceType()> -> _SINK_
<android.telephony.data.NetworkSliceInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.data.NetworkSliceInfo.Builder: android.telephony.data.NetworkSliceInfo build()> -> _SOURCE_
<android.telephony.data.NetworkSliceInfo.Builder: android.telephony.data.NetworkSliceInfo.Builder setMappedHplmnSliceDifferentiator(int)> -> _SINK_
<android.telephony.data.NetworkSliceInfo.Builder: android.telephony.data.NetworkSliceInfo.Builder setMappedHplmnSliceServiceType(int)> -> _SINK_
<android.telephony.data.NetworkSliceInfo.Builder: android.telephony.data.NetworkSliceInfo.Builder setSliceServiceType(int)> -> _SINK_
<android.telephony.data.NetworkSliceInfo.Builder: android.telephony.data.NetworkSliceInfo.Builder setStatus(int)> -> _SINK_
<android.telephony.data.RouteSelectionDescriptor: int describeContents()> -> _SOURCE_
<android.telephony.data.RouteSelectionDescriptor: List<String> getDataNetworkName()> -> _SINK_
<android.telephony.data.RouteSelectionDescriptor: int getPrecedence()> -> _SINK_
<android.telephony.data.RouteSelectionDescriptor: int getSessionType()> -> _SOURCE_
<android.telephony.data.RouteSelectionDescriptor: List<NetworkSliceInfo> getSliceInfo()> -> _SOURCE_
<android.telephony.data.RouteSelectionDescriptor: int getSscMode()> -> _SOURCE_
<android.telephony.data.RouteSelectionDescriptor: java.lang.String toString()> -> _SOURCE_
<android.telephony.data.UrspRule: int describeContents()> -> _SOURCE_
<android.telephony.data.UrspRule: int getPrecedence()> -> _SINK_
<android.telephony.data.UrspRule: List<RouteSelectionDescriptor> getRouteSelectionDescriptor()> -> _SOURCE_
<android.telephony.data.UrspRule: List<TrafficDescriptor> getTrafficDescriptors()> -> _SOURCE_
<android.telephony.data.UrspRule: java.lang.String toString()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccManager createForCardId(int)> -> _SINK_
<android.telephony.euicc.EuiccManager: void downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.lang.String getEid()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccInfo getEuiccInfo()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: boolean isSimPortAvailable(int)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: void startResolutionActivity(android.app.Activity,int,android.content.Intent,android.app.PendingIntent)> -> _SINK_
<android.telephony.euicc.EuiccManager: void updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setApnName(java.lang.String)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setApnTypeBitmask(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setAuthType(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setCarrierEnabled(boolean)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setCarrierId(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setEntryName(java.lang.String)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.net.InetAddress)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.lang.String)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyPort(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsc(android.net.Uri)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMtuV4(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMtuV6(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMvnoType(int)> -> _SOURCE_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setNetworkTypeBitmask(int)> -> _SOURCE_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setOperatorNumeric(java.lang.String)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setPassword(java.lang.String)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setPersistent(boolean)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProfileId(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProtocol(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyAddress(java.net.InetAddress)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyAddress(java.lang.String)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyPort(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setRoamingProtocol(int)> -> _SINK_
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setUser(java.lang.String)> -> _SINK_
<android.telephony.emergency.EmergencyNumber: int compareTo(android.telephony.emergency.EmergencyNumber)> -> _SINK_
<android.telephony.emergency.EmergencyNumber: int describeContents()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getCountryIso()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: int getEmergencyCallRouting()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: List<Integer> getEmergencyNumberSources()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: List<Integer> getEmergencyServiceCategories()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: List<String> getEmergencyUrns()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getMnc()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getNumber()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: boolean isInEmergencyServiceCategories(int)> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String toString()> -> _SOURCE_
<android.telephony.data.TrafficDescriptor.Builder: android.telephony.data.TrafficDescriptor build()> -> _SINK_
<android.telephony.data.TrafficDescriptor.Builder: android.telephony.data.TrafficDescriptor.Builder setDataNetworkName(java.lang.String)> -> _SINK_
<android.telephony.data.TrafficDescriptor.Builder: android.telephony.data.TrafficDescriptor.Builder setOsAppId(byte[])> -> _SINK_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)> -> _SOURCE_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean)> -> _SOURCE_
<android.telephony.SmsMessage: SmsMessage createFromPdu(byte[])> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailBody()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailFrom()> -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnSim()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getMessageBody()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage.MessageClass getMessageClass()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> -> _SOURCE_
<android.telephony.SmsMessage: byte[] getPdu()> -> _SOURCE_
<android.telephony.SmsMessage: int getProtocolIdentifier()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> -> _SOURCE_
<android.telephony.SmsMessage: int getStatus()> -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnSim()> -> _SOURCE_
<android.telephony.SmsMessage: SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<android.telephony.SmsMessage: SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)> -> _SOURCE_
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: long getTimestampMillis()> -> _SOURCE_
<android.telephony.SmsMessage: byte[] getUserData()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isCphsMwiMessage()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isEmail()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMWIClearMessage()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMWISetMessage()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMwiDontStore()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isReplace()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isReplyPathPresent()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isStatusReportMessage()> -> _SOURCE_
<android.telephony.SmsMessage.SubmitPdu: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager.CapabilityCallback: void onCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature.MmTelCapabilities)> -> _SINK_
<android.telephony.ims.RcsUceAdapter: boolean isUceSettingEnabled()> -> _SINK_
<android.telephony.ims.ImsMmTelManager: void getRegistrationTransportType(java.util.concurrent.Executor,Consumer<Integer>)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: int getVoWiFiModeSetting()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isAdvancedCallingSettingEnabled()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isCrossSimCallingEnabled()> -> _SINK_
<android.telephony.ims.ImsMmTelManager: boolean isTtyOverVolteEnabled()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiRoamingSettingEnabled()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiSettingEnabled()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVtSettingEnabled()> -> _SINK_
<android.telephony.ims.ImsMmTelManager: void registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager.RegistrationCallback)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: void registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager.CapabilityCallback)> -> _SINK_
<android.telephony.ims.ImsMmTelManager: void unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager.RegistrationCallback)> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: int describeContents()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: DownloadableSubscription forActivationCode(java.lang.String)> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getConfirmationCode()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription build()> -> _SINK_
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription.Builder setConfirmationCode(java.lang.String)> -> _SINK_
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription.Builder setEncodedActivationCode(java.lang.String)> -> _SINK_
<android.telephony.data.TrafficDescriptor: int describeContents()> -> _SOURCE_
<android.telephony.data.TrafficDescriptor: java.lang.String getDataNetworkName()> -> _SINK_
<android.telephony.data.TrafficDescriptor: byte[] getOsAppId()> -> _SOURCE_
<android.telephony.data.TrafficDescriptor: java.lang.String toString()> -> _SOURCE_
<android.telephony.mbms.DownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)> -> _SOURCE_
<android.telephony.euicc.EuiccInfo: int describeContents()> -> _SOURCE_
<android.telephony.euicc.EuiccInfo: java.lang.String getOsVersion()> -> _SOURCE_
<android.telephony.ims.RegistrationManager: void getRegistrationState(java.util.concurrent.Executor,Consumer<Integer>)> -> _SOURCE_
<android.telephony.ims.RegistrationManager: void getRegistrationTransportType(java.util.concurrent.Executor,Consumer<Integer>)> -> _SOURCE_
<android.telephony.ims.RegistrationManager.RegistrationCallback: void onRegistered(int)> -> _SOURCE_
<android.telephony.ims.RegistrationManager.RegistrationCallback: void onRegistered(android.telephony.ims.ImsRegistrationAttributes)> -> _SINK_
<android.telephony.ims.RegistrationManager.RegistrationCallback: void onRegistering(int)> -> _SOURCE_
<android.telephony.mbms.GroupCall: long getTmgi()> -> _SOURCE_
<android.telephony.mbms.StreamingService: android.telephony.mbms.StreamingServiceInfo getInfo()> -> _SOURCE_
<android.telephony.mbms.StreamingService: android.net.Uri getPlaybackUri()> -> _SOURCE_
<android.telephony.mbms.StreamingServiceInfo: int describeContents()> -> _SOURCE_
<android.test.ComparisonFailure: java.lang.String getMessage()> -> _SOURCE_
<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()> -> _SOURCE_
<android.test.InstrumentationTestCase: void injectInsrumentation(android.app.Instrumentation)> -> _SINK_
<android.test.InstrumentationTestCase: <T extends Activity> T launchActivity(java.lang.String,Class,android.os.Bundle)> -> _SINK_
<android.test.InstrumentationTestCase: <T extends Activity> T launchActivityWithIntent(java.lang.String,Class,android.content.Intent)> -> _SINK_
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)> -> _SINK_
<android.test.InstrumentationTestCase: void sendKeys(int[])> -> _SINK_
<android.test.InstrumentationTestCase: void sendRepeatedKeys(int[])> -> _SINK_
<android.test.ProviderTestCase2: android.test.mock.MockContentResolver getMockContentResolver()> -> _SOURCE_
<android.test.ProviderTestCase2: android.test.IsolatedContext getMockContext()> -> _SOURCE_
<android.test.ProviderTestCase2: T getProvider()> -> _SOURCE_
<android.test.ProviderTestCase2: <T extends ContentProvider> ContentResolver newResolverWithContentProviderFromSql(android.content.Context,java.lang.String,Class,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<android.content.pm.ServiceInfo: List<Locale> getLocales()> -> _SOURCE_
<android.content.pm.ServiceInfo: java.lang.CharSequence getNameForLocale(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.content.pm.ServiceInfo: Set<Locale> getNamedContentLocales()> -> _SOURCE_
<android.content.pm.ServiceInfo: java.lang.String getServiceId()> -> _SOURCE_
<android.test.mock.MockAccountManager: AccountManager newMockAccountManager(android.content.Context)> -> _SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)> -> _SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.test.IsolatedContext: int checkUriPermission(android.net.Uri,int,int,int)> -> _SOURCE_
<android.test.IsolatedContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)> -> _SOURCE_
<android.test.IsolatedContext: List<Intent> getAndClearBroadcastIntents()> -> _SOURCE_
<android.test.IsolatedContext: android.content.ContentResolver getContentResolver()> -> _SOURCE_
<android.test.IsolatedContext: java.io.File getFilesDir()> -> _SOURCE_
<android.test.IsolatedContext: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.test.IsolatedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)> -> _SINK_
<android.test.suitebuilder.TestSuiteBuilder: TestSuiteBuilder includeAllPackagesUnderHere()> -> _SINK_
<android.test.MoreAsserts: void assertEmpty(java.lang.String,java.util.Map -> _SOURCE_
<android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String)> -> _SOURCE_
<android.text.AutoText: String get(java.lang.CharSequence,int,int,android.view.View)> -> _SOURCE_
<android.text.AutoText: int getSize(android.view.View)> -> _SOURCE_
<android.text.AndroidCharacter: void getDirectionalities(char[],byte[],int)> -> _SOURCE_
<android.text.AndroidCharacter: int getEastAsianWidth(char)> -> _SOURCE_
<android.text.AndroidCharacter: void getEastAsianWidths(char[],int,int,byte[])> -> _SINK_
<android.test.ViewAsserts: void assertGroupIntegrity(android.view.ViewGroup)> -> _SOURCE_
<android.test.mock.MockContext: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)> -> _SINK_
<android.test.mock.MockContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.test.mock.MockContext: int checkCallingOrSelfPermission(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: int checkCallingPermission(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: int checkCallingUriPermission(android.net.Uri,int)> -> _SOURCE_
<android.test.mock.MockContext: int checkPermission(java.lang.String,int,int)> -> _SOURCE_
<android.test.mock.MockContext: int checkSelfPermission(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)> -> _SOURCE_
<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,int,int,int)> -> _SOURCE_
<android.test.mock.MockContext: void clearWallpaper()> -> _SOURCE_
<android.test.mock.MockContext: android.content.Context createDisplayContext(android.view.Display)> -> _SOURCE_
<android.test.mock.MockContext: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)> -> _SINK_
<android.test.mock.MockContext: String[] databaseList()> -> _SOURCE_
<android.test.mock.MockContext: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)> -> _SINK_
<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: String[] fileList()> -> _SOURCE_
<android.test.mock.MockContext: android.content.Context getApplicationContext()> -> _SOURCE_
<android.test.mock.MockContext: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.test.mock.MockContext: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getCacheDir()> -> _SOURCE_
<android.test.mock.MockContext: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getCodeCacheDir()> -> _SOURCE_
<android.test.mock.MockContext: android.content.ContentResolver getContentResolver()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getDataDir()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getDatabasePath(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: android.view.Display getDisplay()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getExternalCacheDir()> -> _SOURCE_
<android.test.mock.MockContext: File[] getExternalCacheDirs()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getExternalFilesDir(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: File[] getExternalFilesDirs(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: File[] getExternalMediaDirs()> -> _SINK_
<android.test.mock.MockContext: java.io.File getFileStreamPath(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getFilesDir()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getNoBackupFilesDir()> -> _SOURCE_
<android.test.mock.MockContext: java.io.File getObbDir()> -> _SOURCE_
<android.test.mock.MockContext: File[] getObbDirs()> -> _SOURCE_
<android.test.mock.MockContext: java.lang.String getPackageCodePath()> -> _SOURCE_
<android.test.mock.MockContext: android.content.pm.PackageManager getPackageManager()> -> _SOURCE_
<android.test.mock.MockContext: java.lang.String getPackageName()> -> _SOURCE_
<android.test.mock.MockContext: java.lang.String getPackageResourcePath()> -> _SOURCE_
<android.test.mock.MockContext: android.content.res.Resources getResources()> -> _SOURCE_
<android.test.mock.MockContext: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SINK_
<android.test.mock.MockContext: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: java.lang.String getSystemServiceName(Class<?>)> -> _SOURCE_
<android.test.mock.MockContext: android.content.res.Resources.Theme getTheme()> -> _SOURCE_
<android.test.mock.MockContext: android.graphics.drawable.Drawable getWallpaper()> -> _SOURCE_
<android.test.mock.MockContext: int getWallpaperDesiredMinimumHeight()> -> _SOURCE_
<android.test.mock.MockContext: int getWallpaperDesiredMinimumWidth()> -> _SOURCE_
<android.test.mock.MockContext: void grantUriPermission(java.lang.String,android.net.Uri,int)> -> _SINK_
<android.test.mock.MockContext: boolean isDeviceProtectedStorage()> -> _SOURCE_
<android.test.mock.MockContext: boolean moveDatabaseFrom(android.content.Context,java.lang.String)> -> _SINK_
<android.test.mock.MockContext: java.io.FileInputStream openFileInput(java.lang.String)> -> _SOURCE_
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)> -> _SINK_
<android.test.mock.MockContext: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_
<android.test.mock.MockContext: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory)> -> _SINK_
<android.test.mock.MockContext: android.graphics.drawable.Drawable peekWallpaper()> -> _SOURCE_
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)> -> _SINK_
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)> -> _SINK_
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<android.test.mock.MockContext: void revokeUriPermission(android.net.Uri,int)> -> _SINK_
<android.test.mock.MockContext: void revokeUriPermission(java.lang.String,android.net.Uri,int)> -> _SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.test.mock.MockContext: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.test.mock.MockContext: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.test.mock.MockContext: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.test.mock.MockContext: void setTheme(int)> -> _SINK_
<android.test.mock.MockContext: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<android.test.mock.MockContext: void setWallpaper(java.io.InputStream)> -> _SINK_
<android.test.mock.MockContext: void startActivities(Intent[])> -> _SINK_
<android.test.mock.MockContext: void startActivity(android.content.Intent)> -> _SINK_
<android.test.mock.MockContext: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.test.mock.MockContext: android.content.ComponentName startForegroundService(android.content.Intent)> -> _SINK_
<android.test.mock.MockContext: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<android.test.mock.MockContext: void updateServiceGroup(android.content.ServiceConnection,int,int)> -> _SINK_
<android.text.DynamicLayout: int getBottomPadding()> -> _SOURCE_
<android.text.DynamicLayout: int getEllipsisCount(int)> -> _SOURCE_
<android.text.DynamicLayout: int getEllipsizedWidth()> -> _SOURCE_
<android.text.DynamicLayout: boolean getLineContainsTab(int)> -> _SOURCE_
<android.text.DynamicLayout: int getLineStart(int)> -> _SOURCE_
<android.text.DynamicLayout: int getLineTop(int)> -> _SOURCE_
<android.text.DynamicLayout: int getParagraphDirection(int)> -> _SOURCE_
<android.text.DynamicLayout: int getTopPadding()> -> _SOURCE_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setAlignment(android.text.Layout.Alignment)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setBreakStrategy(int)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setDisplayText(java.lang.CharSequence)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setEllipsize(android.text.TextUtils.TruncateAt)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setEllipsizedWidth(int)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setHyphenationFrequency(int)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setIncludePad(boolean)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setJustificationMode(int)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setLineSpacing(float,float)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setTextDirection(android.text.TextDirectionHeuristic)> -> _SINK_
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setUseLineSpacingFromFallbacks(boolean)> -> _SINK_
<android.text.GetChars: void getChars(int,int,char[],int)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.XmlResourceParser getAnimation(int)> -> _SOURCE_
<android.test.mock.MockResources: int getColor(int)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.ColorStateList getColorStateList(int)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.test.mock.MockResources: float getDimension(int)> -> _SOURCE_
<android.test.mock.MockResources: int getDimensionPixelOffset(int)> -> _SOURCE_
<android.test.mock.MockResources: int getDimensionPixelSize(int)> -> _SOURCE_
<android.test.mock.MockResources: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.test.mock.MockResources: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.test.mock.MockResources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.test.mock.MockResources: int[] getIntArray(int)> -> _SOURCE_
<android.test.mock.MockResources: int getInteger(int)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.XmlResourceParser getLayout(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getQuantityString(int,int,Object[])> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getQuantityString(int,int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.CharSequence getQuantityText(int,int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getResourceEntryName(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getResourceName(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getResourcePackageName(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getResourceTypeName(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getString(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.String getString(int,Object[])> -> _SOURCE_
<android.test.mock.MockResources: String[] getStringArray(int)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.CharSequence getText(int,java.lang.CharSequence)> -> _SOURCE_
<android.test.mock.MockResources: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.test.mock.MockResources: CharSequence[] getTextArray(int)> -> _SOURCE_
<android.test.mock.MockResources: void getValue(java.lang.String,android.util.TypedValue,boolean)> -> _SOURCE_
<android.test.mock.MockResources: void getValue(int,android.util.TypedValue,boolean)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.XmlResourceParser getXml(int)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.TypedArray obtainTypedArray(int)> -> _SOURCE_
<android.test.mock.MockResources: java.io.InputStream openRawResource(int)> -> _SOURCE_
<android.test.mock.MockResources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> -> _SOURCE_
<android.text.Editable.Factory: Editable.Factory getInstance()> -> _SOURCE_
<android.text.Editable.Factory: android.text.Editable newEditable(java.lang.CharSequence)> -> _SOURCE_
<android.text.Editable: Editable append(char)> -> _SINK_
<android.text.Editable: Editable append(java.lang.CharSequence,int,int)> -> _SINK_
<android.text.Editable: Editable insert(int,java.lang.CharSequence,int,int)> -> _SINK_
<android.text.Editable: Editable replace(int,int,java.lang.CharSequence,int,int)> -> _SINK_
<android.text.Editable: Editable replace(int,int,java.lang.CharSequence)> -> _SINK_
<android.text.Editable: void setFilters(InputFilter[])> -> _SINK_
<android.test.mock.MockCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SOURCE_
<android.test.mock.MockCursor: byte[] getBlob(int)> -> _SOURCE_
<android.test.mock.MockCursor: int getColumnCount()> -> _SOURCE_
<android.test.mock.MockCursor: int getColumnIndexOrThrow(java.lang.String)> -> _SOURCE_
<android.test.mock.MockCursor: java.lang.String getColumnName(int)> -> _SOURCE_
<android.test.mock.MockCursor: String[] getColumnNames()> -> _SOURCE_
<android.test.mock.MockCursor: int getCount()> -> _SOURCE_
<android.test.mock.MockCursor: double getDouble(int)> -> _SOURCE_
<android.test.mock.MockCursor: android.os.Bundle getExtras()> -> _SOURCE_
<android.test.mock.MockCursor: float getFloat(int)> -> _SOURCE_
<android.test.mock.MockCursor: int getInt(int)> -> _SOURCE_
<android.test.mock.MockCursor: long getLong(int)> -> _SOURCE_
<android.test.mock.MockCursor: android.net.Uri getNotificationUri()> -> _SOURCE_
<android.test.mock.MockCursor: List<Uri> getNotificationUris()> -> _SOURCE_
<android.test.mock.MockCursor: short getShort(int)> -> _SOURCE_
<android.test.mock.MockCursor: java.lang.String getString(int)> -> _SOURCE_
<android.test.mock.MockCursor: int getType(int)> -> _SOURCE_
<android.test.mock.MockCursor: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<android.test.mock.MockCursor: boolean isAfterLast()> -> _SOURCE_
<android.test.mock.MockCursor: boolean isBeforeFirst()> -> _SOURCE_
<android.test.mock.MockCursor: boolean isClosed()> -> _SOURCE_
<android.test.mock.MockCursor: boolean isFirst()> -> _SOURCE_
<android.test.mock.MockCursor: boolean isLast()> -> _SOURCE_
<android.test.mock.MockCursor: void setExtras(android.os.Bundle)> -> _SOURCE_
<android.test.mock.MockCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.test.mock.MockCursor: void setNotificationUris(android.content.ContentResolver,List<Uri>)> -> _SINK_
<android.text.Html: String escapeHtml(java.lang.CharSequence)> -> _SOURCE_
<android.text.Html: Spanned fromHtml(java.lang.String,int)> -> _SOURCE_
<android.text.Html: Spanned fromHtml(java.lang.String,android.text.Html.ImageGetter,android.text.Html.TagHandler)> -> _SOURCE_
<android.text.Html: Spanned fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler)> -> _SOURCE_
<android.text.Html: Spanned fromHtml(java.lang.String)> -> _SOURCE_
<android.text.Html: String toHtml(android.text.Spanned,int)> -> _SOURCE_
<android.text.Html: String toHtml(android.text.Spanned)> -> _SOURCE_
<android.text.BoringLayout: int getBottomPadding()> -> _SOURCE_
<android.text.BoringLayout: int getEllipsisCount(int)> -> _SOURCE_
<android.text.BoringLayout: int getEllipsizedWidth()> -> _SOURCE_
<android.text.BoringLayout: int getHeight()> -> _SOURCE_
<android.text.BoringLayout: boolean getLineContainsTab(int)> -> _SOURCE_
<android.text.BoringLayout: float getLineMax(int)> -> _SOURCE_
<android.text.BoringLayout: int getLineStart(int)> -> _SOURCE_
<android.text.BoringLayout: int getLineTop(int)> -> _SOURCE_
<android.text.BoringLayout: float getLineWidth(int)> -> _SOURCE_
<android.text.BoringLayout: int getParagraphDirection(int)> -> _SOURCE_
<android.text.BoringLayout: int getTopPadding()> -> _SOURCE_
<android.text.BoringLayout: BoringLayout.Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout.Metrics)> -> _SOURCE_
<android.text.BoringLayout: BoringLayout.Metrics isBoring(java.lang.CharSequence,android.text.TextPaint)> -> _SOURCE_
<android.text.BoringLayout: BoringLayout.Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,boolean,android.text.BoringLayout.Metrics)> -> _SOURCE_
<android.content.ClipboardManager: CharSequence getText()> -> _SOURCE_
<android.content.ClipboardManager: boolean hasText()> -> _SOURCE_
<android.content.ClipboardManager: void setText(java.lang.CharSequence)> -> _SINK_
<android.text.PrecomputedText: char charAt(int)> -> _SOURCE_
<android.text.PrecomputedText: PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText.Params)> -> _SINK_
<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)> -> _SOURCE_
<android.text.PrecomputedText: void getFontMetricsInt(int,int,android.graphics.Paint.FontMetricsInt)> -> _SOURCE_
<android.text.PrecomputedText: int getParagraphCount()> -> _SOURCE_
<android.text.PrecomputedText: int getParagraphEnd(int)> -> _SOURCE_
<android.text.PrecomputedText: int getParagraphStart(int)> -> _SOURCE_
<android.text.PrecomputedText: android.text.PrecomputedText.Params getParams()> -> _SOURCE_
<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)> -> _SOURCE_
<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)> -> _SOURCE_
<android.text.PrecomputedText: int getSpanStart(java.lang.Object)> -> _SOURCE_
<android.text.PrecomputedText:  T[] getSpans(int,int,Class)> -> _SOURCE_
<android.text.PrecomputedText: float getWidth(int,int)> -> _SOURCE_
<android.text.PrecomputedText: int length()> -> _SOURCE_
<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)> -> _SOURCE_
<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<android.text.PrecomputedText: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.text.PrecomputedText: java.lang.String toString()> -> _SOURCE_
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params build()> -> _SINK_
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setBreakStrategy(int)> -> _SINK_
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setHyphenationFrequency(int)> -> _SINK_
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setLineBreakConfig(LineBreakConfig)> -> _SINK_
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setTextDirection(android.text.TextDirectionHeuristic)> -> _SINK_
<android.text.PrecomputedText.Params: int getBreakStrategy()> -> _SOURCE_
<android.text.PrecomputedText.Params: int getHyphenationFrequency()> -> _SOURCE_
<android.text.PrecomputedText.Params: LineBreakConfig getLineBreakConfig()> -> _SOURCE_
<android.text.PrecomputedText.Params: android.text.TextDirectionHeuristic getTextDirection()> -> _SOURCE_
<android.text.PrecomputedText.Params: android.text.TextPaint getTextPaint()> -> _SOURCE_
<android.text.Spannable.Factory: Spannable.Factory getInstance()> -> _SOURCE_
<android.text.Spannable.Factory: android.text.Spannable newSpannable(java.lang.CharSequence)> -> _SOURCE_
<android.text.AlteredCharSequence: char charAt(int)> -> _SOURCE_
<android.text.AlteredCharSequence: void getChars(int,int,char[],int)> -> _SOURCE_
<android.text.AlteredCharSequence: int length()> -> _SOURCE_
<android.text.AlteredCharSequence: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.text.Spanned: int getSpanEnd(java.lang.Object)> -> _SOURCE_
<android.text.Spanned: int getSpanFlags(java.lang.Object)> -> _SOURCE_
<android.text.Spanned: int getSpanStart(java.lang.Object)> -> _SOURCE_
<android.text.Spanned:  T[] getSpans(int,int,Class)> -> _SOURCE_
<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)> -> _SOURCE_
<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)> -> _SOURCE_
<android.text.StaticLayout: int getBottomPadding()> -> _SOURCE_
<android.text.StaticLayout: int getEllipsisCount(int)> -> _SOURCE_
<android.text.StaticLayout: int getEllipsizedWidth()> -> _SOURCE_
<android.text.StaticLayout: boolean getLineContainsTab(int)> -> _SOURCE_
<android.text.StaticLayout: int getLineForVertical(int)> -> _SOURCE_
<android.text.StaticLayout: int getLineStart(int)> -> _SOURCE_
<android.text.StaticLayout: int getLineTop(int)> -> _SOURCE_
<android.text.StaticLayout: int getParagraphDirection(int)> -> _SOURCE_
<android.text.StaticLayout: int getTopPadding()> -> _SOURCE_
<android.text.TextUtils.SimpleStringSplitter: void setString(java.lang.String)> -> _SINK_
<android.text.ParcelableSpan: int getSpanTypeId()> -> _SOURCE_
<android.text.TextShaper: void shapeText(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.TextPaint,android.text.TextShaper.GlyphsConsumer)> -> _SINK_
<android.text.TextShaper.GlyphsConsumer: void accept(int,int,android.graphics.text.PositionedGlyphs,android.text.TextPaint)> -> _SINK_
<android.icu.text.DateFormat: CharSequence format(java.lang.CharSequence,java.sql.Date)> -> _SOURCE_
<android.icu.text.DateFormat: CharSequence format(java.lang.CharSequence,android.icu.util.Calendar)> -> _SOURCE_
<android.icu.text.DateFormat: CharSequence format(java.lang.CharSequence,long)> -> _SOURCE_
<android.icu.text.DateFormat: String getBestDateTimePattern(androidx.compose.ui.text.intl.Locale,java.lang.String)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateFormat(android.content.Context)> -> _SOURCE_
<android.icu.text.DateFormat: char[] getDateFormatOrder(android.content.Context)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getLongDateFormat(android.content.Context)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getMediumDateFormat(android.content.Context)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeFormat(android.content.Context)> -> _SOURCE_
<android.text.format.Formatter: String formatFileSize(android.content.Context,long)> -> _SINK_
<android.text.format.Formatter: String formatIpAddress(int)> -> _SOURCE_
<android.text.format.Formatter: String formatShortFileSize(android.content.Context,long)> -> _SINK_
<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<android.text.TextPaint: void set(android.text.TextPaint)> -> _SINK_
<android.text.format.Time: void clear(java.lang.String)> -> _SINK_
<android.text.format.Time: java.lang.String format(java.lang.String)> -> _SOURCE_
<android.text.format.Time: java.lang.String format2445()> -> _SINK_
<android.text.format.Time: java.lang.String format3339(boolean)> -> _SOURCE_
<android.text.format.Time: int getActualMaximum(int)> -> _SOURCE_
<android.text.format.Time: String getCurrentTimezone()> -> _SOURCE_
<android.text.format.Time: int getJulianDay(long,long)> -> _SOURCE_
<android.text.format.Time: int getWeekNumber()> -> _SOURCE_
<android.text.format.Time: boolean isEpoch(android.text.format.Time)> -> _SOURCE_
<android.text.format.Time: void set(android.text.format.Time)> -> _SINK_
<android.text.format.Time: void set(int,int,int,int,int,int)> -> _SINK_
<android.text.format.Time: void set(int,int,int)> -> _SINK_
<android.text.format.Time: void set(long)> -> _SINK_
<android.text.format.Time: long setJulianDay(int)> -> _SINK_
<android.text.format.Time: void setToNow()> -> _SINK_
<android.text.format.Time: void switchTimezone(java.lang.String)> -> _SINK_
<android.text.format.Time: long toMillis(boolean)> -> _SOURCE_
<android.text.format.Time: java.lang.String toString()> -> _SOURCE_
<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)> -> _SINK_
<android.text.method.KeyListener: int getInputType()> -> _SOURCE_
<android.text.method.DigitsKeyListener: int getInputType()> -> _SOURCE_
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(java.lang.String)> -> _SOURCE_
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance()> -> _SOURCE_
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(androidx.compose.ui.text.intl.Locale,boolean,boolean)> -> _SOURCE_
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(boolean,boolean)> -> _SOURCE_
<android.text.method.TransformationMethod: CharSequence getTransformation(java.lang.CharSequence,android.view.View)> -> _SOURCE_
<android.text.style.AlignmentSpan.Standard: int describeContents()> -> _SOURCE_
<android.text.style.AlignmentSpan.Standard: android.text.Layout.Alignment getAlignment()> -> _SOURCE_
<android.text.style.AlignmentSpan.Standard: int getSpanTypeId()> -> _SOURCE_
<android.text.style.BulletSpan: int describeContents()> -> _SOURCE_
<android.text.style.BulletSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.text.style.BulletSpan: int getBulletRadius()> -> _SOURCE_
<android.text.style.BulletSpan: int getColor()> -> _SOURCE_
<android.text.style.BulletSpan: int getGapWidth()> -> _SOURCE_
<android.text.style.BulletSpan: int getLeadingMargin(boolean)> -> _SOURCE_
<android.text.style.BulletSpan: int getSpanTypeId()> -> _SOURCE_
<android.text.style.EasyEditSpan: int describeContents()> -> _SOURCE_
<android.text.style.EasyEditSpan: int getSpanTypeId()> -> _SOURCE_
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint.FontMetricsInt)> -> _SOURCE_
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()> -> _SOURCE_
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)> -> _SINK_
<android.text.style.IconMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.text.style.IconMarginSpan: int getLeadingMargin(boolean)> -> _SOURCE_
<android.text.style.DrawableMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.text.style.DrawableMarginSpan: int getLeadingMargin(boolean)> -> _SOURCE_
<android.text.style.ImageSpan: java.lang.String getSource()> -> _SOURCE_
<android.text.style.LineBackgroundSpan: void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)> -> _SINK_
<android.text.style.LeadingMarginSpan.Standard: int describeContents()> -> _SOURCE_
<android.text.style.LeadingMarginSpan.Standard: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.text.style.LeadingMarginSpan.Standard: int getLeadingMargin(boolean)> -> _SOURCE_
<android.text.style.LeadingMarginSpan.Standard: int getSpanTypeId()> -> _SOURCE_
<android.text.style.AlignmentSpan: Layout.Alignment getAlignment()> -> _SOURCE_
<android.text.style.QuoteSpan: int describeContents()> -> _SOURCE_
<android.text.style.QuoteSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.text.style.QuoteSpan: int getColor()> -> _SOURCE_
<android.text.style.QuoteSpan: int getGapWidth()> -> _SOURCE_
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)> -> _SOURCE_
<android.text.style.QuoteSpan: int getSpanTypeId()> -> _SOURCE_
<android.text.style.QuoteSpan: int getStripeWidth()> -> _SOURCE_
<android.text.style.LeadingMarginSpan.LeadingMarginSpan2: int getLeadingMarginLineCount()> -> _SOURCE_
<android.text.style.ReplacementSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint.FontMetricsInt)> -> _SOURCE_
<android.text.style.ReplacementSpan: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)> -> _SOURCE_
<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()> -> _SOURCE_
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setDay(int)> -> _SINK_
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setMonth(int)> -> _SINK_
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setWeekday(int)> -> _SINK_
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setYear(int)> -> _SINK_
<android.text.style.LineHeightSpan.Standard: int describeContents()> -> _SOURCE_
<android.text.style.LineHeightSpan.Standard: int getHeight()> -> _SOURCE_
<android.text.style.LineHeightSpan.Standard: int getSpanTypeId()> -> _SOURCE_
<android.text.style.TtsSpan.CardinalBuilder: android.text.style.TtsSpan.CardinalBuilder setNumber(long)> -> _SINK_
<android.text.style.TtsSpan.CardinalBuilder: android.text.style.TtsSpan.CardinalBuilder setNumber(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.Builder: android.text.style.TtsSpan build()> -> _SOURCE_
<android.text.style.TtsSpan.Builder: C setIntArgument(java.lang.String,int)> -> _SINK_
<android.text.style.TtsSpan.Builder: C setLongArgument(java.lang.String,long)> -> _SINK_
<android.text.style.TtsSpan.Builder: C setStringArgument(java.lang.String,java.lang.String)> -> _SINK_
<android.text.style.TabStopSpan: int getTabStop()> -> _SOURCE_
<android.text.style.TtsSpan.DigitsBuilder: android.text.style.TtsSpan.DigitsBuilder setDigits(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setDenominator(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setDenominator(long)> -> _SOURCE_
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setIntegerPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setIntegerPart(long)> -> _SINK_
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setNumerator(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setNumerator(long)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setDenominator(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setDenominator(long)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setFractionalPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setIntegerPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setIntegerPart(long)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumber(long)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumber(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumerator(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumerator(long)> -> _SINK_
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setUnit(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.TelephoneBuilder: android.text.style.TtsSpan.TelephoneBuilder setCountryCode(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.TelephoneBuilder: android.text.style.TtsSpan.TelephoneBuilder setExtension(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.TelephoneBuilder: android.text.style.TtsSpan.TelephoneBuilder setNumberParts(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan: int describeContents()> -> _SOURCE_
<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()> -> _SOURCE_
<android.text.style.TtsSpan: int getSpanTypeId()> -> _SOURCE_
<android.text.style.TtsSpan: java.lang.String getType()> -> _SOURCE_
<android.text.style.TtsSpan.VerbatimBuilder: android.text.style.TtsSpan.VerbatimBuilder setVerbatim(java.lang.String)> -> _SINK_
<android.text.style.TabStopSpan.Standard: int getTabStop()> -> _SOURCE_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setDomain(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setEmailArguments(java.lang.String,java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setFragmentId(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setPassword(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setPath(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setPort(int)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setProtocol(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setQueryString(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setUsername(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.TimeBuilder: android.text.style.TtsSpan.TimeBuilder setHours(int)> -> _SINK_
<android.text.style.TtsSpan.TimeBuilder: android.text.style.TtsSpan.TimeBuilder setMinutes(int)> -> _SINK_
<android.text.style.TtsSpan.SemioticClassBuilder: C setAnimacy(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.SemioticClassBuilder: C setCase(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.SemioticClassBuilder: C setGender(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.SemioticClassBuilder: C setMultiplicity(java.lang.String)> -> _SOURCE_
<android.text.style.URLSpan: int describeContents()> -> _SOURCE_
<android.text.style.URLSpan: int getSpanTypeId()> -> _SOURCE_
<android.text.style.URLSpan: java.lang.String getURL()> -> _SOURCE_
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setArgumentsFromDouble(double,int,int)> -> _SINK_
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setFractionalPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setIntegerPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setIntegerPart(long)> -> _SINK_
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setCurrency(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setFractionalPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setIntegerPart(java.lang.String)> -> _SINK_
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setIntegerPart(long)> -> _SINK_
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setQuantity(java.lang.String)> -> _SINK_
<android.text.util.Linkify.MatchFilter: boolean acceptMatch(java.lang.CharSequence,int,int)> -> _SOURCE_
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)> -> _SINK_
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)> -> _SINK_
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter,Function<String,)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)> -> _SINK_
<android.transition.ArcMotion: float getMaximumAngle()> -> _SOURCE_
<android.transition.ArcMotion: float getMinimumHorizontalAngle()> -> _SOURCE_
<android.transition.ArcMotion: float getMinimumVerticalAngle()> -> _SOURCE_
<android.transition.ArcMotion: void setMaximumAngle(float)> -> _SINK_
<android.text.style.TtsSpan.TextBuilder: android.text.style.TtsSpan.TextBuilder setText(java.lang.String)> -> _SINK_
<android.text.util.Rfc822Tokenizer: int findTokenEnd(java.lang.CharSequence,int)> -> _SOURCE_
<android.text.util.Rfc822Tokenizer: int findTokenStart(java.lang.CharSequence,int)> -> _SOURCE_
<android.text.util.Rfc822Tokenizer: Rfc822Token[] tokenize(java.lang.CharSequence)> -> _SOURCE_
<android.transition.CircularPropagation: void setPropagationSpeed(float)> -> _SINK_
<android.transition.ChangeScroll: String[] getTransitionProperties()> -> _SOURCE_
<android.transition.Scene: void enter()> -> _SINK_
<android.transition.Scene: Scene getCurrentScene(android.view.ViewGroup)> -> _SOURCE_
<android.transition.Scene: Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)> -> _SOURCE_
<android.transition.SidePropagation: void setPropagationSpeed(float)> -> _SINK_
<android.transition.SidePropagation: void setSide(int)> -> _SINK_
<android.text.util.Rfc822Token: java.lang.String getAddress()> -> _SOURCE_
<android.text.util.Rfc822Token: java.lang.String getComment()> -> _SOURCE_
<android.text.util.Rfc822Token: java.lang.String getName()> -> _SOURCE_
<android.text.util.Rfc822Token: String quoteComment(java.lang.String)> -> _SOURCE_
<android.text.util.Rfc822Token: String quoteName(java.lang.String)> -> _SOURCE_
<android.text.util.Rfc822Token: void setAddress(java.lang.String)> -> _SINK_
<android.text.util.Rfc822Token: void setComment(java.lang.String)> -> _SINK_
<android.text.util.Rfc822Token: void setName(java.lang.String)> -> _SINK_
<android.text.util.Rfc822Token: java.lang.String toString()> -> _SOURCE_
<android.transition.ChangeTransform: boolean getReparent()> -> _SOURCE_
<android.transition.ChangeTransform: String[] getTransitionProperties()> -> _SOURCE_
<android.transition.ChangeTransform: void setReparent(boolean)> -> _SINK_
<android.transition.PatternPathMotion: android.graphics.Path getPatternPath()> -> _SOURCE_
<android.transition.PatternPathMotion: void setPatternPath(android.graphics.Path)> -> _SINK_
<android.transition.Slide: int getSlideEdge()> -> _SOURCE_
<android.transition.Slide: void setSlideEdge(int)> -> _SINK_
<android.transition.ChangeBounds: String[] getTransitionProperties()> -> _SOURCE_
<android.transition.VisibilityPropagation: String[] getPropagationProperties()> -> _SOURCE_
<android.transition.VisibilityPropagation: int getViewVisibility(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.VisibilityPropagation: int getViewX(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.VisibilityPropagation: int getViewY(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.TransitionPropagation: String[] getPropagationProperties()> -> _SOURCE_
<android.transition.ChangeClipBounds: String[] getTransitionProperties()> -> _SOURCE_
<android.opengl.Visibility: int getMode()> -> _SOURCE_
<android.opengl.Visibility: String[] getTransitionProperties()> -> _SOURCE_
<android.opengl.Visibility: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)> -> _SOURCE_
<android.opengl.Visibility: boolean isVisible(android.transition.TransitionValues)> -> _SOURCE_
<android.text.style.TtsSpan.OrdinalBuilder: android.text.style.TtsSpan.OrdinalBuilder setNumber(long)> -> _SINK_
<android.text.style.TtsSpan.OrdinalBuilder: android.text.style.TtsSpan.OrdinalBuilder setNumber(java.lang.String)> -> _SINK_
<android.util.ArrayMap: V get(java.lang.Object)> -> _SOURCE_
<android.util.ArrayMap: int indexOfKey(java.lang.Object)> -> _SOURCE_
<android.util.ArrayMap: int indexOfValue(java.lang.Object)> -> _SOURCE_
<android.util.ArrayMap: K keyAt(int)> -> _SOURCE_
<android.util.ArrayMap: V setValueAt(int,V)> -> _SINK_
<android.util.ArrayMap: V valueAt(int)> -> _SOURCE_
<android.util.ArraySet: boolean add(E)> -> _SINK_
<android.util.ArraySet: int indexOf(java.lang.Object)> -> _SOURCE_
<android.util.ArraySet: Iterator<E> iterator()> -> _SOURCE_
<android.util.ArraySet: E valueAt(int)> -> _SOURCE_
<android.transition.ChangeImageTransform: String[] getTransitionProperties()> -> _SOURCE_
<android.transition.TransitionValues: java.lang.String toString()> -> _SOURCE_
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(android.view.View)> -> _SINK_
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(int)> -> _SINK_
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(java.lang.Class)> -> _SINK_
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(java.lang.String)> -> _SINK_
<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)> -> _SINK_
<android.transition.TransitionSet: int getOrdering()> -> _SOURCE_
<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)> -> _SOURCE_
<android.transition.TransitionSet: int getTransitionCount()> -> _SOURCE_
<android.transition.TransitionSet: android.transition.TransitionSet setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)> -> _SINK_
<android.transition.TransitionSet: void setPathMotion(android.transition.PathMotion)> -> _SOURCE_
<android.transition.TransitionSet: void setPropagation(android.transition.TransitionPropagation)> -> _SINK_
<android.transition.TransitionSet: android.transition.TransitionSet setStartDelay(long)> -> _SINK_
<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeCount()> -> _SOURCE_
<android.util.AttributeSet: float getAttributeFloatValue(int,float)> -> _SOURCE_
<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeIntValue(int,int)> -> _SOURCE_
<android.util.AttributeSet: String getAttributeName(int)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeNameResource(int)> -> _SOURCE_
<android.util.AttributeSet: default String getAttributeNamespace(int)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeResourceValue(int,int)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)> -> _SOURCE_
<android.util.AttributeSet: String getAttributeValue(int)> -> _SOURCE_
<android.util.AttributeSet: String getAttributeValue(java.lang.String,java.lang.String)> -> _SOURCE_
<android.util.AttributeSet: String getClassAttribute()> -> _SOURCE_
<android.util.AttributeSet: String getIdAttribute()> -> _SOURCE_
<android.util.AttributeSet: int getIdAttributeResourceValue(int)> -> _SOURCE_
<android.util.AttributeSet: String getPositionDescription()> -> _SOURCE_
<android.util.AttributeSet: int getStyleAttribute()> -> _SOURCE_
<android.util.Base64InputStream: int available()> -> _SOURCE_
<android.util.Base64InputStream: int read()> -> _SOURCE_
<android.util.Base64InputStream: int read(byte[],int,int)> -> _SOURCE_
<android.util.EventLog: int getTagCode(java.lang.String)> -> _SOURCE_
<android.util.EventLog: String getTagName(int)> -> _SOURCE_
<android.util.EventLog: void readEvents(int[],Collection<EventLog.Event>)> -> _SOURCE_
<android.util.EventLog: int writeEvent(int,java.lang.String)> -> _SINK_
<android.util.EventLog: int writeEvent(int,Object[])> -> _SINK_
<android.util.EventLog: int writeEvent(int,int)> -> _SINK_
<android.util.EventLog: int writeEvent(int,float)> -> _SINK_
<android.util.EventLog: int writeEvent(int,long)> -> _SINK_
<android.util.DebugUtils: boolean isObjectSelected(java.lang.Object)> -> _SOURCE_
<android.util.Base64OutputStream: void write(byte[],int,int)> -> _SINK_
<android.util.Base64OutputStream: void write(int)> -> _SINK_
<android.util.AtomicFile: java.io.File getBaseFile()> -> _SOURCE_
<android.util.AtomicFile: long getLastModifiedTime()> -> _SOURCE_
<android.util.AtomicFile: java.io.FileInputStream openRead()> -> _SOURCE_
<android.util.AtomicFile: byte[] readFully()> -> _SOURCE_
<android.util.AtomicFile: java.lang.String toString()> -> _SOURCE_
<android.util.Base64: byte[] decode(java.lang.String,int)> -> _SOURCE_
<android.util.Base64: byte[] decode(byte[],int)> -> _SOURCE_
<android.util.Base64: byte[] decode(byte[],int,int,int)> -> _SOURCE_
<android.util.Base64: byte[] encode(byte[],int)> -> _SOURCE_
<android.util.Base64: byte[] encode(byte[],int,int,int)> -> _SOURCE_
<android.util.Base64: String encodeToString(byte[],int,int,int)> -> _SOURCE_
<android.util.Base64: String encodeToString(byte[],int)> -> _SOURCE_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: String getStackTraceString(java.lang.Throwable)> -> _SOURCE_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: boolean isLoggable(java.lang.String,int)> -> _SOURCE_
<android.util.Log: int println(int,java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SOURCE_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SOURCE_
<android.util.IntProperty: void set(T,java.lang.Integer)> -> _SINK_
<android.util.IntProperty: void setValue(T,int)> -> _SINK_
<android.util.LongSparseArray: E get(long)> -> _SOURCE_
<android.util.LongSparseArray: E get(long,E)> -> _SOURCE_
<android.util.LongSparseArray: int indexOfKey(long)> -> _SOURCE_
<android.util.LongSparseArray: int indexOfValue(E)> -> _SOURCE_
<android.util.LongSparseArray: long keyAt(int)> -> _SOURCE_
<android.util.LongSparseArray: void setValueAt(int,E)> -> _SINK_
<android.util.LongSparseArray: int size()> -> _SOURCE_
<android.util.LongSparseArray: E valueAt(int)> -> _SOURCE_
<android.util.Half: short abs(short)> -> _SOURCE_
<android.util.Half: byte byteValue()> -> _SOURCE_
<android.util.Half: short copySign(short,short)> -> _SOURCE_
<android.util.Half: short floor(short)> -> _SOURCE_
<android.util.Half: int getExponent(short)> -> _SOURCE_
<android.util.Half: int getSignificand(short)> -> _SOURCE_
<android.util.Half: short halfValue()> -> _SOURCE_
<android.util.Half: int hashCode(short)> -> _SOURCE_
<android.util.Half: int hashCode()> -> _SOURCE_
<android.util.Half: short intBitsToHalf(int)> -> _SOURCE_
<android.util.Half: boolean isInfinite(short)> -> _SOURCE_
<android.util.Half: boolean isNormalized(short)> -> _SOURCE_
<android.util.Half: long longValue()> -> _SOURCE_
<android.util.Half: short max(short,short)> -> _SOURCE_
<android.util.Half: short parseHalf(java.lang.String)> -> _SOURCE_
<android.util.Half: short round(short)> -> _SOURCE_
<android.util.Half: short shortValue()> -> _SOURCE_
<android.util.Half: String toHexString(short)> -> _SOURCE_
<android.util.Half: String toString(short)> -> _SOURCE_
<android.util.Half: java.lang.String toString()> -> _SOURCE_
<android.util.Half: short trunc(short)> -> _SOURCE_
<android.util.Half: Half valueOf(java.lang.String)> -> _SOURCE_
<android.util.JsonWriter: android.util.JsonWriter beginArray()> -> _SINK_
<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)> -> _SOURCE_
<android.util.JsonWriter: void setIndent(java.lang.String)> -> _SINK_
<android.util.JsonWriter: void setLenient(boolean)> -> _SINK_
<android.util.JsonWriter: android.util.JsonWriter value(double)> -> _SINK_
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)> -> _SINK_
<android.util.JsonWriter: android.util.JsonWriter value(boolean)> -> _SINK_
<android.util.JsonWriter: android.util.JsonWriter value(long)> -> _SINK_
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)> -> _SINK_
<android.util.LogPrinter: void println(java.lang.String)> -> _SINK_
<android.util.PrintStreamPrinter: void println(java.lang.String)> -> _SINK_
<android.util.LruCache: int createCount()> -> _SOURCE_
<android.util.LruCache: int evictionCount()> -> _SOURCE_
<android.util.LruCache: V get(K)> -> _SOURCE_
<android.util.LruCache: int hitCount()> -> _SOURCE_
<android.util.LruCache: int maxSize()> -> _SOURCE_
<android.util.LruCache: int missCount()> -> _SOURCE_
<android.util.LruCache: V put(K,V)> -> _SOURCE_
<android.util.LruCache: int putCount()> -> _SOURCE_
<android.util.LruCache: void resize(int)> -> _SINK_
<android.util.LruCache: int size()> -> _SOURCE_
<android.util.LruCache: String toString()> -> _SOURCE_
<android.util.FloatProperty: void set(T,java.lang.Float)> -> _SINK_
<android.util.FloatProperty: void setValue(T,float)> -> _SINK_
<android.util.Printer: void println(java.lang.String)> -> _SINK_
<android.util.Pair: int hashCode()> -> _SOURCE_
<android.util.Pair: java.lang.String toString()> -> _SOURCE_
<android.util.PrintWriterPrinter: void println(java.lang.String)> -> _SINK_
<android.util.JsonReader: boolean isLenient()> -> _SOURCE_
<android.util.JsonReader: boolean nextBoolean()> -> _SOURCE_
<android.util.JsonReader: double nextDouble()> -> _SOURCE_
<android.util.JsonReader: int nextInt()> -> _SOURCE_
<android.util.JsonReader: long nextLong()> -> _SOURCE_
<android.util.JsonReader: java.lang.String nextName()> -> _SOURCE_
<android.util.JsonReader: java.lang.String nextString()> -> _SOURCE_
<android.util.JsonReader: android.util.JsonToken peek()> -> _SOURCE_
<android.util.JsonReader: void setLenient(boolean)> -> _SOURCE_
<android.util.Patterns: String digitsAndPlusOnly(java.util.regex.Matcher)> -> _SOURCE_
<android.util.Range: T clamp(T)> -> _SINK_
<android.util.Range: <T extends Comparable<? super T>> Range create(T,T)> -> _SINK_
<android.util.Range: Range extend(T)> -> _SOURCE_
<android.util.Range: Range extend(T,T)> -> _SOURCE_
<android.util.Range: T getLower()> -> _SOURCE_
<android.util.Range: T getUpper()> -> _SOURCE_
<android.util.Range: Range intersect(T,T)> -> _SOURCE_
<android.util.Range: Range intersect(Range)> -> _SOURCE_
<android.util.Size: int getHeight()> -> _SOURCE_
<android.util.Size: int getWidth()> -> _SOURCE_
<android.util.Size: java.lang.String toString()> -> _SOURCE_
<android.util.SparseIntArray: int get(int)> -> _SOURCE_
<android.util.SparseIntArray: int get(int,int)> -> _SOURCE_
<android.util.SparseIntArray: int indexOfKey(int)> -> _SOURCE_
<android.util.SparseIntArray: int indexOfValue(int)> -> _SOURCE_
<android.util.SparseIntArray: void setValueAt(int,int)> -> _SINK_
<android.util.SparseIntArray: int size()> -> _SOURCE_
<android.util.SparseBooleanArray: boolean get(int)> -> _SOURCE_
<android.util.SparseBooleanArray: boolean get(int,boolean)> -> _SOURCE_
<android.util.SparseBooleanArray: int indexOfKey(int)> -> _SOURCE_
<android.util.SparseBooleanArray: int indexOfValue(boolean)> -> _SOURCE_
<android.util.SparseBooleanArray: void setValueAt(int,boolean)> -> _SINK_
<android.util.SparseBooleanArray: int size()> -> _SOURCE_
<android.util.Rational: double doubleValue()> -> _SOURCE_
<android.util.Rational: int getDenominator()> -> _SOURCE_
<android.util.Rational: boolean isFinite()> -> _SOURCE_
<android.util.Rational: long longValue()> -> _SOURCE_
<android.util.Rational: short shortValue()> -> _SOURCE_
<android.util.Rational: java.lang.String toString()> -> _SOURCE_
<android.util.Property: V get(T)> -> _SOURCE_
<android.util.Property: java.lang.String getName()> -> _SOURCE_
<android.util.Property: Class<V> getType()> -> _SOURCE_
<android.util.Property: void set(T,V)> -> _SINK_
<android.util.SparseLongArray: long get(int)> -> _SOURCE_
<android.util.SparseLongArray: long get(int,long)> -> _SOURCE_
<android.util.SparseLongArray: int indexOfKey(int)> -> _SOURCE_
<android.util.SparseLongArray: int indexOfValue(long)> -> _SOURCE_
<android.util.SparseLongArray: int size()> -> _SOURCE_
<android.util.SparseLongArray: long valueAt(int)> -> _SOURCE_
<android.util.SparseArray: boolean contains(int)> -> _SOURCE_
<android.util.SparseArray: int contentHashCode()> -> _SOURCE_
<android.util.SparseArray: E get(int)> -> _SOURCE_
<android.util.SparseArray: E get(int,E)> -> _SOURCE_
<android.util.SparseArray: int indexOfKey(int)> -> _SOURCE_
<android.util.SparseArray: int indexOfValue(E)> -> _SOURCE_
<android.util.SparseArray: void setValueAt(int,E)> -> _SINK_
<android.util.SparseArray: int size()> -> _SOURCE_
<android.util.TimingLogger: void dumpToLog()> -> _SINK_
<android.util.TimingLogger: void reset()> -> _SOURCE_
<android.util.TimingLogger: void reset(java.lang.String,java.lang.String)> -> _SOURCE_
<android.util.StringBuilderPrinter: void println(java.lang.String)> -> _SINK_
<android.util.SizeF: float getHeight()> -> _SOURCE_
<android.util.SizeF: float getWidth()> -> _SOURCE_
<android.util.SizeF: java.lang.String toString()> -> _SOURCE_
<android.util.SizeF: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.util.TimeUtils: TimeZone getTimeZone(int,boolean,long,java.lang.String)> -> _SOURCE_
<android.util.TimeUtils: String getTimeZoneDatabaseVersion()> -> _SOURCE_
<android.util.TimeUtils: List<String> getTimeZoneIdsForCountryCode(java.lang.String)> -> _SOURCE_
<android.util.Xml: AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.util.Xml: Xml.Encoding findEncodingByName(java.lang.String)> -> _SOURCE_
<android.util.Xml: XmlPullParser newPullParser()> -> _SOURCE_
<android.util.proto.ProtoOutputStream: int checkFieldId(long,long)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void dump(java.lang.String)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: byte[] getBytes()> -> _SINK_
<android.util.proto.ProtoOutputStream: String getFieldCountString(long)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: String getFieldIdString(long)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: String getFieldTypeString(long)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: int getRawSize()> -> _SOURCE_
<android.util.proto.ProtoOutputStream: String getWireTypeString(int)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: long makeFieldId(int,long)> -> _SINK_
<android.util.proto.ProtoOutputStream: long makeToken(int,boolean,int,int,int)> -> _SINK_
<android.util.proto.ProtoOutputStream: String token2String(long)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void write(long,boolean)> -> _SINK_
<android.util.proto.ProtoOutputStream: void write(long,int)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void write(long,float)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void write(long,long)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void write(long,double)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void write(long,byte[])> -> _SOURCE_
<android.util.proto.ProtoOutputStream: void writeTag(int,int)> -> _SINK_
<android.view.ActionProvider: boolean hasSubMenu()> -> _SOURCE_
<android.view.ActionProvider: boolean isVisible()> -> _SOURCE_
<android.view.ActionProvider: boolean onPerformDefaultAction()> -> _SINK_
<android.view.AttachedSurfaceControl: default int getBufferTransformHint()> -> _SINK_
<android.view.AttachedSurfaceControl: default void setTouchableRegion(android.graphics.Region)> -> _SOURCE_
<android.view.ContentInfo: int describeContents()> -> _SOURCE_
<android.view.ContentInfo: android.content.ClipData getClip()> -> _SINK_
<android.view.ContentInfo: android.os.Bundle getExtras()> -> _SINK_
<android.view.ContentInfo: int getFlags()> -> _SINK_
<android.view.ContentInfo: android.net.Uri getLinkUri()> -> _SOURCE_
<android.view.ContentInfo: java.lang.String toString()> -> _SOURCE_
<android.view.ContentInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.ContextMenu: ContextMenu setHeaderIcon(int)> -> _SINK_
<android.view.ContextMenu: ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.ContextMenu: ContextMenu setHeaderTitle(int)> -> _SINK_
<android.view.ContextMenu: ContextMenu setHeaderTitle(java.lang.CharSequence)> -> _SINK_
<android.view.ContextMenu: ContextMenu setHeaderView(android.view.View)> -> _SINK_
<android.view.Display: long getAppVsyncOffsetNanos()> -> _SOURCE_
<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)> -> _SOURCE_
<android.view.Display: android.view.DisplayCutout getCutout()> -> _SOURCE_
<android.view.Display: android.hardware.display.DeviceProductInfo getDeviceProductInfo()> -> _SOURCE_
<android.view.Display: int getDisplayId()> -> _SOURCE_
<android.view.Display: int getFlags()> -> _SOURCE_
<android.view.Display: android.view.Display.HdrCapabilities getHdrCapabilities()> -> _SINK_
<android.view.Display: int getHeight()> -> _SOURCE_
<android.view.Display: void getMetrics(android.util.DisplayMetrics)> -> _SOURCE_
<android.view.Display: android.view.Display.Mode getMode()> -> _SOURCE_
<android.view.Display: java.lang.String getName()> -> _SOURCE_
<android.view.Display: int getOrientation()> -> _SOURCE_
<android.view.Display: int getPixelFormat()> -> _SOURCE_
<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()> -> _SOURCE_
<android.view.Display: long getPresentationDeadlineNanos()> -> _SINK_
<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)> -> _SOURCE_
<android.view.Display: void getRealSize(android.graphics.Point)> -> _SOURCE_
<android.view.Display: void getRectSize(android.graphics.Rect)> -> _SOURCE_
<android.view.Display: float getRefreshRate()> -> _SOURCE_
<android.view.Display: int getRotation()> -> _SOURCE_
<android.view.Display: android.view.RoundedCorner getRoundedCorner(int)> -> _SOURCE_
<android.view.Display: void getSize(android.graphics.Point)> -> _SOURCE_
<android.view.Display: int getState()> -> _SOURCE_
<android.view.Display: Mode[] getSupportedModes()> -> _SOURCE_
<android.view.Display: float[] getSupportedRefreshRates()> -> _SOURCE_
<android.view.Display: int getWidth()> -> _SOURCE_
<android.view.Display: boolean isHdr()> -> _SOURCE_
<android.view.Display: boolean isMinimalPostProcessingSupported()> -> _SOURCE_
<android.view.Display: boolean isValid()> -> _SOURCE_
<android.view.Display: boolean isWideColorGamut()> -> _SOURCE_
<android.view.Display: java.lang.String toString()> -> _SOURCE_
<android.view.Display.Mode: int describeContents()> -> _SOURCE_
<android.view.Display.Mode: int getModeId()> -> _SOURCE_
<android.view.Display.Mode: int getPhysicalHeight()> -> _SOURCE_
<android.view.Display.Mode: int getPhysicalWidth()> -> _SOURCE_
<android.view.Display.Mode: float getRefreshRate()> -> _SOURCE_
<android.view.Display.Mode: java.lang.String toString()> -> _SOURCE_
<android.view.DragEvent: int describeContents()> -> _SOURCE_
<android.view.DragEvent: android.content.ClipData getClipData()> -> _SOURCE_
<android.view.DragEvent: android.content.ClipDescription getClipDescription()> -> _SOURCE_
<android.view.DragEvent: java.lang.Object getLocalState()> -> _SOURCE_
<android.view.DragEvent: float getX()> -> _SOURCE_
<android.view.DragEvent: float getY()> -> _SOURCE_
<android.view.Display.HdrCapabilities: int describeContents()> -> _SOURCE_
<android.view.Display.HdrCapabilities: float getDesiredMaxAverageLuminance()> -> _SOURCE_
<android.view.Display.HdrCapabilities: float getDesiredMaxLuminance()> -> _SOURCE_
<android.view.Display.HdrCapabilities: float getDesiredMinLuminance()> -> _SOURCE_
<android.view.Display.HdrCapabilities: int[] getSupportedHdrTypes()> -> _SOURCE_
<android.view.DragAndDropPermissions: int describeContents()> -> _SOURCE_
<android.view.FrameStats: long getEndTimeNano()> -> _SOURCE_
<android.view.FrameStats: int getFrameCount()> -> _SOURCE_
<android.view.FrameStats: long getFramePresentedTimeNano(int)> -> _SOURCE_
<android.view.FrameStats: long getRefreshPeriodNano()> -> _SOURCE_
<android.view.FrameStats: long getStartTimeNano()> -> _SOURCE_
<android.view.FrameMetrics: long getMetric(int)> -> _SOURCE_
<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)> -> _SINK_
<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources.Theme getTheme()> -> _SOURCE_
<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources.Theme)> -> _SINK_
<android.view.ContextThemeWrapper: void setTheme(int)> -> _SINK_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()> -> _SOURCE_
<android.view.DisplayCutout: List<Rect> getBoundingRects()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Path getCutoutPath()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()> -> _SOURCE_
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)> -> _SINK_
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)> -> _SINK_
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)> -> _SINK_
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)> -> _SINK_
<android.view.Gravity: int getAbsoluteGravity(int,int)> -> _SOURCE_
<android.view.InputDevice: int describeContents()> -> _SOURCE_
<android.view.InputDevice: android.hardware.BatteryState getBatteryState()> -> _SOURCE_
<android.view.InputDevice: int getControllerNumber()> -> _SOURCE_
<android.view.InputDevice: java.lang.String getDescriptor()> -> _SOURCE_
<android.view.InputDevice: InputDevice getDevice(int)> -> _SOURCE_
<android.view.InputDevice: int[] getDeviceIds()> -> _SOURCE_
<android.view.InputDevice: int getId()> -> _SOURCE_
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SOURCE_
<android.view.InputDevice: int getKeyCodeForKeyLocation(int)> -> _SOURCE_
<android.view.InputDevice: int getKeyboardType()> -> _SOURCE_
<android.view.InputDevice: android.hardware.lights.LightsManager getLightsManager()> -> _SOURCE_
<android.view.InputDevice: android.view.InputDevice.MotionRange getMotionRange(int)> -> _SOURCE_
<android.view.InputDevice: android.view.InputDevice.MotionRange getMotionRange(int,int)> -> _SOURCE_
<android.view.InputDevice: List<InputDevice.MotionRange> getMotionRanges()> -> _SOURCE_
<android.view.InputDevice: java.lang.String getName()> -> _SOURCE_
<android.view.InputDevice: int getProductId()> -> _SOURCE_
<android.view.InputDevice: android.hardware.SensorManager getSensorManager()> -> _SOURCE_
<android.view.InputDevice: int getSources()> -> _SOURCE_
<android.view.InputDevice: int getVendorId()> -> _SOURCE_
<android.view.InputDevice: android.os.Vibrator getVibrator()> -> _SOURCE_
<android.view.InputDevice: android.os.VibratorManager getVibratorManager()> -> _SOURCE_
<android.view.InputDevice: boolean[] hasKeys(int[])> -> _SOURCE_
<android.view.InputDevice: boolean hasMicrophone()> -> _SOURCE_
<android.view.InputDevice: boolean isEnabled()> -> _SOURCE_
<android.view.InputDevice: boolean isExternal()> -> _SOURCE_
<android.view.InputDevice: boolean isVirtual()> -> _SOURCE_
<android.view.InputDevice: boolean supportsSource(int)> -> _SOURCE_
<android.view.FocusFinder: android.view.View findNearestTouchable(android.view.ViewGroup,int,int,int,int[])> -> _SOURCE_
<android.view.FocusFinder: android.view.View findNextKeyboardNavigationCluster(android.view.View,android.view.View,int)> -> _SOURCE_
<android.view.FocusFinder: FocusFinder getInstance()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: int describeContents()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: List<KeyboardShortcutInfo> getItems()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.view.KeyCharacterMap: int describeContents()> -> _SOURCE_
<android.view.KeyCharacterMap: boolean deviceHasKey(int)> -> _SOURCE_
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])> -> _SOURCE_
<android.view.KeyCharacterMap: int get(int,int)> -> _SOURCE_
<android.view.KeyCharacterMap: int getDeadChar(int,int)> -> _SOURCE_
<android.view.KeyCharacterMap: char getDisplayLabel(int)> -> _SOURCE_
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap.KeyData)> -> _SOURCE_
<android.view.KeyCharacterMap: int getKeyboardType()> -> _SOURCE_
<android.view.KeyCharacterMap: char getMatch(int,char[],int)> -> _SOURCE_
<android.view.KeyCharacterMap: char getMatch(int,char[])> -> _SOURCE_
<android.view.KeyCharacterMap: int getModifierBehavior()> -> _SOURCE_
<android.view.KeyCharacterMap: char getNumber(int)> -> _SOURCE_
<android.view.KeyCharacterMap: boolean isPrintingKey(int)> -> _SOURCE_
<android.view.KeyCharacterMap: KeyCharacterMap load(int)> -> _SOURCE_
<android.view.LayoutInflater.Factory2: View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.view.InputEvent: int describeContents()> -> _SOURCE_
<android.view.InputEvent: InputDevice getDevice()> -> _SOURCE_
<android.view.InputEvent: int getDeviceId()> -> _SOURCE_
<android.view.InputEvent: long getEventTime()> -> _SOURCE_
<android.view.InputEvent: int getSource()> -> _SOURCE_
<android.view.InputDevice.MotionRange: int getAxis()> -> _SOURCE_
<android.view.InputDevice.MotionRange: float getFlat()> -> _SOURCE_
<android.view.InputDevice.MotionRange: float getFuzz()> -> _SOURCE_
<android.view.InputDevice.MotionRange: float getMax()> -> _SOURCE_
<android.view.InputDevice.MotionRange: float getMin()> -> _SOURCE_
<android.view.InputDevice.MotionRange: float getRange()> -> _SOURCE_
<android.view.InputDevice.MotionRange: float getResolution()> -> _SOURCE_
<android.view.InputDevice.MotionRange: int getSource()> -> _SOURCE_
<android.view.KeyboardShortcutInfo: int describeContents()> -> _SOURCE_
<android.view.KeyboardShortcutInfo: char getBaseCharacter()> -> _SOURCE_
<android.view.Menu: MenuItem add(int,int,int,java.lang.CharSequence)> -> _SINK_
<android.view.Menu: MenuItem add(int)> -> _SINK_
<android.view.Menu: MenuItem add(java.lang.CharSequence)> -> _SINK_
<android.view.Menu: MenuItem add(int,int,int,int)> -> _SINK_
<android.view.Menu: SubMenu addSubMenu(java.lang.CharSequence)> -> _SINK_
<android.view.Menu: SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> -> _SINK_
<android.view.Menu: SubMenu addSubMenu(int)> -> _SINK_
<android.view.Menu: MenuItem findItem(int)> -> _SOURCE_
<android.view.Menu: MenuItem getItem(int)> -> _SOURCE_
<android.view.Menu: boolean hasVisibleItems()> -> _SOURCE_
<android.view.Menu: default void setGroupDividerEnabled(boolean)> -> _SINK_
<android.view.Menu: int size()> -> _SOURCE_
<android.view.MotionEvent.PointerCoords: float getAxisValue(int)> -> _SOURCE_
<android.view.MotionEvent.PointerCoords: void setAxisValue(int,float)> -> _SINK_
<android.view.OnReceiveContentListener: ContentInfo onReceiveContent(android.view.View,android.view.ContentInfo)> -> _SOURCE_
<android.view.OrientationListener: void enable()> -> _SINK_
<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)> -> _SOURCE_
<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)> -> _SOURCE_
<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)> -> _SOURCE_
<android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)> -> _SOURCE_
<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)> -> _SOURCE_
<android.view.PointerIcon: int describeContents()> -> _SOURCE_
<android.view.PointerIcon: PointerIcon getSystemIcon(android.content.Context,int)> -> _SOURCE_
<android.view.ScaleGestureDetector: float getCurrentSpan()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getCurrentSpanX()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getCurrentSpanY()> -> _SOURCE_
<android.view.ScaleGestureDetector: long getEventTime()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getFocusX()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getFocusY()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getPreviousSpan()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getPreviousSpanX()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getPreviousSpanY()> -> _SOURCE_
<android.view.ScaleGestureDetector: long getTimeDelta()> -> _SOURCE_
<android.view.RoundedCorner: int describeContents()> -> _SOURCE_
<android.view.RoundedCorner: android.graphics.Point getCenter()> -> _SOURCE_
<android.view.RoundedCorner: int getPosition()> -> _SOURCE_
<android.view.RoundedCorner: int getRadius()> -> _SOURCE_
<android.view.RoundedCorner: java.lang.String toString()> -> _SOURCE_
<android.view.SoundEffectConstants: int getConstantForFocusDirection(int,boolean)> -> _SOURCE_
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)> -> _SOURCE_
<android.view.SubMenu: MenuItem getItem()> -> _SOURCE_
<android.view.SubMenu: SubMenu setHeaderIcon(int)> -> _SINK_
<android.view.SubMenu: SubMenu setHeaderIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.SubMenu: SubMenu setHeaderView(android.view.View)> -> _SINK_
<android.view.SubMenu: SubMenu setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.SubMenu: SubMenu setIcon(int)> -> _SINK_
<android.view.SearchEvent: android.view.InputDevice getInputDevice()> -> _SOURCE_
<android.view.SurfaceControl.Transaction: int describeContents()> -> _SOURCE_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setAlpha(android.view.SurfaceControl,float)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setBufferTransform(android.view.SurfaceControl,int)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setDamageRegion(android.view.SurfaceControl,android.graphics.Region)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setDataSpace(android.view.SurfaceControl,int)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setFrameRate(android.view.SurfaceControl,float,int,int)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setFrameRate(android.view.SurfaceControl,float,int)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setOpaque(android.view.SurfaceControl,boolean)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setScale(android.view.SurfaceControl,float,float)> -> _SINK_
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setVisibility(android.view.SurfaceControl,boolean)> -> _SINK_
<android.view.SurfaceHolder: Rect getSurfaceFrame()> -> _SOURCE_
<android.view.SurfaceHolder: Canvas lockCanvas()> -> _SINK_
<android.view.SurfaceHolder: void setFixedSize(int,int)> -> _SINK_
<android.view.SurfaceHolder: void setFormat(int)> -> _SINK_
<android.view.SurfaceHolder: void setKeepScreenOn(boolean)> -> _SINK_
<android.view.SurfaceHolder: void setSizeFromLayout()> -> _SINK_
<android.view.SurfaceHolder: void setType(int)> -> _SINK_
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setBufferSize(int,int)> -> _SINK_
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setFormat(int)> -> _SINK_
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setHidden(boolean)> -> _SINK_
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setOpaque(boolean)> -> _SINK_
<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()> -> _SOURCE_
<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()> -> _SOURCE_
<android.view.SurfaceControlViewHost.SurfacePackage: int describeContents()> -> _SOURCE_
<android.view.VerifiedKeyEvent: int describeContents()> -> _SOURCE_
<android.view.VerifiedKeyEvent: long getDownTimeNanos()> -> _SOURCE_
<android.view.VerifiedKeyEvent: java.lang.Boolean getFlag(int)> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getKeyCode()> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getMetaState()> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getRepeatCount()> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getScanCode()> -> _SOURCE_
<android.view.VerifiedMotionEvent: int describeContents()> -> _SOURCE_
<android.view.VerifiedMotionEvent: long getDownTimeNanos()> -> _SOURCE_
<android.view.VerifiedMotionEvent: int getMetaState()> -> _SOURCE_
<android.view.VerifiedMotionEvent: float getRawX()> -> _SOURCE_
<android.view.VerifiedMotionEvent: float getRawY()> -> _SOURCE_
<android.view.View.AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.View.AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.view.View.AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<android.view.View.AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)> -> _SINK_
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()> -> _SOURCE_
<android.view.SurfaceView: int getImportantForAccessibility()> -> _SOURCE_
<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()> -> _SOURCE_
<android.view.SurfaceView: void setAlpha(float)> -> _SINK_
<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost.SurfacePackage)> -> _SOURCE_
<android.view.SurfaceView: void setClipBounds(android.graphics.Rect)> -> _SINK_
<android.view.SurfaceView: void setSecure(boolean)> -> _SINK_
<android.view.SurfaceView: void setVisibility(int)> -> _SINK_
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)> -> _SINK_
<android.view.SurfaceView: void setZOrderOnTop(boolean)> -> _SINK_
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)> -> _SOURCE_
<android.view.TextureView: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)> -> _SINK_
<android.view.TextureView: int getLayerType()> -> _SOURCE_
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SOURCE_
<android.view.TextureView: android.view.TextureView.SurfaceTextureListener getSurfaceTextureListener()> -> _SOURCE_
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)> -> _SOURCE_
<android.view.TextureView: boolean isAvailable()> -> _SOURCE_
<android.view.TextureView: android.graphics.Canvas lockCanvas()> -> _SINK_
<android.view.TextureView: void setLayerType(int,android.graphics.Paint)> -> _SINK_
<android.view.TextureView: void setOpaque(boolean)> -> _SOURCE_
<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)> -> _SINK_
<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView.SurfaceTextureListener)> -> _SINK_
<android.view.TextureView: void setTransform(android.graphics.Matrix)> -> _SINK_
<android.view.View.MeasureSpec: int getMode(int)> -> _SOURCE_
<android.view.View.MeasureSpec: int getSize(int)> -> _SOURCE_
<android.view.View.MeasureSpec: int makeMeasureSpec(int,int)> -> _SINK_
<android.view.View.MeasureSpec: String toString(int)> -> _SOURCE_
<android.view.View.DragShadowBuilder: View getView()> -> _SOURCE_
<android.view.View.DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)> -> _SINK_
<android.view.View.DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)> -> _SOURCE_
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)> -> _SINK_
<android.view.VelocityTracker: void computeCurrentVelocity(int)> -> _SINK_
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)> -> _SOURCE_
<android.view.VelocityTracker: float getXVelocity(int)> -> _SOURCE_
<android.view.VelocityTracker: float getXVelocity()> -> _SOURCE_
<android.view.VelocityTracker: float getYVelocity()> -> _SOURCE_
<android.view.VelocityTracker: float getYVelocity(int)> -> _SOURCE_
<android.view.VelocityTracker: VelocityTracker obtain()> -> _SOURCE_
<android.view.ViewAnimationUtils: Animator createCircularReveal(android.view.View,int,int,float,float)> -> _SOURCE_
<android.view.VerifiedInputEvent: int describeContents()> -> _SOURCE_
<android.view.VerifiedInputEvent: int getDeviceId()> -> _SOURCE_
<android.view.VerifiedInputEvent: int getDisplayId()> -> _SOURCE_
<android.view.VerifiedInputEvent: long getEventTimeNanos()> -> _SOURCE_
<android.view.VerifiedInputEvent: int getSource()> -> _SOURCE_
<android.view.ViewDebug.CapturedViewProperty: boolean retrieveReturn()> -> _SOURCE_
<android.view.ViewDebug.FlagToString: java.lang.String name()> -> _SINK_
<android.view.ViewDebug.ExportedProperty: boolean deepExport()> -> _SOURCE_
<android.view.ViewDebug.ExportedProperty: FlagToString[] flagMapping()> -> _SINK_
<android.view.ViewDebug.ExportedProperty: boolean formatToHexString()> -> _SINK_
<android.view.ViewDebug.ExportedProperty: IntToString[] indexMapping()> -> _SINK_
<android.view.ViewDebug.ExportedProperty: IntToString[] mapping()> -> _SINK_
<android.view.ViewDebug.ExportedProperty: java.lang.String prefix()> -> _SINK_
<android.view.ViewDebug.ExportedProperty: boolean resolveId()> -> _SOURCE_
<android.view.ViewGroup.MarginLayoutParams: int getLayoutDirection()> -> _SINK_
<android.view.ViewGroup.MarginLayoutParams: int getMarginEnd()> -> _SOURCE_
<android.view.ViewGroup.MarginLayoutParams: int getMarginStart()> -> _SOURCE_
<android.view.ViewGroup.MarginLayoutParams: void setMarginEnd(int)> -> _SINK_
<android.view.ViewGroup.MarginLayoutParams: void setMarginStart(int)> -> _SINK_
<android.view.ViewGroup.MarginLayoutParams: void setMargins(int,int,int,int)> -> _SINK_
<android.view.ViewDebug.IntToString: int from()> -> _SOURCE_
<android.view.ViewDebug.IntToString: java.lang.String to()> -> _SINK_
<android.view.ViewStructure.HtmlInfo: List<Pair<String, String>> getAttributes()> -> _SOURCE_
<android.view.ViewStructure.HtmlInfo: String getTag()> -> _SOURCE_
<android.view.ViewStructure: AutofillId getAutofillId()> -> _SOURCE_
<android.view.ViewStructure: int getChildCount()> -> _SOURCE_
<android.view.ViewStructure: CharSequence getHint()> -> _SOURCE_
<android.view.ViewStructure: CharSequence getText()> -> _SOURCE_
<android.view.ViewStructure: int getTextSelectionStart()> -> _SOURCE_
<android.view.ViewStructure: boolean hasExtras()> -> _SOURCE_
<android.view.ViewStructure: ViewStructure.HtmlInfo.Builder newHtmlInfoBuilder(java.lang.String)> -> _SOURCE_
<android.view.ViewStructure: void setAlpha(float)> -> _SINK_
<android.view.ViewStructure: void setAutofillHints(String[])> -> _SINK_
<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)> -> _SINK_
<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)> -> _SINK_
<android.view.ViewStructure: void setAutofillOptions(CharSequence[])> -> _SINK_
<android.view.ViewStructure: void setAutofillType(int)> -> _SINK_
<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)> -> _SINK_
<android.view.ViewStructure: void setChildCount(int)> -> _SINK_
<android.view.ViewStructure: void setClassName(java.lang.String)> -> _SINK_
<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.view.ViewStructure: void setDataIsSensitive(boolean)> -> _SINK_
<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)> -> _SINK_
<android.view.ViewStructure: void setElevation(float)> -> _SINK_
<android.view.ViewStructure: void setHint(java.lang.CharSequence)> -> _SINK_
<android.view.ViewStructure: void setHintIdEntry(java.lang.String)> -> _SINK_
<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure.HtmlInfo)> -> _SINK_
<android.view.ViewStructure: void setImportantForAutofill(int)> -> _SINK_
<android.view.ViewStructure: void setInputType(int)> -> _SINK_
<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)> -> _SINK_
<android.view.ViewStructure: void setLongClickable(boolean)> -> _SINK_
<android.view.ViewStructure: void setMaxTextEms(int)> -> _SINK_
<android.view.ViewStructure: void setMaxTextLength(int)> -> _SINK_
<android.view.ViewStructure: void setMinTextEms(int)> -> _SINK_
<android.view.ViewStructure: void setOpaque(boolean)> -> _SINK_
<android.view.ViewStructure: void setReceiveContentMimeTypes(String[])> -> _SINK_
<android.view.ViewStructure: void setText(java.lang.CharSequence)> -> _SINK_
<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)> -> _SINK_
<android.view.ViewStructure: void setTextIdEntry(java.lang.String)> -> _SINK_
<android.view.ViewStructure: void setTextLines(int[],int[])> -> _SINK_
<android.view.ViewStructure: void setTextStyle(float,int,int,int)> -> _SINK_
<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)> -> _SINK_
<android.view.ViewStructure: void setVisibility(int)> -> _SINK_
<android.view.ViewStructure: void setWebDomain(java.lang.String)> -> _SINK_
<android.view.ViewParent: void bringChildToFront(android.view.View)> -> _SINK_
<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)> -> _SOURCE_
<android.view.ViewParent: ViewParent getParent()> -> _SOURCE_
<android.view.ViewParent: ViewParent getParentForAccessibility()> -> _SOURCE_
<android.view.ViewParent: View keyboardNavigationClusterSearch(android.view.View,int)> -> _SOURCE_
<android.view.ViewParent: ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback,int)> -> _SINK_
<android.view.ViewParent: ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback)> -> _SINK_
<android.view.ViewGroup.LayoutParams: void resolveLayoutDirection(int)> -> _SOURCE_
<android.view.ViewStub: int getInflatedId()> -> _SOURCE_
<android.view.ViewStub: void setInflatedId(int)> -> _SOURCE_
<android.view.ViewStub: void setLayoutResource(int)> -> _SINK_
<android.view.WindowAnimationFrameStats: int describeContents()> -> _SOURCE_
<android.view.WindowAnimationFrameStats: java.lang.String toString()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)> -> _SINK_
<android.view.ViewPropertyAnimator: long getDuration()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.view.ViewPropertyAnimator: long getStartDelay()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)> -> _SINK_
<android.view.WindowId: int describeContents()> -> _SOURCE_
<android.view.WindowId: boolean isFocused()> -> _SOURCE_
<android.view.WindowId: java.lang.String toString()> -> _SOURCE_
<android.view.WindowInsetsAnimation.Bounds: java.lang.String toString()> -> _SOURCE_
<android.view.ViewStructure.HtmlInfo.Builder: ViewStructure.HtmlInfo.Builder addAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.view.ViewStructure.HtmlInfo.Builder: ViewStructure.HtmlInfo build()> -> _SOURCE_
<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getInsets(int)> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Rect getPrivacyIndicatorBounds()> -> _SOURCE_
<android.view.WindowInsets: android.view.RoundedCorner getRoundedCorner(int)> -> _SOURCE_
<android.view.WindowInsets: int getStableInsetBottom()> -> _SOURCE_
<android.view.WindowInsets: int getStableInsetLeft()> -> _SOURCE_
<android.view.WindowInsets: int getStableInsetRight()> -> _SOURCE_
<android.view.WindowInsets: int getStableInsetTop()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getStableInsets()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()> -> _SOURCE_
<android.view.WindowInsets: int getSystemWindowInsetBottom()> -> _SOURCE_
<android.view.WindowInsets: int getSystemWindowInsetLeft()> -> _SOURCE_
<android.view.WindowInsets: int getSystemWindowInsetRight()> -> _SOURCE_
<android.view.WindowInsets: int getSystemWindowInsetTop()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()> -> _SOURCE_
<android.view.WindowInsets: boolean hasStableInsets()> -> _SOURCE_
<android.view.WindowInsets: boolean hasSystemWindowInsets()> -> _SOURCE_
<android.view.WindowInsets: boolean isRound()> -> _SOURCE_
<android.view.WindowInsets: boolean isVisible(int)> -> _SOURCE_
<android.view.WindowInsets: java.lang.String toString()> -> _SOURCE_
<android.view.WindowInsetsAnimation.Callback: int getDispatchMode()> -> _SOURCE_
<android.view.WindowContentFrameStats: int describeContents()> -> _SOURCE_
<android.view.WindowContentFrameStats: long getFramePostedTimeNano(int)> -> _SOURCE_
<android.view.WindowContentFrameStats: long getFrameReadyTimeNano(int)> -> _SOURCE_
<android.view.WindowContentFrameStats: java.lang.String toString()> -> _SOURCE_
<android.view.WindowMetrics: android.graphics.Rect getBounds()> -> _SOURCE_
<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()> -> _SOURCE_
<android.view.WindowManager: default WindowMetrics getCurrentWindowMetrics()> -> _SOURCE_
<android.view.WindowManager: Display getDefaultDisplay()> -> _SOURCE_
<android.view.WindowManager: default WindowMetrics getMaximumWindowMetrics()> -> _SOURCE_
<android.view.WindowManager: default boolean isCrossWindowBlurEnabled()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: void addAudioDescriptionRequestedChangeListener(java.util.concurrent.Executor,AccessibilityManager.AudioDescriptionRequestedChangeListener)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusColor()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusStrokeWidth()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: List<ServiceInfo> getAccessibilityServiceList()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isAccessibilityButtonSupported()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isAudioDescriptionRequested()> -> _SINK_
<android.view.accessibility.AccessibilityManager: boolean isEnabled()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()> -> _SOURCE_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setDisplayCutout(android.view.DisplayCutout)> -> _SINK_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)> -> _SINK_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)> -> _SINK_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setMandatorySystemGestureInsets(android.graphics.Insets)> -> _SINK_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setPrivacyIndicatorBounds(android.graphics.Rect)> -> _SOURCE_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setStableInsets(android.graphics.Insets)> -> _SINK_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemWindowInsets(android.graphics.Insets)> -> _SINK_
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setVisible(int,boolean)> -> _SINK_
<android.view.WindowInsetsController: void controlWindowInsetsAnimation(int,long,android.graphics.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)> -> _SINK_
<android.view.WindowInsetsController: int getSystemBarsAppearance()> -> _SOURCE_
<android.view.WindowInsetsController: void setSystemBarsAppearance(int,int)> -> _SINK_
<android.view.WindowInsetsController: void setSystemBarsBehavior(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: int describeContents()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: String eventTypeToString(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getAction()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: long getEventTime()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getEventType()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()> -> _SINK_
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getSpeechStateChangeTypes()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setEventType(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setSpeechStateChangeTypes(int)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: int describeContents()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: int getRegionCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: int describeContents()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: int getId()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo.ExtraRenderingInfo: android.util.Size getLayoutSize()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.ExtraRenderingInfo: float getTextSizeInPx()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.ExtraRenderingInfo: int getTextSizeUnit()> -> _SOURCE_
<android.view.Window.Callback: View onCreatePanelView(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getColumnIndex()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getColumnSpan()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: java.lang.String getColumnTitle()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getRowIndex()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getRowSpan()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: java.lang.String getRowTitle()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getDisplayId()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getItemCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getScrollX()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getScrollY()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: List<CharSequence> getText()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getToIndex()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getWindowId()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isChecked()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()> -> _SINK_
<android.view.accessibility.AccessibilityRecord: boolean isPassword()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: float getCurrent()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: float getMax()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: float getMin()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: int getType()> -> _SOURCE_
<android.view.animation.AlphaAnimation: boolean willChangeTransformationMatrix()> -> _SINK_
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int describeContents()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getId()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getLayer()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: void getRegionInScreen(android.graphics.Region)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getType()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()> -> _SINK_
<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeProvider: List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(java.lang.String,int)> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: int getDirection()> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: float getRowDelay()> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setDirection(int)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)> -> _SINK_
<android.view.animation.Animation: int getBackgroundColor()> -> _SINK_
<android.view.animation.Animation: boolean getDetachWallpaper()> -> _SINK_
<android.view.animation.Animation: long getDuration()> -> _SOURCE_
<android.view.animation.Animation: boolean getFillAfter()> -> _SINK_
<android.view.animation.Animation: boolean getFillBefore()> -> _SINK_
<android.view.animation.Animation: android.graphics.Interpolator getInterpolator()> -> _SOURCE_
<android.view.animation.Animation: int getRepeatCount()> -> _SINK_
<android.view.animation.Animation: int getRepeatMode()> -> _SOURCE_
<android.view.animation.Animation: boolean getShowBackground()> -> _SINK_
<android.view.animation.Animation: long getStartOffset()> -> _SOURCE_
<android.view.animation.Animation: long getStartTime()> -> _SOURCE_
<android.view.animation.Animation: boolean getTransformation(long,android.service.autofill.Transformation,float)> -> _SOURCE_
<android.view.animation.Animation: boolean getTransformation(long,android.service.autofill.Transformation)> -> _SOURCE_
<android.view.animation.Animation: int getZAdjustment()> -> _SOURCE_
<android.view.animation.Animation: void setBackgroundColor(int)> -> _SINK_
<android.view.animation.Animation: void setDetachWallpaper(boolean)> -> _SINK_
<android.view.animation.Animation: void setDuration(long)> -> _SOURCE_
<android.view.animation.Animation: void setFillAfter(boolean)> -> _SINK_
<android.view.animation.Animation: void setFillBefore(boolean)> -> _SINK_
<android.view.animation.Animation: void setFillEnabled(boolean)> -> _SINK_
<android.view.animation.Animation: void setInterpolator(android.graphics.Interpolator)> -> _SINK_
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)> -> _SINK_
<android.view.animation.Animation: void setRepeatCount(int)> -> _SINK_
<android.view.animation.Animation: void setRepeatMode(int)> -> _SOURCE_
<android.view.animation.Animation: void setShowBackground(boolean)> -> _SINK_
<android.view.animation.Animation: void setStartOffset(long)> -> _SOURCE_
<android.view.animation.Animation: void setStartTime(long)> -> _SOURCE_
<android.view.animation.Animation: void setZAdjustment(int)> -> _SINK_
<android.view.animation.Animation: boolean willChangeTransformationMatrix()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: int getColumnCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: int getRowCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: int getSelectionMode()> -> _SOURCE_
<android.view.animation.PathInterpolator: float getInterpolation(float)> -> _SOURCE_
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: Animation getAnimationForView(android.view.View)> -> _SOURCE_
<android.view.animation.LayoutAnimationController: float getDelay()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: android.graphics.Interpolator getInterpolator()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: int getOrder()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setDelay(float)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.graphics.Interpolator)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setOrder(int)> -> _SINK_
<android.view.autofill.AutofillValue: int describeContents()> -> _SOURCE_
<android.view.autofill.AutofillValue: AutofillValue forDate(long)> -> _SINK_
<android.view.autofill.AutofillValue: AutofillValue forText(java.lang.CharSequence)> -> _SINK_
<android.view.autofill.AutofillValue: long getDateValue()> -> _SOURCE_
<android.view.autofill.AutofillValue: int getListValue()> -> _SOURCE_
<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean getToggleValue()> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean isDate()> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean isList()> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean isText()> -> _SOURCE_
<android.view.autofill.AutofillValue: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext.Builder: android.view.contentcapture.ContentCaptureContext build()> -> _SINK_
<android.view.contentcapture.ContentCaptureContext.Builder: android.view.contentcapture.ContentCaptureContext.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.contentcapture.ContentCaptureContext: int describeContents()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()> -> _SINK_
<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: Set<ContentCaptureCondition> getContentCaptureConditions()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: android.content.ComponentName getServiceComponentName()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: void shareData(android.view.contentcapture.DataShareRequest,java.util.concurrent.Executor,android.view.contentcapture.DataShareWriteAdapter)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: List<AccessibilityNodeInfo.AccessibilityAction> getActionList()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: int getActions()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: List<String> getAvailableExtraData()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int,int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionInfo getCollectionInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo getCollectionItemInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.ExtraRenderingInfo getExtraRenderingInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getInputType()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.RangeInfo getRangeInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getUniqueId()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isTextSelectable()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(List<String>)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo.RangeInfo)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelectable(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setUniqueId(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: int describeContents()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: int getFlags()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: android.content.LocusId getLocusId()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: java.lang.String toString()> -> _SOURCE_
<android.view.autofill.AutofillId: int describeContents()> -> _SOURCE_
<android.view.autofill.AutofillId: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: int describeContents()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: android.content.LocusId getLocusId()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String getMimeType()> -> _SINK_
<android.view.contentcapture.DataShareRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest.Builder: android.view.contentcapture.DataRemovalRequest build()> -> _SINK_
<android.view.autofill.AutofillManager: void disableAutofillServices()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()> -> _SOURCE_
<android.view.autofill.AutofillManager: List<String> getAvailableFieldClassificationAlgorithms()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.view.autofill.AutofillId getNextAutofillId()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getUserDataId()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean hasEnabledAutofillServices()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isAutofillSupported()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isEnabled()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isFieldClassificationEnabled()> -> _SOURCE_
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View)> -> _SINK_
<android.view.autofill.AutofillManager: void setAutofillRequestCallback(java.util.concurrent.Executor,AutofillRequestCallback)> -> _SINK_
<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)> -> _SINK_
<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View,int)> -> _SINK_
<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View)> -> _SINK_
<android.view.contentcapture.DataShareWriteAdapter: void onRejected()> -> _SINK_
<android.view.inputmethod.CorrectionInfo: int describeContents()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.String toString()> -> _SOURCE_
<android.view.displayhash.DisplayHashManager: Set<String> getSupportedHashAlgorithms()> -> _SOURCE_
<android.view.displayhash.DisplayHashManager: android.view.displayhash.VerifiedDisplayHash verifyDisplayHash(android.view.displayhash.DisplayHash)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: ContentCaptureContext getContentCaptureContext()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: ContentCaptureSessionId getContentCaptureSessionId()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: void notifyViewInsetsChanged(android.graphics.Insets)> -> _SINK_
<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,java.lang.CharSequence)> -> _SINK_
<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)> -> _SINK_
<android.view.contentcapture.ContentCaptureSession: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest.LocusIdRequest: int getFlags()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest.LocusIdRequest: android.content.LocusId getLocusId()> -> _SOURCE_
<android.view.inputmethod.EditorInfo: int describeContents()> -> _SOURCE_
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialSelectedText(int)> -> _SOURCE_
<android.view.inputmethod.EditorInfo: android.view.inputmethod.SurroundingText getInitialSurroundingText(int,int,int)> -> _SOURCE_
<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextAfterCursor(int,int)> -> _SOURCE_
<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextBeforeCursor(int,int)> -> _SOURCE_
<android.view.inputmethod.EditorInfo: void makeCompatible(int)> -> _SOURCE_
<android.view.inputmethod.EditorInfo: void setInitialSurroundingSubText(java.lang.CharSequence,int)> -> _SINK_
<android.view.inputmethod.EditorInfo: void setInitialSurroundingText(java.lang.CharSequence)> -> _SINK_
<android.view.inputmethod.InlineSuggestionInfo: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionInfo: String[] getAutofillHints()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionInfo: android.widget.inline.InlinePresentationSpec getInlinePresentationSpec()> -> _SINK_
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String getSource()> -> _SINK_
<android.view.inputmethod.InlineSuggestionInfo: boolean isPinned()> -> _SINK_
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSessionId: int describeContents()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSessionId: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.ExtractedTextRequest: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InputBinding: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InputBinding: int getPid()> -> _SOURCE_
<android.view.inputmethod.InputBinding: int getUid()> -> _SOURCE_
<android.view.inputmethod.InputBinding: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: int describeContents()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: long getId()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: int getPosition()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: boolean commitText(java.lang.CharSequence,int,java.awt.font.TextAttribute)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean commitText(java.lang.CharSequence,int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: int getCursorCapsMode(int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: boolean performContextMenuAction(int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performEditorAction(int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performSpellCheck()> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int,java.awt.font.TextAttribute)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(java.lang.CharSequence,int,java.awt.font.TextAttribute)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)> -> _SINK_
<android.view.inputmethod.ExtractedText: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InputConnection: default boolean commitText(java.lang.CharSequence,int,java.awt.font.TextAttribute)> -> _SINK_
<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)> -> _SINK_
<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)> -> _SOURCE_
<android.view.inputmethod.InputConnection: CharSequence getSelectedText(int)> -> _SOURCE_
<android.view.inputmethod.InputConnection: default SurroundingText getSurroundingText(int,int,int)> -> _SOURCE_
<android.view.inputmethod.InputConnection: CharSequence getTextAfterCursor(int,int)> -> _SOURCE_
<android.view.inputmethod.InputConnection: CharSequence getTextBeforeCursor(int,int)> -> _SOURCE_
<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)> -> _SINK_
<android.view.inputmethod.InputConnection: boolean performEditorAction(int)> -> _SINK_
<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.inputmethod.InputConnection: default boolean performSpellCheck()> -> _SINK_
<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)> -> _SINK_
<android.view.inputmethod.InputConnection: default boolean setComposingRegion(int,int,java.awt.font.TextAttribute)> -> _SINK_
<android.view.inputmethod.InputConnection: default boolean setComposingText(java.lang.CharSequence,int,java.awt.font.TextAttribute)> -> _SINK_
<android.view.inputmethod.InputConnection: boolean setSelection(int,int)> -> _SINK_
<android.view.displayhash.VerifiedDisplayHash: int describeContents()> -> _SOURCE_
<android.view.displayhash.VerifiedDisplayHash: android.graphics.Rect getBoundsInWindow()> -> _SINK_
<android.view.displayhash.VerifiedDisplayHash: java.lang.String getHashAlgorithm()> -> _SOURCE_
<android.view.displayhash.VerifiedDisplayHash: byte[] getImageHash()> -> _SOURCE_
<android.view.displayhash.VerifiedDisplayHash: long getTimeMillis()> -> _SOURCE_
<android.view.displayhash.VerifiedDisplayHash: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsResponse: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsResponse: List<InlineSuggestion> getInlineSuggestions()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsResponse: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.Bundle getExtras()> -> _SINK_
<android.view.inputmethod.InlineSuggestionsRequest: java.lang.String getHostPackageName()> -> _SINK_
<android.view.inputmethod.InlineSuggestionsRequest: List<InlinePresentationSpec> getInlinePresentationSpecs()> -> _SINK_
<android.view.inputmethod.InlineSuggestionsRequest: android.widget.inline.InlinePresentationSpec getInlineTooltipPresentationSpec()> -> _SINK_
<android.view.inputmethod.InlineSuggestionsRequest: int getMaxSuggestionCount()> -> _SINK_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.LocaleList getSupportedLocales()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InputMethod: void showSoftInput(int,android.os.ResultReceiver)> -> _SINK_
<android.view.inspector.InspectionCompanionProvider:  InspectionCompanion provide(Class)> -> _SOURCE_
<android.view.inspector.InspectionCompanion: void mapProperties(android.view.inspector.PropertyMapper)> -> _SINK_
<android.view.inspector.InspectionCompanion: void readProperties(T,android.view.inspector.PropertyReader)> -> _SOURCE_
<android.view.inputmethod.SurroundingText: int describeContents()> -> _SOURCE_
<android.view.inputmethod.SurroundingText: int getSelectionEnd()> -> _SOURCE_
<android.view.inputmethod.SurroundingText: int getSelectionStart()> -> _SOURCE_
<android.view.inputmethod.SurroundingText: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.inspector.PropertyReader: void readBoolean(int,boolean)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readByte(int,byte)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readChar(int,char)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readColor(int,int)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readColor(int,long)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readColor(int,android.graphics.Color)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readDouble(int,double)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readFloat(int,float)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readGravity(int,int)> -> _SINK_
<android.view.inspector.PropertyReader: void readInt(int,int)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readIntEnum(int,int)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readLong(int,long)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readResourceId(int,int)> -> _SOURCE_
<android.view.inspector.PropertyReader: void readShort(int,short)> -> _SOURCE_
<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)> -> _SINK_
<android.view.inspector.IntFlagMapping: Set<String> get(int)> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int describeContents()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: EditorBoundsInfo getEditorBoundsInfo()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: java.lang.String toString()> -> _SOURCE_
<android.view.inspector.StaticInspectionCompanionProvider:  InspectionCompanion provide(Class)> -> _SOURCE_
<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapByte(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapDouble(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapGravity(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,IntFunction<Set<String>>)> -> _SINK_
<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)> -> _SOURCE_
<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)> -> _SOURCE_
<android.view.inputmethod.InputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.inputmethod.InputMethodSession: void updateCursor(android.graphics.Rect)> -> _SINK_
<android.view.textclassifier.ConversationAction: int describeContents()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: android.app.RemoteAction getAction()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: float getConfidenceScore()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.CharSequence getTextReply()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.String getType()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: int describeContents()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: List<ConversationActions.Message> getConversation()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: List<String> getHints()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: int getMaxSuggestions()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: android.view.textclassifier.TextClassifier.EntityConfig getTypeConfig()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: int describeContents()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: List<ConversationAction> getConversationActions()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: java.lang.String getId()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int describeContents()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getEnd()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: long getEventTime()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getEventType()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getInvocationMethod()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getSmartEnd()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getSmartStart()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getStart()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder addAction(android.app.RemoteAction)> -> _SINK_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification build()> -> _SOURCE_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setEntityType(java.lang.String,float)> -> _SOURCE_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setText(java.lang.String)> -> _SINK_
<android.view.textclassifier.TextClassification: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextClassification: List<RemoteAction> getActions()> -> _SOURCE_
<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)> -> _SOURCE_
<android.view.textclassifier.TextClassification: int getEntityCount()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getId()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.content.Intent getIntent()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.view.View.OnClickListener getOnClickListener()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getText()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: int describeContents()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: android.app.Person getAuthor()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setAction(android.app.RemoteAction)> -> _SINK_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setConfidenceScore(float)> -> _SINK_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setTextReply(java.lang.CharSequence)> -> _SINK_
<android.view.contentcapture.DataRemovalRequest: int describeContents()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: List<DataRemovalRequest.LocusIdRequest> getLocusIdRequests()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setHints(List<String>)> -> _SINK_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setMaxSuggestions(int)> -> _SINK_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setTypeConfig(android.view.textclassifier.TextClassifier.EntityConfig)> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setExcludedTypes(Collection<String>)> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setHints(Collection<String>)> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setIncludedTypes(Collection<String>)> -> _SINK_
<android.view.textclassifier.TextClassificationContext.Builder: android.view.textclassifier.TextClassificationContext.Builder setWidgetVersion(java.lang.String)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: String[] getEntityTypes()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int getEventCategory()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int getEventIndex()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int getEventType()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: float[] getScores()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: void setTextClassifier(android.view.textclassifier.TextClassifier)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.LanguageDetectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.LanguageDetectionEvent build()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeSuggestedWordEndIndex()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeSuggestedWordStartIndex()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeWordEndIndex()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeWordStartIndex()> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: Collection<String> getHints()> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: Collection<String> resolveEntityListModifications(Collection<String>)> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: boolean shouldIncludeTypesFromTextClassifier()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeSuggestedWordEndIndex(int)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeSuggestedWordStartIndex(int)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeWordEndIndex(int)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeWordStartIndex(int)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setActionIndices(int[])> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setEntityTypes(String[])> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setEventContext(android.view.textclassifier.TextClassificationContext)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setEventIndex(int)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setLocale(android.icu.util.ULocale)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setModelName(java.lang.String)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setResultId(java.lang.String)> -> _SINK_
<android.view.textclassifier.TextClassifierEvent.Builder: T setScores(float[])> -> _SINK_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setReferenceTime(java.time.ZonedDateTime)> -> _SINK_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setText(java.lang.CharSequence)> -> _SINK_
<android.view.textclassifier.TextLinks.Request: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request: android.os.LocaleList getDefaultLocales()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request: android.view.textclassifier.TextClassifier.EntityConfig getEntityConfig()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage.Builder putLocale(android.icu.util.ULocale,float)> -> _SINK_
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage.Builder setId(java.lang.String)> -> _SINK_
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request build()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setDefaultLocales(android.os.LocaleList)> -> _SINK_
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setEntityConfig(android.view.textclassifier.TextClassifier.EntityConfig)> -> _SINK_
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setReferenceTime(java.time.ZonedDateTime)> -> _SINK_
<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,Function<TextLinks.TextLink,)> -> _SINK_
<android.view.textclassifier.TextLinks: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextLinks: Collection<TextLinks.TextLink> getLinks()> -> _SOURCE_
<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.textclassifier.TextLinks: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)> -> _SOURCE_
<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: java.lang.String getId()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)> -> _SOURCE_
<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default TextClassification classifyText(android.view.textclassifier.TextClassification.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default TextClassification classifyText(java.lang.CharSequence,int,int,android.os.LocaleList)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default TextLanguage detectLanguage(android.view.textclassifier.TextLanguage.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default TextLinks generateLinks(android.view.textclassifier.TextLinks.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default int getMaxGenerateLinksTextLength()> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default boolean isDestroyed()> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default TextSelection suggestSelection(java.lang.CharSequence,int,int,android.os.LocaleList)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: default TextSelection suggestSelection(android.view.textclassifier.TextSelection.Request)> -> _SOURCE_
<android.view.textclassifier.TextLanguage.Request: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextLanguage.Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.view.textclassifier.TextLanguage.Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextLanguage.Request: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: float getConfidenceScore(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: int getEnd()> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: java.lang.String getEntity(int)> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: int getEntityCount()> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: int getStart()> -> _SOURCE_
<android.view.textclassifier.TextLinks.TextLink: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setEntityType(java.lang.String,float)> -> _SINK_
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setTextClassification(android.view.textclassifier.TextClassification)> -> _SINK_
<android.view.textclassifier.TextSelection: int describeContents()> -> _SOURCE_
<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)> -> _SOURCE_
<android.view.textclassifier.TextSelection: int getEntityCount()> -> _SOURCE_
<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String getId()> -> _SOURCE_
<android.view.textclassifier.TextSelection: int getSelectionEndIndex()> -> _SOURCE_
<android.view.textclassifier.TextSelection: int getSelectionStartIndex()> -> _SOURCE_
<android.view.textclassifier.TextSelection: android.view.textclassifier.TextClassification getTextClassification()> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String toString()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams: int getSupportedAttributes()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams: boolean shouldReferToSpellCheckerLanguageSettings()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellCheckerInfo()> -> _SOURCE_
<android.view.textservice.TextServicesManager: List<SpellCheckerInfo> getEnabledSpellCheckerInfos()> -> _SOURCE_
<android.view.textservice.TextServicesManager: boolean isSpellCheckerEnabled()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,androidx.compose.ui.text.intl.Locale,android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener,boolean)> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams,java.util.concurrent.Executor,android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener)> -> _SOURCE_
<android.view.textclassifier.TextLanguage.Request.Builder: android.view.textclassifier.TextLanguage.Request.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.translation.TranslationContext: int describeContents()> -> _SOURCE_
<android.view.translation.TranslationContext: android.view.translation.TranslationSpec getSourceSpec()> -> _SINK_
<android.view.translation.TranslationContext: android.view.translation.TranslationSpec getTargetSpec()> -> _SINK_
<android.view.translation.TranslationContext: int getTranslationFlags()> -> _SINK_
<android.view.translation.TranslationContext: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder addLink(int,int,java.util.Map -> _SINK_
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder addLink(int,int,java.util.Map -> _SINK_
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.translation.TranslationRequest.Builder: android.view.translation.TranslationRequest build()> -> _SINK_
<android.view.translation.TranslationRequest.Builder: android.view.translation.TranslationRequest.Builder setFlags(int)> -> _SINK_
<android.view.translation.TranslationRequest.Builder: android.view.translation.TranslationRequest.Builder setTranslationRequestValues(List<TranslationRequestValue>)> -> _SINK_
<android.view.translation.TranslationRequest.Builder: android.view.translation.TranslationRequest.Builder setViewTranslationRequests(List<ViewTranslationRequest>)> -> _SOURCE_
<android.view.translation.TranslationCapability: int describeContents()> -> _SOURCE_
<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getSourceSpec()> -> _SINK_
<android.view.translation.TranslationCapability: int getState()> -> _SOURCE_
<android.view.translation.TranslationCapability: int getSupportedTranslationFlags()> -> _SINK_
<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getTargetSpec()> -> _SINK_
<android.view.translation.TranslationCapability: boolean isUiTranslationEnabled()> -> _SINK_
<android.view.translation.TranslationCapability: java.lang.String toString()> -> _SOURCE_
<android.view.translation.TranslationContext.Builder: android.view.translation.TranslationContext build()> -> _SINK_
<android.view.translation.TranslationContext.Builder: android.view.translation.TranslationContext.Builder setTranslationFlags(int)> -> _SINK_
<android.view.translation.TranslationResponseValue: int describeContents()> -> _SOURCE_
<android.view.translation.TranslationResponseValue: TranslationResponseValue forError()> -> _SOURCE_
<android.view.translation.TranslationResponseValue: int getStatusCode()> -> _SOURCE_
<android.view.translation.TranslationResponseValue: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.translation.TranslationResponseValue: java.lang.String toString()> -> _SOURCE_
<android.view.translation.TranslationRequest: int describeContents()> -> _SOURCE_
<android.view.translation.TranslationRequest: int getFlags()> -> _SINK_
<android.view.translation.TranslationRequest: List<TranslationRequestValue> getTranslationRequestValues()> -> _SINK_
<android.view.translation.TranslationRequest: List<ViewTranslationRequest> getViewTranslationRequests()> -> _SOURCE_
<android.view.translation.TranslationRequest: java.lang.String toString()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder: android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams build()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder: android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder: android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder: android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder setShouldReferToSpellCheckerLanguageSettings(boolean)> -> _SINK_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder: android.view.textservice.SpellCheckerSession.SpellCheckerSessionParams.Builder setSupportedAttributes(int)> -> _SINK_
<android.view.translation.Translator: boolean isDestroyed()> -> _SOURCE_
<android.view.translation.Translator: void translate(android.view.translation.TranslationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<TranslationResponse>)> -> _SINK_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener: void onGetSentenceSuggestions(SentenceSuggestionsInfo[])> -> _SOURCE_
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener: void onGetSuggestions(SuggestionsInfo[])> -> _SOURCE_
<android.view.translation.TranslationResponseValue.Builder: android.view.translation.TranslationResponseValue build()> -> _SINK_
<android.view.translation.TranslationResponseValue.Builder: android.view.translation.TranslationResponseValue.Builder setText(java.lang.CharSequence)> -> _SOURCE_
<android.view.translation.ViewTranslationRequest: int describeContents()> -> _SOURCE_
<android.view.translation.ViewTranslationRequest: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.view.translation.ViewTranslationRequest: Set<String> getKeys()> -> _SOURCE_
<android.view.translation.ViewTranslationRequest: android.view.translation.TranslationRequestValue getValue(java.lang.String)> -> _SOURCE_
<android.view.translation.ViewTranslationRequest: java.lang.String toString()> -> _SOURCE_
<android.view.translation.ViewTranslationRequest.Builder: android.view.translation.ViewTranslationRequest build()> -> _SINK_
<android.view.translation.ViewTranslationRequest.Builder: android.view.translation.ViewTranslationRequest.Builder setValue(java.lang.String,android.view.translation.TranslationRequestValue)> -> _SINK_
<android.webkit.CookieManager: boolean acceptCookie()> -> _SOURCE_
<android.webkit.CookieManager: boolean acceptThirdPartyCookies(android.webkit.WebView)> -> _SINK_
<android.webkit.CookieManager: boolean allowFileSchemeCookies()> -> _SOURCE_
<android.webkit.CookieManager: String getCookie(java.lang.String)> -> _SOURCE_
<android.webkit.CookieManager: CookieManager getInstance()> -> _SOURCE_
<android.webkit.CookieManager: boolean hasCookies()> -> _SOURCE_
<android.webkit.CookieManager: void setAcceptCookie(boolean)> -> _SINK_
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)> -> _SOURCE_
<android.webkit.CookieManager: void setAcceptThirdPartyCookies(android.webkit.WebView,boolean)> -> _SINK_
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String,ValueCallback<Boolean>)> -> _SINK_
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)> -> _SINK_
<android.view.translation.TranslationResponse.Builder: android.view.translation.TranslationResponse build()> -> _SINK_
<android.view.translation.TranslationResponse.Builder: android.view.translation.TranslationResponse.Builder setFinalResponse(boolean)> -> _SOURCE_
<android.view.translation.TranslationResponse.Builder: android.view.translation.TranslationResponse.Builder setTranslationResponseValue(int,android.view.translation.TranslationResponseValue)> -> _SOURCE_
<android.view.translation.TranslationResponse.Builder: android.view.translation.TranslationResponse.Builder setTranslationResponseValues(SparseArray<TranslationResponseValue>)> -> _SOURCE_
<android.view.translation.TranslationResponse.Builder: android.view.translation.TranslationResponse.Builder setViewTranslationResponse(int,android.view.translation.ViewTranslationResponse)> -> _SINK_
<android.view.translation.TranslationResponse.Builder: android.view.translation.TranslationResponse.Builder setViewTranslationResponses(SparseArray<ViewTranslationResponse>)> -> _SOURCE_
<android.view.translation.TranslationResponse: int describeContents()> -> _SOURCE_
<android.view.translation.TranslationResponse: SparseArray<TranslationResponseValue> getTranslationResponseValues()> -> _SOURCE_
<android.view.translation.TranslationResponse: int getTranslationStatus()> -> _SOURCE_
<android.view.translation.TranslationResponse: SparseArray<ViewTranslationResponse> getViewTranslationResponses()> -> _SOURCE_
<android.view.translation.TranslationResponse: boolean isFinalResponse()> -> _SOURCE_
<android.view.translation.TranslationResponse: java.lang.String toString()> -> _SOURCE_
<android.view.translation.UiTranslationManager: void registerUiTranslationStateCallback(java.util.concurrent.Executor,android.view.translation.UiTranslationStateCallback)> -> _SINK_
<android.view.translation.ViewTranslationResponse: int describeContents()> -> _SOURCE_
<android.view.translation.ViewTranslationResponse: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.view.translation.ViewTranslationResponse: Set<String> getKeys()> -> _SOURCE_
<android.view.translation.ViewTranslationResponse: android.view.translation.TranslationResponseValue getValue(java.lang.String)> -> _SOURCE_
<android.view.translation.ViewTranslationResponse: java.lang.String toString()> -> _SOURCE_
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()> -> _SOURCE_
<android.webkit.ClientCertRequest: String getHost()> -> _SOURCE_
<android.webkit.ClientCertRequest: String[] getKeyTypes()> -> _SOURCE_
<android.webkit.ClientCertRequest: int getPort()> -> _SOURCE_
<android.webkit.ClientCertRequest: Principal[] getPrincipals()> -> _SOURCE_
<android.view.translation.ViewTranslationResponse.Builder: android.view.translation.ViewTranslationResponse build()> -> _SINK_
<android.view.translation.ViewTranslationResponse.Builder: android.view.translation.ViewTranslationResponse.Builder setValue(java.lang.String,android.view.translation.TranslationResponseValue)> -> _SINK_
<android.webkit.GeolocationPermissions: void allow(java.lang.String)> -> _SINK_
<android.webkit.GeolocationPermissions: void clear(java.lang.String)> -> _SINK_
<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,ValueCallback<Boolean>)> -> _SOURCE_
<android.webkit.GeolocationPermissions: GeolocationPermissions getInstance()> -> _SOURCE_
<android.webkit.GeolocationPermissions: void getOrigins(ValueCallback<Set<String>>)> -> _SOURCE_
<android.view.translation.TranslationManager: void addOnDeviceTranslationCapabilityUpdateListener(java.util.concurrent.Executor,Consumer<TranslationCapability>)> -> _SINK_
<android.view.translation.TranslationManager: android.app.PendingIntent getOnDeviceTranslationSettingsActivityIntent()> -> _SOURCE_
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)> -> _SOURCE_
<android.webkit.MimeTypeMap: String getFileExtensionFromUrl(java.lang.String)> -> _SOURCE_
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)> -> _SOURCE_
<android.webkit.MimeTypeMap: MimeTypeMap getSingleton()> -> _SOURCE_
<android.webkit.MimeTypeMap: boolean hasExtension(java.lang.String)> -> _SOURCE_
<android.webkit.MimeTypeMap: boolean hasMimeType(java.lang.String)> -> _SOURCE_
<android.webkit.RenderProcessGoneDetail: int rendererPriorityAtExit()> -> _SOURCE_
<android.webkit.SafeBrowsingResponse: void showInterstitial(boolean)> -> _SINK_
<android.webkit.ServiceWorkerClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)> -> _SINK_
<android.webkit.ServiceWorkerController: ServiceWorkerController getInstance()> -> _SOURCE_
<android.webkit.ServiceWorkerController: ServiceWorkerWebSettings getServiceWorkerWebSettings()> -> _SOURCE_
<android.webkit.ServiceWorkerController: void setServiceWorkerClient(android.webkit.ServiceWorkerClient)> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(Collection<String>)> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(String[])> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(int[])> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig build()> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder setTracingMode(int)> -> _SINK_
<android.webkit.GeolocationPermissions.Callback: void invoke(java.lang.String,boolean,boolean)> -> _SINK_
<android.webkit.PermissionRequest: Uri getOrigin()> -> _SOURCE_
<android.webkit.PermissionRequest: String[] getResources()> -> _SOURCE_
<android.webkit.PermissionRequest: void grant(String[])> -> _SINK_
<android.webkit.WebMessage: java.lang.String getData()> -> _SOURCE_
<android.webkit.WebMessage: WebMessagePort[] getPorts()> -> _SOURCE_
<android.webkit.WebBackForwardList: int getCurrentIndex()> -> _SOURCE_
<android.webkit.WebBackForwardList: WebHistoryItem getCurrentItem()> -> _SOURCE_
<android.webkit.WebBackForwardList: WebHistoryItem getItemAtIndex(int)> -> _SOURCE_
<android.webkit.WebBackForwardList: int getSize()> -> _SOURCE_
<android.webkit.TracingController: TracingController getInstance()> -> _SOURCE_
<android.webkit.TracingController: boolean isTracing()> -> _SOURCE_
<android.webkit.TracingController: void start(android.webkit.TracingConfig)> -> _SINK_
<android.webkit.WebResourceError: CharSequence getDescription()> -> _SOURCE_
<android.webkit.WebResourceError: int getErrorCode()> -> _SOURCE_
<android.webkit.ServiceWorkerWebSettings: boolean getAllowContentAccess()> -> _SOURCE_
<android.webkit.ServiceWorkerWebSettings: boolean getAllowFileAccess()> -> _SOURCE_
<android.webkit.ServiceWorkerWebSettings: boolean getBlockNetworkLoads()> -> _SOURCE_
<android.webkit.ServiceWorkerWebSettings: int getCacheMode()> -> _SOURCE_
<android.webkit.ServiceWorkerWebSettings: void setAllowContentAccess(boolean)> -> _SINK_
<android.webkit.ServiceWorkerWebSettings: void setBlockNetworkLoads(boolean)> -> _SINK_
<android.webkit.ServiceWorkerWebSettings: void setCacheMode(int)> -> _SINK_
<android.webkit.WebIconDatabase: WebIconDatabase getInstance()> -> _SOURCE_
<android.webkit.WebResourceRequest: String getMethod()> -> _SOURCE_
<android.webkit.WebResourceRequest: java.util.Map getRequestHeaders()> -> _SOURCE_
<android.webkit.WebResourceRequest: Uri getUrl()> -> _SOURCE_
<android.webkit.WebResourceRequest: boolean hasGesture()> -> _SOURCE_
<android.webkit.WebResourceRequest: boolean isForMainFrame()> -> _SOURCE_
<android.webkit.WebResourceRequest: boolean isRedirect()> -> _SOURCE_
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()> -> _SOURCE_
<android.webkit.WebChromeClient: void getVisitedHistory(ValueCallback<String[]>)> -> _SOURCE_
<android.webkit.WebChromeClient: boolean onJsTimeout()> -> _SOURCE_
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)> -> _SOURCE_
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)> -> _SOURCE_
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient.CustomViewCallback)> -> _SINK_
<android.webkit.WebChromeClient: boolean onShowFileChooser(android.webkit.WebView,ValueCallback<Uri[]>,android.webkit.WebChromeClient.FileChooserParams)> -> _SINK_
<android.webkit.WebChromeClient.FileChooserParams: String[] getAcceptTypes()> -> _SOURCE_
<android.webkit.WebChromeClient.FileChooserParams: String getFilenameHint()> -> _SOURCE_
<android.webkit.WebChromeClient.FileChooserParams: int getMode()> -> _SOURCE_
<android.webkit.WebChromeClient.FileChooserParams: CharSequence getTitle()> -> _SOURCE_
<android.webkit.WebChromeClient.FileChooserParams: boolean isCaptureEnabled()> -> _SOURCE_
<android.webkit.WebChromeClient.FileChooserParams: Uri[] parseResult(int,android.content.Intent)> -> _SOURCE_
<android.webkit.WebHistoryItem: Bitmap getFavicon()> -> _SOURCE_
<android.webkit.WebHistoryItem: String getTitle()> -> _SOURCE_
<android.webkit.WebHistoryItem: String getUrl()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.io.InputStream getData()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()> -> _SOURCE_
<android.webkit.WebResourceResponse: int getStatusCode()> -> _SOURCE_
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)> -> _SINK_
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)> -> _SINK_
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)> -> _SINK_
<android.webkit.WebResourceResponse: void setResponseHeaders(java.util.Map -> _SINK_
<android.webkit.WebResourceResponse: void setStatusCodeAndReasonPhrase(int,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: boolean getAllowContentAccess()> -> _SOURCE_
<android.webkit.WebSettings: boolean getAllowFileAccess()> -> _SOURCE_
<android.webkit.WebSettings: boolean getAllowFileAccessFromFileURLs()> -> _SOURCE_
<android.webkit.WebSettings: boolean getAllowUniversalAccessFromFileURLs()> -> _SOURCE_
<android.webkit.WebSettings: boolean getBlockNetworkImage()> -> _SOURCE_
<android.webkit.WebSettings: boolean getBlockNetworkLoads()> -> _SOURCE_
<android.webkit.WebSettings: boolean getBuiltInZoomControls()> -> _SINK_
<android.webkit.WebSettings: int getCacheMode()> -> _SOURCE_
<android.webkit.WebSettings: String getCursiveFontFamily()> -> _SINK_
<android.webkit.WebSettings: boolean getDatabaseEnabled()> -> _SOURCE_
<android.webkit.WebSettings: String getDatabasePath()> -> _SOURCE_
<android.webkit.WebSettings: int getDefaultFixedFontSize()> -> _SINK_
<android.webkit.WebSettings: int getDefaultFontSize()> -> _SOURCE_
<android.webkit.WebSettings: String getDefaultTextEncodingName()> -> _SOURCE_
<android.webkit.WebSettings: String getDefaultUserAgent(android.content.Context)> -> _SOURCE_
<android.webkit.WebSettings: WebSettings.ZoomDensity getDefaultZoom()> -> _SOURCE_
<android.webkit.WebSettings: int getDisabledActionModeMenuItems()> -> _SOURCE_
<android.webkit.WebSettings: boolean getDisplayZoomControls()> -> _SINK_
<android.webkit.WebSettings: boolean getDomStorageEnabled()> -> _SOURCE_
<android.webkit.WebSettings: String getFantasyFontFamily()> -> _SOURCE_
<android.webkit.WebSettings: String getFixedFontFamily()> -> _SINK_
<android.webkit.WebSettings: int getForceDark()> -> _SINK_
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()> -> _SOURCE_
<android.webkit.WebSettings: boolean getJavaScriptEnabled()> -> _SOURCE_
<android.webkit.WebSettings: WebSettings.LayoutAlgorithm getLayoutAlgorithm()> -> _SOURCE_
<android.webkit.WebSettings: boolean getLightTouchEnabled()> -> _SINK_
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()> -> _SOURCE_
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()> -> _SOURCE_
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()> -> _SOURCE_
<android.webkit.WebSettings: int getMinimumFontSize()> -> _SOURCE_
<android.webkit.WebSettings: int getMinimumLogicalFontSize()> -> _SOURCE_
<android.webkit.WebSettings: int getMixedContentMode()> -> _SOURCE_
<android.webkit.WebSettings: boolean getOffscreenPreRaster()> -> _SOURCE_
<android.webkit.WebSettings: boolean getSafeBrowsingEnabled()> -> _SOURCE_
<android.webkit.WebSettings: boolean getSaveFormData()> -> _SOURCE_
<android.webkit.WebSettings: boolean getSavePassword()> -> _SINK_
<android.webkit.WebSettings: String getStandardFontFamily()> -> _SINK_
<android.webkit.WebSettings: android.webkit.WebSettings.TextSize getTextSize()> -> _SOURCE_
<android.webkit.WebSettings: int getTextZoom()> -> _SOURCE_
<android.webkit.WebSettings: boolean getUseWideViewPort()> -> _SOURCE_
<android.webkit.WebSettings: String getUserAgentString()> -> _SOURCE_
<android.webkit.WebSettings: void setAllowContentAccess(boolean)> -> _SINK_
<android.webkit.WebSettings: void setAllowFileAccess(boolean)> -> _SINK_
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)> -> _SINK_
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> -> _SINK_
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> -> _SINK_
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)> -> _SINK_
<android.webkit.WebSettings: void setDefaultFontSize(int)> -> _SINK_
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings.ZoomDensity)> -> _SOURCE_
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)> -> _SINK_
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setForceDark(int)> -> _SINK_
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)> -> _SINK_
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm)> -> _SINK_
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)> -> _SINK_
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)> -> _SINK_
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)> -> _SINK_
<android.webkit.WebSettings: void setMinimumFontSize(int)> -> _SINK_
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)> -> _SINK_
<android.webkit.WebSettings: void setMixedContentMode(int)> -> _SINK_
<android.webkit.WebSettings: void setOffscreenPreRaster(boolean)> -> _SOURCE_
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings.RenderPriority)> -> _SINK_
<android.webkit.WebSettings: void setSafeBrowsingEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setSaveFormData(boolean)> -> _SOURCE_
<android.webkit.WebSettings: void setSavePassword(boolean)> -> _SINK_
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)> -> _SINK_
<android.webkit.WebSettings: void setSupportZoom(boolean)> -> _SINK_
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings.TextSize)> -> _SINK_
<android.webkit.WebSettings: void setTextZoom(int)> -> _SINK_
<android.webkit.WebSettings: void setUseWideViewPort(boolean)> -> _SINK_
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: boolean supportMultipleWindows()> -> _SOURCE_
<android.webkit.WebSettings: boolean supportZoom()> -> _SOURCE_
<android.webkit.WebStorage: WebStorage getInstance()> -> _SOURCE_
<android.webkit.WebStorage: void getOrigins(ValueCallback<Map>)> -> _SOURCE_
<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,ValueCallback<Long>)> -> _SOURCE_
<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,ValueCallback<Long>)> -> _SOURCE_
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)> -> _SINK_
<android.webkit.WebStorage.Origin: java.lang.String getOrigin()> -> _SOURCE_
<android.webkit.WebStorage.Origin: long getQuota()> -> _SOURCE_
<android.webkit.WebStorage.Origin: long getUsage()> -> _SOURCE_
<android.webkit.WebView.HitTestResult: int getType()> -> _SOURCE_
<android.webkit.WebStorage.QuotaUpdater: void updateQuota(long)> -> _SINK_
<android.webkit.TracingConfig: List<String> getCustomIncludedCategories()> -> _SOURCE_
<android.webkit.TracingConfig: int getPredefinedCategories()> -> _SOURCE_
<android.webkit.TracingConfig: int getTracingMode()> -> _SOURCE_
<android.widget.AbsListView.SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)> -> _SINK_
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()> -> _SOURCE_
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> -> _SINK_
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)> -> _SOURCE_
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)> -> _SINK_
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)> -> _SINK_
<android.webkit.WebView.WebViewTransport: android.webkit.WebView getWebView()> -> _SOURCE_
<android.webkit.WebView.PictureListener: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> -> _SOURCE_
<android.widget.AbsoluteLayout: android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.widget.Advanceable: void advance()> -> _SINK_
<android.widget.AutoCompleteTextView.Validator: boolean isValid(java.lang.CharSequence)> -> _SOURCE_
<android.widget.ArrayAdapter: CharSequence[] getAutofillOptions()> -> _SOURCE_
<android.widget.ArrayAdapter: android.content.Context getContext()> -> _SOURCE_
<android.widget.ArrayAdapter: int getCount()> -> _SOURCE_
<android.widget.ArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.ArrayAdapter: android.content.res.Resources.Theme getDropDownViewTheme()> -> _SOURCE_
<android.widget.ArrayAdapter: android.widget.Filter getFilter()> -> _SOURCE_
<android.widget.ArrayAdapter: T getItem(int)> -> _SOURCE_
<android.widget.ArrayAdapter: long getItemId(int)> -> _SOURCE_
<android.widget.ArrayAdapter: int getPosition(T)> -> _SOURCE_
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.ArrayAdapter: void setDropDownViewResource(int)> -> _SINK_
<android.widget.ArrayAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)> -> _SINK_
<android.widget.ArrayAdapter: void sort(Comparator<?)> -> _SINK_
<android.widget.AlphabetIndexer: int getPositionForSection(int)> -> _SOURCE_
<android.widget.AlphabetIndexer: int getSectionForPosition(int)> -> _SOURCE_
<android.widget.AlphabetIndexer: Object[] getSections()> -> _SOURCE_
<android.widget.AdapterViewFlipper: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.AdapterViewFlipper: int getFlipInterval()> -> _SOURCE_
<android.widget.AdapterViewFlipper: boolean isFlipping()> -> _SOURCE_
<android.widget.AdapterViewFlipper: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.widget.AutoCompleteTextView: boolean enoughToFilter()> -> _SOURCE_
<android.widget.AutoCompleteTextView: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getDropDownAnchor()> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getDropDownHeight()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getDropDownWidth()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getInputMethodMode()> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemClickListener getItemClickListener()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getThreshold()> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView.Validator getValidator()> -> _SOURCE_
<android.widget.AutoCompleteTextView: void performCompletion()> -> _SINK_
<android.widget.AutoCompleteTextView: <T extends ListAdapter & Filterable> void setAdapter(T)> -> _SINK_
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownAnchor(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundResource(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setInputMethodMode(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setListSelection(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setText(java.lang.CharSequence,boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void setThreshold(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView.Validator)> -> _SINK_
<android.widget.AutoCompleteTextView: void showDropDown()> -> _SINK_
<android.widget.Chronometer.OnChronometerTickListener: void onChronometerTick(android.widget.Chronometer)> -> _SINK_
<android.widget.Button: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.Button: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)> -> _SOURCE_
<android.widget.CalendarView: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.CalendarView: long getDate()> -> _SOURCE_
<android.widget.CalendarView: int getDateTextAppearance()> -> _SOURCE_
<android.widget.CalendarView: long getMaxDate()> -> _SOURCE_
<android.widget.CalendarView: long getMinDate()> -> _SOURCE_
<android.widget.CalendarView: int getWeekDayTextAppearance()> -> _SOURCE_
<android.widget.CalendarView: void setDate(long,boolean,boolean)> -> _SINK_
<android.widget.CalendarView: void setDate(long)> -> _SINK_
<android.widget.CalendarView: void setDateTextAppearance(int)> -> _SINK_
<android.widget.CalendarView: void setFirstDayOfWeek(int)> -> _SINK_
<android.widget.CalendarView: void setMaxDate(long)> -> _SOURCE_
<android.widget.CalendarView: void setMinDate(long)> -> _SOURCE_
<android.widget.CalendarView: void setWeekDayTextAppearance(int)> -> _SINK_
<android.widget.CursorAdapter: int getCount()> -> _SOURCE_
<android.widget.CursorAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.CursorAdapter: android.content.res.Resources.Theme getDropDownViewTheme()> -> _SOURCE_
<android.widget.CursorAdapter: android.widget.Filter getFilter()> -> _SOURCE_
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> -> _SOURCE_
<android.widget.CursorAdapter: java.lang.Object getItem(int)> -> _SOURCE_
<android.widget.CursorAdapter: long getItemId(int)> -> _SOURCE_
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> -> _SINK_
<android.widget.CursorAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)> -> _SINK_
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)> -> _SINK_
<android.widget.Filterable: Filter getFilter()> -> _SOURCE_
<android.widget.CheckBox: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.EdgeEffect: int getColor()> -> _SOURCE_
<android.widget.EdgeEffect: float getDistance()> -> _SOURCE_
<android.widget.EdgeEffect: void setBlendMode(android.graphics.BlendMode)> -> _SINK_
<android.widget.EdgeEffect: void setColor(int)> -> _SINK_
<android.widget.EdgeEffect: void setSize(int,int)> -> _SINK_
<android.widget.FilterQueryProvider: Cursor runQuery(java.lang.CharSequence)> -> _SINK_
<android.widget.HeterogeneousExpandableList: int getChildType(int,int)> -> _SOURCE_
<android.widget.HeterogeneousExpandableList: int getChildTypeCount()> -> _SOURCE_
<android.widget.GridLayout.LayoutParams: void setGravity(int)> -> _SINK_
<android.widget.EditText: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<android.widget.EditText: void setEllipsize(android.text.TextUtils.TruncateAt)> -> _SINK_
<android.widget.EditText: void setSelection(int,int)> -> _SINK_
<android.widget.EditText: void setSelection(int)> -> _SINK_
<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView.BufferType)> -> _SINK_
<android.widget.ImageButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ImageButton: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)> -> _SOURCE_
<android.widget.ImageSwitcher: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ImageSwitcher: void setImageResource(int)> -> _SINK_
<android.widget.ImageSwitcher: void setImageURI(android.net.Uri)> -> _SINK_
<android.widget.GridLayout: android.widget.GridLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.widget.GridLayout: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.GridLayout: int getAlignmentMode()> -> _SOURCE_
<android.widget.GridLayout: int getColumnCount()> -> _SOURCE_
<android.widget.GridLayout: int getOrientation()> -> _SOURCE_
<android.widget.GridLayout: int getRowCount()> -> _SOURCE_
<android.widget.GridLayout: boolean getUseDefaultMargins()> -> _SOURCE_
<android.widget.GridLayout: boolean isColumnOrderPreserved()> -> _SOURCE_
<android.widget.GridLayout: boolean isRowOrderPreserved()> -> _SOURCE_
<android.widget.GridLayout: void setAlignmentMode(int)> -> _SINK_
<android.widget.GridLayout: void setColumnCount(int)> -> _SOURCE_
<android.widget.GridLayout: void setColumnOrderPreserved(boolean)> -> _SINK_
<android.widget.GridLayout: void setRowCount(int)> -> _SOURCE_
<android.widget.GridLayout: void setRowOrderPreserved(boolean)> -> _SINK_
<android.widget.GridLayout: void setUseDefaultMargins(boolean)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int,float)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int,int,android.widget.GridLayout.Alignment,float)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int,android.widget.GridLayout.Alignment,float)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int,int,android.widget.GridLayout.Alignment)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int,int,float)> -> _SINK_
<android.widget.GridLayout: GridLayout.Spec spec(int,int)> -> _SINK_
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setClippingEnabled(boolean)> -> _SINK_
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setCornerRadius(float)> -> _SINK_
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setDefaultSourceToMagnifierOffset(int,int)> -> _SINK_
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setElevation(float)> -> _SINK_
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setInitialZoom(float)> -> _SINK_
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setSize(int,int)> -> _SINK_
<android.widget.ImageView: void animateTransform(android.graphics.Matrix)> -> _SINK_
<android.widget.ImageView: void clearColorFilter()> -> _SINK_
<android.widget.ImageView: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ImageView: boolean getAdjustViewBounds()> -> _SINK_
<android.widget.ImageView: int getBaseline()> -> _SOURCE_
<android.widget.ImageView: boolean getBaselineAlignBottom()> -> _SOURCE_
<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.widget.ImageView: boolean getCropToPadding()> -> _SOURCE_
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.widget.ImageView: int getImageAlpha()> -> _SOURCE_
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()> -> _SOURCE_
<android.widget.ImageView: android.graphics.BlendMode getImageTintBlendMode()> -> _SOURCE_
<android.widget.ImageView: android.content.res.ColorStateList getImageTintList()> -> _SOURCE_
<android.widget.ImageView: android.graphics.PorterDuff.Mode getImageTintMode()> -> _SOURCE_
<android.widget.ImageView: int getMaxHeight()> -> _SOURCE_
<android.widget.ImageView: int getMaxWidth()> -> _SOURCE_
<android.widget.ImageView: android.widget.ImageView.ScaleType getScaleType()> -> _SOURCE_
<android.widget.ImageView: boolean hasOverlappingRendering()> -> _SOURCE_
<android.widget.ImageView: void setAdjustViewBounds(boolean)> -> _SINK_
<android.widget.ImageView: void setAlpha(int)> -> _SINK_
<android.widget.ImageView: void setBaseline(int)> -> _SINK_
<android.widget.ImageView: void setBaselineAlignBottom(boolean)> -> _SINK_
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff.Mode)> -> _SINK_
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.widget.ImageView: void setColorFilter(int)> -> _SINK_
<android.widget.ImageView: void setCropToPadding(boolean)> -> _SINK_
<android.widget.ImageView: void setImageAlpha(int)> -> _SINK_
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> -> _SINK_
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)> -> _SINK_
<android.widget.ImageView: void setImageLevel(int)> -> _SINK_
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)> -> _SINK_
<android.widget.ImageView: void setImageResource(int)> -> _SINK_
<android.widget.ImageView: void setImageState(int[],boolean)> -> _SINK_
<android.widget.ImageView: void setImageTintBlendMode(android.graphics.BlendMode)> -> _SINK_
<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)> -> _SINK_
<android.widget.ImageView: void setImageTintMode(android.graphics.PorterDuff.Mode)> -> _SINK_
<android.widget.ImageView: void setImageURI(android.net.Uri)> -> _SINK_
<android.widget.ImageView: void setMaxHeight(int)> -> _SINK_
<android.widget.ImageView: void setMaxWidth(int)> -> _SOURCE_
<android.widget.ImageView: void setScaleType(android.widget.ImageView.ScaleType)> -> _SINK_
<android.widget.ImageView: void setSelected(boolean)> -> _SINK_
<android.widget.ImageView: void setVisibility(int)> -> _SINK_
<android.widget.DigitalClock: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.NumberPicker.Formatter: String format(int)> -> _SOURCE_
<android.widget.Magnifier: float getCornerRadius()> -> _SOURCE_
<android.widget.Magnifier: int getDefaultHorizontalSourceToMagnifierOffset()> -> _SOURCE_
<android.widget.Magnifier: int getDefaultVerticalSourceToMagnifierOffset()> -> _SOURCE_
<android.widget.Magnifier: float getElevation()> -> _SOURCE_
<android.widget.Magnifier: int getHeight()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.drawable.Drawable getOverlay()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Point getPosition()> -> _SOURCE_
<android.widget.Magnifier: int getSourceHeight()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Point getSourcePosition()> -> _SOURCE_
<android.widget.Magnifier: int getSourceWidth()> -> _SOURCE_
<android.widget.Magnifier: int getWidth()> -> _SOURCE_
<android.widget.Magnifier: boolean isClippingEnabled()> -> _SOURCE_
<android.widget.Magnifier: void setZoom(float)> -> _SINK_
<android.widget.Magnifier: void show(float,float,float,float)> -> _SINK_
<android.widget.Gallery: void dispatchSetSelected(boolean)> -> _SINK_
<android.widget.Gallery: android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.widget.Gallery: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.Gallery: boolean onKeyDown(int,android.view.KeyEvent)> -> _SOURCE_
<android.widget.Gallery: void setAnimationDuration(int)> -> _SINK_
<android.widget.Gallery: void setGravity(int)> -> _SINK_
<android.widget.Gallery: void setSpacing(int)> -> _SINK_
<android.widget.Gallery: void setUnselectedAlpha(float)> -> _SINK_
<android.widget.FrameLayout: android.widget.FrameLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.widget.FrameLayout: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()> -> _SOURCE_
<android.widget.FrameLayout: void setForegroundGravity(int)> -> _SINK_
<android.widget.MultiAutoCompleteTextView.Tokenizer: int findTokenEnd(java.lang.CharSequence,int)> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView.Tokenizer: int findTokenStart(java.lang.CharSequence,int)> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView.Tokenizer: CharSequence terminateToken(java.lang.CharSequence)> -> _SOURCE_
<android.widget.RadioGroup: void autofill(android.view.autofill.AutofillValue)> -> _SINK_
<android.widget.RadioGroup: android.widget.RadioGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.widget.RadioGroup: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.RadioGroup: int getAutofillType()> -> _SINK_
<android.widget.RadioGroup: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.widget.RadioGroup: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.widget.ListAdapter: boolean areAllItemsEnabled()> -> _SOURCE_
<android.widget.ListAdapter: boolean isEnabled(int)> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: int findTokenEnd(java.lang.CharSequence,int)> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: int findTokenStart(java.lang.CharSequence,int)> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)> -> _SOURCE_
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> -> _SINK_
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> -> _SINK_
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> -> _SINK_
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> -> _SINK_
<android.widget.QuickContactBadge: void assignContactUri(android.net.Uri)> -> _SINK_
<android.widget.QuickContactBadge: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.QuickContactBadge: void setExcludeMimes(String[])> -> _SINK_
<android.widget.QuickContactBadge: void setMode(int)> -> _SINK_
<android.widget.QuickContactBadge: void setOverlay(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.QuickContactBadge: void setPrioritizedMimeType(java.lang.String)> -> _SINK_
<android.widget.RadioButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.RadioButton: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.widget.RemoteViews.RemoteCollectionItems: int describeContents()> -> _SOURCE_
<android.widget.RemoteViews.RemoteCollectionItems: int getItemCount()> -> _SOURCE_
<android.widget.RemoteViews.RemoteCollectionItems: long getItemId(int)> -> _SOURCE_
<android.widget.RemoteViews.RemoteCollectionItems: int getViewTypeCount()> -> _SOURCE_
<android.widget.RemoteViews.RemoteCollectionItems.Builder: android.widget.RemoteViews.RemoteCollectionItems.Builder addItem(long,android.widget.RemoteViews)> -> _SINK_
<android.widget.RemoteViews.RemoteCollectionItems.Builder: android.widget.RemoteViews.RemoteCollectionItems.Builder setHasStableIds(boolean)> -> _SINK_
<android.widget.RemoteViews.RemoteCollectionItems.Builder: android.widget.RemoteViews.RemoteCollectionItems.Builder setViewTypeCount(int)> -> _SINK_
<android.widget.MultiAutoCompleteTextView: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer)> -> _SINK_
<android.widget.RemoteViewsService: RemoteViewsService.RemoteViewsFactory onGetViewFactory(android.content.Intent)> -> _SINK_
<android.widget.RemoteViewsService.RemoteViewsFactory: int getCount()> -> _SOURCE_
<android.widget.RemoteViewsService.RemoteViewsFactory: long getItemId(int)> -> _SOURCE_
<android.widget.RemoteViewsService.RemoteViewsFactory: RemoteViews getViewAt(int)> -> _SOURCE_
<android.widget.RemoteViewsService.RemoteViewsFactory: int getViewTypeCount()> -> _SOURCE_
<android.widget.RemoteViewsService.RemoteViewsFactory: boolean hasStableIds()> -> _SOURCE_
<android.widget.Scroller: void extendDuration(int)> -> _SINK_
<android.widget.Scroller: void forceFinished(boolean)> -> _SINK_
<android.widget.Scroller: float getCurrVelocity()> -> _SOURCE_
<android.widget.Scroller: int getCurrX()> -> _SOURCE_
<android.widget.Scroller: int getCurrY()> -> _SOURCE_
<android.widget.Scroller: int getDuration()> -> _SOURCE_
<android.widget.Scroller: int getStartX()> -> _SOURCE_
<android.widget.Scroller: int getStartY()> -> _SOURCE_
<android.widget.Scroller: boolean isFinished()> -> _SOURCE_
<android.widget.Scroller: void setFriction(float)> -> _SINK_
<android.widget.Scroller: void startScroll(int,int,int,int,int)> -> _SINK_
<android.widget.Scroller: void startScroll(int,int,int,int)> -> _SINK_
<android.widget.Scroller: int timePassed()> -> _SOURCE_
<android.widget.RemoteViews.RemoteResponse: android.widget.RemoteViews.RemoteResponse addSharedElement(int,java.lang.String)> -> _SINK_
<android.widget.SectionIndexer: int getPositionForSection(int)> -> _SOURCE_
<android.widget.SectionIndexer: int getSectionForPosition(int)> -> _SOURCE_
<android.widget.SimpleCursorTreeAdapter: android.widget.SimpleCursorTreeAdapter.ViewBinder getViewBinder()> -> _SOURCE_
<android.widget.SimpleCursorTreeAdapter: void setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder)> -> _SINK_
<android.widget.SimpleCursorTreeAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<android.widget.SimpleAdapter.ViewBinder: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)> -> _SINK_
<android.widget.SimpleCursorAdapter.CursorToStringConverter: CharSequence convertToString(android.database.Cursor)> -> _SOURCE_
<android.widget.SearchView: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.SearchView: int getImeOptions()> -> _SOURCE_
<android.widget.SearchView: int getInputType()> -> _SOURCE_
<android.widget.SearchView: int getMaxWidth()> -> _SOURCE_
<android.widget.SearchView: java.lang.CharSequence getQuery()> -> _SOURCE_
<android.widget.SearchView: java.lang.CharSequence getQueryHint()> -> _SOURCE_
<android.widget.SearchView: boolean isIconfiedByDefault()> -> _SOURCE_
<android.widget.SearchView: boolean isIconified()> -> _SOURCE_
<android.widget.SearchView: boolean isIconifiedByDefault()> -> _SOURCE_
<android.widget.SearchView: boolean isQueryRefinementEnabled()> -> _SOURCE_
<android.widget.SearchView: boolean isSubmitButtonEnabled()> -> _SOURCE_
<android.widget.SearchView: void setIconified(boolean)> -> _SINK_
<android.widget.SearchView: void setIconifiedByDefault(boolean)> -> _SINK_
<android.widget.SearchView: void setImeOptions(int)> -> _SINK_
<android.widget.SearchView: void setInputType(int)> -> _SINK_
<android.widget.SearchView: void setMaxWidth(int)> -> _SINK_
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)> -> _SINK_
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)> -> _SINK_
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)> -> _SINK_
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)> -> _SINK_
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)> -> _SINK_
<android.widget.SearchView: void setSuggestionsAdapter(android.widget.CursorAdapter)> -> _SINK_
<android.widget.SimpleAdapter: int getCount()> -> _SOURCE_
<android.widget.SimpleAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.SimpleAdapter: android.content.res.Resources.Theme getDropDownViewTheme()> -> _SOURCE_
<android.widget.SimpleAdapter: android.widget.Filter getFilter()> -> _SOURCE_
<android.widget.SimpleAdapter: java.lang.Object getItem(int)> -> _SOURCE_
<android.widget.SimpleAdapter: long getItemId(int)> -> _SOURCE_
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.SimpleAdapter: android.widget.SimpleAdapter.ViewBinder getViewBinder()> -> _SOURCE_
<android.widget.SimpleAdapter: void setDropDownViewResource(int)> -> _SINK_
<android.widget.SimpleAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)> -> _SINK_
<android.widget.SimpleAdapter: void setViewBinder(android.widget.SimpleAdapter.ViewBinder)> -> _SINK_
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)> -> _SINK_
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<android.widget.SpinnerAdapter: View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<android.widget.SimpleCursorAdapter: java.lang.CharSequence convertToString(android.database.Cursor)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter.ViewBinder getViewBinder()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)> -> _SINK_
<android.widget.ResourceCursorAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)> -> _SINK_
<android.widget.ResourceCursorAdapter: void setViewResource(int)> -> _SINK_
<android.widget.SeekBar: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.RemoteViews.RemoteViewOutlineProvider: float getRadius()> -> _SOURCE_
<android.widget.ShareActionProvider: boolean hasSubMenu()> -> _SOURCE_
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)> -> _SINK_
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> -> _SINK_
<android.widget.TabHost.TabSpec: java.lang.String getTag()> -> _SOURCE_
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(android.content.Intent)> -> _SINK_
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(int)> -> _SINK_
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(android.view.View)> -> _SINK_
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(java.lang.CharSequence)> -> _SINK_
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.StackView: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.TextView.SavedState: java.lang.String toString()> -> _SOURCE_
<android.widget.ThemedSpinnerAdapter: Resources.Theme getDropDownViewTheme()> -> _SOURCE_
<android.widget.ThemedSpinnerAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)> -> _SINK_
<android.widget.Toast: int getDuration()> -> _SOURCE_
<android.widget.Toast: int getGravity()> -> _SOURCE_
<android.widget.Toast: android.view.View getView()> -> _SOURCE_
<android.widget.Toast: int getXOffset()> -> _SOURCE_
<android.widget.Toast: int getYOffset()> -> _SOURCE_
<android.widget.Toast: Toast makeText(android.content.Context,int,int)> -> _SINK_
<android.widget.Toast: Toast makeText(android.content.Context,java.lang.CharSequence,int)> -> _SINK_
<android.widget.Toast: void setDuration(int)> -> _SINK_
<android.widget.Toast: void setGravity(int,int,int)> -> _SINK_
<android.widget.Toast: void setMargin(float,float)> -> _SINK_
<android.widget.Toast: void setText(int)> -> _SINK_
<android.widget.Toast: void setText(java.lang.CharSequence)> -> _SINK_
<android.widget.Toast: void setView(android.view.View)> -> _SOURCE_
<android.widget.Toast: void show()> -> _SINK_
<android.widget.TextSwitcher: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.TextSwitcher: void setCurrentText(java.lang.CharSequence)> -> _SINK_
<android.widget.TextSwitcher: void setText(java.lang.CharSequence)> -> _SINK_
<android.widget.TextClock: java.lang.CharSequence getFormat12Hour()> -> _SOURCE_
<android.widget.TextClock: java.lang.CharSequence getFormat24Hour()> -> _SOURCE_
<android.widget.TextClock: java.lang.String getTimeZone()> -> _SINK_
<android.widget.TextClock: void refreshTime()> -> _SINK_
<android.widget.TextClock: void setFormat12Hour(java.lang.CharSequence)> -> _SINK_
<android.widget.TextClock: void setFormat24Hour(java.lang.CharSequence)> -> _SINK_
<android.widget.TextClock: void setTimeZone(java.lang.String)> -> _SINK_
<android.widget.inline.InlinePresentationSpec: int describeContents()> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec: android.util.Size getMaxSize()> -> _SINK_
<android.widget.inline.InlinePresentationSpec: android.util.Size getMinSize()> -> _SINK_
<android.widget.inline.InlinePresentationSpec: android.os.Bundle getStyle()> -> _SINK_
<android.widget.inline.InlinePresentationSpec: java.lang.String toString()> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec.Builder: android.widget.inline.InlinePresentationSpec build()> -> _SINK_
<android.widget.inline.InlinePresentationSpec.Builder: android.widget.inline.InlinePresentationSpec.Builder setStyle(android.os.Bundle)> -> _SINK_
<android.widget.ViewSwitcher: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ViewSwitcher: android.view.View getNextView()> -> _SOURCE_
<android.widget.ViewSwitcher: void setFactory(android.widget.ViewSwitcher.ViewFactory)> -> _SINK_
<android.window.SplashScreen: void setOnExitAnimationListener(android.window.SplashScreen.OnExitAnimationListener)> -> _SINK_
<android.window.SplashScreen: void setSplashScreenTheme(int)> -> _SINK_
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()> -> _SOURCE_
<android.widget.ZoomButtonsController: android.view.View getZoomControls()> -> _SINK_
<android.widget.ZoomButtonsController: boolean isVisible()> -> _SOURCE_
<android.widget.ZoomButtonsController: void setFocusable(boolean)> -> _SINK_
<android.widget.ZoomButtonsController: void setVisible(boolean)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)> -> _SINK_
<android.widget.TwoLineListItem: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.TwoLineListItem: android.widget.TextView getText1()> -> _SOURCE_
<android.widget.TwoLineListItem: android.widget.TextView getText2()> -> _SOURCE_
<android.widget.ZoomButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ZoomButton: void setEnabled(boolean)> -> _SINK_
<android.widget.ToggleButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ToggleButton: float getDisabledAlpha()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()> -> _SOURCE_
<android.widget.ToggleButton: void setTextOn(java.lang.CharSequence)> -> _SINK_
<android.window.SplashScreenView: java.time.Duration getIconAnimationDuration()> -> _SOURCE_
<android.window.SplashScreenView: android.view.View getIconView()> -> _SOURCE_
<android.window.SplashScreenView: void setAlpha(float)> -> _SINK_
<android.widget.SlidingDrawer: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.SlidingDrawer: android.view.View getContent()> -> _SOURCE_
<android.widget.WrapperListAdapter: ListAdapter getWrappedAdapter()> -> _SOURCE_
<android.widget.ViewAnimator: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ViewAnimator: boolean getAnimateFirstView()> -> _SOURCE_
<android.widget.ViewAnimator: int getBaseline()> -> _SOURCE_
<android.widget.ViewAnimator: android.view.View getCurrentView()> -> _SOURCE_
<android.widget.ViewAnimator: int getDisplayedChild()> -> _SOURCE_
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()> -> _SOURCE_
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()> -> _SOURCE_
<android.widget.ViewAnimator: void removeViews(int,int)> -> _SINK_
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)> -> _SINK_
<android.widget.ViewAnimator: void setDisplayedChild(int)> -> _SINK_
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,int)> -> _SINK_
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)> -> _SINK_
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)> -> _SINK_
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,int)> -> _SINK_
<android.widget.TableLayout: android.widget.TableLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.widget.TableLayout: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.TableLayout: boolean isColumnCollapsed(int)> -> _SOURCE_
<android.widget.TableLayout: boolean isColumnShrinkable(int)> -> _SOURCE_
<android.widget.TableLayout: boolean isColumnStretchable(int)> -> _SOURCE_
<android.widget.TableLayout: boolean isShrinkAllColumns()> -> _SINK_
<android.widget.TableLayout: boolean isStretchAllColumns()> -> _SINK_
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)> -> _SINK_
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)> -> _SINK_
<android.widget.TableLayout: void setColumnStretchable(int,boolean)> -> _SINK_
<android.widget.TableLayout: void setShrinkAllColumns(boolean)> -> _SINK_
<android.widget.TableLayout: void setStretchAllColumns(boolean)> -> _SINK_
<androidx.ads.identifier.provider.AdvertisingIdProviderManager: List<AdvertisingIdProviderInfo> getAdvertisingIdProviders(android.content.Context)> -> _SOURCE_
<androidx.ads.identifier.AdvertisingIdInfo: String getId()> -> _SOURCE_
<androidx.ads.identifier.AdvertisingIdInfo: String getProviderPackageName()> -> _SOURCE_
<androidx.ads.identifier.AdvertisingIdInfo: boolean isLimitAdTrackingEnabled()> -> _SOURCE_
<androidx.ads.identifier.provider.AdvertisingIdProviderInfo: String getPackageName()> -> _SOURCE_
<androidx.ads.identifier.provider.AdvertisingIdProviderInfo: Intent getSettingsIntent()> -> _SOURCE_
<androidx.ads.identifier.provider.AdvertisingIdProviderInfo: boolean isHighestPriority()> -> _SOURCE_
<android.widget.ViewFlipper: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.widget.ViewFlipper: boolean isFlipping()> -> _SOURCE_
<androidx.ads.identifier.provider.AdvertisingIdProvider: String getId()> -> _SOURCE_
<androidx.ads.identifier.provider.AdvertisingIdProvider: boolean isLimitAdTrackingEnabled()> -> _SOURCE_
<androidx.ads.identifier.AdvertisingIdClient: ListenableFuture<AdvertisingIdInfo> getAdvertisingIdInfo(android.content.Context)> -> _SOURCE_
<androidx.ads.identifier.AdvertisingIdClient: boolean isAdvertisingIdProviderAvailable(android.content.Context)> -> _SOURCE_
<android.app.AlertDialog.Builder: android.content.Context getContext()> -> _SOURCE_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCancelable(boolean)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCustomTitle(android.view.View)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIconAttribute(int)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setInverseBackgroundForced(boolean)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(int)> -> _SOURCE_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNegativeButtonIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNeutralButtonIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(int)> -> _SINK_
<androidx.appcompat.content.res.AppCompatResources: ColorStateList getColorStateList(android.content.Context,int)> -> _SOURCE_
<androidx.appcompat.content.res.AppCompatResources: Drawable getDrawable(android.content.Context,int)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: boolean applyDayNight()> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: android.content.Context attachBaseContext2(android.content.Context)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: AppCompatDelegate create(android.content.Context,android.app.Activity,androidx.appcompat.app.AppCompatCallback)> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: <T extends View> T findViewById(int)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: LocaleListCompat getApplicationLocales()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: android.content.Context getContextForDelegate()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: int getDefaultNightMode()> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: ActionBarDrawerToggle.Delegate getDrawerToggleDelegate()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: int getLocalNightMode()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: MenuInflater getMenuInflater()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: ActionBar getSupportActionBar()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: boolean hasWindowFeature(int)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: boolean isCompatVectorFromResourcesEnabled()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: boolean isHandleNativeActionModesEnabled()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void onCreate(android.os.Bundle)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void onDestroy()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void onPostCreate(android.os.Bundle)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void onPostResume()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void onStart()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void onStop()> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: boolean requestWindowFeature(int)> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: void setApplicationLocales(androidx.core.os.LocaleListCompat)> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: void setCompatVectorFromResourcesEnabled(boolean)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void setContentView(int)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: void setDefaultNightMode(int)> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: void setLocalNightMode(int)> -> _SINK_
<androidx.appcompat.app.AppCompatDelegate: void setTheme(int)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: void setTitle(java.lang.CharSequence)> -> _SOURCE_
<androidx.appcompat.app.AppCompatDelegate: ActionMode startSupportActionMode(android.view.ActionMode.Callback)> -> _SINK_
<androidx.appcompat.app.ActionBarDrawerToggle.Delegate: Context getActionBarThemedContext()> -> _SOURCE_
<androidx.appcompat.app.ActionBarDrawerToggle.Delegate: boolean isNavigationVisible()> -> _SOURCE_
<android.widget.ThemedSpinnerAdapter: Resources.Theme getDropDownViewTheme()> -> _SOURCE_
<android.widget.ThemedSpinnerAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)> -> _SINK_
<androidx.appcompat.widget.ThemedSpinnerAdapter.Helper: android.content.res.Resources.Theme getDropDownViewTheme()> -> _SOURCE_
<androidx.appcompat.widget.TooltipCompat: void setTooltipText(android.view.View,java.lang.CharSequence)> -> _SINK_
<androidx.appsearch.annotation.Document.BooleanProperty: boolean required()> -> _SINK_
<androidx.appsearch.annotation.Document.LongProperty: boolean required()> -> _SINK_
<androidx.appsearch.annotation.Document.BytesProperty: boolean required()> -> _SINK_
<androidx.appsearch.annotation.Document.DoubleProperty: boolean required()> -> _SINK_
<android.widget.ShareActionProvider: boolean hasSubMenu()> -> _SOURCE_
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)> -> _SINK_
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> -> _SINK_
<androidx.appsearch.annotation.Document.StringProperty: int indexingType()> -> _SINK_
<androidx.appsearch.annotation.Document.StringProperty: boolean required()> -> _SINK_
<androidx.appsearch.annotation.Document.StringProperty: int tokenizerType()> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: Builder<KeyType, ValueType> setFailure(KeyType,int,java.lang.String)> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: Builder<KeyType, ValueType> setResult(KeyType,AppSearchResult<ValueType>)> -> _SOURCE_
<android.app.appsearch.AppSearchBatchResult.Builder: Builder<KeyType, ValueType> setSuccess(KeyType,ValueType)> -> _SOURCE_
<androidx.appsearch.annotation.Document.DocumentProperty: boolean indexNestedProperties()> -> _SINK_
<androidx.appsearch.annotation.Document.DocumentProperty: boolean required()> -> _SINK_
<android.app.appsearch.AppSearchSchema.BooleanPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.BooleanPropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.DoublePropertyConfig.Builder: android.app.appsearch.AppSearchSchema.DoublePropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.LongPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.LongPropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig: java.lang.String getSchemaType()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig: boolean shouldIndexNestedProperties()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.BytesPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.BytesPropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.Builder: android.app.appsearch.AppSearchSchema.Builder addProperty(android.app.appsearch.AppSearchSchema.PropertyConfig)> -> _SINK_
<android.app.appsearch.AppSearchSchema.Builder: android.app.appsearch.AppSearchSchema build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.DocumentPropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.DocumentPropertyConfig.Builder setShouldIndexNestedProperties(boolean)> -> _SINK_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.StringPropertyConfig build()> -> _SINK_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setIndexingType(int)> -> _SINK_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder: android.app.appsearch.AppSearchSchema.StringPropertyConfig.Builder setTokenizerType(int)> -> _SINK_
<android.app.appsearch.GetByDocumentIdRequest.Builder: android.app.appsearch.GetByDocumentIdRequest.Builder addProjection(java.lang.String,Collection<String>)> -> _SINK_
<android.app.appsearch.GetByDocumentIdRequest.Builder: android.app.appsearch.GetByDocumentIdRequest build()> -> _SOURCE_
<androidx.appsearch.app.Capabilities: boolean isSubmatchSupported()> -> _SOURCE_
<android.app.appsearch.GenericDocument.Builder: BuilderType setCreationTimestampMillis(long)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setId(java.lang.String)> -> _SOURCE_
<android.app.appsearch.GenericDocument.Builder: BuilderType setNamespace(java.lang.String)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyBoolean(java.lang.String,boolean[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyBytes(java.lang.String,byte[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyDocument(java.lang.String,GenericDocument[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyDouble(java.lang.String,double[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyLong(java.lang.String,long[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setPropertyString(java.lang.String,String[])> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setSchemaType(java.lang.String)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setScore(int)> -> _SINK_
<android.app.appsearch.GenericDocument.Builder: BuilderType setTtlMillis(long)> -> _SINK_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig: int getIndexingType()> -> _SOURCE_
<android.app.appsearch.AppSearchSchema.StringPropertyConfig: int getTokenizerType()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder addSchema(android.app.appsearch.AppSearchSchema)> -> _SINK_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse build()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse.Builder: android.app.appsearch.GetSchemaResponse.Builder setVersion(int)> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest.Builder addDocuments(Collection<?>)> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest.Builder addDocuments(Object[])> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest.Builder addGenericDocuments(Collection<?)> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest.Builder addGenericDocuments(GenericDocument[])> -> _SINK_
<android.app.appsearch.PutDocumentsRequest.Builder: android.app.appsearch.PutDocumentsRequest build()> -> _SINK_
<android.app.appsearch.GetSchemaResponse: Set<AppSearchSchema> getSchemas()> -> _SOURCE_
<android.app.appsearch.GetSchemaResponse: int getVersion()> -> _SOURCE_
<android.app.appsearch.PutDocumentsRequest: List<GenericDocument> getGenericDocuments()> -> _SOURCE_
<android.app.appsearch.Migrator: GenericDocument onUpgrade(int,int,android.app.appsearch.GenericDocument)> -> _SINK_
<android.app.appsearch.Migrator: boolean shouldMigrate(int,int)> -> _SOURCE_
<android.app.appsearch.ReportUsageRequest: java.lang.String getDocumentId()> -> _SOURCE_
<android.app.appsearch.ReportUsageRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.ReportUsageRequest: long getUsageTimestampMillis()> -> _SOURCE_
<android.app.appsearch.SearchResult: java.lang.String getDatabaseName()> -> _SOURCE_
<android.app.appsearch.SearchResult:  T getDocument(Class)> -> _SOURCE_
<android.app.appsearch.SearchResult: android.app.appsearch.GenericDocument getGenericDocument()> -> _SOURCE_
<android.app.appsearch.SearchResult: List<SearchResult.MatchInfo> getMatchInfos()> -> _SOURCE_
<android.app.appsearch.SearchResult: java.lang.String getPackageName()> -> _SOURCE_
<android.app.appsearch.SearchResult: double getRankingSignal()> -> _SOURCE_
<android.app.appsearch.ReportUsageRequest.Builder: android.app.appsearch.ReportUsageRequest.Builder setUsageTimestampMillis(long)> -> _SINK_
<android.app.appsearch.GetByDocumentIdRequest: Set<String> getIds()> -> _SOURCE_
<android.app.appsearch.GetByDocumentIdRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.GetByDocumentIdRequest: java.util.Map> getProjections()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: java.util.Map getMigrators()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: Set<AppSearchSchema> getSchemas()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: Set<String> getSchemasNotDisplayedBySystem()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: java.util.Map> getSchemasVisibleToPackages()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: int getVersion()> -> _SOURCE_
<android.app.appsearch.SetSchemaRequest: boolean isForceOverride()> -> _SOURCE_
<androidx.appsearch.app.DocumentClassFactory: AppSearchSchema getSchema()> -> _SOURCE_
<androidx.appsearch.app.DocumentClassFactory: String getSchemaName()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getDatabaseName()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getDocumentId()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest: long getUsageTimestampMillis()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse: Set<String> getDeletedTypes()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse: Set<String> getMigratedTypes()> -> _SOURCE_
<android.app.appsearch.SetSchemaResponse: List<SetSchemaResponse.MigrationFailure> getMigrationFailures()> -> _SOURCE_
<android.app.appsearch.AppSearchSession: ListenableFuture<AppSearchBatchResult<String, GenericDocument>> getByDocumentId(android.app.appsearch.GetByDocumentIdRequest)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: Capabilities getCapabilities()> -> _SOURCE_
<android.app.appsearch.AppSearchSession: ListenableFuture<Set<String>> getNamespaces()> -> _SOURCE_
<android.app.appsearch.AppSearchSession: ListenableFuture<GetSchemaResponse> getSchema()> -> _SOURCE_
<android.app.appsearch.AppSearchSession: ListenableFuture<StorageInfo> getStorageInfo()> -> _SOURCE_
<android.app.appsearch.AppSearchSession: ListenableFuture<Void> reportUsage(android.app.appsearch.ReportUsageRequest)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: SearchResults search(java.lang.String,android.app.appsearch.SearchSpec)> -> _SOURCE_
<android.app.appsearch.AppSearchSession: ListenableFuture<SetSchemaResponse> setSchema(android.app.appsearch.SetSchemaRequest)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse.Builder addMigratedType(java.lang.String)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse.Builder addMigrationFailure(android.app.appsearch.SetSchemaResponse.MigrationFailure)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse.Builder addMigrationFailures(Collection<SetSchemaResponse.MigrationFailure>)> -> _SINK_
<android.app.appsearch.SetSchemaResponse.Builder: android.app.appsearch.SetSchemaResponse build()> -> _SINK_
<android.app.appsearch.RemoveByDocumentIdRequest: Set<String> getIds()> -> _SOURCE_
<android.app.appsearch.RemoveByDocumentIdRequest: java.lang.String getNamespace()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo build()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo.Builder setExactMatchRange(android.app.appsearch.SearchResult.MatchRange)> -> _SINK_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo.Builder setSnippetRange(android.app.appsearch.SearchResult.MatchRange)> -> _SINK_
<android.app.appsearch.SearchResult.MatchInfo.Builder: android.app.appsearch.SearchResult.MatchInfo.Builder setSubmatchRange(android.app.appsearch.SearchResult.MatchRange)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder addDocumentClasses(Class[]<?>)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder addDocumentClasses(Collection<?)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder addSchemas(AppSearchSchema[])> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest build()> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setDocumentClassDisplayedBySystem(Class<?>,boolean)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setDocumentClassVisibilityForPackage(Class<?>,boolean,android.app.appsearch.PackageIdentifier)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setForceOverride(boolean)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setMigrator(java.lang.String,android.app.appsearch.Migrator)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setMigrators(java.util.Map -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setSchemaTypeDisplayedBySystem(java.lang.String,boolean)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setSchemaTypeVisibilityForPackage(java.lang.String,boolean,android.app.appsearch.PackageIdentifier)> -> _SINK_
<android.app.appsearch.SetSchemaRequest.Builder: android.app.appsearch.SetSchemaRequest.Builder setVersion(int)> -> _SINK_
<androidx.appsearch.localstorage.LocalStorage.SearchContext.Builder: androidx.appsearch.localstorage.LocalStorage.SearchContext.Builder setWorkerExecutor(java.util.concurrent.Executor)> -> _SINK_
<android.app.appsearch.SearchResult.Builder: android.app.appsearch.SearchResult.Builder setDocument(java.lang.Object)> -> _SINK_
<android.app.appsearch.SearchResult.Builder: android.app.appsearch.SearchResult.Builder setGenericDocument(android.app.appsearch.GenericDocument)> -> _SINK_
<android.app.appsearch.SearchResult.Builder: android.app.appsearch.SearchResult.Builder setRankingSignal(double)> -> _SINK_
<android.app.appsearch.exceptions.AppSearchException: int getResultCode()> -> _SOURCE_
<android.app.appsearch.exceptions.AppSearchException:  AppSearchResult toAppSearchResult()> -> _SOURCE_
<android.app.appsearch.StorageInfo.Builder: android.app.appsearch.StorageInfo.Builder setAliveDocumentsCount(int)> -> _SINK_
<android.app.appsearch.StorageInfo.Builder: android.app.appsearch.StorageInfo.Builder setAliveNamespacesCount(int)> -> _SINK_
<android.app.appsearch.StorageInfo.Builder: android.app.appsearch.StorageInfo.Builder setSizeBytes(long)> -> _SINK_
<android.app.appsearch.SearchSpec: List<String> getFilterNamespaces()> -> _SOURCE_
<android.app.appsearch.SearchSpec: List<String> getFilterPackageNames()> -> _SOURCE_
<android.app.appsearch.SearchSpec: List<String> getFilterSchemas()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getMaxSnippetSize()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getOrder()> -> _SOURCE_
<android.app.appsearch.SearchSpec: java.util.Map> getProjections()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getResultCountPerPage()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getResultGroupingLimit()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getResultGroupingTypeFlags()> -> _SINK_
<android.app.appsearch.SearchSpec: int getSnippetCount()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getSnippetCountPerProperty()> -> _SOURCE_
<android.app.appsearch.SearchSpec: int getTermMatch()> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: Capabilities getCapabilities()> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: ListenableFuture<Void> reportSystemUsage(android.app.appsearch.ReportSystemUsageRequest)> -> _SOURCE_
<android.app.appsearch.GlobalSearchSession: SearchResults search(java.lang.String,android.app.appsearch.SearchSpec)> -> _SOURCE_
<androidx.appsearch.platformstorage.PlatformStorage.GlobalSearchContext: java.util.concurrent.Executor getWorkerExecutor()> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterDocumentClasses(Class[]<?>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterDocumentClasses(Collection<?)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterNamespaces(String[])> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterNamespaces(Collection<String>)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterPackageNames(String[])> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterPackageNames(Collection<String>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterSchemas(Collection<String>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addFilterSchemas(String[])> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder addProjection(java.lang.String,Collection<String>)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setMaxSnippetSize(int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setOrder(int)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setRankingStrategy(int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setResultCountPerPage(int)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setResultGrouping(int,int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setSnippetCount(int)> -> _SOURCE_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setSnippetCountPerProperty(int)> -> _SINK_
<android.app.appsearch.SearchSpec.Builder: android.app.appsearch.SearchSpec.Builder setTermMatch(int)> -> _SINK_
<androidx.appsearch.platformstorage.PlatformStorage.GlobalSearchContext.Builder: androidx.appsearch.platformstorage.PlatformStorage.GlobalSearchContext build()> -> _SINK_
<androidx.appsearch.platformstorage.PlatformStorage.GlobalSearchContext.Builder: androidx.appsearch.platformstorage.PlatformStorage.GlobalSearchContext.Builder setWorkerExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.appsearch.platformstorage.PlatformStorage.SearchContext: java.lang.String getDatabaseName()> -> _SOURCE_
<androidx.appsearch.platformstorage.PlatformStorage.SearchContext: java.util.concurrent.Executor getWorkerExecutor()> -> _SOURCE_
<android.app.appsearch.ReportSystemUsageRequest.Builder: android.app.appsearch.ReportSystemUsageRequest.Builder setUsageTimestampMillis(long)> -> _SINK_
<androidx.appsearch.platformstorage.PlatformStorage: ListenableFuture<GlobalSearchSession> createGlobalSearchSession(androidx.appsearch.platformstorage.PlatformStorage.GlobalSearchContext)> -> _SINK_
<androidx.appsearch.localstorage.LocalStorage.SearchContext: java.lang.String getDatabaseName()> -> _SOURCE_
<androidx.appsearch.localstorage.LocalStorage.SearchContext: java.util.concurrent.Executor getWorkerExecutor()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.CharSequence getExactMatch()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: android.app.appsearch.SearchResult.MatchRange getExactMatchRange()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.String getFullText()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.String getPropertyPath()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.CharSequence getSnippet()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: android.app.appsearch.SearchResult.MatchRange getSnippetRange()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: java.lang.CharSequence getSubmatch()> -> _SOURCE_
<android.app.appsearch.SearchResult.MatchInfo: android.app.appsearch.SearchResult.MatchRange getSubmatchRange()> -> _SOURCE_
<androidx.autofill.HintConstants: String generateSmsOtpHintForCharacterPosition(int)> -> _SINK_
<androidx.appsearch.platformstorage.PlatformStorage.SearchContext.Builder: androidx.appsearch.platformstorage.PlatformStorage.SearchContext build()> -> _SINK_
<androidx.appsearch.platformstorage.PlatformStorage.SearchContext.Builder: androidx.appsearch.platformstorage.PlatformStorage.SearchContext.Builder setWorkerExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setBackground(android.graphics.drawable.Icon)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setBackgroundColor(int)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setLayoutMargin(int,int,int,int)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: androidx.autofill.inline.common.ImageViewStyle.Builder setMaxHeight(int)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: androidx.autofill.inline.common.ImageViewStyle.Builder setMaxWidth(int)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setPadding(int,int,int,int)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: androidx.autofill.inline.common.ImageViewStyle.Builder setScaleType(android.widget.ImageView.ScaleType)> -> _SINK_
<androidx.autofill.inline.common.ImageViewStyle.Builder: androidx.autofill.inline.common.ImageViewStyle.Builder setTintList(android.content.res.ColorStateList)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setBackground(android.graphics.drawable.Icon)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setBackgroundColor(int)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setLayoutMargin(int,int,int,int)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setPadding(int,int,int,int)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: androidx.autofill.inline.common.TextViewStyle.Builder setTextColor(int)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: androidx.autofill.inline.common.TextViewStyle.Builder setTextSize(float)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: androidx.autofill.inline.common.TextViewStyle.Builder setTextSize(int,float)> -> _SINK_
<androidx.autofill.inline.common.TextViewStyle.Builder: androidx.autofill.inline.common.TextViewStyle.Builder setTypeface(java.lang.String,int)> -> _SINK_
<androidx.autofill.inline.UiVersions.Content: Slice getSlice()> -> _SOURCE_
<androidx.autofill.inline.common.ViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setBackground(android.graphics.drawable.Icon)> -> _SINK_
<androidx.autofill.inline.common.ViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setBackgroundColor(int)> -> _SINK_
<androidx.autofill.inline.common.ViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setLayoutMargin(int,int,int,int)> -> _SINK_
<androidx.autofill.inline.common.ViewStyle.Builder: B extends BaseBuilder<T extends ViewStyle, B> setPadding(int,int,int,int)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder setEndIcon(android.graphics.drawable.Icon)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder setHints(List<String>)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder setStartIcon(android.graphics.drawable.Icon)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Content.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.appsearch.StorageInfo: int getAliveDocumentsCount()> -> _SOURCE_
<android.app.appsearch.StorageInfo: int getAliveNamespacesCount()> -> _SOURCE_
<android.app.appsearch.StorageInfo: long getSizeBytes()> -> _SOURCE_
<androidx.autofill.inline.UiVersions.StylesBuilder: androidx.autofill.inline.UiVersions.StylesBuilder addStyle(androidx.autofill.inline.UiVersions.Style)> -> _SINK_
<androidx.autofill.inline.UiVersions.StylesBuilder: android.os.Bundle build()> -> _SOURCE_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setChipStyle(androidx.autofill.inline.common.ViewStyle)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setEndIconStyle(androidx.autofill.inline.common.ImageViewStyle)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setLayoutDirection(int)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setSingleIconChipIconStyle(androidx.autofill.inline.common.ImageViewStyle)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setSingleIconChipStyle(androidx.autofill.inline.common.ViewStyle)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setStartIconStyle(androidx.autofill.inline.common.ImageViewStyle)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setSubtitleStyle(androidx.autofill.inline.common.TextViewStyle)> -> _SINK_
<androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder: androidx.autofill.inline.v1.InlineSuggestionUi.Style.Builder setTitleStyle(androidx.autofill.inline.common.TextViewStyle)> -> _SINK_
<android.hardware.biometrics.BiometricManager: int canAuthenticate()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: int canAuthenticate(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.BiometricManager.Strings getStrings(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: void authenticate(androidx.biometric.BiometricPrompt.PromptInfo,android.hardware.biometrics.BiometricPrompt.CryptoObject)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: void authenticate(androidx.biometric.BiometricPrompt.PromptInfo)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.CryptoObject: android.content.pm.Signature getSignature()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo build()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setAllowedAuthenticators(int)> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setConfirmationRequired(boolean)> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setDeviceCredentialAllowed(boolean)> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setNegativeButtonText(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo.Builder: androidx.biometric.BiometricPrompt.PromptInfo.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.AuthPromptHost: androidx.fragment.app.FragmentActivity getActivity()> -> _SOURCE_
<androidx.biometric.auth.AuthPromptHost: android.app.Fragment getFragment()> -> _SOURCE_
<androidx.biometric.auth.Class2BiometricAuthPrompt: java.lang.CharSequence getDescription()> -> _SINK_
<androidx.biometric.auth.Class2BiometricAuthPrompt: java.lang.CharSequence getNegativeButtonText()> -> _SOURCE_
<androidx.biometric.auth.Class2BiometricAuthPrompt: java.lang.CharSequence getSubtitle()> -> _SINK_
<androidx.biometric.auth.Class2BiometricAuthPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.biometric.auth.Class2BiometricAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,java.util.concurrent.Executor,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class2BiometricAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<android.hardware.biometrics.BiometricManager.Strings: java.lang.CharSequence getButtonLabel()> -> _SINK_
<android.hardware.biometrics.BiometricManager.Strings: java.lang.CharSequence getPromptMessage()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager.Strings: java.lang.CharSequence getSettingName()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo: int getAllowedAuthenticators()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo: java.lang.CharSequence getNegativeButtonText()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.biometric.BiometricPrompt.PromptInfo: boolean isConfirmationRequired()> -> _SINK_
<androidx.biometric.BiometricPrompt.PromptInfo: boolean isDeviceCredentialAllowed()> -> _SOURCE_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt: java.lang.CharSequence getDescription()> -> _SINK_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt: java.lang.CharSequence getSubtitle()> -> _SINK_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,java.util.concurrent.Executor,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt.AuthenticationResult: int getAuthenticationType()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt.AuthenticationResult: android.hardware.biometrics.BiometricPrompt.CryptoObject getCryptoObject()> -> _SOURCE_
<androidx.biometric.auth.Class3BiometricAuthPrompt: java.lang.CharSequence getDescription()> -> _SINK_
<androidx.biometric.auth.Class3BiometricAuthPrompt: java.lang.CharSequence getNegativeButtonText()> -> _SOURCE_
<androidx.biometric.auth.Class3BiometricAuthPrompt: java.lang.CharSequence getSubtitle()> -> _SINK_
<androidx.biometric.auth.Class3BiometricAuthPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.biometric.auth.Class3BiometricAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,android.hardware.biometrics.BiometricPrompt.CryptoObject,java.util.concurrent.Executor,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class3BiometricAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,android.hardware.biometrics.BiometricPrompt.CryptoObject,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt: java.lang.CharSequence getDescription()> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt: java.lang.CharSequence getSubtitle()> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,android.hardware.biometrics.BiometricPrompt.CryptoObject,java.util.concurrent.Executor,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,android.hardware.biometrics.BiometricPrompt.CryptoObject,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class3BiometricAuthPrompt.Builder: androidx.biometric.auth.Class3BiometricAuthPrompt build()> -> _SINK_
<androidx.biometric.auth.Class3BiometricAuthPrompt.Builder: androidx.biometric.auth.Class3BiometricAuthPrompt.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.Class3BiometricAuthPrompt.Builder: androidx.biometric.auth.Class3BiometricAuthPrompt.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.CredentialAuthPrompt: java.lang.CharSequence getDescription()> -> _SINK_
<androidx.biometric.auth.CredentialAuthPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.biometric.auth.CredentialAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,android.hardware.biometrics.BiometricPrompt.CryptoObject,java.util.concurrent.Executor,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.CredentialAuthPrompt: androidx.biometric.auth.AuthPrompt startAuthentication(androidx.biometric.auth.AuthPromptHost,android.hardware.biometrics.BiometricPrompt.CryptoObject,androidx.biometric.auth.AuthPromptCallback)> -> _SINK_
<androidx.biometric.auth.Class2BiometricAuthPrompt.Builder: androidx.biometric.auth.Class2BiometricAuthPrompt build()> -> _SINK_
<androidx.biometric.auth.Class2BiometricAuthPrompt.Builder: androidx.biometric.auth.Class2BiometricAuthPrompt.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.Class2BiometricAuthPrompt.Builder: androidx.biometric.auth.Class2BiometricAuthPrompt.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt.Builder: androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt build()> -> _SINK_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt.Builder: androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt.Builder: androidx.biometric.auth.Class2BiometricOrCredentialAuthPrompt.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.CredentialAuthPrompt.Builder: androidx.biometric.auth.CredentialAuthPrompt build()> -> _SINK_
<androidx.biometric.auth.CredentialAuthPrompt.Builder: androidx.biometric.auth.CredentialAuthPrompt.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt.Builder: androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt build()> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt.Builder: androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt.Builder: androidx.biometric.auth.Class3BiometricOrCredentialAuthPrompt.Builder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.browser.customtabs.CustomTabsCallback: android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsCallback: void onMessageChannelReady(android.os.Bundle)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsCallback: void onPostMessage(java.lang.String,android.os.Bundle)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsSession: CustomTabsSession createMockSessionForTesting(android.content.ComponentName)> -> _SINK_
<androidx.browser.customtabs.CustomTabsSession: int postMessage(java.lang.String,android.os.Bundle)> -> _SINK_
<androidx.browser.customtabs.CustomTabsSession: boolean receiveFile(android.net.Uri,int,android.os.Bundle)> -> _SINK_
<androidx.browser.customtabs.CustomTabsSession: boolean requestPostMessageChannel(android.net.Uri)> -> _SINK_
<androidx.browser.customtabs.CustomTabsSession: boolean validateRelationship(int,android.net.Uri,android.os.Bundle)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsClient: String getPackageName(android.content.Context,List<String>)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsClient: String getPackageName(android.content.Context,List<String>,boolean)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsClient: androidx.browser.customtabs.CustomTabsSession newSession(androidx.browser.customtabs.CustomTabsCallback)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder addMenuItem(java.lang.String,android.app.PendingIntent)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent build()> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder enableUrlBarHiding()> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setActionButton(android.graphics.Bitmap,java.lang.String,android.app.PendingIntent,boolean)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setActionButton(android.graphics.Bitmap,java.lang.String,android.app.PendingIntent)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setColorScheme(int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setColorSchemeParams(int,androidx.browser.customtabs.CustomTabColorSchemeParams)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setDefaultColorSchemeParams(androidx.browser.customtabs.CustomTabColorSchemeParams)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setExitAnimations(android.content.Context,int,int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setInstantAppsEnabled(boolean)> -> _SOURCE_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setNavigationBarColor(int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setNavigationBarDividerColor(int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setSecondaryToolbarColor(int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setSecondaryToolbarViews(android.widget.RemoteViews,int[],android.app.PendingIntent)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setSession(androidx.browser.customtabs.CustomTabsSession)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setShareState(int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setShowTitle(boolean)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setStartAnimations(android.content.Context,int,int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setToolbarColor(int)> -> _SINK_
<androidx.browser.customtabs.CustomTabsIntent.Builder: androidx.browser.customtabs.CustomTabsIntent.Builder setUrlBarHidingEnabled(boolean)> -> _SINK_
<androidx.browser.customtabs.TrustedWebUtils: boolean areSplashScreensSupported(android.content.Context,java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.browser.customtabs.TrustedWebUtils: void launchAsTrustedWebActivity(android.content.Context,androidx.browser.customtabs.CustomTabsIntent,android.net.Uri)> -> _SOURCE_
<androidx.browser.customtabs.TrustedWebUtils: boolean transferSplashImage(android.content.Context,java.io.File,java.lang.String,java.lang.String,androidx.browser.customtabs.CustomTabsSession)> -> _SINK_
<androidx.browser.trusted.Token: Token create(java.lang.String,android.content.pm.PackageManager)> -> _SOURCE_
<androidx.browser.trusted.Token: Token deserialize(byte[])> -> _SOURCE_
<androidx.browser.trusted.Token: boolean matches(java.lang.String,android.content.pm.PackageManager)> -> _SOURCE_
<androidx.browser.trusted.Token: byte[] serialize()> -> _SOURCE_
<androidx.browser.browseractions.BrowserActionsIntent: String getCreatorPackageName(android.content.Intent)> -> _SOURCE_
<androidx.browser.browseractions.BrowserActionsIntent: android.content.Intent getIntent()> -> _SOURCE_
<androidx.browser.browseractions.BrowserActionsIntent: String getUntrustedCreatorPackageName(android.content.Intent)> -> _SOURCE_
<androidx.browser.browseractions.BrowserActionsIntent: void openBrowserAction(android.content.Context,android.net.Uri,int,ArrayList<BrowserActionItem>,android.app.PendingIntent)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityServiceConnectionPool: ListenableFuture<TrustedWebActivityServiceConnection> connect(android.net.Uri,Set<Token>,java.util.concurrent.Executor)> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityServiceConnectionPool: TrustedWebActivityServiceConnectionPool create(android.content.Context)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityServiceConnectionPool: boolean serviceExistsForScope(android.net.Uri,Set<Token>)> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityDisplayMode.ImmersiveMode: boolean isSticky()> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityIntent: android.content.Intent getIntent()> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityIntent: void launchTrustedWebActivity(android.content.Context)> -> _SINK_
<androidx.browser.browseractions.BrowserActionsIntent.Builder: androidx.browser.browseractions.BrowserActionsIntent.Builder setCustomItems(ArrayList<BrowserActionItem>)> -> _SINK_
<androidx.browser.browseractions.BrowserActionsIntent.Builder: androidx.browser.browseractions.BrowserActionsIntent.Builder setCustomItems(BrowserActionItem[])> -> _SINK_
<androidx.browser.browseractions.BrowserActionsIntent.Builder: androidx.browser.browseractions.BrowserActionsIntent.Builder setOnItemSelectedAction(android.app.PendingIntent)> -> _SINK_
<androidx.browser.browseractions.BrowserActionsIntent.Builder: androidx.browser.browseractions.BrowserActionsIntent.Builder setUrlType(int)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityServiceConnection: android.content.ComponentName getComponentName()> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityServiceConnection: int getSmallIconId()> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityServiceConnection: android.os.Bundle sendExtraCommand(java.lang.String,android.os.Bundle,androidx.browser.trusted.TrustedWebActivityCallback)> -> _SINK_
<androidx.browser.trusted.TokenStore: Token load()> -> _SOURCE_
<androidx.browser.trusted.TokenStore: void store(androidx.browser.trusted.Token)> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntent build(androidx.browser.customtabs.CustomTabsSession)> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityDisplayMode getDisplayMode()> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: android.net.Uri getUri()> -> _SOURCE_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setAdditionalTrustedOrigins(List<String>)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setColorScheme(int)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setColorSchemeParams(int,androidx.browser.customtabs.CustomTabColorSchemeParams)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setDefaultColorSchemeParams(androidx.browser.customtabs.CustomTabColorSchemeParams)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setDisplayMode(androidx.browser.trusted.TrustedWebActivityDisplayMode)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setNavigationBarColor(int)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setNavigationBarDividerColor(int)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setScreenOrientation(int)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setShareParams(androidx.browser.trusted.sharing.ShareTarget,androidx.browser.trusted.sharing.ShareData)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setSplashScreenParams(android.os.Bundle)> -> _SINK_
<androidx.browser.trusted.TrustedWebActivityIntentBuilder: androidx.browser.trusted.TrustedWebActivityIntentBuilder setToolbarColor(int)> -> _SINK_
<androidx.camera.camera2.interop.Camera2CameraInfo: Camera2CameraInfo from(androidx.camera.core.CameraInfo)> -> _SOURCE_
<androidx.camera.camera2.interop.Camera2CameraInfo:  T getCameraCharacteristic(Key)> -> _SOURCE_
<androidx.camera.camera2.interop.Camera2CameraInfo: java.lang.String getCameraId()> -> _SOURCE_
<androidx.camera.camera2.interop.CaptureRequestOptions.Builder: <ValueT> CaptureRequestOptions.Builder setCaptureRequestOption(Key<ValueT>,ValueT)> -> _SINK_
<androidx.camera.core.CameraFilter: List<CameraInfo> filter(List<CameraInfo>)> -> _SOURCE_
<android.graphics.Camera: CameraInfo getCameraInfo()> -> _SOURCE_
<androidx.camera.camera2.interop.CaptureRequestOptions: <ValueT> ValueT getCaptureRequestOption(Key<ValueT>)> -> _SOURCE_
<androidx.camera.core.CameraSelector.Builder: androidx.camera.core.CameraSelector.Builder requireLensFacing(int)> -> _SOURCE_
<androidx.camera.core.CameraState: CameraState.Type getType()> -> _SOURCE_
<androidx.camera.core.CameraXConfig: androidx.camera.core.CameraSelector getAvailableCamerasLimiter(androidx.camera.core.CameraSelector)> -> _SOURCE_
<androidx.camera.core.CameraXConfig: java.util.concurrent.Executor getCameraExecutor(java.util.concurrent.Executor)> -> _SOURCE_
<androidx.camera.core.CameraXConfig: int getMinimumLoggingLevel()> -> _SOURCE_
<androidx.camera.core.CameraXConfig: android.os.Handler getSchedulerHandler(android.os.Handler)> -> _SOURCE_
<androidx.camera.core.CameraControl: ListenableFuture<Integer> setExposureCompensationIndex(int)> -> _SINK_
<androidx.camera.core.CameraControl: ListenableFuture<Void> setLinearZoom(float)> -> _SINK_
<androidx.camera.core.CameraControl: ListenableFuture<Void> setZoomRatio(float)> -> _SINK_
<androidx.camera.core.CameraXConfig.Provider: CameraXConfig getCameraXConfig()> -> _SOURCE_
<androidx.camera.camera2.interop.Camera2CameraControl: ListenableFuture<Void> addCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions)> -> _SINK_
<androidx.camera.camera2.interop.Camera2CameraControl: Camera2CameraControl from(androidx.camera.core.CameraControl)> -> _SOURCE_
<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.interop.CaptureRequestOptions getCaptureRequestOptions()> -> _SOURCE_
<androidx.camera.camera2.interop.Camera2CameraControl: ListenableFuture<Void> setCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions)> -> _SINK_
<androidx.camera.core.ExposureState: int getExposureCompensationIndex()> -> _SOURCE_
<androidx.camera.core.ExposureState: Range<Integer> getExposureCompensationRange()> -> _SOURCE_
<androidx.camera.core.ExposureState: Rational getExposureCompensationStep()> -> _SINK_
<androidx.camera.core.ExposureState: boolean isExposureCompensationSupported()> -> _SOURCE_
<androidx.camera.core.CameraProvider: List<CameraInfo> getAvailableCameraInfos()> -> _SOURCE_
<androidx.camera.core.CameraProvider: boolean hasCamera(androidx.camera.core.CameraSelector)> -> _SOURCE_
<androidx.camera.core.CameraXConfig.Builder: androidx.camera.core.CameraXConfig.Builder setAvailableCamerasLimiter(androidx.camera.core.CameraSelector)> -> _SINK_
<androidx.camera.core.CameraXConfig.Builder: androidx.camera.core.CameraXConfig.Builder setCameraExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.camera.core.CameraXConfig.Builder: androidx.camera.core.CameraXConfig.Builder setMinimumLoggingLevel(int)> -> _SINK_
<androidx.camera.core.CameraXConfig.Builder: androidx.camera.core.CameraXConfig.Builder setSchedulerHandler(android.os.Handler)> -> _SINK_
<androidx.camera.core.ImageCapture.Metadata: android.location.Location getLocation()> -> _SOURCE_
<androidx.camera.core.ImageCapture.Metadata: void setLocation(android.location.Location)> -> _SINK_
<androidx.camera.core.ImageCapture.Metadata: void setReversedHorizontal(boolean)> -> _SINK_
<androidx.camera.core.ImageCapture.Metadata: void setReversedVertical(boolean)> -> _SINK_
<androidx.camera.core.CameraInfo: CameraSelector getCameraSelector()> -> _SOURCE_
<androidx.camera.core.CameraInfo: LiveData<CameraState> getCameraState()> -> _SOURCE_
<androidx.camera.core.CameraInfo: ExposureState getExposureState()> -> _SOURCE_
<androidx.camera.core.CameraInfo: int getSensorRotationDegrees()> -> _SOURCE_
<androidx.camera.core.CameraInfo: int getSensorRotationDegrees(int)> -> _SOURCE_
<androidx.camera.core.CameraInfo: LiveData<Integer> getTorchState()> -> _SOURCE_
<androidx.camera.core.CameraInfo: LiveData<ZoomState> getZoomState()> -> _SOURCE_
<androidx.camera.core.CameraInfo: boolean hasFlashUnit()> -> _SOURCE_
<androidx.camera.core.CameraInfo: default boolean isFocusMeteringSupported(androidx.camera.core.FocusMeteringAction)> -> _SOURCE_
<androidx.camera.core.FocusMeteringResult: boolean isFocusSuccessful()> -> _SOURCE_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis build()> -> _SOURCE_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setBackgroundExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setBackpressureStrategy(int)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setImageQueueDepth(int)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setOutputImageFormat(int)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setOutputImageRotationEnabled(boolean)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setTargetAspectRatio(int)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setTargetName(java.lang.String)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setTargetResolution(android.util.Size)> -> _SINK_
<androidx.camera.core.ImageAnalysis.Builder: androidx.camera.core.ImageAnalysis.Builder setTargetRotation(int)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setCaptureMode(int)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setFlashMode(int)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setIoExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setJpegQuality(int)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setTargetAspectRatio(int)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setTargetName(java.lang.String)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setTargetResolution(android.util.Size)> -> _SINK_
<androidx.camera.core.ImageCapture.Builder: androidx.camera.core.ImageCapture.Builder setTargetRotation(int)> -> _SINK_
<androidx.camera.core.FocusMeteringAction: List<MeteringPoint> getMeteringPointsAe()> -> _SOURCE_
<androidx.camera.core.FocusMeteringAction: List<MeteringPoint> getMeteringPointsAf()> -> _SOURCE_
<androidx.camera.core.FocusMeteringAction: List<MeteringPoint> getMeteringPointsAwb()> -> _SOURCE_
<androidx.camera.core.FocusMeteringAction: boolean isAutoCancelEnabled()> -> _SOURCE_
<androidx.camera.core.CameraState.StateError: CameraState.StateError create(int,java.lang.Throwable)> -> _SOURCE_
<androidx.camera.core.CameraState.StateError: int getCode()> -> _SOURCE_
<androidx.camera.core.CameraState.StateError: androidx.camera.core.CameraState.ErrorType getType()> -> _SOURCE_
<androidx.camera.core.ImageCapture.OutputFileResults: android.net.Uri getSavedUri()> -> _SOURCE_
<androidx.camera.core.FocusMeteringAction.Builder: androidx.camera.core.FocusMeteringAction.Builder addPoint(androidx.camera.core.MeteringPoint,int)> -> _SINK_
<androidx.camera.core.FocusMeteringAction.Builder: androidx.camera.core.FocusMeteringAction.Builder setAutoCancelDuration(long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.camera.core.ImageInfo: int getRotationDegrees()> -> _SOURCE_
<androidx.camera.core.ImageInfo: default Matrix getSensorToBufferTransformMatrix()> -> _SOURCE_
<androidx.camera.core.ImageInfo: long getTimestamp()> -> _SOURCE_
<androidx.camera.core.ImageProxy.PlaneProxy: ByteBuffer getBuffer()> -> _SOURCE_
<androidx.camera.core.ImageProxy.PlaneProxy: int getPixelStride()> -> _SOURCE_
<androidx.camera.core.ImageProxy.PlaneProxy: int getRowStride()> -> _SOURCE_
<androidx.camera.core.MeteringPoint: float getSize()> -> _SOURCE_
<androidx.camera.core.ImageCaptureException: int getImageCaptureError()> -> _SOURCE_
<androidx.camera.core.ImageProxy: Rect getCropRect()> -> _SOURCE_
<androidx.camera.core.ImageProxy: int getFormat()> -> _SOURCE_
<androidx.camera.core.ImageProxy: int getHeight()> -> _SOURCE_
<androidx.camera.core.ImageProxy: Image getImage()> -> _SOURCE_
<androidx.camera.core.ImageProxy: ImageInfo getImageInfo()> -> _SOURCE_
<androidx.camera.core.ImageProxy: PlaneProxy[] getPlanes()> -> _SOURCE_
<androidx.camera.core.ImageProxy: int getWidth()> -> _SOURCE_
<androidx.camera.core.ImageProxy: void setCropRect(android.graphics.Rect)> -> _SINK_
<androidx.camera.core.SurfaceRequest.TransformationInfo: Rect getCropRect()> -> _SOURCE_
<androidx.camera.core.SurfaceRequest.TransformationInfo: int getRotationDegrees()> -> _SOURCE_
<androidx.camera.core.MeteringPointFactory: float getDefaultPointSize()> -> _SOURCE_
<androidx.camera.core.UseCaseGroup: androidx.camera.core.ViewPort getViewPort()> -> _SOURCE_
<androidx.camera.core.ViewPort.Builder: androidx.camera.core.ViewPort.Builder setLayoutDirection(int)> -> _SINK_
<androidx.camera.core.ViewPort.Builder: androidx.camera.core.ViewPort.Builder setScaleType(int)> -> _SINK_
<androidx.camera.core.Preview.Builder: androidx.camera.core.Preview.Builder setTargetAspectRatio(int)> -> _SINK_
<androidx.camera.core.Preview.Builder: androidx.camera.core.Preview.Builder setTargetName(java.lang.String)> -> _SINK_
<androidx.camera.core.Preview.Builder: androidx.camera.core.Preview.Builder setTargetResolution(android.util.Size)> -> _SINK_
<androidx.camera.core.Preview.Builder: androidx.camera.core.Preview.Builder setTargetRotation(int)> -> _SINK_
<androidx.camera.core.SurfaceRequest: android.util.Size getResolution()> -> _SOURCE_
<androidx.camera.camera2.interop.Camera2Interop.Extender: <ValueT> Extender setCaptureRequestOption(Key<ValueT>,ValueT)> -> _SINK_
<androidx.camera.camera2.interop.Camera2Interop.Extender: Extender setDeviceStateCallback(android.hardware.camera2.CameraDevice.StateCallback)> -> _SINK_
<androidx.camera.camera2.interop.Camera2Interop.Extender: Extender setPhysicalCameraId(java.lang.String)> -> _SINK_
<androidx.camera.camera2.interop.Camera2Interop.Extender: Extender setSessionCaptureCallback(android.hardware.camera2.CameraCaptureSession.CaptureCallback)> -> _SINK_
<androidx.camera.camera2.interop.Camera2Interop.Extender: Extender setSessionStateCallback(android.hardware.camera2.CameraCaptureSession.StateCallback)> -> _SINK_
<androidx.camera.core.ResolutionInfo: Rect getCropRect()> -> _SOURCE_
<androidx.camera.core.ResolutionInfo: Size getResolution()> -> _SOURCE_
<androidx.camera.core.ResolutionInfo: int getRotationDegrees()> -> _SOURCE_
<androidx.camera.core.ZoomState: float getLinearZoom()> -> _SOURCE_
<androidx.camera.core.ZoomState: float getMaxZoomRatio()> -> _SOURCE_
<androidx.camera.core.ZoomState: float getMinZoomRatio()> -> _SOURCE_
<androidx.camera.core.ZoomState: float getZoomRatio()> -> _SOURCE_
<androidx.camera.core.ViewPort: android.util.Rational getAspectRatio()> -> _SOURCE_
<androidx.camera.core.ViewPort: int getLayoutDirection()> -> _SOURCE_
<androidx.camera.core.ViewPort: int getRotation()> -> _SOURCE_
<androidx.camera.core.ViewPort: int getScaleType()> -> _SOURCE_
<androidx.camera.core.UseCaseGroup.Builder: androidx.camera.core.UseCaseGroup.Builder setViewPort(androidx.camera.core.ViewPort)> -> _SINK_
<androidx.camera.core.SurfaceRequest.Result: int getResultCode()> -> _SOURCE_
<androidx.camera.core.ImageCapture.OutputFileOptions.Builder: androidx.camera.core.ImageCapture.OutputFileOptions build()> -> _SINK_
<androidx.camera.core.ImageCapture.OutputFileOptions.Builder: androidx.camera.core.ImageCapture.OutputFileOptions.Builder setMetadata(androidx.camera.core.ImageCapture.Metadata)> -> _SINK_
<androidx.camera.lifecycle.ProcessCameraProvider: void configureInstance(androidx.camera.core.CameraXConfig)> -> _SINK_
<androidx.camera.lifecycle.ProcessCameraProvider: List<CameraInfo> getAvailableCameraInfos()> -> _SOURCE_
<androidx.camera.lifecycle.ProcessCameraProvider: ListenableFuture<ProcessCameraProvider> getInstance(android.content.Context)> -> _SOURCE_
<androidx.camera.lifecycle.ProcessCameraProvider: boolean hasCamera(androidx.camera.core.CameraSelector)> -> _SOURCE_
<androidx.camera.video.FileDescriptorOutputOptions.Builder: androidx.camera.video.FileDescriptorOutputOptions.Builder setFileSizeLimit(long)> -> _SINK_
<androidx.camera.video.FileOutputOptions.Builder: androidx.camera.video.FileOutputOptions build()> -> _SINK_
<androidx.camera.video.FileOutputOptions.Builder: androidx.camera.video.FileOutputOptions.Builder setFileSizeLimit(long)> -> _SINK_
<androidx.camera.video.FallbackStrategy: FallbackStrategy higherQualityOrLowerThan(androidx.camera.video.Quality)> -> _SINK_
<androidx.camera.video.FallbackStrategy: FallbackStrategy higherQualityThan(androidx.camera.video.Quality)> -> _SINK_
<androidx.camera.video.FallbackStrategy: FallbackStrategy lowerQualityOrHigherThan(androidx.camera.video.Quality)> -> _SINK_
<androidx.camera.video.FallbackStrategy: FallbackStrategy lowerQualityThan(androidx.camera.video.Quality)> -> _SINK_
<androidx.camera.video.RecordingStats: AudioStats getAudioStats()> -> _SOURCE_
<androidx.camera.video.RecordingStats: long getNumBytesRecorded()> -> _SOURCE_
<androidx.camera.video.RecordingStats: long getRecordedDurationNanos()> -> _SOURCE_
<androidx.camera.video.PendingRecording: androidx.camera.video.Recording start(java.util.concurrent.Executor,Consumer<VideoRecordEvent>)> -> _SINK_
<androidx.camera.video.PendingRecording: androidx.camera.video.PendingRecording withAudioEnabled()> -> _SINK_
<androidx.camera.video.OutputResults: Uri getOutputUri()> -> _SOURCE_
<androidx.camera.video.VideoRecordEvent: androidx.camera.video.OutputOptions getOutputOptions()> -> _SOURCE_
<androidx.camera.video.VideoRecordEvent: androidx.camera.video.RecordingStats getRecordingStats()> -> _SOURCE_
<androidx.camera.video.Recorder: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<androidx.camera.video.Recorder: androidx.camera.video.QualitySelector getQualitySelector()> -> _SOURCE_
<androidx.camera.video.Recorder: androidx.camera.video.PendingRecording prepareRecording(android.content.Context,androidx.camera.video.FileOutputOptions)> -> _SINK_
<androidx.camera.video.Recorder: androidx.camera.video.PendingRecording prepareRecording(android.content.Context,androidx.camera.video.FileDescriptorOutputOptions)> -> _SINK_
<androidx.camera.video.Recorder: androidx.camera.video.PendingRecording prepareRecording(android.content.Context,androidx.camera.video.MediaStoreOutputOptions)> -> _SINK_
<androidx.camera.video.MediaStoreOutputOptions.Builder: androidx.camera.video.MediaStoreOutputOptions build()> -> _SINK_
<androidx.camera.video.MediaStoreOutputOptions.Builder: androidx.camera.video.MediaStoreOutputOptions.Builder setContentValues(android.content.ContentValues)> -> _SINK_
<androidx.camera.video.MediaStoreOutputOptions.Builder: androidx.camera.video.MediaStoreOutputOptions.Builder setFileSizeLimit(long)> -> _SINK_
<androidx.camera.extensions.ExtensionsManager: Range<Long> getEstimatedCaptureLatencyRange(androidx.camera.core.CameraSelector,int)> -> _SOURCE_
<androidx.camera.extensions.ExtensionsManager: androidx.camera.core.CameraSelector getExtensionEnabledCameraSelector(androidx.camera.core.CameraSelector,int)> -> _SOURCE_
<androidx.camera.extensions.ExtensionsManager: ListenableFuture<ExtensionsManager> getInstanceAsync(android.content.Context,androidx.camera.core.CameraProvider)> -> _SOURCE_
<androidx.camera.extensions.ExtensionsManager: boolean isExtensionAvailable(androidx.camera.core.CameraSelector,int)> -> _SOURCE_
<androidx.camera.video.Recorder.Builder: androidx.camera.video.Recorder build()> -> _SINK_
<androidx.camera.video.Recorder.Builder: androidx.camera.video.Recorder.Builder setExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.camera.video.Recorder.Builder: androidx.camera.video.Recorder.Builder setQualitySelector(androidx.camera.video.QualitySelector)> -> _SINK_
<androidx.camera.video.VideoRecordEvent.Finalize: java.lang.Throwable getCause()> -> _SOURCE_
<androidx.camera.video.VideoRecordEvent.Finalize: int getError()> -> _SOURCE_
<androidx.camera.video.VideoRecordEvent.Finalize: androidx.camera.video.OutputResults getOutputResults()> -> _SOURCE_
<androidx.camera.video.AudioStats: int getAudioState()> -> _SOURCE_
<androidx.camera.video.AudioStats: Throwable getErrorCause()> -> _SOURCE_
<androidx.camera.video.AudioStats: boolean hasAudio()> -> _SOURCE_
<androidx.camera.video.OutputOptions: long getFileSizeLimit()> -> _SOURCE_
<androidx.camera.view.video.Metadata: Metadata.Builder builder()> -> _SINK_
<androidx.camera.view.video.Metadata: Location getLocation()> -> _SOURCE_
<androidx.camera.view.video.Metadata.Builder: Metadata build()> -> _SINK_
<androidx.camera.view.video.Metadata.Builder: Metadata.Builder setLocation(android.location.Location)> -> _SINK_
<androidx.car.app.AppManager: void showToast(java.lang.CharSequence,int)> -> _SINK_
<androidx.camera.view.CameraController: androidx.camera.core.CameraControl getCameraControl()> -> _SOURCE_
<androidx.camera.view.CameraController: androidx.camera.core.CameraInfo getCameraInfo()> -> _SOURCE_
<androidx.camera.view.CameraController: java.util.concurrent.Executor getImageAnalysisBackgroundExecutor()> -> _SOURCE_
<androidx.camera.view.CameraController: int getImageAnalysisBackpressureStrategy()> -> _SOURCE_
<androidx.camera.view.CameraController: int getImageAnalysisImageQueueDepth()> -> _SOURCE_
<androidx.camera.view.CameraController: androidx.camera.view.CameraController.OutputSize getImageAnalysisTargetSize()> -> _SOURCE_
<androidx.camera.view.CameraController: int getImageCaptureFlashMode()> -> _SINK_
<androidx.camera.view.CameraController: java.util.concurrent.Executor getImageCaptureIoExecutor()> -> _SOURCE_
<androidx.camera.view.CameraController: int getImageCaptureMode()> -> _SOURCE_
<androidx.camera.view.CameraController: androidx.camera.view.CameraController.OutputSize getImageCaptureTargetSize()> -> _SOURCE_
<androidx.camera.view.CameraController: androidx.camera.view.CameraController.OutputSize getPreviewTargetSize()> -> _SOURCE_
<androidx.camera.view.CameraController: LiveData<Integer> getTapToFocusState()> -> _SOURCE_
<androidx.camera.view.CameraController: LiveData<Integer> getTorchState()> -> _SOURCE_
<androidx.camera.view.CameraController: androidx.camera.view.CameraController.OutputSize getVideoCaptureTargetSize()> -> _SOURCE_
<androidx.camera.view.CameraController: LiveData<ZoomState> getZoomState()> -> _SOURCE_
<androidx.camera.view.CameraController: boolean hasCamera(androidx.camera.core.CameraSelector)> -> _SOURCE_
<androidx.camera.view.CameraController: boolean isImageAnalysisEnabled()> -> _SOURCE_
<androidx.camera.view.CameraController: boolean isImageCaptureEnabled()> -> _SOURCE_
<androidx.camera.view.CameraController: boolean isPinchToZoomEnabled()> -> _SOURCE_
<androidx.camera.view.CameraController: boolean isRecording()> -> _SOURCE_
<androidx.camera.view.CameraController: boolean isTapToFocusEnabled()> -> _SOURCE_
<androidx.camera.view.CameraController: void setCameraSelector(androidx.camera.core.CameraSelector)> -> _SINK_
<androidx.camera.view.CameraController: void setEnabledUseCases(int)> -> _SINK_
<androidx.camera.view.CameraController: void setImageAnalysisBackgroundExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.camera.view.CameraController: void setImageAnalysisBackpressureStrategy(int)> -> _SINK_
<androidx.camera.view.CameraController: void setImageAnalysisImageQueueDepth(int)> -> _SINK_
<androidx.camera.view.CameraController: void setImageAnalysisTargetSize(androidx.camera.view.CameraController.OutputSize)> -> _SINK_
<androidx.camera.view.CameraController: void setImageCaptureFlashMode(int)> -> _SINK_
<androidx.camera.view.CameraController: void setImageCaptureIoExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.camera.view.CameraController: void setImageCaptureMode(int)> -> _SINK_
<androidx.camera.view.CameraController: void setImageCaptureTargetSize(androidx.camera.view.CameraController.OutputSize)> -> _SINK_
<androidx.camera.view.CameraController: ListenableFuture<Void> setLinearZoom(float)> -> _SINK_
<androidx.camera.view.CameraController: void setPreviewTargetSize(androidx.camera.view.CameraController.OutputSize)> -> _SINK_
<androidx.camera.view.CameraController: void setVideoCaptureTargetSize(androidx.camera.view.CameraController.OutputSize)> -> _SINK_
<androidx.camera.view.CameraController: ListenableFuture<Void> setZoomRatio(float)> -> _SINK_
<androidx.camera.view.CameraController: void takePicture(androidx.camera.core.ImageCapture.OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.ImageCapture.OnImageSavedCallback)> -> _SINK_
<androidx.camera.view.transform.FileTransformFactory: androidx.camera.view.transform.OutputTransform getOutputTransform(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<androidx.camera.view.transform.FileTransformFactory: androidx.camera.view.transform.OutputTransform getOutputTransform(java.io.InputStream)> -> _SOURCE_
<androidx.camera.view.transform.FileTransformFactory: androidx.camera.view.transform.OutputTransform getOutputTransform(java.io.File)> -> _SOURCE_
<androidx.camera.view.transform.FileTransformFactory: boolean isUsingExifOrientation()> -> _SOURCE_
<androidx.camera.view.transform.FileTransformFactory: void setUsingExifOrientation(boolean)> -> _SOURCE_
<androidx.car.app.OnDoneCallback: default void onSuccess(androidx.car.app.serialization.Bundleable)> -> _SOURCE_
<androidx.car.app.OnRequestPermissionsListener: void onRequestPermissionsResult(List<String>,List<String>)> -> _SOURCE_
<androidx.camera.view.video.OutputFileOptions: OutputFileOptions.Builder builder(android.os.ParcelFileDescriptor)> -> _SINK_
<androidx.camera.view.video.OutputFileOptions: OutputFileOptions.Builder builder(android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> -> _SINK_
<androidx.camera.view.video.OutputFileOptions: OutputFileOptions.Builder builder(java.io.File)> -> _SINK_
<androidx.camera.view.video.OutputFileOptions: Metadata getMetadata()> -> _SOURCE_
<androidx.car.app.Screen: CarContext getCarContext()> -> _SOURCE_
<androidx.car.app.Screen: java.lang.String getMarker()> -> _SOURCE_
<androidx.car.app.Screen: Template onGetTemplate()> -> _SOURCE_
<androidx.car.app.Screen: void setMarker(java.lang.String)> -> _SINK_
<androidx.car.app.Screen: void setResult(java.lang.Object)> -> _SINK_
<androidx.camera.view.video.OutputFileResults: Uri getSavedUri()> -> _SOURCE_
<androidx.car.app.CarToast: CarToast makeText(androidx.car.app.CarContext,int,int)> -> _SINK_
<androidx.car.app.CarToast: CarToast makeText(androidx.car.app.CarContext,java.lang.CharSequence,int)> -> _SINK_
<androidx.car.app.CarToast: void setDuration(int)> -> _SINK_
<androidx.car.app.CarToast: void setText(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.CarToast: void setText(int)> -> _SINK_
<androidx.car.app.CarToast: void show()> -> _SINK_
<android.se.omapi.Session: CarContext getCarContext()> -> _SOURCE_
<android.se.omapi.Session: android.arch.lifecycle.Lifecycle getLifecycle()> -> _SOURCE_
<android.se.omapi.Session: void onNewIntent(android.content.Intent)> -> _SINK_
<androidx.camera.view.video.OutputFileOptions.Builder: OutputFileOptions build()> -> _SINK_
<androidx.camera.view.video.OutputFileOptions.Builder: OutputFileOptions.Builder setMetadata(androidx.camera.view.video.Metadata)> -> _SINK_
<androidx.camera.view.transform.ImageProxyTransformFactory: androidx.camera.view.transform.OutputTransform getOutputTransform(androidx.camera.core.ImageProxy)> -> _SOURCE_
<androidx.camera.view.transform.ImageProxyTransformFactory: boolean isUsingCropRect()> -> _SOURCE_
<androidx.camera.view.transform.ImageProxyTransformFactory: boolean isUsingRotationDegrees()> -> _SOURCE_
<androidx.camera.view.transform.ImageProxyTransformFactory: void setUsingCropRect(boolean)> -> _SOURCE_
<androidx.camera.view.transform.ImageProxyTransformFactory: void setUsingRotationDegrees(boolean)> -> _SOURCE_
<androidx.car.app.SurfaceCallback: default void onClick(float,float)> -> _SOURCE_
<androidx.car.app.SurfaceCallback: default void onFling(float,float)> -> _SINK_
<androidx.car.app.SurfaceCallback: default void onScroll(float,float)> -> _SOURCE_
<androidx.car.app.OnScreenResultListener: void onScreenResult(java.lang.Object)> -> _SOURCE_
<androidx.car.app.HandshakeInfo: int getHostCarAppApiLevel()> -> _SOURCE_
<androidx.car.app.HandshakeInfo: java.lang.String getHostPackageName()> -> _SOURCE_
<androidx.car.app.CarAppPermission: void checkHasLibraryPermission(android.content.Context,java.lang.String)> -> _SOURCE_
<androidx.car.app.CarAppPermission: void checkHasPermission(android.content.Context,java.lang.String)> -> _SOURCE_
<androidx.car.app.ScreenManager: int getStackSize()> -> _SOURCE_
<androidx.car.app.ScreenManager: androidx.car.app.Screen getTop()> -> _SOURCE_
<androidx.car.app.annotations.RequiresCarApi: int value()> -> _SOURCE_
<androidx.car.app.connection.CarConnection: LiveData<Integer> getType()> -> _SOURCE_
<androidx.car.app.hardware.CarHardwareManager: default CarInfo getCarInfo()> -> _SOURCE_
<androidx.car.app.hardware.CarHardwareManager: default CarSensors getCarSensors()> -> _SOURCE_
<androidx.car.app.hardware.common.CarUnit: String toString(int)> -> _SOURCE_
<androidx.car.app.hardware.common.OnCarDataAvailableListener: void onCarDataAvailable(T)> -> _SOURCE_
<androidx.car.app.activity.renderer.surface.SurfaceWrapper: int getDensityDpi()> -> _SOURCE_
<androidx.car.app.activity.renderer.surface.SurfaceWrapper: int getDisplayId()> -> _SOURCE_
<androidx.car.app.activity.renderer.surface.SurfaceWrapper: int getHeight()> -> _SOURCE_
<androidx.car.app.activity.renderer.surface.SurfaceWrapper: android.os.IBinder getHostToken()> -> _SOURCE_
<androidx.car.app.activity.renderer.surface.SurfaceWrapper: android.view.Surface getSurface()> -> _SOURCE_
<androidx.car.app.activity.renderer.surface.SurfaceWrapper: int getWidth()> -> _SOURCE_
<androidx.car.app.CarContext: android.content.ComponentName getCallingComponent()> -> _SOURCE_
<androidx.car.app.CarContext: int getCarAppApiLevel()> -> _SOURCE_
<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.String)> -> _SOURCE_
<androidx.car.app.CarContext: java.lang.String getCarServiceName(Class<?>)> -> _SOURCE_
<androidx.car.app.CarContext: androidx.car.app.HostInfo getHostInfo()> -> _SOURCE_
<androidx.car.app.CarContext: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> -> _SOURCE_
<androidx.car.app.CarContext: void requestPermissions(List<String>,androidx.car.app.OnRequestPermissionsListener)> -> _SOURCE_
<androidx.car.app.CarContext: void requestPermissions(List<String>,java.util.concurrent.Executor,androidx.car.app.OnRequestPermissionsListener)> -> _SINK_
<androidx.car.app.CarContext: void setCarAppResult(int,android.content.Intent)> -> _SINK_
<androidx.car.app.CarContext: void startCarApp(android.content.Intent)> -> _SINK_
<androidx.car.app.CarContext: void startCarApp(android.content.Intent,android.content.Intent)> -> _SOURCE_
<androidx.car.app.hardware.info.CarInfo: void addEnergyLevelListener(java.util.concurrent.Executor,OnCarDataAvailableListener<EnergyLevel>)> -> _SINK_
<androidx.car.app.hardware.info.CarInfo: void addEvStatusListener(java.util.concurrent.Executor,OnCarDataAvailableListener<EvStatus>)> -> _SINK_
<androidx.car.app.hardware.info.CarInfo: void addMileageListener(java.util.concurrent.Executor,OnCarDataAvailableListener<Mileage>)> -> _SOURCE_
<androidx.car.app.hardware.info.CarInfo: void addSpeedListener(java.util.concurrent.Executor,OnCarDataAvailableListener<Speed>)> -> _SINK_
<androidx.car.app.hardware.info.CarInfo: void fetchEnergyProfile(java.util.concurrent.Executor,OnCarDataAvailableListener<EnergyProfile>)> -> _SOURCE_
<androidx.car.app.hardware.info.CarInfo: void fetchModel(java.util.concurrent.Executor,OnCarDataAvailableListener<Model>)> -> _SOURCE_
<androidx.car.app.hardware.info.CarInfo: void removeSpeedListener(OnCarDataAvailableListener<Speed>)> -> _SINK_
<androidx.car.app.hardware.info.CarInfo: void removeTollListener(OnCarDataAvailableListener<TollCard>)> -> _SINK_
<androidx.car.app.hardware.info.CarSensors: void addAccelerometerListener(int,java.util.concurrent.Executor,OnCarDataAvailableListener<Accelerometer>)> -> _SINK_
<androidx.car.app.hardware.info.CarSensors: void addCarHardwareLocationListener(int,java.util.concurrent.Executor,OnCarDataAvailableListener<CarHardwareLocation>)> -> _SINK_
<androidx.car.app.hardware.info.CarSensors: void addCompassListener(int,java.util.concurrent.Executor,OnCarDataAvailableListener<Compass>)> -> _SINK_
<androidx.car.app.hardware.info.CarSensors: void addGyroscopeListener(int,java.util.concurrent.Executor,OnCarDataAvailableListener<Gyroscope>)> -> _SINK_
<androidx.car.app.constraints.ConstraintManager: int getContentLimit(int)> -> _SINK_
<androidx.car.app.hardware.info.Model.Builder: androidx.car.app.hardware.info.Model.Builder setManufacturer(CarValue<String>)> -> _SINK_
<androidx.car.app.hardware.info.Model.Builder: androidx.car.app.hardware.info.Model.Builder setName(CarValue<String>)> -> _SINK_
<androidx.car.app.hardware.info.Model.Builder: androidx.car.app.hardware.info.Model.Builder setYear(CarValue<Integer>)> -> _SINK_
<androidx.car.app.hardware.info.Speed.Builder: androidx.car.app.hardware.info.Speed build()> -> _SINK_
<androidx.car.app.hardware.info.Speed.Builder: androidx.car.app.hardware.info.Speed.Builder setDisplaySpeedMetersPerSecond(CarValue<Float>)> -> _SINK_
<androidx.car.app.hardware.info.Speed.Builder: androidx.car.app.hardware.info.Speed.Builder setRawSpeedMetersPerSecond(CarValue<Float>)> -> _SINK_
<androidx.car.app.hardware.info.Speed.Builder: androidx.car.app.hardware.info.Speed.Builder setSpeedDisplayUnit(CarValue<Integer>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyProfile.Builder: androidx.car.app.hardware.info.EnergyProfile build()> -> _SOURCE_
<androidx.car.app.hardware.info.EnergyProfile.Builder: androidx.car.app.hardware.info.EnergyProfile.Builder setEvConnectorTypes(CarValue<List<Integer>>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyProfile.Builder: androidx.car.app.hardware.info.EnergyProfile.Builder setFuelTypes(CarValue<List<Integer>>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyLevel.Builder: androidx.car.app.hardware.info.EnergyLevel build()> -> _SOURCE_
<androidx.car.app.hardware.info.EnergyLevel.Builder: androidx.car.app.hardware.info.EnergyLevel.Builder setBatteryPercent(CarValue<Float>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyLevel.Builder: androidx.car.app.hardware.info.EnergyLevel.Builder setDistanceDisplayUnit(CarValue<Integer>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyLevel.Builder: androidx.car.app.hardware.info.EnergyLevel.Builder setFuelPercent(CarValue<Float>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyLevel.Builder: androidx.car.app.hardware.info.EnergyLevel.Builder setFuelVolumeDisplayUnit(CarValue<Integer>)> -> _SINK_
<androidx.car.app.hardware.info.EnergyLevel.Builder: androidx.car.app.hardware.info.EnergyLevel.Builder setRangeRemainingMeters(CarValue<Float>)> -> _SINK_
<androidx.car.app.model.CarIcon.Builder: androidx.car.app.model.CarIcon build()> -> _SINK_
<androidx.car.app.model.CarIcon.Builder: androidx.car.app.model.CarIcon.Builder setTint(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.model.CarText.Builder: androidx.car.app.model.CarText.Builder addVariant(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.hardware.AutomotiveCarHardwareManager: androidx.car.app.hardware.info.CarInfo getCarInfo()> -> _SOURCE_
<androidx.car.app.hardware.AutomotiveCarHardwareManager: androidx.car.app.hardware.info.CarSensors getCarSensors()> -> _SOURCE_
<androidx.car.app.model.Action.Builder: androidx.car.app.model.Action.Builder setBackgroundColor(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.model.Action.Builder: androidx.car.app.model.Action.Builder setFlags(int)> -> _SINK_
<androidx.car.app.model.Action.Builder: androidx.car.app.model.Action.Builder setIcon(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.model.Action.Builder: androidx.car.app.model.Action.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.Action.Builder: androidx.car.app.model.Action.Builder setTitle(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.hardware.info.Mileage.Builder: androidx.car.app.hardware.info.Mileage build()> -> _SINK_
<androidx.car.app.hardware.info.Mileage.Builder: androidx.car.app.hardware.info.Mileage.Builder setDistanceDisplayUnit(CarValue<Integer>)> -> _SINK_
<androidx.car.app.hardware.info.Mileage.Builder: androidx.car.app.hardware.info.Mileage.Builder setOdometerMeters(CarValue<Float>)> -> _SINK_
<androidx.car.app.model.ListTemplate.Builder: androidx.car.app.model.ListTemplate build()> -> _SOURCE_
<androidx.car.app.model.ListTemplate.Builder: androidx.car.app.model.ListTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.ListTemplate.Builder: androidx.car.app.model.ListTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.InputCallback: default void onInputSubmitted(java.lang.String)> -> _SOURCE_
<androidx.car.app.model.GridTemplate.Builder: androidx.car.app.model.GridTemplate build()> -> _SOURCE_
<androidx.car.app.model.GridTemplate.Builder: androidx.car.app.model.GridTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.GridTemplate.Builder: androidx.car.app.model.GridTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.MessageTemplate.Builder: androidx.car.app.model.MessageTemplate.Builder addAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.MessageTemplate.Builder: androidx.car.app.model.MessageTemplate.Builder setDebugMessage(java.lang.String)> -> _SINK_
<androidx.car.app.model.MessageTemplate.Builder: androidx.car.app.model.MessageTemplate.Builder setDebugMessage(java.lang.Throwable)> -> _SINK_
<androidx.car.app.model.MessageTemplate.Builder: androidx.car.app.model.MessageTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.MessageTemplate.Builder: androidx.car.app.model.MessageTemplate.Builder setIcon(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.model.MessageTemplate.Builder: androidx.car.app.model.MessageTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.GridItem.Builder: androidx.car.app.model.GridItem.Builder setImage(androidx.car.app.model.CarIcon,int)> -> _SINK_
<androidx.car.app.model.GridItem.Builder: androidx.car.app.model.GridItem.Builder setImage(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.model.GridItem.Builder: androidx.car.app.model.GridItem.Builder setText(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.GridItem.Builder: androidx.car.app.model.GridItem.Builder setText(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.model.GridItem.Builder: androidx.car.app.model.GridItem.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.GridItem.Builder: androidx.car.app.model.GridItem.Builder setTitle(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.model.LongMessageTemplate.Builder: androidx.car.app.model.LongMessageTemplate.Builder addAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.LongMessageTemplate.Builder: androidx.car.app.model.LongMessageTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.LongMessageTemplate.Builder: androidx.car.app.model.LongMessageTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.camera.view.video.Metadata.Builder: androidx.camera.view.video.Metadata build()> -> _SOURCE_
<androidx.camera.view.video.Metadata.Builder: androidx.camera.view.video.Metadata.Builder setPlace(androidx.car.app.model.Place)> -> _SINK_
<androidx.car.app.hardware.info.TollCard.Builder: androidx.car.app.hardware.info.TollCard.Builder setCardState(CarValue<Integer>)> -> _SINK_
<androidx.car.app.model.ItemList.Builder: androidx.car.app.model.ItemList.Builder setNoItemsMessage(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.ItemList.Builder: androidx.car.app.model.ItemList.Builder setSelectedIndex(int)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder addText(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder addText(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setBrowsable(boolean)> -> _SOURCE_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setImage(androidx.car.app.model.CarIcon,int)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setImage(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setMetadata(androidx.camera.view.video.Metadata)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setTitle(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.model.Row.Builder: androidx.car.app.model.Row.Builder setToggle(androidx.car.app.model.Toggle)> -> _SINK_
<androidx.car.app.model.SearchCallbackDelegate: void sendSearchSubmitted(java.lang.String,androidx.car.app.OnDoneCallback)> -> _SOURCE_
<androidx.car.app.model.SearchCallbackDelegate: void sendSearchTextChanged(java.lang.String,androidx.car.app.OnDoneCallback)> -> _SINK_
<androidx.car.app.model.SearchTemplate.Builder: androidx.car.app.model.SearchTemplate build()> -> _SINK_
<androidx.car.app.model.SearchTemplate.Builder: androidx.car.app.model.SearchTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.SearchTemplate.Builder: androidx.car.app.model.SearchTemplate.Builder setInitialSearchText(java.lang.String)> -> _SINK_
<androidx.car.app.model.SearchTemplate.Builder: androidx.car.app.model.SearchTemplate.Builder setItemList(androidx.car.app.model.ItemList)> -> _SINK_
<androidx.car.app.model.SearchTemplate.Builder: androidx.car.app.model.SearchTemplate.Builder setSearchHint(java.lang.String)> -> _SINK_
<androidx.car.app.model.SearchTemplate.Builder: androidx.car.app.model.SearchTemplate.Builder setShowKeyboardByDefault(boolean)> -> _SOURCE_
<androidx.car.app.model.SearchTemplate.SearchCallback: default void onSearchSubmitted(java.lang.String)> -> _SOURCE_
<androidx.car.app.model.SearchTemplate.SearchCallback: default void onSearchTextChanged(java.lang.String)> -> _SINK_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate build()> -> _SOURCE_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate.Builder setAnchor(androidx.car.app.model.Place)> -> _SINK_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate.Builder setCurrentLocationEnabled(boolean)> -> _SINK_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate.Builder setItemList(androidx.car.app.model.ItemList)> -> _SINK_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.PlaceListMapTemplate.Builder: androidx.car.app.model.PlaceListMapTemplate.Builder setTitle(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.model.Place.Builder: androidx.car.app.model.Place build()> -> _SINK_
<androidx.car.app.model.Place.Builder: androidx.car.app.model.Place.Builder setMarker(androidx.car.app.model.PlaceMarker)> -> _SINK_
<androidx.car.app.model.signin.SignInTemplate.Builder: androidx.car.app.model.signin.SignInTemplate build()> -> _SOURCE_
<androidx.car.app.model.signin.SignInTemplate.Builder: androidx.car.app.model.signin.SignInTemplate.Builder setAdditionalText(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.signin.SignInTemplate.Builder: androidx.car.app.model.signin.SignInTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.signin.SignInTemplate.Builder: androidx.car.app.model.signin.SignInTemplate.Builder setInstructions(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.signin.SignInTemplate.Builder: androidx.car.app.model.signin.SignInTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.MessageInfo.Builder: androidx.car.app.navigation.model.MessageInfo build()> -> _SINK_
<androidx.car.app.navigation.model.MessageInfo.Builder: androidx.car.app.navigation.model.MessageInfo.Builder setImage(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.navigation.model.MessageInfo.Builder: androidx.car.app.navigation.model.MessageInfo.Builder setText(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.MessageInfo.Builder: androidx.car.app.navigation.model.MessageInfo.Builder setText(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.navigation.model.MessageInfo.Builder: androidx.car.app.navigation.model.MessageInfo.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.Maneuver.Builder: androidx.car.app.navigation.model.Maneuver.Builder setIcon(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.navigation.model.Maneuver.Builder: androidx.car.app.navigation.model.Maneuver.Builder setRoundaboutExitAngle(int)> -> _SINK_
<androidx.car.app.navigation.model.Maneuver.Builder: androidx.car.app.navigation.model.Maneuver.Builder setRoundaboutExitNumber(int)> -> _SINK_
<androidx.car.app.model.signin.InputSignInMethod.Builder: androidx.car.app.model.signin.InputSignInMethod.Builder setDefaultValue(java.lang.String)> -> _SINK_
<androidx.car.app.model.signin.InputSignInMethod.Builder: androidx.car.app.model.signin.InputSignInMethod.Builder setErrorMessage(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.signin.InputSignInMethod.Builder: androidx.car.app.model.signin.InputSignInMethod.Builder setHint(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.model.signin.InputSignInMethod.Builder: androidx.car.app.model.signin.InputSignInMethod.Builder setInputType(int)> -> _SINK_
<androidx.car.app.model.signin.InputSignInMethod.Builder: androidx.car.app.model.signin.InputSignInMethod.Builder setKeyboardType(int)> -> _SINK_
<androidx.car.app.navigation.model.Destination.Builder: androidx.car.app.navigation.model.Destination build()> -> _SINK_
<androidx.car.app.navigation.model.Destination.Builder: androidx.car.app.navigation.model.Destination.Builder setAddress(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.Destination.Builder: androidx.car.app.navigation.model.Destination.Builder setImage(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.navigation.model.Destination.Builder: androidx.car.app.navigation.model.Destination.Builder setName(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.NavigationTemplate.Builder: androidx.car.app.navigation.model.NavigationTemplate.Builder setBackgroundColor(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.navigation.model.NavigationTemplate.Builder: androidx.car.app.navigation.model.NavigationTemplate.Builder setDestinationTravelEstimate(androidx.car.app.navigation.model.TravelEstimate)> -> _SINK_
<androidx.car.app.navigation.model.NavigationTemplate.Builder: androidx.car.app.navigation.model.NavigationTemplate.Builder setMapActionStrip(androidx.car.app.model.ActionStrip)> -> _SINK_
<androidx.car.app.navigation.model.NavigationTemplate.Builder: androidx.car.app.navigation.model.NavigationTemplate.Builder setNavigationInfo(androidx.car.app.navigation.model.NavigationTemplate.NavigationInfo)> -> _SINK_
<androidx.car.app.navigation.model.NavigationTemplate.Builder: androidx.car.app.navigation.model.NavigationTemplate.Builder setPanModeListener(androidx.car.app.navigation.model.PanModeListener)> -> _SINK_
<androidx.car.app.navigation.NavigationManager: void updateTrip(androidx.car.app.navigation.model.Trip)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate build()> -> _SOURCE_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setItemList(androidx.car.app.model.ItemList)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setMapActionStrip(androidx.car.app.model.ActionStrip)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setNavigateAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setPanModeListener(androidx.car.app.navigation.model.PanModeListener)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder: androidx.car.app.navigation.model.RoutePreviewNavigationTemplate.Builder setTitle(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.model.PaneTemplate.Builder: androidx.car.app.model.PaneTemplate build()> -> _SOURCE_
<androidx.car.app.model.PaneTemplate.Builder: androidx.car.app.model.PaneTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.model.PaneTemplate.Builder: androidx.car.app.model.PaneTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.Step.Builder: androidx.car.app.navigation.model.Step build()> -> _SINK_
<androidx.car.app.navigation.model.Step.Builder: androidx.car.app.navigation.model.Step.Builder setCue(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.Step.Builder: androidx.car.app.navigation.model.Step.Builder setLanesImage(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.navigation.model.Step.Builder: androidx.car.app.navigation.model.Step.Builder setManeuver(androidx.car.app.navigation.model.Maneuver)> -> _SINK_
<androidx.car.app.navigation.model.Step.Builder: androidx.car.app.navigation.model.Step.Builder setRoad(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.RoutingInfo.Builder: androidx.car.app.navigation.model.RoutingInfo build()> -> _SOURCE_
<androidx.car.app.navigation.model.RoutingInfo.Builder: androidx.car.app.navigation.model.RoutingInfo.Builder setCurrentStep(androidx.car.app.navigation.model.Step,androidx.car.app.model.Distance)> -> _SINK_
<androidx.car.app.navigation.model.RoutingInfo.Builder: androidx.car.app.navigation.model.RoutingInfo.Builder setJunctionImage(androidx.car.app.model.CarIcon)> -> _SINK_
<androidx.car.app.navigation.model.RoutingInfo.Builder: androidx.car.app.navigation.model.RoutingInfo.Builder setLoading(boolean)> -> _SINK_
<androidx.car.app.navigation.model.RoutingInfo.Builder: androidx.car.app.navigation.model.RoutingInfo.Builder setNextStep(androidx.car.app.navigation.model.Step)> -> _SINK_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate build()> -> _SOURCE_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder setHeaderAction(androidx.car.app.model.Action)> -> _SINK_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder setItemList(androidx.car.app.model.ItemList)> -> _SINK_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder setMapActionStrip(androidx.car.app.model.ActionStrip)> -> _SINK_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder setPanModeListener(androidx.car.app.navigation.model.PanModeListener)> -> _SINK_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder: androidx.car.app.navigation.model.PlaceListNavigationTemplate.Builder setTitle(androidx.car.app.model.CarText)> -> _SINK_
<androidx.car.app.navigation.model.TravelEstimate.Builder: androidx.car.app.navigation.model.TravelEstimate build()> -> _SINK_
<androidx.car.app.navigation.model.TravelEstimate.Builder: androidx.car.app.navigation.model.TravelEstimate.Builder setRemainingDistanceColor(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.navigation.model.TravelEstimate.Builder: androidx.car.app.navigation.model.TravelEstimate.Builder setRemainingTime(java.time.Duration)> -> _SINK_
<androidx.car.app.navigation.model.TravelEstimate.Builder: androidx.car.app.navigation.model.TravelEstimate.Builder setRemainingTimeColor(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.navigation.model.TravelEstimate.Builder: androidx.car.app.navigation.model.TravelEstimate.Builder setRemainingTimeSeconds(long)> -> _SINK_
<androidx.car.app.notification.CarAppExtender: androidx.core.app.NotificationCompat.Builder extend(androidx.core.app.NotificationCompat.Builder)> -> _SINK_
<androidx.car.app.notification.CarAppExtender: List<Notification.Action> getActions()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: java.lang.String getChannelId()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: androidx.car.app.model.CarColor getColor()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: android.app.PendingIntent getContentIntent()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: java.lang.CharSequence getContentText()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: java.lang.CharSequence getContentTitle()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: android.app.PendingIntent getDeleteIntent()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: int getImportance()> -> _SINK_
<androidx.car.app.notification.CarAppExtender: android.graphics.Bitmap getLargeIcon()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: int getSmallIcon()> -> _SOURCE_
<androidx.car.app.notification.CarAppExtender: boolean isExtended(android.app.Notification)> -> _SOURCE_
<androidx.car.app.testing.FakeHost: void performNotificationActionClick(android.app.PendingIntent)> -> _SINK_
<androidx.car.app.notification.CarPendingIntent: PendingIntent getCarApp(android.content.Context,int,android.content.Intent,int)> -> _SINK_
<androidx.car.app.testing.SessionController: android.se.omapi.Session getSession()> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: boolean areNotificationsEnabled()> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: void createNotificationChannelGroups(List<NotificationChannelGroupCompat>)> -> _SINK_
<androidx.car.app.notification.CarNotificationManager: CarNotificationManager from(android.content.Context)> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: Set<String> getEnabledListenerPackages(android.content.Context)> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: int getImportance()> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: androidx.core.app.NotificationChannelCompat getNotificationChannel(java.lang.String)> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: androidx.core.app.NotificationChannelCompat getNotificationChannel(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: androidx.core.app.NotificationChannelGroupCompat getNotificationChannelGroup(java.lang.String)> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: List<NotificationChannelGroupCompat> getNotificationChannelGroups()> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: List<NotificationChannelCompat> getNotificationChannels()> -> _SOURCE_
<androidx.car.app.notification.CarNotificationManager: void notify(java.lang.String,int,androidx.core.app.NotificationCompat.Builder)> -> _SINK_
<androidx.car.app.notification.CarNotificationManager: void notify(int,androidx.core.app.NotificationCompat.Builder)> -> _SINK_
<androidx.car.app.testing.TestCarContext.PermissionRequestInfo: androidx.car.app.OnRequestPermissionsListener getListener()> -> _SOURCE_
<androidx.car.app.testing.TestCarContext.PermissionRequestInfo: List<String> getPermissionsRequested()> -> _SOURCE_
<androidx.car.app.testing.TestCarContext: java.lang.Object getCarService(java.lang.String)> -> _SOURCE_
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.FakeHost getFakeHost()> -> _SOURCE_
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestCarContext.PermissionRequestInfo getLastPermissionRequestInfo()> -> _SOURCE_
<androidx.car.app.testing.TestCarContext: List<Intent> getStartCarAppIntents()> -> _SOURCE_
<androidx.car.app.testing.TestCarContext: void requestPermissions(List<String>,java.util.concurrent.Executor,androidx.car.app.OnRequestPermissionsListener)> -> _SINK_
<androidx.car.app.testing.TestCarContext: void startCarApp(android.content.Intent)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setChannelId(java.lang.String)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setColor(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setContentIntent(android.app.PendingIntent)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setContentText(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setContentTitle(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setDeleteIntent(android.app.PendingIntent)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setImportance(int)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setLargeIcon(android.graphics.Bitmap)> -> _SINK_
<androidx.car.app.notification.CarAppExtender.Builder: androidx.car.app.notification.CarAppExtender.Builder setSmallIcon(int)> -> _SINK_
<androidx.car.app.testing.navigation.TestNavigationManager: int getNavigationEndedCount()> -> _SOURCE_
<androidx.car.app.testing.navigation.TestNavigationManager: androidx.car.app.navigation.NavigationManagerCallback getNavigationManagerCallback()> -> _SOURCE_
<androidx.car.app.testing.navigation.TestNavigationManager: int getNavigationStartedCount()> -> _SOURCE_
<androidx.car.app.testing.navigation.TestNavigationManager: List<Trip> getTripsSent()> -> _SOURCE_
<androidx.car.app.testing.navigation.TestNavigationManager: void updateTrip(androidx.car.app.navigation.model.Trip)> -> _SINK_
<androidx.car.app.navigation.model.Trip.Builder: androidx.car.app.navigation.model.Trip build()> -> _SINK_
<androidx.car.app.navigation.model.Trip.Builder: androidx.car.app.navigation.model.Trip.Builder setCurrentRoad(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.navigation.model.Trip.Builder: androidx.car.app.navigation.model.Trip.Builder setLoading(boolean)> -> _SINK_
<android.util.ArrayMap: void putAll(Map<?)> -> _SINK_
<androidx.collection.CircularIntArray: int getFirst()> -> _SOURCE_
<androidx.collection.CircularIntArray: int getLast()> -> _SOURCE_
<androidx.collection.CircularIntArray: int size()> -> _SOURCE_
<androidx.car.app.testing.TestAppManager: androidx.car.app.SurfaceCallback getSurfaceCallback()> -> _SOURCE_
<androidx.car.app.testing.TestAppManager: List<Pair<Screen, Template>> getTemplatesReturned()> -> _SOURCE_
<androidx.car.app.testing.TestAppManager: List<CharSequence> getToastsShown()> -> _SOURCE_
<androidx.car.app.testing.TestAppManager: void reset()> -> _SINK_
<androidx.car.app.testing.TestAppManager: void showToast(java.lang.CharSequence,int)> -> _SINK_
<androidx.collection.CircularArray: E getFirst()> -> _SOURCE_
<androidx.collection.CircularArray: E getLast()> -> _SOURCE_
<androidx.car.app.versioning.CarAppApiLevels: int getLatest()> -> _SOURCE_
<androidx.car.app.versioning.CarAppApiLevels: int getOldest()> -> _SOURCE_
<androidx.car.app.testing.ScreenController: java.lang.Object getScreenResult()> -> _SOURCE_
<androidx.car.app.testing.ScreenController: List<Template> getTemplatesReturned()> -> _SOURCE_
<androidx.car.app.validation.HostValidator.Builder: androidx.car.app.validation.HostValidator.Builder addAllowedHost(java.lang.String,java.lang.String)> -> _SINK_
<androidx.car.app.validation.HostValidator.Builder: androidx.car.app.validation.HostValidator.Builder addAllowedHosts(int)> -> _SINK_
<androidx.car.app.validation.HostValidator.Builder: androidx.car.app.validation.HostValidator build()> -> _SOURCE_
<androidx.car.app.model.PlaceMarker.Builder: androidx.car.app.model.PlaceMarker.Builder setColor(androidx.car.app.model.CarColor)> -> _SINK_
<androidx.car.app.model.PlaceMarker.Builder: androidx.car.app.model.PlaceMarker.Builder setIcon(androidx.car.app.model.CarIcon,int)> -> _SINK_
<androidx.car.app.model.PlaceMarker.Builder: androidx.car.app.model.PlaceMarker.Builder setLabel(java.lang.CharSequence)> -> _SINK_
<androidx.car.app.testing.TestScreenManager: List<Screen> getScreensPushed()> -> _SOURCE_
<androidx.car.app.testing.TestScreenManager: boolean hasScreens()> -> _SOURCE_
<androidx.car.app.testing.TestScreenManager: void reset()> -> _SINK_
<androidx.car.app.validation.HostValidator: java.util.Map> getAllowedHosts()> -> _SOURCE_
<androidx.car.app.validation.HostValidator: boolean isValidHost(androidx.car.app.HostInfo)> -> _SOURCE_
<androidx.constraintlayout.helper.widget.Carousel.Adapter: int count()> -> _SOURCE_
<androidx.constraintlayout.motion.widget.FloatLayout: void layout(float,float,float,float)> -> _SOURCE_
<androidx.concurrent.futures.CallbackToFutureAdapter.Completer: boolean set(T)> -> _SINK_
<androidx.concurrent.futures.CallbackToFutureAdapter.Completer: boolean setException(java.lang.Throwable)> -> _SINK_
<androidx.constraintlayout.widget.Guideline: void setGuidelineBegin(int)> -> _SINK_
<androidx.constraintlayout.widget.Guideline: void setGuidelineEnd(int)> -> _SINK_
<androidx.constraintlayout.widget.Guideline: void setGuidelinePercent(float)> -> _SINK_
<androidx.compose.ui.text.Placeholder: android.view.View getContent()> -> _SOURCE_
<androidx.compose.ui.text.Placeholder: void setContentId(int)> -> _SINK_
<androidx.compose.ui.text.Placeholder: void setEmptyVisibility(int)> -> _SINK_
<androidx.contentpager.content.ContentPager: Bundle createArgs(int,int)> -> _SINK_
<androidx.coordinatorlayout.widget.CoordinatorLayout.AttachedBehavior: Behavior getBehavior()> -> _SOURCE_
<androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams: int getAnchorId()> -> _SOURCE_
<androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams: Behavior getBehavior()> -> _SOURCE_
<androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams: void setBehavior(Behavior)> -> _SINK_
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: Object getTag(android.view.View)> -> _SOURCE_
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onStopNestedScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,V,android.view.View)> -> _SOURCE_
<android.widget.SimpleCursorAdapter.CursorToStringConverter: CharSequence convertToString(android.database.Cursor)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> -> _SINK_
<android.widget.SimpleCursorAdapter: java.lang.CharSequence convertToString(android.database.Cursor)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter.ViewBinder getViewBinder()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<androidx.customview.widget.ViewDragHelper.Callback: int getViewHorizontalDragRange(android.view.View)> -> _SOURCE_
<androidx.customview.widget.ViewDragHelper.Callback: int getViewVerticalDragRange(android.view.View)> -> _SOURCE_
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)> -> _SINK_
<android.widget.ResourceCursorAdapter: void setViewResource(int)> -> _SINK_
<androidx.datastore.rxjava2.RxDataMigration: Single migrate(T)> -> _SINK_
<androidx.datastore.rxjava2.RxDataMigration: Single migrate(T)> -> _SINK_
<androidx.documentfile.provider.DocumentFile: boolean canRead()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: DocumentFile createDirectory(java.lang.String)> -> _SINK_
<androidx.documentfile.provider.DocumentFile: DocumentFile createFile(java.lang.String,java.lang.String)> -> _SINK_
<androidx.documentfile.provider.DocumentFile: boolean exists()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: androidx.documentfile.provider.DocumentFile findFile(java.lang.String)> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: DocumentFile fromFile(java.io.File)> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: DocumentFile fromSingleUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: String getName()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: androidx.documentfile.provider.DocumentFile getParentFile()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: String getType()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: Uri getUri()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: boolean isDirectory()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: boolean isDocumentUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: boolean isFile()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: boolean isVirtual()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: long lastModified()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: long length()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: DocumentFile[] listFiles()> -> _SOURCE_
<androidx.documentfile.provider.DocumentFile: boolean renameTo(java.lang.String)> -> _SINK_
<androidx.draganddrop.DropHelper.Options.Builder: androidx.draganddrop.DropHelper.Options.Builder addInnerEditTexts(EditText[])> -> _SINK_
<androidx.draganddrop.DropHelper.Options.Builder: androidx.draganddrop.DropHelper.Options.Builder setHighlightColor(int)> -> _SINK_
<androidx.draganddrop.DropHelper.Options.Builder: androidx.draganddrop.DropHelper.Options.Builder setHighlightCornerRadiusPx(int)> -> _SINK_
<androidx.draganddrop.DropHelper.Options: int getHighlightColor()> -> _SOURCE_
<androidx.draganddrop.DropHelper.Options: int getHighlightCornerRadiusPx()> -> _SOURCE_
<androidx.draganddrop.DropHelper.Options: List<EditText> getInnerEditTexts()> -> _SOURCE_
<androidx.dynamicanimation.animation.FlingAnimation: float getFriction()> -> _SOURCE_
<androidx.dynamicanimation.animation.FlingAnimation: androidx.dynamicanimation.animation.FlingAnimation setFriction(float)> -> _SINK_
<androidx.dynamicanimation.animation.FlingAnimation: androidx.dynamicanimation.animation.FlingAnimation setMaxValue(float)> -> _SINK_
<androidx.dynamicanimation.animation.FlingAnimation: androidx.dynamicanimation.animation.FlingAnimation setMinValue(float)> -> _SINK_
<androidx.dynamicanimation.animation.FlingAnimation: androidx.dynamicanimation.animation.FlingAnimation setStartVelocity(float)> -> _SINK_
<androidx.dynamicanimation.animation.FloatValueHolder: float getValue()> -> _SOURCE_
<androidx.dynamicanimation.animation.FloatValueHolder: void setValue(float)> -> _SINK_
<androidx.dynamicanimation.animation.DynamicAnimation: float getMinimumVisibleChange()> -> _SOURCE_
<androidx.dynamicanimation.animation.DynamicAnimation: boolean isRunning()> -> _SOURCE_
<androidx.dynamicanimation.animation.DynamicAnimation: T setMaxValue(float)> -> _SINK_
<androidx.dynamicanimation.animation.DynamicAnimation: T setMinValue(float)> -> _SINK_
<androidx.dynamicanimation.animation.DynamicAnimation: T setMinimumVisibleChange(float)> -> _SINK_
<androidx.dynamicanimation.animation.DynamicAnimation: T setStartValue(float)> -> _SINK_
<androidx.dynamicanimation.animation.DynamicAnimation: T setStartVelocity(float)> -> _SINK_
<androidx.draganddrop.DropHelper: void configureView(android.app.Activity,android.view.View,String[],android.view.OnReceiveContentListener)> -> _SINK_
<androidx.draganddrop.DropHelper: void configureView(android.app.Activity,android.view.View,String[],androidx.draganddrop.DropHelper.Options,android.view.OnReceiveContentListener)> -> _SINK_
<androidx.dynamicanimation.animation.FloatPropertyCompat:  FloatPropertyCompat createFloatPropertyCompat(FloatProperty)> -> _SINK_
<androidx.dynamicanimation.animation.FloatPropertyCompat: float getValue(T)> -> _SOURCE_
<androidx.dynamicanimation.animation.FloatPropertyCompat: void setValue(T,float)> -> _SINK_
<androidx.dynamicanimation.animation.SpringAnimation: androidx.dynamicanimation.animation.SpringForce getSpring()> -> _SOURCE_
<androidx.dynamicanimation.animation.SpringAnimation: androidx.dynamicanimation.animation.SpringAnimation setSpring(androidx.dynamicanimation.animation.SpringForce)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat.GlyphChecker: boolean hasGlyph(java.lang.CharSequence,int,int,int)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat.MetadataRepoLoader: void load(androidx.emoji.text.EmojiCompat.MetadataRepoLoaderCallback)> -> _SINK_
<androidx.emoji.text.EmojiCompat: java.lang.String getAssetSignature()> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: int getLoadState()> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: boolean hasEmojiGlyph(java.lang.CharSequence)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: boolean hasEmojiGlyph(java.lang.CharSequence,int)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: void load()> -> _SOURCE_
<androidx.dynamicanimation.animation.SpringForce: float getDampingRatio()> -> _SOURCE_
<androidx.dynamicanimation.animation.SpringForce: float getFinalPosition()> -> _SOURCE_
<androidx.dynamicanimation.animation.SpringForce: float getStiffness()> -> _SOURCE_
<androidx.dynamicanimation.animation.SpringForce: androidx.dynamicanimation.animation.SpringForce setFinalPosition(float)> -> _SINK_
<androidx.emoji.text.EmojiCompat.MetadataRepoLoaderCallback: void onLoaded(androidx.emoji.text.MetadataRepo)> -> _SOURCE_
<androidx.emoji.text.FontRequestEmojiCompatConfig: androidx.emoji.text.FontRequestEmojiCompatConfig setRetryPolicy(androidx.emoji.text.FontRequestEmojiCompatConfig.RetryPolicy)> -> _SINK_
<androidx.emoji.text.MetadataRepo: MetadataRepo create(android.graphics.Typeface,java.io.InputStream)> -> _SINK_
<androidx.emoji.text.MetadataRepo: MetadataRepo create(android.graphics.Typeface,java.nio.ByteBuffer)> -> _SOURCE_
<androidx.emoji.text.MetadataRepo: MetadataRepo create(android.content.res.AssetManager,java.lang.String)> -> _SOURCE_
<androidx.emoji.widget.EmojiTextViewHelper: InputFilter[] getFilters(InputFilter[])> -> _SINK_
<androidx.emoji.widget.EmojiEditTextHelper: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)> -> _SINK_
<androidx.emoji.widget.EmojiEditTextHelper: void setMaxEmojiCount(int)> -> _SINK_
<androidx.emoji2.text.DefaultEmojiCompatConfig: FontRequestEmojiCompatConfig create(android.content.Context)> -> _SINK_
<androidx.emoji.text.EmojiCompat.MetadataRepoLoaderCallback: void onLoaded(androidx.emoji.text.MetadataRepo)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat.GlyphChecker: boolean hasGlyph(java.lang.CharSequence,int,int,int)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat.MetadataRepoLoader: void load(androidx.emoji.text.EmojiCompat.MetadataRepoLoaderCallback)> -> _SINK_
<androidx.emoji.widget.EmojiExtractTextLayout: void setEmojiReplaceStrategy(int)> -> _SINK_
<androidx.emoji.widget.EmojiEditTextHelper: boolean isEnabled()> -> _SINK_
<androidx.emoji.widget.EmojiEditTextHelper: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)> -> _SINK_
<androidx.emoji.widget.EmojiEditTextHelper: void setEnabled(boolean)> -> _SINK_
<androidx.emoji.widget.EmojiEditTextHelper: void setMaxEmojiCount(int)> -> _SINK_
<androidx.emoji.text.FontRequestEmojiCompatConfig: androidx.emoji.text.FontRequestEmojiCompatConfig setRetryPolicy(androidx.emoji.text.FontRequestEmojiCompatConfig.RetryPolicy)> -> _SINK_
<androidx.emoji.text.MetadataRepo: MetadataRepo create(android.graphics.Typeface,java.io.InputStream)> -> _SINK_
<androidx.emoji.text.MetadataRepo: MetadataRepo create(android.graphics.Typeface,java.nio.ByteBuffer)> -> _SOURCE_
<androidx.emoji.text.MetadataRepo: MetadataRepo create(android.content.res.AssetManager,java.lang.String)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: java.lang.String getAssetSignature()> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: int getEmojiMatch(java.lang.CharSequence,int)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: int getLoadState()> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: boolean hasEmojiGlyph(java.lang.CharSequence)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: boolean hasEmojiGlyph(java.lang.CharSequence,int)> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: boolean isConfigured()> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: void load()> -> _SOURCE_
<androidx.emoji.text.EmojiCompat: void updateEditorInfo(android.view.inputmethod.EditorInfo)> -> _SINK_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: List<KeyedAppState> getKeyedAppStates()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: java.util.Map getKeyedAppStatesByKey()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: int getNumberOfUploads()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: List<KeyedAppState> getOnDeviceKeyedAppStates()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: java.util.Map getOnDeviceKeyedAppStatesByKey()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: List<KeyedAppState> getUploadedKeyedAppStates()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: java.util.Map getUploadedKeyedAppStatesByKey()> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: void setStates(Collection<KeyedAppState>,androidx.enterprise.feedback.KeyedAppStatesCallback)> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: void setStatesImmediate(Collection<KeyedAppState>)> -> _SOURCE_
<androidx.enterprise.feedback.FakeKeyedAppStatesReporter: void setStatesImmediate(Collection<KeyedAppState>,androidx.enterprise.feedback.KeyedAppStatesCallback)> -> _SINK_
<androidx.enterprise.feedback.KeyedAppState.KeyedAppStateBuilder: KeyedAppState.KeyedAppStateBuilder setData(java.lang.String)> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState.KeyedAppStateBuilder: KeyedAppState.KeyedAppStateBuilder setMessage(java.lang.String)> -> _SOURCE_
<androidx.emoji.widget.EmojiExtractTextLayout: void setEmojiReplaceStrategy(int)> -> _SINK_
<androidx.emoji2.text.EmojiCompatInitializer: java.lang.Boolean create(android.content.Context)> -> _SINK_
<androidx.enterprise.feedback.ReceivedKeyedAppState: String getData()> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState: String getKey()> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState: String getMessage()> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState: String getPackageName()> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState: int getSeverity()> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState: long getTimestamp()> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState: String getData()> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState: String getKey()> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState: int getMaxDataLength()> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState: int getMaxKeyLength()> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState: int getMaxMessageLength()> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppState: String getMessage()> -> _SOURCE_
<androidx.emoji.widget.EmojiAppCompatEditText: void setMaxEmojiCount(int)> -> _SINK_
<androidx.enterprise.feedback.ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder: ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder setData(java.lang.String)> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder: ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder setKey(java.lang.String)> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder: ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder setMessage(java.lang.String)> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder: ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder setPackageName(java.lang.String)> -> _SOURCE_
<androidx.enterprise.feedback.ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder: ReceivedKeyedAppState.ReceivedKeyedAppStateBuilder setTimestamp(long)> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppStatesReporter: KeyedAppStatesReporter create(android.content.Context)> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppStatesReporter: KeyedAppStatesReporter create(android.content.Context,java.util.concurrent.Executor)> -> _SINK_
<androidx.enterprise.feedback.KeyedAppStatesReporter: void setStates(Collection<KeyedAppState>,androidx.enterprise.feedback.KeyedAppStatesCallback)> -> _SINK_
<androidx.enterprise.feedback.KeyedAppStatesReporter: void setStates(Collection<KeyedAppState>)> -> _SOURCE_
<androidx.enterprise.feedback.KeyedAppStatesReporter: void setStatesImmediate(Collection<KeyedAppState>)> -> _SOURCE_
<android.media.ExifInterface: void flipHorizontally()> -> _SINK_
<android.media.ExifInterface: void flipVertically()> -> _SINK_
<android.media.ExifInterface: double getAltitude(double)> -> _SOURCE_
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: byte[] getAttributeBytes(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)> -> _SOURCE_
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)> -> _SOURCE_
<android.media.ExifInterface: long[] getAttributeRange(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: java.lang.Long getGpsDateTime()> -> _SOURCE_
<android.media.ExifInterface: boolean getLatLong(float[])> -> _SOURCE_
<android.media.ExifInterface: double[] getLatLong()> -> _SOURCE_
<android.media.ExifInterface: int getRotationDegrees()> -> _SOURCE_
<android.media.ExifInterface: byte[] getThumbnail()> -> _SOURCE_
<android.media.ExifInterface: android.graphics.Bitmap getThumbnailBitmap()> -> _SOURCE_
<android.media.ExifInterface: byte[] getThumbnailBytes()> -> _SOURCE_
<android.media.ExifInterface: long[] getThumbnailRange()> -> _SOURCE_
<android.media.ExifInterface: boolean hasAttribute(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: boolean hasThumbnail()> -> _SOURCE_
<android.media.ExifInterface: boolean isFlipped()> -> _SOURCE_
<android.media.ExifInterface: boolean isSupportedMimeType(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: boolean isThumbnailCompressed()> -> _SOURCE_
<android.media.ExifInterface: void resetOrientation()> -> _SINK_
<android.media.ExifInterface: void rotate(int)> -> _SOURCE_
<android.media.ExifInterface: void saveAttributes()> -> _SINK_
<android.media.ExifInterface: void setAltitude(double)> -> _SINK_
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.media.ExifInterface: void setGpsInfo(android.location.Location)> -> _SINK_
<android.media.ExifInterface: void setLatLong(double,double)> -> _SINK_
<androidx.leanback.app.BaseSupportFragment: ProgressBarManager getProgressBarManager()> -> _SOURCE_
<androidx.leanback.app.BrowseFragment.MainFragmentRowsAdapterProvider: MainFragmentRowsAdapter getMainFragmentRowsAdapter()> -> _SOURCE_
<androidx.leanback.app.BrowseFragment.MainFragmentAdapterProvider: MainFragmentAdapter getMainFragmentAdapter()> -> _SOURCE_
<androidx.leanback.app.BrowseSupportFragment.MainFragmentAdapterProvider: MainFragmentAdapter getMainFragmentAdapter()> -> _SOURCE_
<androidx.leanback.app.BrowseSupportFragment.MainFragmentRowsAdapterProvider: MainFragmentRowsAdapter getMainFragmentRowsAdapter()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: android.graphics.drawable.Drawable getBadgeDrawable()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: int getSearchAffordanceColor()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: androidx.leanback.widget.SearchOrbView.Colors getSearchAffordanceColors()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: android.view.View getTitleView()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: androidx.leanback.widget.TitleViewAdapter getTitleViewAdapter()> -> _SOURCE_
<androidx.leanback.app.BrandedSupportFragment: void installTitleView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _SINK_
<androidx.leanback.app.BrandedSupportFragment: void setBadgeDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.app.BrandedSupportFragment: void setSearchAffordanceColor(int)> -> _SINK_
<androidx.leanback.app.BrandedSupportFragment: void setSearchAffordanceColors(androidx.leanback.widget.SearchOrbView.Colors)> -> _SINK_
<androidx.leanback.app.BrandedSupportFragment: void setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.app.BrandedSupportFragment: void setTitleView(android.view.View)> -> _SINK_
<androidx.leanback.app.BrandedSupportFragment: void showTitle(int)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: void enableParallax(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,androidx.leanback.widget.ParallaxTarget.PropertyValuesHolderTarget)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: void enableParallax()> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: Fragment findOrCreateVideoSupportFragment()> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: Drawable getBottomDrawable()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: Bitmap getCoverBitmap()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: Drawable getCoverDrawable()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: int getParallaxDrawableMaxOffset()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: PlaybackGlue getPlaybackGlue()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: int getSolidColor()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: androidx.leanback.media.PlaybackGlueHost onCreateGlueHost()> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: void setCoverBitmap(android.graphics.Bitmap)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: void setParallaxDrawableMaxOffset(int)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: void setSolidColor(int)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragmentBackgroundController: void setupVideoPlayback(androidx.leanback.media.PlaybackGlue)> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: void enableParallax(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,androidx.leanback.widget.ParallaxTarget.PropertyValuesHolderTarget)> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: void enableParallax()> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: Fragment findOrCreateVideoFragment()> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: Drawable getBottomDrawable()> -> _SOURCE_
<androidx.leanback.app.DetailsFragmentBackgroundController: Bitmap getCoverBitmap()> -> _SOURCE_
<androidx.leanback.app.DetailsFragmentBackgroundController: Drawable getCoverDrawable()> -> _SOURCE_
<androidx.leanback.app.DetailsFragmentBackgroundController: int getParallaxDrawableMaxOffset()> -> _SOURCE_
<androidx.leanback.app.DetailsFragmentBackgroundController: PlaybackGlue getPlaybackGlue()> -> _SOURCE_
<androidx.leanback.app.DetailsFragmentBackgroundController: int getSolidColor()> -> _SOURCE_
<androidx.leanback.app.DetailsFragmentBackgroundController: androidx.leanback.media.PlaybackGlueHost onCreateGlueHost()> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: void setCoverBitmap(android.graphics.Bitmap)> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: void setParallaxDrawableMaxOffset(int)> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: void setSolidColor(int)> -> _SINK_
<androidx.leanback.app.DetailsFragmentBackgroundController: void setupVideoPlayback(androidx.leanback.media.PlaybackGlue)> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter build()> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter.Builder setGridEnabled(boolean)> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter.Builder setHandler(android.os.Handler)> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter.Builder setMaxImages(int)> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter.Builder setPrimaryIndex(int)> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter.Builder setQuality(int)> -> _SINK_
<androidx.heifwriter.HeifWriter.Builder: androidx.heifwriter.HeifWriter.Builder setRotation(int)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragment: androidx.leanback.widget.ObjectAdapter getAdapter()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragment: androidx.leanback.widget.BaseOnItemViewClickedListener getOnItemViewClickedListener()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragment: androidx.leanback.widget.DetailsParallax getParallax()> -> _SOURCE_
<androidx.leanback.app.DetailsSupportFragment: void setAdapter(androidx.leanback.widget.ObjectAdapter)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragment: void setSelectedPosition(int)> -> _SINK_
<androidx.leanback.app.DetailsSupportFragment: void setSelectedPosition(int,boolean)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: int getArrowBackgroundColor()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int getArrowColor()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int getDescriptionViewTextColor()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int getDotBackgroundColor()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int getIconResourceId()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int getLogoResourceId()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: CharSequence getStartButtonText()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int getTitleViewTextColor()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: int onProvideTheme()> -> _SOURCE_
<androidx.leanback.app.OnboardingSupportFragment: void setArrowBackgroundColor(int)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setArrowColor(int)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setDescriptionViewTextColor(int)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setDotBackgroundColor(int)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setIconResouceId(int)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setLogoResourceId(int)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setStartButtonText(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.app.OnboardingSupportFragment: void setTitleViewTextColor(int)> -> _SINK_
<androidx.leanback.app.PlaybackSupportFragmentGlueHost: void notifyPlaybackRowChanged()> -> _SINK_
<androidx.leanback.app.PlaybackSupportFragmentGlueHost: void setControlsOverlayAutoHideEnabled(boolean)> -> _SINK_
<androidx.leanback.app.PlaybackSupportFragmentGlueHost: void setHostCallback(androidx.leanback.media.PlaybackGlueHost.HostCallback)> -> _SINK_
<androidx.leanback.app.PlaybackSupportFragmentGlueHost: void setOnKeyInterceptListener(android.view.View.OnKeyListener)> -> _SINK_
<androidx.leanback.app.PlaybackSupportFragmentGlueHost: void setPlaybackRow(androidx.car.app.model.Row)> -> _SINK_
<androidx.leanback.app.PlaybackSupportFragmentGlueHost: void setPlaybackRowPresenter(androidx.leanback.widget.PlaybackRowPresenter)> -> _SINK_
<androidx.leanback.app.RowsFragment.MainFragmentAdapter: boolean isScrolling()> -> _SOURCE_
<androidx.leanback.app.RowsFragment.MainFragmentAdapter: void setAlignment(int)> -> _SINK_
<androidx.leanback.app.RowsFragment.MainFragmentAdapter: void setEntranceTransitionState(boolean)> -> _SINK_
<androidx.leanback.app.RowsFragment.MainFragmentAdapter: void setExpand(boolean)> -> _SINK_
<androidx.leanback.app.PlaybackFragmentGlueHost: void notifyPlaybackRowChanged()> -> _SINK_
<androidx.leanback.app.PlaybackFragmentGlueHost: void setControlsOverlayAutoHideEnabled(boolean)> -> _SINK_
<androidx.leanback.app.PlaybackFragmentGlueHost: void setHostCallback(androidx.leanback.media.PlaybackGlueHost.HostCallback)> -> _SINK_
<androidx.leanback.app.PlaybackFragmentGlueHost: void setOnKeyInterceptListener(android.view.View.OnKeyListener)> -> _SINK_
<androidx.leanback.app.PlaybackFragmentGlueHost: void setPlaybackRow(androidx.car.app.model.Row)> -> _SINK_
<androidx.leanback.app.PlaybackFragmentGlueHost: void setPlaybackRowPresenter(androidx.leanback.widget.PlaybackRowPresenter)> -> _SINK_
<androidx.leanback.app.SearchFragment.SearchResultProvider: ObjectAdapter getResultsAdapter()> -> _SOURCE_
<androidx.leanback.app.SearchSupportFragment.SearchResultProvider: ObjectAdapter getResultsAdapter()> -> _SOURCE_
<androidx.leanback.app.ErrorSupportFragment: android.graphics.drawable.Drawable getBackgroundDrawable()> -> _SOURCE_
<androidx.leanback.app.ErrorSupportFragment: java.lang.String getButtonText()> -> _SOURCE_
<androidx.leanback.app.ErrorSupportFragment: android.graphics.drawable.Drawable getImageDrawable()> -> _SOURCE_
<androidx.leanback.app.ErrorSupportFragment: java.lang.CharSequence getMessage()> -> _SOURCE_
<androidx.leanback.app.ErrorSupportFragment: boolean isBackgroundTranslucent()> -> _SOURCE_
<androidx.leanback.app.ErrorSupportFragment: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.app.ErrorSupportFragment: void setButtonText(java.lang.String)> -> _SINK_
<androidx.leanback.app.ErrorSupportFragment: void setDefaultBackground(boolean)> -> _SINK_
<androidx.leanback.app.ErrorSupportFragment: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.app.ErrorSupportFragment: void setMessage(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.app.VideoSupportFragmentGlueHost: void setSurfaceHolderCallback(android.view.SurfaceHolder.Callback)> -> _SINK_
<androidx.leanback.app.VerticalGridSupportFragment: androidx.leanback.widget.ObjectAdapter getAdapter()> -> _SOURCE_
<androidx.leanback.app.VerticalGridSupportFragment: androidx.leanback.widget.OnItemViewClickedListener getOnItemViewClickedListener()> -> _SOURCE_
<androidx.leanback.app.VerticalGridSupportFragment: void setGridPresenter(androidx.leanback.widget.VerticalGridPresenter)> -> _SINK_
<androidx.leanback.app.VerticalGridSupportFragment: void setSelectedPosition(int)> -> _SINK_
<androidx.leanback.graphics.ColorOverlayDimmer: int applyToColor(int)> -> _SINK_
<androidx.leanback.graphics.ColorOverlayDimmer: ColorOverlayDimmer createColorOverlayDimmer(int,float,float)> -> _SINK_
<androidx.leanback.graphics.ColorOverlayDimmer: ColorOverlayDimmer createDefault(android.content.Context)> -> _SINK_
<androidx.leanback.graphics.ColorOverlayDimmer: int getAlpha()> -> _SOURCE_
<androidx.leanback.graphics.ColorOverlayDimmer: float getAlphaFloat()> -> _SOURCE_
<androidx.leanback.graphics.ColorOverlayDimmer: android.graphics.Paint getPaint()> -> _SOURCE_
<androidx.leanback.graphics.ColorOverlayDimmer: void setActiveLevel(float)> -> _SINK_
<androidx.leanback.graphics.ColorFilterCache: ColorFilterCache getColorFilterCache(int)> -> _SOURCE_
<androidx.leanback.graphics.ColorFilterCache: android.graphics.ColorFilter getFilterForLevel(float)> -> _SOURCE_
<androidx.leanback.app.VideoSupportFragment: android.view.SurfaceView getSurfaceView()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: long getBufferedPosition()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: long getCurrentPosition()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: long getDuration()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: android.graphics.drawable.Drawable getMediaArt(android.content.Context)> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: android.support.v4.media.session.MediaControllerCompat getMediaController()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: java.lang.CharSequence getMediaSubtitle()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: java.lang.CharSequence getMediaTitle()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: long getSupportedActions()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: boolean isPlaying()> -> _SOURCE_
<androidx.leanback.media.MediaControllerAdapter: void onAttachedToHost(androidx.leanback.media.PlaybackGlueHost)> -> _SINK_
<androidx.leanback.media.MediaControllerAdapter: void seekTo(long)> -> _SINK_
<androidx.leanback.media.MediaControllerAdapter: void setProgressUpdatingEnabled(boolean)> -> _SINK_
<androidx.leanback.graphics.CompositeDrawable.ChildDrawable: androidx.leanback.graphics.BoundsRule getBoundsRule()> -> _SOURCE_
<androidx.leanback.graphics.CompositeDrawable.ChildDrawable: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<androidx.leanback.graphics.CompositeDrawable.ChildDrawable: void recomputeBounds()> -> _SINK_
<androidx.leanback.graphics.BoundsRule: void calculateBounds(android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
<androidx.leanback.database.CursorMapper: java.lang.Object convert(android.database.Cursor)> -> _SOURCE_
<androidx.leanback.app.VideoFragmentGlueHost: void setSurfaceHolderCallback(android.view.SurfaceHolder.Callback)> -> _SINK_
<androidx.leanback.app.ProgressBarManager: void enableProgressBar()> -> _SINK_
<androidx.leanback.app.ProgressBarManager: long getInitialDelay()> -> _SOURCE_
<androidx.leanback.app.ProgressBarManager: void setInitialDelay(long)> -> _SINK_
<androidx.leanback.app.ProgressBarManager: void show()> -> _SOURCE_
<androidx.leanback.media.PlaybackBannerControlGlue: long getCurrentPosition()> -> _SOURCE_
<androidx.leanback.media.PlaybackBannerControlGlue: int[] getFastForwardSpeeds()> -> _SINK_
<androidx.leanback.media.PlaybackControlGlue: androidx.leanback.widget.PlaybackControlsRow getControlsRow()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: androidx.leanback.widget.PlaybackControlsRowPresenter getControlsRowPresenter()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: int getCurrentPosition()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: int getCurrentSpeedId()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: int[] getFastForwardSpeeds()> -> _SINK_
<androidx.leanback.media.PlaybackControlGlue: Drawable getMediaArt()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: int getMediaDuration()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: CharSequence getMediaSubtitle()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: CharSequence getMediaTitle()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: long getSupportedActions()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: int getUpdatePeriod()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: boolean hasValidMedia()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: boolean isFadingEnabled()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: boolean isMediaPlaying()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: boolean isPlaying()> -> _SOURCE_
<androidx.leanback.media.PlaybackControlGlue: void play(int)> -> _SINK_
<androidx.leanback.media.PlaybackControlGlue: void setFadingEnabled(boolean)> -> _SINK_
<androidx.leanback.media.PlaybackControlGlue: void setPlaybackRowPresenter(androidx.leanback.widget.PlaybackRowPresenter)> -> _SINK_
<androidx.leanback.media.PlaybackControlGlue: void updateProgress()> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost: void notifyPlaybackRowChanged()> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost: void setControlsOverlayAutoHideEnabled(boolean)> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost: void setHostCallback(androidx.leanback.media.PlaybackGlueHost.HostCallback)> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost: void setOnKeyInterceptListener(android.view.View.OnKeyListener)> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost: void setPlaybackRow(androidx.car.app.model.Row)> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost: void setPlaybackRowPresenter(androidx.leanback.widget.PlaybackRowPresenter)> -> _SINK_
<androidx.leanback.media.PlaybackGlueHost.PlayerCallback: void onVideoSizeChanged(int,int)> -> _SINK_
<androidx.leanback.media.PlayerAdapter.Callback: void onError(androidx.leanback.media.PlayerAdapter,int,java.lang.String)> -> _SINK_
<androidx.leanback.media.PlayerAdapter.Callback: void onPlayCompleted(androidx.leanback.media.PlayerAdapter)> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: void attachToMediaController(android.support.v4.media.session.MediaControllerCompat)> -> _SINK_
<androidx.leanback.media.MediaControllerGlue: int getCurrentPosition()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: int getCurrentSpeedId()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: android.graphics.drawable.Drawable getMediaArt()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: MediaControllerCompat getMediaController()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: int getMediaDuration()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: java.lang.CharSequence getMediaSubtitle()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: java.lang.CharSequence getMediaTitle()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: long getSupportedActions()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: boolean hasValidMedia()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: boolean isMediaPlaying()> -> _SOURCE_
<androidx.leanback.media.MediaControllerGlue: void play(int)> -> _SINK_
<androidx.leanback.app.RowsSupportFragment.MainFragmentAdapter: boolean isScrolling()> -> _SOURCE_
<androidx.leanback.app.RowsSupportFragment.MainFragmentAdapter: void setAlignment(int)> -> _SINK_
<androidx.leanback.app.RowsSupportFragment.MainFragmentAdapter: void setEntranceTransitionState(boolean)> -> _SINK_
<androidx.leanback.app.RowsSupportFragment.MainFragmentAdapter: void setExpand(boolean)> -> _SINK_
<androidx.leanback.graphics.ColorFilterDimmer: void applyFilterToView(android.view.View)> -> _SINK_
<androidx.leanback.graphics.ColorFilterDimmer: ColorFilterDimmer createDefault(android.content.Context)> -> _SINK_
<androidx.leanback.graphics.ColorFilterDimmer: android.graphics.ColorFilter getColorFilter()> -> _SINK_
<androidx.leanback.graphics.ColorFilterDimmer: void setActiveLevel(float)> -> _SINK_
<androidx.leanback.preference.LeanbackPreferenceDialogFragmentCompat: android.preference.DialogPreference getPreference()> -> _SOURCE_
<android.provider.Settings: boolean getBoolean(java.lang.String)> -> _SOURCE_
<android.provider.Settings: Settings getInstance(android.content.Context)> -> _SOURCE_
<android.provider.Settings: void setBoolean(java.lang.String,boolean)> -> _SINK_
<androidx.leanback.preference.BaseLeanbackPreferenceFragmentCompat: android.content.Context getContext()> -> _SOURCE_
<androidx.leanback.widget.AbstractMediaListHeaderPresenter: boolean isUsingDefaultSelectEffect()> -> _SOURCE_
<androidx.leanback.widget.AbstractMediaListHeaderPresenter: void setBackgroundColor(int)> -> _SINK_
<androidx.leanback.widget.ArrayObjectAdapter: void add(int,java.lang.Object)> -> _SINK_
<androidx.leanback.widget.ArrayObjectAdapter: java.lang.Object get(int)> -> _SOURCE_
<androidx.leanback.widget.ArrayObjectAdapter: int indexOf(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.ArrayObjectAdapter: int size()> -> _SOURCE_
<androidx.leanback.preference.LeanbackPreferenceFragmentCompat: void setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.BaseGridView.SmoothScrollByBehavior: int configSmoothScrollByDuration(int,int)> -> _SOURCE_
<androidx.leanback.widget.ClassPresenterSelector: androidx.leanback.widget.ClassPresenterSelector addClassPresenter(Class<?>,androidx.leanback.widget.Presenter)> -> _SINK_
<androidx.leanback.widget.ClassPresenterSelector: androidx.leanback.widget.ClassPresenterSelector addClassPresenterSelector(Class<?>,androidx.leanback.widget.PresenterSelector)> -> _SINK_
<androidx.leanback.widget.ClassPresenterSelector: androidx.leanback.widget.Presenter getPresenter(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.ClassPresenterSelector: Presenter[] getPresenters()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewLogoPresenter: boolean isBoundToImage(androidx.leanback.widget.DetailsOverviewLogoPresenter.ViewHolder,androidx.leanback.widget.DetailsOverviewRow)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewLogoPresenter: android.view.View onCreateView(android.view.ViewGroup)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewLogoPresenter: void setContext(androidx.leanback.widget.DetailsOverviewLogoPresenter.ViewHolder,androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder,androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter)> -> _SOURCE_
<androidx.leanback.widget.ControlButtonPresenterSelector: androidx.leanback.widget.Presenter getPresenter(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.ControlButtonPresenterSelector: Presenter[] getPresenters()> -> _SOURCE_
<androidx.leanback.widget.ControlButtonPresenterSelector: androidx.leanback.widget.Presenter getPrimaryPresenter()> -> _SOURCE_
<androidx.leanback.widget.DividerRow: boolean isRenderedAsRowView()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRowPresenter: int getBackgroundColor()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRowPresenter: androidx.leanback.widget.OnActionClickedListener getOnActionClickedListener()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRowPresenter: boolean isStyleLarge()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRowPresenter: boolean isUsingDefaultSelectEffect()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRowPresenter: void setBackgroundColor(int)> -> _SINK_
<androidx.leanback.widget.DetailsOverviewRowPresenter: void setSharedElementEnterTransition(android.app.Activity,java.lang.String,long)> -> _SINK_
<androidx.leanback.widget.DetailsOverviewRowPresenter: void setSharedElementEnterTransition(android.app.Activity,java.lang.String)> -> _SINK_
<androidx.leanback.widget.DetailsOverviewRowPresenter: void setStyleLarge(boolean)> -> _SINK_
<androidx.leanback.widget.FacetProviderAdapter: FacetProvider getFacetProvider(int)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: void addAction(androidx.car.app.model.Action)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: void addAction(int,androidx.car.app.model.Action)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: androidx.car.app.model.Action getActionForKeyCode(int)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: List<Action> getActions()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: ObjectAdapter getActionsAdapter()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: Drawable getImageDrawable()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: Object getItem()> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: boolean removeAction(androidx.car.app.model.Action)> -> _SOURCE_
<androidx.leanback.widget.DetailsOverviewRow: void setImageBitmap(android.content.Context,android.graphics.Bitmap)> -> _SINK_
<androidx.leanback.widget.DetailsOverviewRow: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.widget.DetailsOverviewRow: void setImageScaleUpAllowed(boolean)> -> _SINK_
<androidx.leanback.widget.DetailsOverviewRow: void setItem(java.lang.Object)> -> _SINK_
<androidx.leanback.widget.GuidanceStylist.Guidance: java.lang.String getBreadcrumb()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist.Guidance: java.lang.String getDescription()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist.Guidance: android.graphics.drawable.Drawable getIconDrawable()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist.Guidance: java.lang.String getTitle()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist: android.widget.TextView getBreadcrumbView()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist: android.widget.TextView getDescriptionView()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist: android.widget.ImageView getIconView()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist: android.widget.TextView getTitleView()> -> _SOURCE_
<androidx.leanback.widget.GuidanceStylist: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,androidx.leanback.widget.GuidanceStylist.Guidance)> -> _SINK_
<androidx.leanback.widget.GuidanceStylist: int onProvideLayoutId()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: int getActionsBackgroundColor()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: int getAlignmentMode()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: int getBackgroundColor()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: int getInitialState()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: androidx.leanback.widget.OnActionClickedListener getOnActionClickedListener()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: boolean isParticipatingEntranceTransition()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: boolean isUsingDefaultSelectEffect()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: void setActionsBackgroundColor(int)> -> _SINK_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: void setAlignmentMode(int)> -> _SINK_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: void setBackgroundColor(int)> -> _SINK_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter: void setParticipatingEntranceTransition(boolean)> -> _SINK_
<androidx.leanback.widget.GuidedAction.Builder: androidx.leanback.widget.GuidedAction build()> -> _SINK_
<androidx.leanback.widget.CursorObjectAdapter: java.lang.Object get(int)> -> _SOURCE_
<androidx.leanback.widget.CursorObjectAdapter: Cursor getCursor()> -> _SOURCE_
<androidx.leanback.widget.CursorObjectAdapter: CursorMapper getMapper()> -> _SOURCE_
<androidx.leanback.widget.CursorObjectAdapter: int size()> -> _SOURCE_
<androidx.leanback.widget.DetailsParallax: androidx.leanback.widget.Parallax.IntProperty getOverviewRowBottom()> -> _SOURCE_
<androidx.leanback.widget.DetailsParallax: androidx.leanback.widget.Parallax.IntProperty getOverviewRowTop()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder: ViewGroup getActionsRow()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder: ViewGroup getDetailsDescriptionFrame()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder: Presenter.ViewHolder getDetailsDescriptionViewHolder()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder: DetailsOverviewLogoPresenter.ViewHolder getLogoViewHolder()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder: ViewGroup getOverviewView()> -> _SOURCE_
<androidx.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder: int getState()> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: boolean canScrollHorizontally()> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: boolean canScrollVertically()> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: boolean checkLayoutParams(androidx.recyclerview.widget.RecyclerView.LayoutParams)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getColumnCountForAccessibility(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getDecoratedBottom(android.view.View)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void getDecoratedBoundsWithMargins(android.view.View,android.graphics.Rect)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getDecoratedLeft(android.view.View)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getDecoratedRight(android.view.View)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getDecoratedTop(android.view.View)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getRowCountForAccessibility(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void onLayoutChildren(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void onMeasure(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State,int,int)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int scrollHorizontallyBy(int,androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void scrollToPosition(int)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int scrollVerticallyBy(int,androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void setOrientation(int)> -> _SINK_
<androidx.leanback.widget.GridLayoutManager: void smoothScrollToPosition(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.State,int)> -> _SINK_
<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(androidx.leanback.widget.VerticalGridView,boolean)> -> _SINK_
<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(androidx.leanback.widget.ItemBridgeAdapter)> -> _SINK_
<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(androidx.leanback.widget.VerticalGridView)> -> _SINK_
<androidx.leanback.widget.FacetProvider: Object getFacet(Class<?>)> -> _SINK_
<androidx.leanback.widget.HeaderItem: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<androidx.leanback.widget.HeaderItem: java.lang.CharSequence getDescription()> -> _SOURCE_
<androidx.leanback.widget.HeaderItem: long getId()> -> _SOURCE_
<androidx.leanback.widget.HeaderItem: String getName()> -> _SOURCE_
<androidx.leanback.widget.HeaderItem: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.HeaderItem: void setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.GuidedActionAutofillSupport: void setOnAutofillListener(androidx.leanback.widget.GuidedActionAutofillSupport.OnAutofillListener)> -> _SINK_
<androidx.leanback.widget.GuidedDatePickerAction.BuilderBase: B date(long)> -> _SOURCE_
<androidx.leanback.widget.GuidedDatePickerAction.BuilderBase: B datePickerFormat(java.lang.String)> -> _SINK_
<androidx.leanback.widget.GuidedDatePickerAction.BuilderBase: B maxDate(long)> -> _SINK_
<androidx.leanback.widget.GuidedDatePickerAction.BuilderBase: B minDate(long)> -> _SINK_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: int getItemAlignmentFocusViewId()> -> _SOURCE_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: int getItemAlignmentOffset()> -> _SOURCE_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: float getItemAlignmentOffsetPercent()> -> _SOURCE_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: int getItemAlignmentViewId()> -> _SOURCE_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: boolean isAlignedToTextViewBaseLine()> -> _SOURCE_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: boolean isItemAlignmentOffsetWithPadding()> -> _SOURCE_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: void setItemAlignmentFocusViewId(int)> -> _SINK_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: void setItemAlignmentOffset(int)> -> _SINK_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: void setItemAlignmentOffsetPercent(float)> -> _SINK_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: void setItemAlignmentOffsetWithPadding(boolean)> -> _SINK_
<androidx.leanback.widget.ItemAlignmentFacet.ItemAlignmentDef: void setItemAlignmentViewId(int)> -> _SINK_
<androidx.leanback.widget.ItemBridgeAdapter: androidx.leanback.widget.FacetProvider getFacetProvider(int)> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: int getItemCount()> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: long getItemId(int)> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: ArrayList<Presenter> getPresenterMapper()> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: androidx.leanback.widget.ItemBridgeAdapter.Wrapper getWrapper()> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: void onBindViewHolder(androidx.recyclerview.widget.RecyclerView.ViewHolder,int,java.util.List)> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: void onBindViewHolder(androidx.recyclerview.widget.RecyclerView.ViewHolder,int)> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter: void setAdapter(androidx.leanback.widget.ObjectAdapter)> -> _SINK_
<androidx.leanback.widget.ItemBridgeAdapter: void setAdapterListener(androidx.leanback.widget.ItemBridgeAdapter.AdapterListener)> -> _SINK_
<androidx.leanback.widget.ItemBridgeAdapter: void setPresenterMapper(ArrayList<Presenter>)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B autofillHints(String[])> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B description(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B description(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B descriptionEditInputType(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B descriptionInputType(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B editDescription(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B editDescription(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B editInputType(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B editTitle(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B editTitle(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B editable(boolean)> -> _SOURCE_
<androidx.leanback.widget.GuidedAction.BuilderBase: android.content.Context getContext()> -> _SOURCE_
<androidx.leanback.widget.GuidedAction.BuilderBase: B icon(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B iconResourceId(int,android.content.Context)> -> _SOURCE_
<androidx.leanback.widget.GuidedAction.BuilderBase: B inputType(int)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B intent(android.content.Intent)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B multilineDescription(boolean)> -> _SOURCE_
<androidx.leanback.widget.GuidedAction.BuilderBase: B subActions(List<GuidedAction>)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B title(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.GuidedAction.BuilderBase: B title(int)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter: boolean areChildRoundedCornersEnabled()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: void enableChildRoundedCorners(boolean)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter: int getExpandedRowHeight()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: int getFocusZoomFactor()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: PresenterSelector getHoverCardPresenterSelector()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: int getRecycledPoolSize(androidx.leanback.widget.Presenter)> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: int getRowHeight()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: boolean getShadowEnabled()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: int getZoomFactor()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: boolean isFocusDimmerUsed()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: boolean isKeepChildForeground()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: boolean isUsingDefaultShadow()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: boolean isUsingOutlineClipping(android.content.Context)> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter: void setExpandedRowHeight(int)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter: void setNumRows(int)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter: void setRecycledPoolSize(androidx.leanback.widget.Presenter,int)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter: void setRowHeight(int)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter: void setShadowEnabled(boolean)> -> _SINK_
<androidx.leanback.widget.ListRowPresenter.ViewHolder: ItemBridgeAdapter getBridgeAdapter()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.ViewHolder: HorizontalGridView getGridView()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.ViewHolder: androidx.leanback.widget.Presenter.ViewHolder getItemViewHolder(int)> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.ViewHolder: androidx.leanback.widget.Presenter.ViewHolder getSelectedItemViewHolder()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.ViewHolder: int getSelectedPosition()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.SelectItemViewHolderTask: int getItemPosition()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.SelectItemViewHolderTask: androidx.leanback.widget.Presenter.ViewHolderTask getItemTask()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.SelectItemViewHolderTask: boolean isSmoothScroll()> -> _SOURCE_
<androidx.leanback.widget.ListRowPresenter.SelectItemViewHolderTask: void setItemPosition(int)> -> _SINK_
<androidx.leanback.widget.ListRow: ObjectAdapter getAdapter()> -> _SOURCE_
<androidx.leanback.widget.ListRow: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<androidx.leanback.widget.ListRow: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.GuidedDatePickerAction: long getDate()> -> _SOURCE_
<androidx.leanback.widget.GuidedDatePickerAction: java.lang.String getDatePickerFormat()> -> _SOURCE_
<androidx.leanback.widget.GuidedDatePickerAction: long getMaxDate()> -> _SOURCE_
<androidx.leanback.widget.GuidedDatePickerAction: long getMinDate()> -> _SOURCE_
<androidx.leanback.widget.GuidedDatePickerAction: void onSaveInstanceState(android.os.Bundle,java.lang.String)> -> _SINK_
<androidx.leanback.widget.GuidedDatePickerAction: void setDate(long)> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter.ViewHolder: Object getExtraObject()> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter.ViewHolder: java.lang.Object getFacet(Class<?>)> -> _SINK_
<androidx.leanback.widget.ItemBridgeAdapter.ViewHolder: Object getItem()> -> _SOURCE_
<androidx.leanback.widget.ItemBridgeAdapter.ViewHolder: Presenter getPresenter()> -> _SINK_
<androidx.leanback.widget.ObjectAdapter: Object get(int)> -> _SOURCE_
<androidx.leanback.widget.ObjectAdapter: long getId(int)> -> _SOURCE_
<androidx.leanback.widget.ObjectAdapter: Presenter getPresenter(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.ObjectAdapter: PresenterSelector getPresenterSelector()> -> _SOURCE_
<androidx.leanback.widget.ObjectAdapter: void setHasStableIds(boolean)> -> _SINK_
<androidx.leanback.widget.ObjectAdapter: void setPresenterSelector(androidx.leanback.widget.PresenterSelector)> -> _SINK_
<androidx.leanback.widget.ObjectAdapter: int size()> -> _SOURCE_
<androidx.leanback.widget.ListRowHoverCardView: java.lang.CharSequence getDescription()> -> _SOURCE_
<androidx.leanback.widget.ListRowHoverCardView: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.leanback.widget.ListRowHoverCardView: void setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.ListRowHoverCardView: void setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.PageRow: boolean isRenderedAsRowView()> -> _SOURCE_
<androidx.leanback.widget.ParallaxTarget: void directUpdate(java.lang.Number)> -> _SINK_
<androidx.leanback.widget.ParallaxTarget: boolean isDirectMapping()> -> _SOURCE_
<androidx.leanback.widget.ParallaxTarget: void update(float)> -> _SINK_
<androidx.leanback.widget.ParallaxTarget.DirectPropertyTarget: void directUpdate(java.lang.Number)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: androidx.car.app.model.Action getActionForKeyCode(androidx.leanback.widget.ObjectAdapter,int)> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: androidx.car.app.model.Action getActionForKeyCode(int)> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: long getBufferedPosition()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: int getBufferedProgress()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: long getBufferedProgressLong()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: long getCurrentPosition()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: int getCurrentTime()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: long getCurrentTimeLong()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: long getDuration()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: Drawable getImageDrawable()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: Object getItem()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: ObjectAdapter getPrimaryActionsAdapter()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: ObjectAdapter getSecondaryActionsAdapter()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: int getTotalTime()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: long getTotalTimeLong()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow: void setBufferedPosition(long)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setBufferedProgress(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setBufferedProgressLong(long)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setCurrentPosition(long)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setCurrentTime(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setCurrentTimeLong(long)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setDuration(long)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setImageBitmap(android.content.Context,android.graphics.Bitmap)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setPrimaryActionsAdapter(androidx.leanback.widget.ObjectAdapter)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setTotalTime(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow: void setTotalTimeLong(long)> -> _SINK_
<androidx.leanback.widget.ListRowView: androidx.leanback.widget.HorizontalGridView getGridView()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: int getActionCount()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: int getIndex()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: java.lang.String getLabel(int)> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: java.lang.String getSecondaryLabel(int)> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: void setDrawables(Drawable[])> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: void setIndex(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: void setLabels(String[])> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRow.MultiAction: void setSecondaryLabels(String[])> -> _SINK_
<androidx.leanback.widget.ParallaxEffect: void addTarget(androidx.leanback.widget.ParallaxTarget)> -> _SINK_
<androidx.leanback.widget.ParallaxEffect: List<PropertyMarkerValue> getPropertyRanges()> -> _SOURCE_
<androidx.leanback.widget.ParallaxEffect: List<ParallaxTarget> getTargets()> -> _SOURCE_
<androidx.leanback.widget.ParallaxEffect: void performMapping(androidx.leanback.widget.Parallax)> -> _SOURCE_
<androidx.leanback.widget.ParallaxEffect: void setPropertyRanges(PropertyMarkerValue[])> -> _SINK_
<androidx.leanback.widget.ParallaxEffect: ParallaxEffect target(androidx.leanback.widget.ParallaxTarget)> -> _SINK_
<androidx.leanback.widget.PlaybackSeekDataProvider.ResultCallback: void onThumbnailLoaded(android.graphics.Bitmap,int)> -> _SOURCE_
<androidx.leanback.widget.PlaybackSeekDataProvider: long[] getSeekPositions()> -> _SOURCE_
<androidx.leanback.widget.PlaybackSeekDataProvider: void getThumbnail(int,androidx.leanback.widget.PlaybackSeekDataProvider.ResultCallback)> -> _SOURCE_
<androidx.leanback.widget.ParallaxTarget.PropertyValuesHolderTarget: void update(float)> -> _SINK_
<androidx.leanback.widget.PresenterSelector: Presenter getPresenter(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.PresenterSelector: Presenter[] getPresenters()> -> _SOURCE_
<androidx.leanback.widget.Presenter: Object getFacet(Class<?>)> -> _SINK_
<androidx.leanback.widget.Presenter: void setFacet(Class<?>,java.lang.Object)> -> _SINK_
<androidx.leanback.widget.PlaybackSeekUi.Client: androidx.leanback.widget.PlaybackSeekDataProvider getPlaybackSeekDataProvider()> -> _SOURCE_
<androidx.car.app.model.Row: HeaderItem getHeaderItem()> -> _SOURCE_
<androidx.car.app.model.Row: long getId()> -> _SOURCE_
<androidx.car.app.model.Row: boolean isRenderedAsRowView()> -> _SOURCE_
<androidx.car.app.model.Row: void setHeaderItem(androidx.leanback.widget.HeaderItem)> -> _SINK_
<androidx.car.app.model.Row: void setId(long)> -> _SINK_
<androidx.leanback.widget.PresenterSwitcher: ViewGroup getParentViewGroup()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: RowHeaderPresenter.ViewHolder getHeaderViewHolder()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: BaseOnItemViewClickedListener getOnItemViewClickedListener()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: android.view.View.OnKeyListener getOnKeyListener()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: Row getRow()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: Object getRowObject()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: float getSelectLevel()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: androidx.leanback.widget.Presenter.ViewHolder getSelectedItemViewHolder()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: boolean isExpanded()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: boolean isSelected()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter.ViewHolder: void setActivated(boolean)> -> _SINK_
<androidx.leanback.widget.RowPresenter.ViewHolder: void setOnKeyListener(android.view.View.OnKeyListener)> -> _SINK_
<androidx.leanback.widget.SearchOrbView.Colors: int getBrightColor(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRowPresenter: boolean areSecondaryActionsHidden()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRowPresenter: int getBackgroundColor()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRowPresenter: androidx.leanback.widget.OnActionClickedListener getOnActionClickedListener()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRowPresenter: int getProgressColor()> -> _SOURCE_
<androidx.leanback.widget.PlaybackControlsRowPresenter: void setBackgroundColor(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRowPresenter: void setProgressColor(int)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRowPresenter: void setSecondaryActionsHidden(boolean)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRowPresenter: void showBottomSpace(androidx.leanback.widget.PlaybackControlsRowPresenter.ViewHolder,boolean)> -> _SINK_
<androidx.leanback.widget.PlaybackControlsRowPresenter: void showPrimaryActions(androidx.leanback.widget.PlaybackControlsRowPresenter.ViewHolder)> -> _SOURCE_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty adapterPosition(int)> -> _SINK_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty fraction(float)> -> _SINK_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: int getAdapterPosition()> -> _SOURCE_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: float getFraction()> -> _SINK_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: int getOffset()> -> _SOURCE_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: int getViewId()> -> _SOURCE_
<androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty: androidx.leanback.widget.RecyclerViewParallax.ChildPositionProperty offset(int)> -> _SINK_
<androidx.leanback.widget.SectionRow: boolean isRenderedAsRowView()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter: RowHeaderPresenter getHeaderPresenter()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter: RowPresenter.ViewHolder getRowViewHolder(androidx.leanback.widget.Presenter.ViewHolder)> -> _SOURCE_
<androidx.leanback.widget.RowPresenter: boolean getSelectEffectEnabled()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter: float getSelectLevel(androidx.leanback.widget.Presenter.ViewHolder)> -> _SOURCE_
<androidx.leanback.widget.RowPresenter: boolean isUsingDefaultSelectEffect()> -> _SOURCE_
<androidx.leanback.widget.RowPresenter: void setHeaderPresenter(androidx.leanback.widget.RowHeaderPresenter)> -> _SINK_
<androidx.leanback.widget.RowPresenter: void setRowViewExpanded(androidx.leanback.widget.Presenter.ViewHolder,boolean)> -> _SINK_
<androidx.leanback.widget.RowPresenter: void setSelectEffectEnabled(boolean)> -> _SINK_
<androidx.leanback.widget.RowPresenter: void setSyncActivatePolicy(int)> -> _SINK_
<androidx.leanback.widget.RowHeaderPresenter: int getSpaceUnderBaseline(androidx.leanback.widget.RowHeaderPresenter.ViewHolder)> -> _SOURCE_
<androidx.leanback.widget.RowHeaderPresenter: void setSelectLevel(androidx.leanback.widget.RowHeaderPresenter.ViewHolder,float)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Builder: androidx.leanback.widget.ShadowOverlayHelper.Builder keepForegroundDrawable(boolean)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Builder: androidx.leanback.widget.ShadowOverlayHelper.Builder needsOverlay(boolean)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Builder: androidx.leanback.widget.ShadowOverlayHelper.Builder needsRoundedCorner(boolean)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Builder: androidx.leanback.widget.ShadowOverlayHelper.Builder needsShadow(boolean)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Builder: androidx.leanback.widget.ShadowOverlayHelper.Builder options(androidx.leanback.widget.ShadowOverlayHelper.Options)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Builder: androidx.leanback.widget.ShadowOverlayHelper.Builder preferZOrder(boolean)> -> _SINK_
<androidx.leanback.widget.TitleViewAdapter: android.graphics.drawable.Drawable getBadgeDrawable()> -> _SOURCE_
<androidx.leanback.widget.TitleViewAdapter: androidx.leanback.widget.SearchOrbView.Colors getSearchAffordanceColors()> -> _SOURCE_
<androidx.leanback.widget.TitleViewAdapter: View getSearchAffordanceView()> -> _SOURCE_
<androidx.leanback.widget.TitleViewAdapter: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.leanback.widget.TitleViewAdapter: void setBadgeDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.widget.TitleViewAdapter: void setSearchAffordanceColors(androidx.leanback.widget.SearchOrbView.Colors)> -> _SINK_
<androidx.leanback.widget.TitleViewAdapter: void setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.leanback.widget.SinglePresenterSelector: androidx.leanback.widget.Presenter getPresenter(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.SinglePresenterSelector: Presenter[] getPresenters()> -> _SOURCE_
<androidx.leanback.widget.RowHeaderView: void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback)> -> _SINK_
<androidx.leanback.widget.SparseArrayObjectAdapter: java.lang.Object get(int)> -> _SOURCE_
<androidx.leanback.widget.SparseArrayObjectAdapter: int indexOf(java.lang.Object)> -> _SOURCE_
<androidx.leanback.widget.SparseArrayObjectAdapter: int indexOf(int)> -> _SOURCE_
<androidx.leanback.widget.SparseArrayObjectAdapter: java.lang.Object lookup(int)> -> _SOURCE_
<androidx.leanback.widget.SparseArrayObjectAdapter: void set(int,java.lang.Object)> -> _SINK_
<androidx.leanback.widget.SparseArrayObjectAdapter: int size()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: boolean areChildRoundedCornersEnabled()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: void enableChildRoundedCorners(boolean)> -> _SINK_
<androidx.leanback.widget.VerticalGridPresenter: int getFocusZoomFactor()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: int getNumberOfColumns()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: OnItemViewClickedListener getOnItemViewClickedListener()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: OnItemViewSelectedListener getOnItemViewSelectedListener()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: boolean getShadowEnabled()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: boolean isFocusDimmerUsed()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: boolean isUsingDefaultShadow()> -> _SOURCE_
<androidx.leanback.widget.VerticalGridPresenter: void setKeepChildForeground(boolean)> -> _SINK_
<androidx.leanback.widget.VerticalGridPresenter: void setNumberOfColumns(int)> -> _SINK_
<androidx.leanback.widget.VerticalGridPresenter: void setShadowEnabled(boolean)> -> _SINK_
<androidx.leanback.widget.TitleHelper: android.view.ViewGroup getSceneRoot()> -> _SOURCE_
<androidx.leanback.widget.TitleHelper: android.view.View getTitleView()> -> _SOURCE_
<androidx.leanback.widget.TitleHelper: void showTitle(boolean)> -> _SOURCE_
<androidx.leanback.widget.ViewHolderTask: void run(androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SINK_
<androidx.leanback.widget.SearchBar.SearchBarPermissionListener: void requestAudioPermission()> -> _SOURCE_
<androidx.leanback.widget.Presenter.ViewHolder: Object getFacet(Class<?>)> -> _SINK_
<androidx.leanback.widget.Presenter.ViewHolder: void setFacet(Class<?>,java.lang.Object)> -> _SINK_
<androidx.leanback.widget.SpeechOrbView: void setListeningOrbColors(androidx.leanback.widget.SearchOrbView.Colors)> -> _SINK_
<androidx.leanback.widget.SpeechOrbView: void setNotListeningOrbColors(androidx.leanback.widget.SearchOrbView.Colors)> -> _SINK_
<androidx.leanback.widget.SpeechOrbView: void setSoundLevel(int)> -> _SINK_
<androidx.leanback.widget.SpeechOrbView: void showListening()> -> _SINK_
<androidx.leanback.widget.SpeechOrbView: void showNotListening()> -> _SINK_
<androidx.leanback.widget.TitleViewAdapter.Provider: TitleViewAdapter getTitleViewAdapter()> -> _SOURCE_
<androidx.leanback.widget.TitleView: android.graphics.drawable.Drawable getBadgeDrawable()> -> _SOURCE_
<androidx.leanback.widget.TitleView: androidx.leanback.widget.SearchOrbView.Colors getSearchAffordanceColors()> -> _SOURCE_
<androidx.leanback.widget.TitleView: android.view.View getSearchAffordanceView()> -> _SOURCE_
<androidx.leanback.widget.TitleView: java.lang.CharSequence getTitle()> -> _SOURCE_
<androidx.leanback.widget.TitleView: androidx.leanback.widget.TitleViewAdapter getTitleViewAdapter()> -> _SOURCE_
<androidx.leanback.widget.TitleView: void setBadgeDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<androidx.leanback.widget.TitleView: void setSearchAffordanceColors(androidx.leanback.widget.SearchOrbView.Colors)> -> _SINK_
<androidx.leanback.widget.TitleView: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.widget.DatePicker: long getDate()> -> _SOURCE_
<android.widget.DatePicker: java.lang.String getDatePickerFormat()> -> _SOURCE_
<android.widget.DatePicker: long getMaxDate()> -> _SOURCE_
<android.widget.DatePicker: long getMinDate()> -> _SOURCE_
<android.widget.DatePicker: void setDate(long)> -> _SINK_
<android.widget.DatePicker: void setDate(int,int,int,boolean)> -> _SINK_
<android.widget.DatePicker: void setDatePickerFormat(java.lang.String)> -> _SINK_
<android.widget.DatePicker: void setMaxDate(long)> -> _SOURCE_
<android.widget.DatePicker: void setMinDate(long)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Options: androidx.leanback.widget.ShadowOverlayHelper.Options dynamicShadowZ(float,float)> -> _SINK_
<androidx.leanback.widget.ShadowOverlayHelper.Options: float getDynamicShadowFocusedZ()> -> _SOURCE_
<androidx.leanback.widget.ShadowOverlayHelper.Options: float getDynamicShadowUnfocusedZ()> -> _SOURCE_
<androidx.leanback.widget.ShadowOverlayHelper.Options: int getRoundedCornerRadius()> -> _SOURCE_
<androidx.leanback.widget.ShadowOverlayHelper.Options: androidx.leanback.widget.ShadowOverlayHelper.Options roundedCornerRadius(int)> -> _SINK_
<androidx.leanback.widget.VerticalGridView: void setColumnWidth(int)> -> _SINK_
<androidx.leanback.widget.VerticalGridView: void setNumColumns(int)> -> _SINK_
<androidx.leanback.widget.picker.PickerColumn: int getCount()> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: int getCurrentValue()> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: java.lang.CharSequence getLabelFor(int)> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: java.lang.String getLabelFormat()> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: int getMaxValue()> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: int getMinValue()> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: CharSequence[] getStaticLabels()> -> _SOURCE_
<androidx.leanback.widget.picker.PickerColumn: void setCurrentValue(int)> -> _SINK_
<androidx.leanback.widget.picker.PickerColumn: void setLabelFormat(java.lang.String)> -> _SINK_
<androidx.leanback.widget.picker.PickerColumn: void setMaxValue(int)> -> _SINK_
<androidx.leanback.widget.picker.PickerColumn: void setMinValue(int)> -> _SINK_
<androidx.leanback.widget.picker.PickerColumn: void setStaticLabels(CharSequence[])> -> _SINK_
<androidx.media.AudioFocusRequestCompat.Builder: androidx.media.AudioFocusRequestCompat build()> -> _SINK_
<androidx.media.AudioFocusRequestCompat.Builder: androidx.media.AudioFocusRequestCompat.Builder setAudioAttributes(androidx.media.AudioAttributesCompat)> -> _SINK_
<androidx.media.AudioFocusRequestCompat.Builder: androidx.media.AudioFocusRequestCompat.Builder setFocusGain(int)> -> _SINK_
<androidx.media.MediaBrowserServiceCompat.BrowserRoot: android.os.Bundle getExtras()> -> _SOURCE_
<androidx.media.MediaBrowserServiceCompat.BrowserRoot: java.lang.String getRootId()> -> _SOURCE_
<androidx.media.AudioAttributesCompat.Builder: androidx.media.AudioAttributesCompat build()> -> _SINK_
<androidx.media.AudioAttributesCompat.Builder: androidx.media.AudioAttributesCompat.Builder setContentType(int)> -> _SINK_
<androidx.media.AudioAttributesCompat.Builder: androidx.media.AudioAttributesCompat.Builder setFlags(int)> -> _SINK_
<androidx.media.AudioAttributesCompat.Builder: androidx.media.AudioAttributesCompat.Builder setLegacyStreamType(int)> -> _SINK_
<androidx.media.AudioAttributesCompat.Builder: androidx.media.AudioAttributesCompat.Builder setUsage(int)> -> _SINK_
<androidx.media.AudioManagerCompat: int abandonAudioFocusRequest(android.media.AudioManager,androidx.media.AudioFocusRequestCompat)> -> _SINK_
<androidx.media.AudioManagerCompat: int getStreamMaxVolume(android.media.AudioManager,int)> -> _SOURCE_
<androidx.media.AudioManagerCompat: int getStreamMinVolume(android.media.AudioManager,int)> -> _SOURCE_
<androidx.media.AudioManagerCompat: int requestAudioFocus(android.media.AudioManager,androidx.media.AudioFocusRequestCompat)> -> _SINK_
<android.media.session.MediaSessionManager: MediaSessionManager getSessionManager(android.content.Context)> -> _SOURCE_
<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager.RemoteUserInfo)> -> _SOURCE_
<android.content.AsyncTaskLoader: void setUpdateThrottle(long)> -> _SINK_
<androidx.media.VolumeProviderCompat: int getCurrentVolume()> -> _SOURCE_
<androidx.media.VolumeProviderCompat: int getMaxVolume()> -> _SINK_
<androidx.media.VolumeProviderCompat: int getVolumeControl()> -> _SINK_
<androidx.media.VolumeProviderCompat: java.lang.Object getVolumeProvider()> -> _SOURCE_
<androidx.media.VolumeProviderCompat: void onAdjustVolume(int)> -> _SINK_
<androidx.media.VolumeProviderCompat: void onSetVolumeTo(int)> -> _SINK_
<androidx.media.VolumeProviderCompat: void setCurrentVolume(int)> -> _SINK_
<androidx.media.MediaBrowserServiceCompat.Result: void detach()> -> _SINK_
<androidx.media.MediaBrowserServiceCompat.Result: void sendProgressUpdate(android.os.Bundle)> -> _SINK_
<androidx.media.MediaBrowserServiceCompat.Result: void sendResult(T)> -> _SOURCE_
<android.app.LoaderManager: void enableDebugLogging(boolean)> -> _SINK_
<android.app.LoaderManager: <T extends LifecycleOwner & ViewModelStoreOwner> LoaderManager getInstance(T)> -> _SOURCE_
<android.app.LoaderManager: <D> Loader<D> getLoader(int)> -> _SOURCE_
<android.app.LoaderManager: boolean hasRunningLoaders()> -> _SOURCE_
<androidx.media.app.NotificationCompat.MediaStyle: MediaSessionCompat.Token getMediaSession(android.app.Notification)> -> _SOURCE_
<androidx.media.app.NotificationCompat.MediaStyle: androidx.media.app.NotificationCompat.MediaStyle setCancelButtonIntent(android.app.PendingIntent)> -> _SINK_
<androidx.media.app.NotificationCompat.MediaStyle: androidx.media.app.NotificationCompat.MediaStyle setMediaSession(android.support.v4.media.session.MediaSessionCompat.Token)> -> _SINK_
<androidx.media2.common.CallbackMediaItem.Builder: androidx.media2.common.CallbackMediaItem.Builder setEndPosition(long)> -> _SINK_
<androidx.media2.common.CallbackMediaItem.Builder: androidx.media2.common.CallbackMediaItem.Builder setMetadata(android.media.MediaMetadata)> -> _SINK_
<androidx.media2.common.CallbackMediaItem.Builder: androidx.media2.common.CallbackMediaItem.Builder setStartPosition(long)> -> _SINK_
<androidx.media2.common.FileMediaItem.Builder: androidx.media2.common.FileMediaItem.Builder setEndPosition(long)> -> _SINK_
<androidx.media2.common.FileMediaItem.Builder: androidx.media2.common.FileMediaItem.Builder setFileDescriptorLength(long)> -> _SINK_
<androidx.media2.common.FileMediaItem.Builder: androidx.media2.common.FileMediaItem.Builder setFileDescriptorOffset(long)> -> _SINK_
<androidx.media2.common.FileMediaItem.Builder: androidx.media2.common.FileMediaItem.Builder setMetadata(android.media.MediaMetadata)> -> _SINK_
<androidx.media2.common.FileMediaItem.Builder: androidx.media2.common.FileMediaItem.Builder setStartPosition(long)> -> _SINK_
<androidx.media2.common.FileMediaItem: long getFileDescriptorLength()> -> _SOURCE_
<androidx.media2.common.FileMediaItem: long getFileDescriptorOffset()> -> _SOURCE_
<androidx.media2.common.FileMediaItem: android.os.ParcelFileDescriptor getParcelFileDescriptor()> -> _SOURCE_
<androidx.media2.common.SessionPlayer.PlayerResult: long getCompletionTime()> -> _SOURCE_
<androidx.media2.common.SessionPlayer.PlayerResult: androidx.media2.common.MediaItem getMediaItem()> -> _SOURCE_
<androidx.media2.common.SessionPlayer.PlayerResult: int getResultCode()> -> _SOURCE_
<android.media.Rating: boolean isRated()> -> _SOURCE_
<androidx.media2.common.CallbackMediaItem: androidx.media2.common.DataSourceCallback getDataSourceCallback()> -> _SOURCE_
<androidx.media2.common.UriMediaItem: android.net.Uri getUri()> -> _SOURCE_
<androidx.media2.common.UriMediaItem: List<HttpCookie> getUriCookies()> -> _SOURCE_
<androidx.media2.common.UriMediaItem: java.util.Map getUriHeaders()> -> _SOURCE_
<androidx.media2.common.MediaItem.Builder: androidx.media2.common.MediaItem.Builder setEndPosition(long)> -> _SINK_
<androidx.media2.common.MediaItem.Builder: androidx.media2.common.MediaItem.Builder setMetadata(android.media.MediaMetadata)> -> _SINK_
<androidx.media2.common.MediaItem.Builder: androidx.media2.common.MediaItem.Builder setStartPosition(long)> -> _SINK_
<androidx.media2.common.UriMediaItem.Builder: androidx.media2.common.UriMediaItem.Builder setEndPosition(long)> -> _SINK_
<androidx.media2.common.UriMediaItem.Builder: androidx.media2.common.UriMediaItem.Builder setMetadata(android.media.MediaMetadata)> -> _SINK_
<androidx.media2.common.UriMediaItem.Builder: androidx.media2.common.UriMediaItem.Builder setStartPosition(long)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> addPlaylistItem(int,androidx.media2.common.MediaItem)> -> _SINK_
<androidx.media2.common.SessionPlayer: AudioAttributesCompat getAudioAttributes()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: long getBufferedPosition()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: int getBufferingState()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: MediaItem getCurrentMediaItem()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: int getCurrentMediaItemIndex()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: long getCurrentPosition()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: long getDuration()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: int getNextMediaItemIndex()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: float getPlaybackSpeed()> -> _SINK_
<androidx.media2.common.SessionPlayer: int getPlayerState()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: MediaMetadata getPlaylistMetadata()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: int getPreviousMediaItemIndex()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: androidx.media2.common.SessionPlayer.TrackInfo getSelectedTrack(int)> -> _SOURCE_
<androidx.media2.common.SessionPlayer: int getShuffleMode()> -> _SINK_
<androidx.media2.common.SessionPlayer: List<SessionPlayer.TrackInfo> getTracks()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: androidx.media2.common.VideoSize getVideoSize()> -> _SOURCE_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> movePlaylistItem(int,int)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> replacePlaylistItem(int,androidx.media2.common.MediaItem)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> seekTo(long)> -> _SOURCE_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> selectTrack(androidx.media2.common.SessionPlayer.TrackInfo)> -> _SOURCE_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setAudioAttributes(androidx.media.AudioAttributesCompat)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setMediaItem(androidx.media2.common.MediaItem)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setPlaybackSpeed(float)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setPlaylist(List<MediaItem>,android.media.MediaMetadata)> -> _SOURCE_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setRepeatMode(int)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setShuffleMode(int)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> setSurface(android.view.Surface)> -> _SINK_
<androidx.media2.common.SessionPlayer: ListenableFuture<SessionPlayer.PlayerResult> updatePlaylistMetadata(android.media.MediaMetadata)> -> _SINK_
<android.media.PlaybackParams: java.lang.Integer getAudioFallbackMode()> -> _SINK_
<android.media.PlaybackParams: java.lang.Float getPitch()> -> _SOURCE_
<android.media.PlaybackParams: java.lang.Float getSpeed()> -> _SOURCE_
<androidx.media2.session.MediaBrowser.Builder: androidx.media2.session.MediaBrowser.Builder setConnectionHints(android.os.Bundle)> -> _SINK_
<androidx.media2.session.MediaBrowser.Builder: androidx.media2.session.MediaBrowser.Builder setControllerCallback(java.util.concurrent.Executor,androidx.media2.session.MediaBrowser.BrowserCallback)> -> _SINK_
<androidx.media2.session.MediaBrowser.Builder: androidx.media2.session.MediaBrowser.Builder setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat.Token)> -> _SINK_
<androidx.media2.session.MediaBrowser.Builder: androidx.media2.session.MediaBrowser.Builder setSessionToken(androidx.media2.session.SessionToken)> -> _SINK_
<androidx.media2.session.MediaController.Builder: androidx.media2.session.MediaController.Builder setConnectionHints(android.os.Bundle)> -> _SINK_
<androidx.media2.session.MediaController.Builder: androidx.media2.session.MediaController.Builder setControllerCallback(java.util.concurrent.Executor,androidx.media2.session.MediaController.ControllerCallback)> -> _SINK_
<androidx.media2.session.MediaController.Builder: androidx.media2.session.MediaController.Builder setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat.Token)> -> _SINK_
<androidx.media2.session.MediaController.Builder: androidx.media2.session.MediaController.Builder setSessionToken(androidx.media2.session.SessionToken)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata build()> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putBitmap(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putFloat(java.lang.String,float)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putLong(java.lang.String,long)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putRating(java.lang.String,android.media.Rating)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putString(java.lang.String,java.lang.String)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putText(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> addPlaylistItem(int,java.lang.String)> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> adjustVolume(int,int)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> fastForward()> -> _SINK_
<android.media.session.MediaController: androidx.media2.session.SessionCommandGroup getAllowedCommands()> -> _SOURCE_
<android.media.session.MediaController: long getBufferedPosition()> -> _SOURCE_
<android.media.session.MediaController: int getBufferingState()> -> _SOURCE_
<android.media.session.MediaController: androidx.media2.session.SessionToken getConnectedToken()> -> _SOURCE_
<android.media.session.MediaController: androidx.media2.common.MediaItem getCurrentMediaItem()> -> _SOURCE_
<android.media.session.MediaController: int getCurrentMediaItemIndex()> -> _SOURCE_
<android.media.session.MediaController: long getCurrentPosition()> -> _SOURCE_
<android.media.session.MediaController: long getDuration()> -> _SOURCE_
<android.media.session.MediaController: int getNextMediaItemIndex()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController.PlaybackInfo getPlaybackInfo()> -> _SOURCE_
<android.media.session.MediaController: float getPlaybackSpeed()> -> _SINK_
<android.media.session.MediaController: int getPlayerState()> -> _SOURCE_
<android.media.session.MediaController: List<MediaItem> getPlaylist()> -> _SOURCE_
<android.media.session.MediaController: android.media.MediaMetadata getPlaylistMetadata()> -> _SOURCE_
<android.media.session.MediaController: int getPreviousMediaItemIndex()> -> _SOURCE_
<android.media.session.MediaController: int getRepeatMode()> -> _SOURCE_
<android.media.session.MediaController: androidx.media2.common.SessionPlayer.TrackInfo getSelectedTrack(int)> -> _SOURCE_
<android.media.session.MediaController: int getShuffleMode()> -> _SOURCE_
<android.media.session.MediaController: List<SessionPlayer.TrackInfo> getTracks()> -> _SOURCE_
<android.media.session.MediaController: androidx.media2.common.VideoSize getVideoSize()> -> _SOURCE_
<android.media.session.MediaController: boolean isConnected()> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> movePlaylistItem(int,int)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> play()> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> prepare()> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> replacePlaylistItem(int,java.lang.String)> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> seekTo(long)> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> selectTrack(androidx.media2.common.SessionPlayer.TrackInfo)> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> sendCustomCommand(androidx.media2.session.SessionCommand,android.os.Bundle)> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> setMediaItem(java.lang.String)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setMediaUri(android.net.Uri,android.os.Bundle)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setPlaybackSpeed(float)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setPlaylist(List<String>,android.media.MediaMetadata)> -> _SOURCE_
<android.media.session.MediaController: ListenableFuture<SessionResult> setRating(java.lang.String,android.media.Rating)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setRepeatMode(int)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setShuffleMode(int)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setSurface(android.view.Surface)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> setVolumeTo(int,int)> -> _SINK_
<android.media.session.MediaController: ListenableFuture<SessionResult> updatePlaylistMetadata(android.media.MediaMetadata)> -> _SINK_
<androidx.media2.player.PlaybackParams.Builder: androidx.media2.player.PlaybackParams.Builder setAudioFallbackMode(int)> -> _SINK_
<androidx.media2.player.PlaybackParams.Builder: androidx.media2.player.PlaybackParams.Builder setPitch(float)> -> _SINK_
<androidx.media2.player.PlaybackParams.Builder: androidx.media2.player.PlaybackParams.Builder setSpeed(float)> -> _SINK_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder: androidx.media2.session.MediaLibraryService.MediaLibrarySession build()> -> _SINK_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder: androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder: androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder setId(java.lang.String)> -> _SINK_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder: androidx.media2.session.MediaLibraryService.MediaLibrarySession.Builder setSessionActivity(android.app.PendingIntent)> -> _SINK_
<androidx.media2.session.MediaController.ControllerCallback: void onSubtitleData(android.media.session.MediaController,androidx.media2.common.MediaItem,androidx.media2.common.SessionPlayer.TrackInfo,android.media.SubtitleData)> -> _SINK_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.MediaLibrarySessionCallback: androidx.media2.session.LibraryResult onGetChildren(androidx.media2.session.MediaLibraryService.MediaLibrarySession,androidx.media2.session.MediaSession.ControllerInfo,java.lang.String,int,int,androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.MediaLibrarySessionCallback: androidx.media2.session.LibraryResult onGetItem(androidx.media2.session.MediaLibraryService.MediaLibrarySession,androidx.media2.session.MediaSession.ControllerInfo,java.lang.String)> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.MediaLibrarySessionCallback: androidx.media2.session.LibraryResult onGetLibraryRoot(androidx.media2.session.MediaLibraryService.MediaLibrarySession,androidx.media2.session.MediaSession.ControllerInfo,androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.MediaLibrarySession.MediaLibrarySessionCallback: androidx.media2.session.LibraryResult onGetSearchResult(androidx.media2.session.MediaLibraryService.MediaLibrarySession,androidx.media2.session.MediaSession.ControllerInfo,java.lang.String,int,int,androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<android.media.browse.MediaBrowser: ListenableFuture<LibraryResult> getChildren(java.lang.String,int,int,androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<android.media.browse.MediaBrowser: ListenableFuture<LibraryResult> getItem(java.lang.String)> -> _SOURCE_
<android.media.browse.MediaBrowser: ListenableFuture<LibraryResult> getLibraryRoot(androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<android.media.browse.MediaBrowser: ListenableFuture<LibraryResult> getSearchResult(java.lang.String,int,int,androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.LibraryParams.Builder: androidx.media2.session.MediaLibraryService.LibraryParams build()> -> _SINK_
<androidx.media2.session.MediaLibraryService.LibraryParams.Builder: androidx.media2.session.MediaLibraryService.LibraryParams.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.media2.session.MediaLibraryService.LibraryParams.Builder: androidx.media2.session.MediaLibraryService.LibraryParams.Builder setOffline(boolean)> -> _SINK_
<androidx.media2.session.MediaLibraryService.LibraryParams.Builder: androidx.media2.session.MediaLibraryService.LibraryParams.Builder setRecent(boolean)> -> _SINK_
<androidx.media2.session.MediaLibraryService.LibraryParams.Builder: androidx.media2.session.MediaLibraryService.LibraryParams.Builder setSuggested(boolean)> -> _SINK_
<androidx.media2.common.DataSourceCallback: long getSize()> -> _SOURCE_
<androidx.media2.common.DataSourceCallback: int readAt(long,byte[],int,int)> -> _SOURCE_
<androidx.media2.session.LibraryResult: long getCompletionTime()> -> _SOURCE_
<androidx.media2.session.LibraryResult: androidx.media2.session.MediaLibraryService.LibraryParams getLibraryParams()> -> _SOURCE_
<androidx.media2.session.LibraryResult: List<MediaItem> getMediaItems()> -> _SOURCE_
<androidx.media2.session.LibraryResult: int getResultCode()> -> _SOURCE_
<androidx.media2.session.MediaBrowser.BrowserCallback: void onSearchResultChanged(android.media.browse.MediaBrowser,java.lang.String,int,androidx.media2.session.MediaLibraryService.LibraryParams)> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.LibraryParams: android.os.Bundle getExtras()> -> _SINK_
<androidx.media2.session.MediaLibraryService.LibraryParams: boolean isOffline()> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.LibraryParams: boolean isRecent()> -> _SOURCE_
<androidx.media2.session.MediaLibraryService.LibraryParams: boolean isSuggested()> -> _SOURCE_
<androidx.media2.session.MediaSession.Builder: android.media.session.MediaSession build()> -> _SINK_
<androidx.media2.session.MediaSession.Builder: androidx.media2.session.MediaSession.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.media2.session.MediaSession.Builder: androidx.media2.session.MediaSession.Builder setId(java.lang.String)> -> _SINK_
<androidx.media2.session.MediaSession.Builder: androidx.media2.session.MediaSession.Builder setSessionActivity(android.app.PendingIntent)> -> _SINK_
<androidx.media2.session.MediaSession.Builder: androidx.media2.session.MediaSession.Builder setSessionCallback(java.util.concurrent.Executor,androidx.media2.session.MediaSession.SessionCallback)> -> _SINK_
<androidx.media2.session.MediaSession.CommandButton: androidx.media2.session.SessionCommand getCommand()> -> _SOURCE_
<androidx.media2.session.MediaSession.CommandButton: java.lang.CharSequence getDisplayName()> -> _SOURCE_
<androidx.media2.session.MediaSession.CommandButton: int getIconResId()> -> _SOURCE_
<androidx.media2.session.MediaSession.CommandButton: boolean isEnabled()> -> _SOURCE_
<androidx.media2.session.MediaSessionService.MediaNotification: int getNotificationId()> -> _SOURCE_
<android.media.session.MediaSessionManager: MediaSessionManager getInstance(android.content.Context)> -> _SOURCE_
<android.media.session.MediaSessionManager: Set<SessionToken> getSessionServiceTokens()> -> _SOURCE_
<androidx.media2.session.RemoteSessionPlayer: Future<SessionPlayer.PlayerResult> adjustVolume(int)> -> _SINK_
<androidx.media2.session.RemoteSessionPlayer: int getMaxVolume()> -> _SINK_
<androidx.media2.session.RemoteSessionPlayer: int getVolume()> -> _SOURCE_
<androidx.media2.session.RemoteSessionPlayer: int getVolumeControlType()> -> _SOURCE_
<androidx.media2.session.RemoteSessionPlayer: Future<SessionPlayer.PlayerResult> setVolume(int)> -> _SINK_
<androidx.media2.session.MediaSession.CommandButton.Builder: androidx.media2.session.MediaSession.CommandButton.Builder setCommand(androidx.media2.session.SessionCommand)> -> _SINK_
<androidx.media2.session.MediaSession.CommandButton.Builder: androidx.media2.session.MediaSession.CommandButton.Builder setEnabled(boolean)> -> _SINK_
<androidx.media2.session.MediaSession.CommandButton.Builder: androidx.media2.session.MediaSession.CommandButton.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.media2.session.MediaSession.CommandButton.Builder: androidx.media2.session.MediaSession.CommandButton.Builder setIconResId(int)> -> _SINK_
<androidx.media2.session.MediaSession.SessionCallback: int onSetMediaUri(android.media.session.MediaSession,androidx.media2.session.MediaSession.ControllerInfo,android.net.Uri,android.os.Bundle)> -> _SINK_
<androidx.media2.session.SessionResult: long getCompletionTime()> -> _SOURCE_
<androidx.media2.session.SessionResult: android.os.Bundle getCustomCommandResult()> -> _SOURCE_
<androidx.media2.session.SessionResult: androidx.media2.common.MediaItem getMediaItem()> -> _SOURCE_
<androidx.media2.session.SessionResult: int getResultCode()> -> _SOURCE_
<android.media.MediaPlayer.TrackInfo: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.app.MediaRouteActionProvider: void enableDynamicGroup()> -> _SINK_
<android.app.MediaRouteActionProvider: androidx.mediarouter.app.MediaRouteDialogFactory getDialogFactory()> -> _SOURCE_
<android.app.MediaRouteActionProvider: android.app.MediaRouteButton getMediaRouteButton()> -> _SOURCE_
<android.app.MediaRouteActionProvider: androidx.mediarouter.media.MediaRouteSelector getRouteSelector()> -> _SOURCE_
<android.app.MediaRouteActionProvider: boolean isVisible()> -> _SOURCE_
<android.app.MediaRouteActionProvider: boolean onPerformDefaultAction()> -> _SINK_
<android.app.MediaRouteActionProvider: void setDialogFactory(androidx.mediarouter.app.MediaRouteDialogFactory)> -> _SINK_
<android.app.MediaRouteActionProvider: void setRouteSelector(androidx.mediarouter.media.MediaRouteSelector)> -> _SINK_
<androidx.mediarouter.media.MediaItemStatus.Builder: androidx.mediarouter.media.MediaItemStatus build()> -> _SOURCE_
<androidx.mediarouter.media.MediaItemStatus.Builder: androidx.mediarouter.media.MediaItemStatus.Builder setContentDuration(long)> -> _SINK_
<androidx.mediarouter.media.MediaItemStatus.Builder: androidx.mediarouter.media.MediaItemStatus.Builder setContentPosition(long)> -> _SINK_
<androidx.mediarouter.media.MediaItemStatus.Builder: androidx.mediarouter.media.MediaItemStatus.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.mediarouter.media.MediaItemStatus.Builder: androidx.mediarouter.media.MediaItemStatus.Builder setPlaybackState(int)> -> _SINK_
<androidx.mediarouter.media.MediaItemStatus.Builder: androidx.mediarouter.media.MediaItemStatus.Builder setTimestamp(long)> -> _SINK_
<androidx.mediarouter.app.MediaRouteDialogFactory: MediaRouteDialogFactory getDefault()> -> _SOURCE_
<androidx.media2.session.SessionCommandGroup.Builder: androidx.media2.session.SessionCommandGroup.Builder addAllPredefinedCommands(int)> -> _SINK_
<androidx.media2.session.SessionCommandGroup.Builder: androidx.media2.session.SessionCommandGroup.Builder addCommand(androidx.media2.session.SessionCommand)> -> _SINK_
<androidx.media2.session.SessionCommandGroup.Builder: androidx.media2.session.SessionCommandGroup build()> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider: Context getContext()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider: MediaRouteProviderDescriptor getDescriptor()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider: MediaRouteDiscoveryRequest getDiscoveryRequest()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider: Handler getHandler()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider: MediaRouteProvider.ProviderMetadata getMetadata()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider: void setDescriptor(androidx.mediarouter.media.MediaRouteProviderDescriptor)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider: void setDiscoveryRequest(androidx.mediarouter.media.MediaRouteDiscoveryRequest)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder addControlFilter(android.content.IntentFilter)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder addControlFilters(Collection<IntentFilter>)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor build()> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setCanDisconnect(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setConnecting(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setConnectionState(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setDescription(java.lang.String)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setDeviceType(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setEnabled(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setIconUri(android.net.Uri)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setId(java.lang.String)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setIsDynamicGroupRoute(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setName(java.lang.String)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setPlaybackStream(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setPlaybackType(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setPresentationDisplayId(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setSettingsActivity(android.content.IntentSender)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setVolume(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setVolumeHandling(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteDescriptor.Builder setVolumeMax(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.RouteController: void onSelect()> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.RouteController: void onSetVolume(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.RouteController: void onUnselect(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.RouteController: void onUpdateVolume(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor build()> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder setIsGroupable(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder setIsTransferable(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder: androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor.Builder setSelectionState(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor: androidx.mediarouter.media.MediaRouteDescriptor getRouteDescriptor()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor: int getSelectionState()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor: boolean isGroupable()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor: boolean isTransferable()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor: boolean isUnselectable()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController: java.lang.String getGroupableSelectionTitle()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController: java.lang.String getTransferableSectionTitle()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProvider.DynamicGroupRouteController: void notifyDynamicRoutesChanged(androidx.mediarouter.media.MediaRouteDescriptor,Collection<MediaRouteProvider.DynamicGroupRouteController.DynamicRouteDescriptor>)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProvider.Callback: void onDescriptorChanged(androidx.mediarouter.media.MediaRouteProvider,androidx.mediarouter.media.MediaRouteProviderDescriptor)> -> _SINK_
<androidx.mediarouter.media.MediaRouteSelector.Builder: androidx.mediarouter.media.MediaRouteSelector.Builder addControlCategories(Collection<String>)> -> _SINK_
<androidx.mediarouter.media.MediaRouteSelector.Builder: androidx.mediarouter.media.MediaRouteSelector.Builder addControlCategory(java.lang.String)> -> _SINK_
<androidx.mediarouter.media.MediaRouteSelector.Builder: androidx.mediarouter.media.MediaRouteSelector.Builder addSelector(androidx.mediarouter.media.MediaRouteSelector)> -> _SINK_
<androidx.mediarouter.media.MediaRouteSelector.Builder: androidx.mediarouter.media.MediaRouteSelector build()> -> _SINK_
<androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder: androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder addRoute(androidx.mediarouter.media.MediaRouteDescriptor)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder: androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder addRoutes(Collection<MediaRouteDescriptor>)> -> _SINK_
<androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder: androidx.mediarouter.media.MediaRouteProviderDescriptor build()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder: androidx.mediarouter.media.MediaRouteProviderDescriptor.Builder setSupportsDynamicGroupRoute(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouter.OnPrepareTransferListener: ListenableFuture<Void> onPrepareTransfer(android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteInfo)> -> _SINK_
<androidx.mediarouter.media.MediaRouterParams: int getDialogType()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouterParams: boolean isMediaTransferReceiverEnabled()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouterParams: boolean isOutputSwitcherEnabled()> -> _SOURCE_
<androidx.mediarouter.media.MediaRouterParams: boolean isTransferToLocalEnabled()> -> _SOURCE_
<androidx.mediarouter.app.MediaRouteDiscoveryFragment: android.media.MediaRouter getMediaRouter()> -> _SOURCE_
<androidx.mediarouter.app.MediaRouteDiscoveryFragment: androidx.mediarouter.media.MediaRouteSelector getRouteSelector()> -> _SOURCE_
<androidx.mediarouter.app.MediaRouteDiscoveryFragment: void setRouteSelector(androidx.mediarouter.media.MediaRouteSelector)> -> _SINK_
<android.media.MediaRouter.Callback: void onRouteSelected(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)> -> _SOURCE_
<android.media.MediaRouter.Callback: void onRouteUnselected(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)> -> _SOURCE_
<androidx.mediarouter.media.MediaSessionStatus.Builder: androidx.mediarouter.media.MediaSessionStatus.Builder setExtras(android.os.Bundle)> -> _SINK_
<androidx.mediarouter.media.MediaSessionStatus.Builder: androidx.mediarouter.media.MediaSessionStatus.Builder setSessionState(int)> -> _SINK_
<androidx.mediarouter.media.MediaSessionStatus.Builder: androidx.mediarouter.media.MediaSessionStatus.Builder setTimestamp(long)> -> _SINK_
<androidx.mediarouter.media.MediaRouterParams.Builder: androidx.mediarouter.media.MediaRouterParams build()> -> _SINK_
<androidx.mediarouter.media.MediaRouterParams.Builder: androidx.mediarouter.media.MediaRouterParams.Builder setDialogType(int)> -> _SINK_
<androidx.mediarouter.media.MediaRouterParams.Builder: androidx.mediarouter.media.MediaRouterParams.Builder setMediaTransferReceiverEnabled(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouterParams.Builder: androidx.mediarouter.media.MediaRouterParams.Builder setOutputSwitcherEnabled(boolean)> -> _SINK_
<androidx.mediarouter.media.MediaRouterParams.Builder: androidx.mediarouter.media.MediaRouterParams.Builder setTransferToLocalEnabled(boolean)> -> _SINK_
<androidx.mediarouter.media.RemotePlaybackClient: java.lang.String getSessionId()> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: void getSessionStatus(android.os.Bundle,androidx.mediarouter.media.RemotePlaybackClient.SessionActionCallback)> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: void getStatus(java.lang.String,android.os.Bundle,androidx.mediarouter.media.RemotePlaybackClient.ItemActionCallback)> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: boolean hasSession()> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: boolean isMessagingSupported()> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: boolean isQueuingSupported()> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: boolean isRemotePlaybackSupported()> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: boolean isSessionManagementSupported()> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: void play(android.net.Uri,java.lang.String,android.os.Bundle,long,android.os.Bundle,androidx.mediarouter.media.RemotePlaybackClient.ItemActionCallback)> -> _SOURCE_
<androidx.mediarouter.media.RemotePlaybackClient: void sendMessage(android.os.Bundle,androidx.mediarouter.media.RemotePlaybackClient.SessionActionCallback)> -> _SINK_
<androidx.mediarouter.media.RemotePlaybackClient: void setSessionId(java.lang.String)> -> _SINK_
<androidx.mediarouter.media.RemotePlaybackClient: void setStatusCallback(androidx.mediarouter.media.RemotePlaybackClient.StatusCallback)> -> _SINK_
<androidx.palette.graphics.Palette.Builder: androidx.palette.graphics.Palette.Builder addFilter(androidx.palette.graphics.Palette.Filter)> -> _SINK_
<androidx.palette.graphics.Palette.Builder: androidx.palette.graphics.Palette.Builder addTarget(androidx.palette.graphics.Target)> -> _SINK_
<androidx.palette.graphics.Palette.Builder: androidx.palette.graphics.Palette.Builder maximumColorCount(int)> -> _SINK_
<androidx.palette.graphics.Palette.Builder: androidx.palette.graphics.Palette.Builder resizeBitmapArea(int)> -> _SINK_
<androidx.palette.graphics.Palette.Builder: androidx.palette.graphics.Palette.Builder setRegion(int,int,int,int)> -> _SINK_
<androidx.palette.graphics.Palette: Palette from(List<Palette.Swatch>)> -> _SINK_
<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)> -> _SOURCE_
<androidx.palette.graphics.Palette: int getDarkMutedColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getDarkMutedSwatch()> -> _SOURCE_
<androidx.palette.graphics.Palette: int getDarkVibrantColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getDarkVibrantSwatch()> -> _SOURCE_
<androidx.palette.graphics.Palette: int getDominantColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getDominantSwatch()> -> _SOURCE_
<androidx.palette.graphics.Palette: int getLightMutedColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getLightMutedSwatch()> -> _SOURCE_
<androidx.palette.graphics.Palette: int getLightVibrantColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getLightVibrantSwatch()> -> _SOURCE_
<androidx.palette.graphics.Palette: int getMutedColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getMutedSwatch()> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getSwatchForTarget(androidx.palette.graphics.Target)> -> _SOURCE_
<androidx.palette.graphics.Palette: List<Palette.Swatch> getSwatches()> -> _SOURCE_
<androidx.palette.graphics.Palette: List<Target> getTargets()> -> _SOURCE_
<androidx.palette.graphics.Palette: int getVibrantColor(int)> -> _SOURCE_
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette.Swatch getVibrantSwatch()> -> _SOURCE_
<androidx.palette.graphics.Target: float getLightnessWeight()> -> _SOURCE_
<androidx.palette.graphics.Target: float getMaximumLightness()> -> _SOURCE_
<androidx.palette.graphics.Target: float getMaximumSaturation()> -> _SOURCE_
<androidx.palette.graphics.Target: float getMinimumLightness()> -> _SINK_
<androidx.palette.graphics.Target: float getMinimumSaturation()> -> _SOURCE_
<androidx.palette.graphics.Target: float getPopulationWeight()> -> _SOURCE_
<androidx.palette.graphics.Target: float getSaturationWeight()> -> _SOURCE_
<androidx.palette.graphics.Target: float getTargetLightness()> -> _SOURCE_
<androidx.palette.graphics.Target: float getTargetSaturation()> -> _SINK_
<androidx.palette.graphics.Target: boolean isExclusive()> -> _SOURCE_
<androidx.percentlayout.widget.PercentLayoutHelper: void fetchWidthAndHeight(android.view.ViewGroup.LayoutParams,android.content.res.TypedArray,int,int)> -> _SINK_
<androidx.percentlayout.widget.PercentLayoutHelper: PercentLayoutHelper.PercentLayoutInfo getPercentLayoutInfo(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<androidx.preference.DialogPreference.TargetFragment: <T extends Preference> T findPreference(java.lang.CharSequence)> -> _SOURCE_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target build()> -> _SOURCE_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setExclusive(boolean)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setLightnessWeight(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setMaximumLightness(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setMaximumSaturation(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setMinimumLightness(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setMinimumSaturation(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setPopulationWeight(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setSaturationWeight(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setTargetLightness(float)> -> _SINK_
<androidx.palette.graphics.Target.Builder: androidx.palette.graphics.Target.Builder setTargetSaturation(float)> -> _SINK_
<android.preference.EditTextPreference: java.lang.String getText()> -> _SOURCE_
<android.preference.EditTextPreference: void setOnBindEditTextListener(androidx.preference.EditTextPreference.OnBindEditTextListener)> -> _SINK_
<android.preference.EditTextPreference: void setText(java.lang.String)> -> _SINK_
<android.preference.EditTextPreference: boolean shouldDisableDependents()> -> _SOURCE_
<androidx.preference.DropDownPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)> -> _SINK_
<androidx.preference.DropDownPreference: void setEntries(CharSequence[])> -> _SINK_
<androidx.preference.DropDownPreference: void setValueIndex(int)> -> _SINK_
<android.preference.PreferenceCategory: void onBindViewHolder(androidx.preference.PreferenceViewHolder)> -> _SINK_
<android.preference.PreferenceCategory: boolean shouldDisableDependents()> -> _SOURCE_
<android.preference.CheckBoxPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)> -> _SINK_
<androidx.preference.PreferenceGroup.PreferencePositionCallback: int getPreferenceAdapterPosition(android.preference.Preference)> -> _SOURCE_
<androidx.preference.PreferenceGroup.PreferencePositionCallback: int getPreferenceAdapterPosition(java.lang.String)> -> _SOURCE_
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)> -> _SINK_
<android.preference.PreferenceGroup: <T extends Preference> T findPreference(java.lang.CharSequence)> -> _SOURCE_
<android.preference.PreferenceGroup: int getInitialExpandedChildrenCount()> -> _SOURCE_
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)> -> _SOURCE_
<android.preference.PreferenceGroup: int getPreferenceCount()> -> _SOURCE_
<android.preference.PreferenceGroup: boolean isOrderingAsAdded()> -> _SINK_
<android.preference.PreferenceGroup: void notifyDependencyChange(boolean)> -> _SINK_
<android.preference.PreferenceGroup: void removeAll()> -> _SINK_
<android.preference.PreferenceGroup: boolean removePreference(android.preference.Preference)> -> _SINK_
<android.preference.PreferenceGroup: void setInitialExpandedChildrenCount(int)> -> _SINK_
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)> -> _SINK_
<androidx.preference.PreferenceManager.SimplePreferenceComparisonCallback: boolean arePreferenceContentsTheSame(android.preference.Preference,android.preference.Preference)> -> _SOURCE_
<androidx.preference.PreferenceViewHolder: android.view.View findViewById(int)> -> _SOURCE_
<androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context)> -> _SOURCE_
<androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller.DiagnosticsCallback)> -> _SOURCE_
<androidx.preference.SeekBarPreference: int getMax()> -> _SINK_
<androidx.preference.SeekBarPreference: int getMin()> -> _SINK_
<androidx.preference.SeekBarPreference: int getSeekBarIncrement()> -> _SOURCE_
<androidx.preference.SeekBarPreference: boolean getShowSeekBarValue()> -> _SOURCE_
<androidx.preference.SeekBarPreference: int getValue()> -> _SOURCE_
<androidx.preference.SeekBarPreference: boolean isAdjustable()> -> _SOURCE_
<androidx.preference.SeekBarPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)> -> _SINK_
<androidx.preference.SeekBarPreference: void setAdjustable(boolean)> -> _SINK_
<androidx.preference.SeekBarPreference: void setMax(int)> -> _SINK_
<androidx.preference.SeekBarPreference: void setMin(int)> -> _SINK_
<androidx.preference.SeekBarPreference: void setSeekBarIncrement(int)> -> _SINK_
<androidx.preference.SeekBarPreference: void setShowSeekBarValue(boolean)> -> _SINK_
<androidx.preference.SeekBarPreference: void setValue(int)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setAutoDismiss(boolean)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setBackgroundImageUri(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setBadgeIcon(int)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setColor(int)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setContentImage(android.graphics.Bitmap)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setContentIntentData(int,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setContentTypes(String[])> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setDismissIntentData(int,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setGenres(String[])> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setGroup(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setIdTag(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setMaturityRating(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setPricingInformation(java.lang.String,java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setProgress(int,int)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setRunningTime(long)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setSortKey(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setSourceName(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setStatus(int)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setText(java.lang.String)> -> _SINK_
<androidx.recommendation.app.ContentRecommendation.Builder: androidx.recommendation.app.ContentRecommendation.Builder setTitle(java.lang.String)> -> _SINK_
<androidx.print.PrintHelper: int getColorMode()> -> _SOURCE_
<androidx.print.PrintHelper: int getOrientation()> -> _SOURCE_
<androidx.print.PrintHelper: int getScaleMode()> -> _SOURCE_
<androidx.print.PrintHelper: void printBitmap(java.lang.String,android.net.Uri,androidx.print.PrintHelper.OnPrintFinishCallback)> -> _SOURCE_
<androidx.print.PrintHelper: void printBitmap(java.lang.String,android.net.Uri)> -> _SOURCE_
<androidx.print.PrintHelper: void setColorMode(int)> -> _SINK_
<androidx.print.PrintHelper: void setOrientation(int)> -> _SINK_
<androidx.print.PrintHelper: void setScaleMode(int)> -> _SINK_
<androidx.print.PrintHelper: boolean systemSupportsPrint()> -> _SOURCE_
<android.preference.PreferenceDataStore: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.preference.PreferenceDataStore: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.preference.PreferenceDataStore: int getInt(java.lang.String,int)> -> _SOURCE_
<android.preference.PreferenceDataStore: long getLong(java.lang.String,long)> -> _SOURCE_
<android.preference.PreferenceDataStore: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.preference.PreferenceDataStore: Set<String> getStringSet(java.lang.String,Set<String>)> -> _SOURCE_
<android.preference.PreferenceDataStore: void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.preference.PreferenceDataStore: void putFloat(java.lang.String,float)> -> _SINK_
<android.preference.PreferenceDataStore: void putInt(java.lang.String,int)> -> _SINK_
<android.preference.PreferenceDataStore: void putLong(java.lang.String,long)> -> _SINK_
<android.preference.PreferenceDataStore: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.preference.PreferenceDataStore: void putStringSet(java.lang.String,Set<String>)> -> _SINK_
<androidx.recommendation.app.RecommendationExtender: String[] getContentTypes()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: String[] getGenres()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: java.lang.String getMaturityRating()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: java.lang.String getPricingType()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: java.lang.String getPricingValue()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: java.lang.String getPrimaryContentType()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: long getRunningTime()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: int getStatus()> -> _SOURCE_
<androidx.recommendation.app.RecommendationExtender: androidx.recommendation.app.RecommendationExtender setContentTypes(String[])> -> _SINK_
<androidx.recommendation.app.RecommendationExtender: androidx.recommendation.app.RecommendationExtender setGenres(String[])> -> _SINK_
<androidx.recommendation.app.RecommendationExtender: androidx.recommendation.app.RecommendationExtender setMaturityRating(java.lang.String)> -> _SINK_
<androidx.recommendation.app.RecommendationExtender: androidx.recommendation.app.RecommendationExtender setPricingInformation(java.lang.String,java.lang.String)> -> _SINK_
<androidx.recommendation.app.RecommendationExtender: androidx.recommendation.app.RecommendationExtender setRunningTime(long)> -> _SINK_
<androidx.recommendation.app.RecommendationExtender: androidx.recommendation.app.RecommendationExtender setStatus(int)> -> _SINK_
<android.preference.PreferenceScreen: void setShouldUseGeneratedIds(boolean)> -> _SINK_
<androidx.recyclerview.selection.SelectionTracker.Builder: Builder<K> withBandOverlay(int)> -> _SINK_
<androidx.recyclerview.selection.SelectionTracker.Builder: Builder<K> withBandPredicate(androidx.recyclerview.selection.BandPredicate)> -> _SINK_
<androidx.recyclerview.selection.SelectionTracker.Builder: Builder<K> withGestureTooltypes(int[])> -> _SOURCE_
<androidx.recyclerview.selection.SelectionTracker.Builder: Builder<K> withOperationMonitor(androidx.recyclerview.selection.OperationMonitor)> -> _SINK_
<androidx.recyclerview.widget.AsyncListUtil.DataCallback: void fillData(T[],int,int)> -> _SINK_
<androidx.recyclerview.widget.AsyncListUtil.DataCallback: int getMaxCachedTiles()> -> _SOURCE_
<androidx.recyclerview.widget.AsyncListUtil: T getItem(int)> -> _SOURCE_
<androidx.recyclerview.widget.AsyncListUtil: int getItemCount()> -> _SOURCE_
<androidx.recyclerview.widget.AsyncListUtil: void onRangeChanged()> -> _SINK_
<androidx.recyclerview.selection.SelectionTracker.SelectionPredicate: boolean canSelectMultiple()> -> _SINK_
<androidx.recyclerview.widget.GridLayoutManager.DefaultSpanSizeLookup: int getSpanIndex(int,int)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.DefaultSpanSizeLookup: int getSpanSize(int)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: int getSpanGroupIndex(int,int)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: int getSpanIndex(int,int)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: int getSpanSize(int)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: boolean isSpanGroupIndexCacheEnabled()> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: boolean isSpanIndexCacheEnabled()> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: void setSpanGroupIndexCacheEnabled(boolean)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup: void setSpanIndexCacheEnabled(boolean)> -> _SOURCE_
<androidx.recyclerview.widget.ItemTouchHelper.SimpleCallback: int getDragDirs(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SOURCE_
<androidx.recyclerview.widget.ItemTouchHelper.SimpleCallback: int getMovementFlags(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SOURCE_
<androidx.recyclerview.widget.ItemTouchHelper.SimpleCallback: int getSwipeDirs(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SOURCE_
<androidx.recyclerview.widget.ItemTouchHelper.SimpleCallback: void setDefaultSwipeDirs(int)> -> _SINK_
<androidx.recyclerview.widget.ItemTouchHelper: void getItemOffsets(android.graphics.Rect,android.view.View,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.LayoutParams: int getSpanIndex()> -> _SOURCE_
<androidx.recyclerview.widget.GridLayoutManager.LayoutParams: int getSpanSize()> -> _SOURCE_
<androidx.recyclerview.widget.LinearSmoothScroller: int calculateDtToFit(int,int,int,int,int)> -> _SOURCE_
<androidx.recyclerview.widget.LinearSmoothScroller: int calculateDxToMakeVisible(android.view.View,int)> -> _SOURCE_
<androidx.recyclerview.widget.LinearSmoothScroller: int calculateDyToMakeVisible(android.view.View,int)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: boolean checkLayoutParams(androidx.recyclerview.widget.RecyclerView.LayoutParams)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getColumnCountForAccessibility(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getRowCountForAccessibility(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int getSpanCount()> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup getSpanSizeLookup()> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void onLayoutChildren(androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int scrollHorizontallyBy(int,androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: int scrollVerticallyBy(int,androidx.recyclerview.widget.RecyclerView.Recycler,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void setMeasuredDimension(android.graphics.Rect,int,int)> -> _SOURCE_
<androidx.leanback.widget.GridLayoutManager: void setSpanCount(int)> -> _SINK_
<androidx.leanback.widget.GridLayoutManager: void setSpanSizeLookup(androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup)> -> _SINK_
<androidx.recyclerview.widget.PagerSnapHelper: int[] calculateDistanceToFinalSnap(androidx.recyclerview.widget.RecyclerView.LayoutManager,android.view.View)> -> _SINK_
<androidx.recyclerview.widget.PagerSnapHelper: android.view.View findSnapView(androidx.recyclerview.widget.RecyclerView.LayoutManager)> -> _SINK_
<androidx.recyclerview.widget.LinearSnapHelper: int[] calculateDistanceToFinalSnap(androidx.recyclerview.widget.RecyclerView.LayoutManager,android.view.View)> -> _SINK_
<androidx.recyclerview.widget.LinearSnapHelper: android.view.View findSnapView(androidx.recyclerview.widget.RecyclerView.LayoutManager)> -> _SINK_
<androidx.recyclerview.widget.AsyncListUtil.ViewCallback: void getItemRangeInto(int[])> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getDecoratedEnd(android.view.View)> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getDecoratedMeasurement(android.view.View)> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getDecoratedMeasurementInOther(android.view.View)> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getDecoratedStart(android.view.View)> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getEnd()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getEndAfterPadding()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getEndPadding()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.RecyclerView.LayoutManager getLayoutManager()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getMode()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getModeInOther()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getStartAfterPadding()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getTotalSpace()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getTotalSpaceChange()> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getTransformedEndWithDecoration(android.view.View)> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: int getTransformedStartWithDecoration(android.view.View)> -> _SOURCE_
<androidx.recyclerview.widget.OrientationHelper: void offsetChild(android.view.View,int)> -> _SINK_
<androidx.recyclerview.widget.ConcatAdapter: int findRelativeAdapterPositionIn(Adapter<?,androidx.recyclerview.widget.RecyclerView.ViewHolder,int)> -> _SOURCE_
<androidx.recyclerview.widget.ConcatAdapter: int getItemCount()> -> _SOURCE_
<androidx.recyclerview.widget.ConcatAdapter: long getItemId(int)> -> _SOURCE_
<androidx.recyclerview.widget.ConcatAdapter: void onAttachedToRecyclerView(androidx.recyclerview.widget.RecyclerView)> -> _SOURCE_
<androidx.recyclerview.widget.ConcatAdapter: void onBindViewHolder(androidx.recyclerview.widget.RecyclerView.ViewHolder,int)> -> _SOURCE_
<androidx.recyclerview.widget.ItemTouchHelper.Callback: int convertToAbsoluteDirection(int,int)> -> _SINK_
<androidx.recyclerview.widget.ItemTouchHelper.Callback: int getMovementFlags(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SOURCE_
<androidx.recyclerview.widget.ItemTouchHelper.Callback: float getSwipeEscapeVelocity(float)> -> _SINK_
<androidx.recyclerview.widget.ItemTouchHelper.Callback: float getSwipeThreshold(androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator.ItemHolderInfo: androidx.recyclerview.widget.RecyclerView.ItemAnimator.ItemHolderInfo setFrom(androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator.ItemHolderInfo: androidx.recyclerview.widget.RecyclerView.ItemAnimator.ItemHolderInfo setFrom(androidx.recyclerview.widget.RecyclerView.ViewHolder,int)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.Adapter: int findRelativeAdapterPositionIn(Adapter<?,androidx.recyclerview.widget.RecyclerView.ViewHolder,int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: int getItemCount()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: long getItemId(int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: RecyclerView.Adapter.StateRestorationPolicy getStateRestorationPolicy()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: boolean hasObservers()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: boolean hasStableIds()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: void notifyDataSetChanged()> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.Adapter: void onAttachedToRecyclerView(androidx.recyclerview.widget.RecyclerView)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: void onBindViewHolder(VH,int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: void onBindViewHolder(VH,int,List<Object>)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Adapter: void setStateRestorationPolicy(androidx.recyclerview.widget.RecyclerView.Adapter.StateRestorationPolicy)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.LayoutManager.LayoutPrefetchRegistry: void addPosition(int,int)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void getItemOffsets(android.graphics.Rect,android.view.View,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView.State)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void getItemOffsets(android.graphics.Rect,int,androidx.recyclerview.widget.RecyclerView)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: long getAddDuration()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: long getChangeDuration()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: long getMoveDuration()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: androidx.recyclerview.widget.RecyclerView.ItemAnimator.ItemHolderInfo obtainHolderInfo()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: void setAddDuration(long)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: void setChangeDuration(long)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.ItemAnimator: void setMoveDuration(long)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getAbsoluteAdapterPosition()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getBindingAdapterPosition()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getViewAdapterPosition()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getViewLayoutPosition()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getViewPosition()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.LayoutParams: boolean viewNeedsUpdate()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ChildDrawingOrderCallback: int onGetChildDrawingOrder(int,int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Recycler: int convertPreLayoutPositionToPostLayout(int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Recycler: List<RecyclerView.ViewHolder> getScrapList()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.Recycler: void setViewCacheSize(int)> -> _SINK_
<androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate.ItemDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate.ItemDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate.ItemDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate: androidx.core.view.AccessibilityDelegateCompat getItemDelegate()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _SINK_
<android.widget.ListAdapter: int getItemCount()> -> _SOURCE_
<androidx.recyclerview.widget.SnapHelper: int[] calculateDistanceToFinalSnap(androidx.recyclerview.widget.RecyclerView.LayoutManager,android.view.View)> -> _SINK_
<androidx.recyclerview.widget.SnapHelper: int[] calculateScrollDistance(int,int)> -> _SOURCE_
<androidx.recyclerview.widget.SnapHelper: View findSnapView(androidx.recyclerview.widget.RecyclerView.LayoutManager)> -> _SINK_
<androidx.recyclerview.widget.SortedList: T get(int)> -> _SOURCE_
<androidx.recyclerview.widget.SortedList: int indexOf(T)> -> _SOURCE_
<androidx.recyclerview.widget.SortedList: int size()> -> _SOURCE_
<androidx.recyclerview.widget.StaggeredGridLayoutManager.LayoutParams: int getSpanIndex()> -> _SOURCE_
<androidx.recyclerview.widget.StaggeredGridLayoutManager.LayoutParams: boolean isFullSpan()> -> _SOURCE_
<androidx.recyclerview.widget.StaggeredGridLayoutManager.LayoutParams: void setFullSpan(boolean)> -> _SINK_
<androidx.remotecallback.ExternalInput: java.lang.String value()> -> _SOURCE_
<androidx.resourceinspection.annotation.Attribute: java.lang.String value()> -> _SOURCE_
<androidx.resourceinspection.annotation.Attribute.IntMap: int mask()> -> _SINK_
<androidx.resourceinspection.annotation.Attribute.IntMap: java.lang.String name()> -> _SOURCE_
<androidx.resourceinspection.annotation.Attribute.IntMap: int value()> -> _SINK_
<androidx.remotecallback.RemoteCallback: android.os.Bundle getArgumentBundle()> -> _SOURCE_
<androidx.remotecallback.RemoteCallback: java.lang.String getMethodName()> -> _SOURCE_
<androidx.remotecallback.RemoteCallback: java.lang.String getReceiverClass()> -> _SOURCE_
<androidx.remotecallback.RemoteCallback: int getType()> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.SmoothScroller.ScrollVectorProvider: PointF computeScrollVectorForPosition(int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.ViewCacheExtension: View getViewForPositionAndType(androidx.recyclerview.widget.RecyclerView.Recycler,int,int)> -> _SOURCE_
<android.arch.persistence.room.DatabaseConfiguration: boolean isMigrationRequired(int,int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.RecycledViewPool: androidx.recyclerview.widget.RecyclerView.ViewHolder getRecycledView(int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.RecycledViewPool: int getRecycledViewCount(int)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView.RecycledViewPool: void putRecycledView(androidx.recyclerview.widget.RecyclerView.ViewHolder)> -> _SINK_
<androidx.recyclerview.widget.RecyclerView.RecycledViewPool: void setMaxRecycledViews(int,int)> -> _SINK_
<android.arch.persistence.room.InvalidationTracker: void refreshVersionsAsync()> -> _SINK_
<android.arch.persistence.room.RoomDatabase.MigrationContainer: void addMigrations(List<Migration>)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.MigrationContainer: void addMigrations(Migration[])> -> _SINK_
<android.arch.persistence.room.RoomDatabase.MigrationContainer: List<Migration> findMigrationPath(int,int)> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase.MigrationContainer: java.util.Map> getMigrations()> -> _SOURCE_
<android.arch.persistence.room.RoomDatabase.Builder: Builder addAutoMigrationSpec(androidx.room.migration.AutoMigrationSpec)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder addMigrations(Migration[])> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: T build()> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder createFromAsset(java.lang.String,androidx.room.RoomDatabase.PrepackagedDatabaseCallback)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder createFromAsset(java.lang.String)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder createFromFile(java.io.File)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder createFromFile(java.io.File,androidx.room.RoomDatabase.PrepackagedDatabaseCallback)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder createFromInputStream(Callable<InputStream>,androidx.room.RoomDatabase.PrepackagedDatabaseCallback)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder createFromInputStream(Callable<InputStream>)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder enableMultiInstanceInvalidation()> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder fallbackToDestructiveMigrationFrom(int[])> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder openHelperFactory(android.arch.persistence.db.SupportSQLiteOpenHelper.Factory)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder setJournalMode(android.arch.persistence.room.RoomDatabase.JournalMode)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder setMultiInstanceInvalidationServiceIntent(android.content.Intent)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder setQueryCallback(androidx.room.RoomDatabase.QueryCallback,java.util.concurrent.Executor)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder setQueryExecutor(java.util.concurrent.Executor)> -> _SINK_
<android.arch.persistence.room.RoomDatabase.Builder: Builder setTransactionExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()> -> _SOURCE_
<androidx.savedstate.SavedStateRegistryController: void performAttach()> -> _SINK_
<androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> -> _SOURCE_
<androidx.security.app.authenticator.AppAuthenticator: int checkAppIdentity(java.lang.String)> -> _SOURCE_
<androidx.security.app.authenticator.AppAuthenticator: int checkCallingAppIdentity(java.lang.String,java.lang.String,int,int)> -> _SOURCE_
<androidx.security.app.authenticator.AppAuthenticator: int checkCallingAppIdentity(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.security.app.authenticator.AppAuthenticator: void enforceCallingAppIdentity(java.lang.String,java.lang.String)> -> _SINK_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: androidx.security.app.authenticator.AppAuthenticator build()> -> _SINK_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: TestAppAuthenticatorBuilder createFromInputStream(android.content.Context,java.io.InputStream)> -> _SOURCE_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: TestAppAuthenticatorBuilder createFromResource(android.content.Context,int)> -> _SOURCE_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: androidx.security.app.authenticator.TestAppAuthenticatorBuilder setPackageNotInstalled(java.lang.String)> -> _SOURCE_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: androidx.security.app.authenticator.TestAppAuthenticatorBuilder setSignatureAcceptedForPackage(java.lang.String)> -> _SINK_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: androidx.security.app.authenticator.TestAppAuthenticatorBuilder setSigningIdentityForPackage(java.lang.String,java.lang.String)> -> _SINK_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: androidx.security.app.authenticator.TestAppAuthenticatorBuilder setTestPolicy(int)> -> _SINK_
<androidx.security.app.authenticator.TestAppAuthenticatorBuilder: androidx.security.app.authenticator.TestAppAuthenticatorBuilder setUidForPackage(java.lang.String,int)> -> _SINK_
<androidx.savedstate.SavedStateRegistryOwner: SavedStateRegistry getSavedStateRegistry()> -> _SOURCE_
<android.arch.persistence.room.testing.MigrationTestHelper: android.arch.persistence.db.SupportSQLiteDatabase createDatabase(java.lang.String,int)> -> _SOURCE_
<android.arch.persistence.room.testing.MigrationTestHelper: android.arch.persistence.db.SupportSQLiteDatabase runMigrationsAndValidate(java.lang.String,int,boolean,Migration[])> -> _SINK_
<androidx.security.crypto.MasterKey.Builder: androidx.security.crypto.MasterKey.Builder setKeyScheme(androidx.security.crypto.MasterKey.KeyScheme)> -> _SINK_
<androidx.security.crypto.MasterKey.Builder: androidx.security.crypto.MasterKey.Builder setRequestStrongBoxBacked(boolean)> -> _SINK_
<androidx.security.crypto.MasterKey.Builder: androidx.security.crypto.MasterKey.Builder setUserAuthenticationRequired(boolean,int)> -> _SINK_
<androidx.security.crypto.MasterKeys: String getOrCreate(android.security.keystore.KeyGenParameterSpec)> -> _SOURCE_
<androidx.security.crypto.EncryptedFile: java.io.FileOutputStream openFileOutput()> -> _SINK_
<androidx.security.identity.IdentityCredentialStoreCapabilities: int getFeatureVersion()> -> _SOURCE_
<androidx.security.identity.IdentityCredentialStoreCapabilities: Set<String> getSupportedDocTypes()> -> _SOURCE_
<androidx.security.identity.IdentityCredentialStoreCapabilities: boolean isDeleteSupported()> -> _SOURCE_
<androidx.security.identity.IdentityCredentialStoreCapabilities: boolean isDirectAccess()> -> _SOURCE_
<androidx.security.identity.IdentityCredentialStoreCapabilities: boolean isHardwareBacked()> -> _SOURCE_
<androidx.security.identity.IdentityCredentialStoreCapabilities: boolean isProveOwnershipSupported()> -> _SOURCE_
<androidx.security.identity.IdentityCredentialStoreCapabilities: boolean isStaticAuthenticationDataExpirationSupported()> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: IdentityCredential getCredentialByName(java.lang.String,int)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: IdentityCredentialStore getDirectAccessInstance(android.content.Context)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: IdentityCredentialStore getInstance(android.content.Context)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: IdentityCredentialStore getSoftwareInstance(android.content.Context)> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: String[] getSupportedDocTypes()> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: boolean isDirectAccessSupported(android.content.Context)> -> _SOURCE_
<android.security.identity.AccessControlProfileId: int getId()> -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] decryptMessageFromReader(byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] encryptMessageToReader(byte[])> -> _SINK_
<android.security.identity.IdentityCredential: Collection<X509Certificate> getAuthKeysNeedingCertification()> -> _SOURCE_
<android.security.identity.IdentityCredential: int[] getAuthenticationDataUsageCount()> -> _SOURCE_
<android.security.identity.IdentityCredential: Collection<X509Certificate> getCredentialKeyCertificateChain()> -> _SOURCE_
<android.security.identity.IdentityCredential: BiometricPrompt.CryptoObject getCryptoObject()> -> _SOURCE_
<android.security.identity.IdentityCredential: ResultData getEntries(byte[],java.util.Map -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] proveOwnership(byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: void setAllowUsingExhaustedKeys(boolean)> -> _SINK_
<android.security.identity.IdentityCredential: void setAllowUsingExpiredKeys(boolean)> -> _SINK_
<android.security.identity.IdentityCredential: void setReaderEphemeralPublicKey(java.security.PublicKey)> -> _SINK_
<android.security.identity.IdentityCredential: void setSessionTranscript(byte[])> -> _SINK_
<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,android.icu.util.Calendar,byte[])> -> _SOURCE_
<android.security.identity.IdentityCredential: byte[] update(android.security.identity.PersonalizationData)> -> _SINK_
<android.security.identity.PersonalizationData.Builder: android.security.identity.PersonalizationData.Builder addAccessControlProfile(android.security.identity.AccessControlProfile)> -> _SINK_
<android.app.slice.SliceManager: int checkSlicePermission(android.net.Uri,int,int)> -> _SOURCE_
<android.app.slice.SliceManager: List<Uri> getPinnedSlices()> -> _SOURCE_
<android.app.slice.SliceManager: void grantSlicePermission(java.lang.String,android.net.Uri)> -> _SINK_
<android.app.slice.SliceManager: void revokeSlicePermission(java.lang.String,android.net.Uri)> -> _SINK_
<android.security.identity.WritableIdentityCredential: Collection<X509Certificate> getCredentialKeyCertificateChain(byte[])> -> _SOURCE_
<android.security.identity.WritableIdentityCredential: byte[] personalize(android.security.identity.PersonalizationData)> -> _SINK_
<android.security.identity.ResultData: byte[] getAuthenticatedData()> -> _SOURCE_
<android.security.identity.ResultData: byte[] getEcdsaSignature()> -> _SOURCE_
<android.security.identity.ResultData: byte[] getEntry(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: boolean getEntryBoolean(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: byte[] getEntryBytestring(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: android.icu.util.Calendar getEntryCalendar(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: long getEntryInteger(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: Collection<String> getEntryNames(java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: java.lang.String getEntryString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: byte[] getMessageAuthenticationCode()> -> _SOURCE_
<android.security.identity.ResultData: Collection<String> getNamespaces()> -> _SOURCE_
<android.security.identity.ResultData: Collection<String> getRetrievedEntryNames(java.lang.String)> -> _SOURCE_
<android.security.identity.ResultData: byte[] getStaticAuthenticationData()> -> _SOURCE_
<android.security.identity.ResultData: int getStatus(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.slice.SliceConvert: Slice wrap(android.app.slice.Slice,android.content.Context)> -> _SOURCE_
<androidx.slice.SliceUtils.SerializeOptions: androidx.slice.SliceUtils.SerializeOptions setImageConversionFormat(android.graphics.Bitmap.CompressFormat,int)> -> _SINK_
<androidx.slice.SliceUtils.SerializeOptions: androidx.slice.SliceUtils.SerializeOptions setMaxImageHeight(int)> -> _SINK_
<androidx.slice.SliceUtils.SerializeOptions: androidx.slice.SliceUtils.SerializeOptions setMaxImageWidth(int)> -> _SINK_
<androidx.slice.SliceUtils: Slice parseSlice(android.content.Context,java.io.InputStream,java.lang.String,androidx.slice.SliceUtils.SliceActionListener)> -> _SOURCE_
<androidx.slice.builders.GridRowBuilder: androidx.slice.builders.GridRowBuilder addCell(androidx.slice.builders.GridRowBuilder.CellBuilder)> -> _SINK_
<androidx.slice.builders.GridRowBuilder: androidx.slice.builders.GridRowBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.GridRowBuilder: androidx.slice.builders.GridRowBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.builders.GridRowBuilder: androidx.slice.builders.GridRowBuilder setPrimaryAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.GridRowBuilder: androidx.slice.builders.GridRowBuilder setSeeMoreCell(androidx.slice.builders.GridRowBuilder.CellBuilder)> -> _SINK_
<android.security.identity.AccessControlProfile.Builder: android.security.identity.AccessControlProfile.Builder setReaderCertificate(java.security.cert.X509Certificate)> -> _SINK_
<android.security.identity.AccessControlProfile.Builder: android.security.identity.AccessControlProfile.Builder setUserAuthenticationRequired(boolean)> -> _SINK_
<android.security.identity.AccessControlProfile.Builder: android.security.identity.AccessControlProfile.Builder setUserAuthenticationTimeout(long)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder addInputRange(androidx.slice.builders.ListBuilder.InputRangeBuilder)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder addRange(androidx.slice.builders.ListBuilder.RangeBuilder)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder addRating(androidx.slice.builders.ListBuilder.RatingBuilder)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder addRow(androidx.slice.builders.ListBuilder.RowBuilder)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder addSelection(androidx.slice.builders.SelectionBuilder)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder setAccentColor(int)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder setHeader(androidx.slice.builders.ListBuilder.HeaderBuilder)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder setHostExtras(android.os.PersistableBundle)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder setKeywords(Set<String>)> -> _SINK_
<androidx.slice.builders.ListBuilder: androidx.slice.builders.ListBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.SliceViewManager: Collection<Uri> getSliceDescendants(android.net.Uri)> -> _SOURCE_
<androidx.slice.SliceViewManager: Uri mapIntentToUri(android.content.Intent)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder addEndItem(long)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder addEndItem(androidx.core.graphics.drawable.IconCompat,int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder addEndItem(androidx.core.graphics.drawable.IconCompat,int,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setSubtitle(java.lang.CharSequence,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitle(java.lang.CharSequence,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitleItem(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitleItem(long)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RowBuilder: androidx.slice.builders.ListBuilder.RowBuilder setTitleItem(androidx.slice.builders.SliceAction,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder addEndItem(androidx.slice.builders.SliceAction,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder addEndItem(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setInputAction(android.app.PendingIntent)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setInputAction(androidx.remotecallback.RemoteCallback)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setMax(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setMin(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setPrimaryAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setThumb(androidx.core.graphics.drawable.IconCompat)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int)> -> _SINK_
<androidx.slice.builders.ListBuilder.InputRangeBuilder: androidx.slice.builders.ListBuilder.InputRangeBuilder setValue(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setMax(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setMode(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setPrimaryAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RangeBuilder: androidx.slice.builders.ListBuilder.RangeBuilder setValue(int)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder addOption(java.lang.String,java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setInputAction(androidx.remotecallback.RemoteCallback)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setInputAction(android.app.PendingIntent)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setPrimaryAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setSelectedOption(java.lang.String)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.SelectionBuilder: androidx.slice.builders.SelectionBuilder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.GridRowBuilder.CellBuilder: androidx.slice.builders.GridRowBuilder.CellBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.GridRowBuilder.CellBuilder: androidx.slice.builders.GridRowBuilder.CellBuilder setSliceAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.widget.RowStyleFactory: int getRowStyleRes(android.app.slice.SliceItem)> -> _SOURCE_
<android.arch.persistence.db.SimpleSQLiteQuery: void bind(android.arch.persistence.db.SupportSQLiteProgram,Object[])> -> _SINK_
<android.arch.persistence.db.SimpleSQLiteQuery: int getArgCount()> -> _SOURCE_
<android.arch.persistence.db.SimpleSQLiteQuery: java.lang.String getSql()> -> _SOURCE_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setLayoutDirection(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setPrimaryAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setSubtitle(java.lang.CharSequence,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setSummary(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setSummary(java.lang.CharSequence,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.HeaderBuilder: androidx.slice.builders.ListBuilder.HeaderBuilder setTitle(java.lang.CharSequence,boolean)> -> _SINK_
<androidx.slice.widget.SliceLiveData: SliceLiveData.CachedSliceLiveData fromCachedSlice(android.content.Context,java.io.InputStream,androidx.slice.widget.SliceLiveData.OnErrorListener)> -> _SOURCE_
<androidx.slice.widget.SliceLiveData: LiveData<Slice> fromIntent(android.content.Context,android.content.Intent,androidx.slice.widget.SliceLiveData.OnErrorListener)> -> _SINK_
<androidx.slice.widget.SliceLiveData: LiveData<Slice> fromIntent(android.content.Context,android.content.Intent)> -> _SINK_
<androidx.slice.widget.SliceLiveData: LiveData<Slice> fromUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<androidx.slice.widget.SliceLiveData: LiveData<Slice> fromUri(android.content.Context,android.net.Uri,androidx.slice.widget.SliceLiveData.OnErrorListener)> -> _SOURCE_
<androidx.test.core.os.Parcelables: <T extends Parcelable> T forceParcel(T,Creator)> -> _SINK_
<androidx.test.core.content.pm.PackageInfoBuilder: android.content.pm.PackageInfo build()> -> _SOURCE_
<androidx.test.core.content.pm.PackageInfoBuilder: PackageInfoBuilder newBuilder()> -> _SINK_
<androidx.test.core.content.pm.PackageInfoBuilder: androidx.test.core.content.pm.PackageInfoBuilder setApplicationInfo(android.content.pm.ApplicationInfo)> -> _SINK_
<androidx.test.core.content.pm.PackageInfoBuilder: androidx.test.core.content.pm.PackageInfoBuilder setPackageName(java.lang.String)> -> _SINK_
<androidx.slice.widget.SliceLiveData.CachedSliceLiveData: void parseStream()> -> _SOURCE_
<androidx.test.core.view.MotionEventBuilder: android.view.MotionEvent build()> -> _SOURCE_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setAction(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setActionIndex(int)> -> _SOURCE_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setButtonState(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setDeviceId(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setDownTime(long)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setEdgeFlags(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setEventTime(long)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setFlags(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setMetaState(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setSource(int)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setXPrecision(float)> -> _SINK_
<androidx.test.core.view.MotionEventBuilder: androidx.test.core.view.MotionEventBuilder setYPrecision(float)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: SupportSQLiteQueryBuilder builder(java.lang.String)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQueryBuilder columns(String[])> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQuery create()> -> _SINK_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQueryBuilder groupBy(java.lang.String)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQueryBuilder: android.arch.persistence.db.SupportSQLiteQueryBuilder selection(java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteOpenHelper: String getDatabaseName()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: SupportSQLiteDatabase getReadableDatabase()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: SupportSQLiteDatabase getWritableDatabase()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<androidx.test.espresso.DataInteraction: androidx.test.espresso.DataInteraction atPosition(java.lang.Integer)> -> _SOURCE_
<androidx.test.espresso.DataInteraction: androidx.test.espresso.DataInteraction inAdapterView(Matcher<View>)> -> _SINK_
<androidx.test.espresso.DataInteraction: androidx.test.espresso.DataInteraction inRoot(Matcher<Root>)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteOpenHelper.Factory: SupportSQLiteOpenHelper create(android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration)> -> _SINK_
<android.arch.persistence.db.framework.FrameworkSQLiteOpenHelperFactory: android.arch.persistence.db.SupportSQLiteOpenHelper create(android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteStatement: long executeInsert()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteStatement: String simpleQueryForString()> -> _SOURCE_
<androidx.savedstate.ViewTreeSavedStateRegistryOwner: SavedStateRegistryOwner get(android.view.View)> -> _SOURCE_
<androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)> -> _SINK_
<androidx.test.espresso.NoMatchingViewException: java.lang.String getViewMatcherDescription()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQuery: int getArgCount()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteQuery: String getSql()> -> _SOURCE_
<androidx.test.espresso.ViewAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.ViewAction: String getDescription()> -> _SOURCE_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setContentDescription(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setInputAction(androidx.remotecallback.RemoteCallback)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setInputAction(android.app.PendingIntent)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setMax(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setMin(int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setPrimaryAction(androidx.slice.builders.SliceAction)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setSubtitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setTitle(java.lang.CharSequence)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int,boolean)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setTitleItem(androidx.core.graphics.drawable.IconCompat,int)> -> _SINK_
<androidx.slice.builders.ListBuilder.RatingBuilder: androidx.slice.builders.ListBuilder.RatingBuilder setValue(float)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void beginTransaction()> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: SupportSQLiteStatement compileStatement(java.lang.String)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: default void execPerConnectionSQL(java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: List<Pair<String, String>> getAttachedDbs()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: long getPageSize()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: String getPath()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: int getVersion()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean inTransaction()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: long insert(java.lang.String,int,android.content.ContentValues)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isDbLockedByCurrentThread()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: default boolean isExecPerConnectionSQLSupported()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isOpen()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isReadOnly()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean needUpgrade(int)> -> _SOURCE_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(java.lang.String)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(android.arch.persistence.db.SupportSQLiteQuery,android.os.CancellationSignal)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: Cursor query(android.arch.persistence.db.SupportSQLiteQuery)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setPageSize(long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setTransactionSuccessful()> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: void setVersion(int)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: int update(java.lang.String,int,android.content.ContentValues,java.lang.String,Object[])> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely(long)> -> _SINK_
<android.arch.persistence.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely()> -> _SINK_
<androidx.test.core.app.ApplicationProvider: <T extends Context> T getApplicationContext()> -> _SOURCE_
<androidx.test.core.content.pm.ApplicationInfoBuilder: android.content.pm.ApplicationInfo build()> -> _SOURCE_
<androidx.test.core.content.pm.ApplicationInfoBuilder: androidx.test.core.content.pm.ApplicationInfoBuilder setName(java.lang.String)> -> _SINK_
<androidx.test.core.content.pm.ApplicationInfoBuilder: androidx.test.core.content.pm.ApplicationInfoBuilder setPackageName(java.lang.String)> -> _SINK_
<androidx.test.espresso.Espresso: List<IdlingResource> getIdlingResources()> -> _SOURCE_
<androidx.test.espresso.Espresso: void setFailureHandler(androidx.test.espresso.FailureHandler)> -> _SINK_
<androidx.test.espresso.action.AdapterViewProtocol: Iterable<AdapterViewProtocol.AdaptedData> getDataInAdapterView(AdapterView<?)> -> _SOURCE_
<androidx.test.espresso.action.AdapterViewProtocol: EspressoOptional<AdapterViewProtocol.AdaptedData> getDataRenderedByView(AdapterView<?,android.view.View)> -> _SOURCE_
<androidx.test.espresso.action.AdapterViewProtocol: boolean isDataRenderedWithinAdapterView(AdapterView<?,androidx.test.espresso.action.AdapterViewProtocol.AdaptedData)> -> _SOURCE_
<androidx.test.espresso.action.CloseKeyboardAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.CloseKeyboardAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.EditorAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.EditorAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.PrecisionDescriber: float[] describePrecision()> -> _SINK_
<androidx.test.espresso.action.GeneralSwipeAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.GeneralSwipeAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.RepeatActionUntilViewState: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.RepeatActionUntilViewState: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.PressBackAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.PressBackAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.ReplaceTextAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.ReplaceTextAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.ScrollToAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.ScrollToAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.GeneralClickAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.GeneralClickAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.CoordinatesProvider: float[] calculateCoordinates(android.view.View)> -> _SOURCE_
<androidx.test.espresso.action.KeyEventAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.KeyEventAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.action.Tapper: Tapper.Status sendTap(androidx.test.espresso.UiController,float[],float[],int,int)> -> _SINK_
<androidx.test.espresso.action.TypeTextAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.TypeTextAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.assertion.PositionAssertions: ViewAssertion isBelow(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.assertion.PositionAssertions: ViewAssertion isLeftOf(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.assertion.PositionAssertions: ViewAssertion isRightOf(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.assertion.PositionAssertions: ViewAssertion isTopAlignedWith(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.action.OpenLinkAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.action.OpenLinkAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.contrib.RecyclerViewActions: <VH extends RecyclerView.ViewHolder> RecyclerViewActions.PositionableRecyclerViewAction scrollTo(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.contrib.RecyclerViewActions: <VH extends RecyclerView.ViewHolder> ViewAction scrollToPosition(int)> -> _SOURCE_
<androidx.test.espresso.contrib.NavigationViewActions: ViewAction navigateTo(int)> -> _SOURCE_
<androidx.test.espresso.idling.CountingIdlingResource: void dumpStateToLogs()> -> _SOURCE_
<androidx.test.espresso.idling.CountingIdlingResource: java.lang.String getName()> -> _SOURCE_
<androidx.test.espresso.idling.CountingIdlingResource: void increment()> -> _SINK_
<androidx.test.espresso.idling.CountingIdlingResource: boolean isIdleNow()> -> _SOURCE_
<androidx.compose.ui.test.IdlingResource: String getName()> -> _SOURCE_
<androidx.compose.ui.test.IdlingResource: boolean isIdleNow()> -> _SOURCE_
<androidx.test.espresso.base.IdlingUiController: IdlingResourceRegistry getIdlingResourceRegistry()> -> _SOURCE_
<androidx.test.espresso.contrib.ViewPagerActions: ViewAction scrollLeft()> -> _SINK_
<androidx.test.espresso.contrib.ViewPagerActions: ViewAction scrollToFirst(boolean)> -> _SINK_
<androidx.test.espresso.contrib.ViewPagerActions: ViewAction scrollToFirst()> -> _SINK_
<androidx.test.espresso.intent.ResolvedIntent: boolean canBeHandledBy(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.intent.ResolvedIntent: Intent getIntent()> -> _SOURCE_
<androidx.test.espresso.intent.Intents: List<Intent> getIntents()> -> _SOURCE_
<androidx.test.espresso.intent.Intents: void init()> -> _SINK_
<androidx.test.espresso.intent.Intents: OngoingStubbing intending(Matcher<Intent>)> -> _SINK_
<androidx.test.espresso.intent.VerifiableIntent: boolean hasBeenVerified()> -> _SOURCE_
<androidx.test.espresso.contrib.DrawerMatchers: Matcher<View> isOpen(int)> -> _SOURCE_
<androidx.test.espresso.idling.net.UriIdlingResource: java.lang.String getName()> -> _SOURCE_
<androidx.test.espresso.idling.net.UriIdlingResource: boolean isIdleNow()> -> _SOURCE_
<androidx.test.espresso.remote.InteractionRequest.Builder: androidx.test.espresso.remote.InteractionRequest.Builder setRequestProto(byte[])> -> _SINK_
<androidx.test.espresso.contrib.ActivityResultMatchers: Matcher<? super Instrumentation.ActivityResult> hasResultCode(int)> -> _SOURCE_
<androidx.test.espresso.contrib.ActivityResultMatchers: Matcher<? super Instrumentation.ActivityResult> hasResultData(Matcher<Intent>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> doesNotHaveFocus()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasBackground(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasContentDescription()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasErrorText(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasErrorText(Matcher<String>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasFocus()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasLinks()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> hasTextColor(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isDescendantOfA(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isDisplayed()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isEnabled()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isFocusable()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isFocused()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isJavascriptEnabled()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isNotEnabled()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isNotFocusable()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isNotFocused()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isNotSelected()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> isRoot()> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withAlpha(float)> -> _SINK_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withChild(Matcher<View>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withContentDescription(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withContentDescription(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withContentDescription(Matcher<?)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withEffectiveVisibility(androidx.test.espresso.matcher.ViewMatchers.Visibility)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withHint(Matcher<String>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withHint(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withHint(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withId(Matcher<Integer>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withInputType(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withParentIndex(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withResourceName(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withResourceName(Matcher<String>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withSpinnerText(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withSubstring(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withTagKey(int,Matcher<?>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withTagKey(int)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withTagValue(Matcher<Object>)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withText(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.ViewMatchers: Matcher<View> withText(int)> -> _SOURCE_
<androidx.test.espresso.remote.ProtoUtils: String capitalizeFirstChar(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.remote.ProtoUtils: <T extends Enum> T checkedGetEnumForProto(int,Class)> -> _SINK_
<androidx.test.espresso.remote.ProtoUtils: List<Field> getFilteredFieldList(Class<?>,List<String>)> -> _SOURCE_
<androidx.test.espresso.remote.TypeProtoConverters:  T anyToType(Any)> -> _SINK_
<androidx.test.espresso.remote.TypeProtoConverters: Parcelable byteStringToParcelable(ByteString,Class<Parcelable>)> -> _SINK_
<androidx.test.espresso.remote.TypeProtoConverters:  T byteStringToType(ByteString)> -> _SINK_
<androidx.test.espresso.remote.TypeProtoConverters: ByteString parcelableToByteString(android.os.Parcelable)> -> _SINK_
<androidx.test.espresso.web.action.EnableJavascriptAction: Matcher<View> getConstraints()> -> _SINK_
<androidx.test.espresso.web.action.EnableJavascriptAction: java.lang.String getDescription()> -> _SOURCE_
<androidx.test.espresso.web.model.JSONAble.DeJSONFactory: Object attemptDeJSONize(java.util.Map -> _SOURCE_
<androidx.test.espresso.remote.RemoteInteractionRegistry: RemoteInteraction getInstance()> -> _SOURCE_
<androidx.test.espresso.web.assertion.WebViewAssertions: WebAssertion<Document> webContent(Matcher<Document>)> -> _SOURCE_
<androidx.test.espresso.web.assertion.WebViewAssertions: <E> WebAssertion<E> webMatches(Atom<E>,Matcher<E>,ResultDescriber<?)> -> _SOURCE_
<androidx.test.espresso.web.assertion.WebViewAssertions: <E> WebAssertion<E> webMatches(Atom<E>,Matcher<E>)> -> _SOURCE_
<androidx.test.espresso.web.model.TransformingAtom: List<Object> getArguments(androidx.test.espresso.web.model.ElementReference)> -> _SINK_
<androidx.test.espresso.web.model.Atoms: Atom<String> getCurrentUrl()> -> _SOURCE_
<androidx.test.espresso.web.model.Atoms: Atom<String> getTitle()> -> _SOURCE_
<androidx.test.espresso.web.model.Atoms: Atom<Evaluation> scriptWithArgs(java.lang.String,List<Object>)> -> _SINK_
<androidx.test.espresso.web.matcher.DomMatchers: Matcher<Document> containingTextInBody(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.web.matcher.DomMatchers: Matcher<Document> elementById(java.lang.String,Matcher<Element>)> -> _SOURCE_
<androidx.test.espresso.web.matcher.DomMatchers: Matcher<Document> hasElementWithId(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.web.matcher.DomMatchers: Matcher<Document> hasElementWithXpath(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.web.matcher.DomMatchers: Matcher<Element> withTextContent(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.remote.RemoteDescriptor.Builder: androidx.test.espresso.remote.RemoteDescriptor build()> -> _SINK_
<androidx.test.espresso.remote.RemoteDescriptor.Builder: androidx.test.espresso.remote.RemoteDescriptor.Builder setInstanceFieldDescriptors(FieldDescriptor[])> -> _SOURCE_
<androidx.test.espresso.remote.RemoteDescriptor.Builder: androidx.test.espresso.remote.RemoteDescriptor.Builder setProtoBuilderType(Class<?>)> -> _SINK_
<androidx.test.espresso.remote.RemoteDescriptor.Builder: androidx.test.espresso.remote.RemoteDescriptor.Builder setProtoParser(Parser<?>)> -> _SOURCE_
<androidx.test.espresso.remote.RemoteDescriptor.Builder: androidx.test.espresso.remote.RemoteDescriptor.Builder setProtoType(Class<?>)> -> _SINK_
<androidx.test.espresso.web.sugar.Web.WebInteraction: <E> WebInteraction<E> check(WebAssertion<E>)> -> _SOURCE_
<androidx.test.espresso.web.sugar.Web.WebInteraction: WebInteraction<R> forceJavascriptEnabled()> -> _SINK_
<androidx.test.espresso.web.sugar.Web.WebInteraction: WebInteraction<R> withNoTimeout()> -> _SINK_
<androidx.test.espresso.web.sugar.Web.WebInteraction: WebInteraction<R> withTimeout(long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.test.espresso.util.TreeIterables: Iterable<View> breadthFirstViewTraversal(android.view.View)> -> _SOURCE_
<androidx.test.ext.junit.rules.ActivityScenarioRule: ActivityScenario<A> getScenario()> -> _SOURCE_
<androidx.test.espresso.web.model.SimpleAtom: List<Object> getArguments(androidx.test.espresso.web.model.ElementReference)> -> _SINK_
<androidx.test.espresso.web.model.SimpleAtom: String getScript()> -> _SOURCE_
<androidx.test.espresso.web.model.Atom: List<Object> getArguments(androidx.test.espresso.web.model.ElementReference)> -> _SINK_
<android.test.FlakyTest: java.lang.String detail()> -> _SOURCE_
<androidx.test.jank.IMonitor: Bundle getMetrics()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.DriverAtoms: Atom<ElementReference> findElement(androidx.test.espresso.web.webdriver.Locator,java.lang.String)> -> _SOURCE_
<androidx.test.espresso.web.webdriver.DriverAtoms: Atom<List<ElementReference>> findMultipleElements(androidx.test.espresso.web.webdriver.Locator,java.lang.String)> -> _SOURCE_
<androidx.test.espresso.web.webdriver.DriverAtoms: Atom<String> getText()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.DriverAtoms: Atom<ElementReference> selectActiveElement()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.DriverAtoms: Atom<WindowReference> selectFrameByIdOrName(java.lang.String)> -> _SOURCE_
<androidx.test.espresso.web.webdriver.DriverAtoms: Atom<Boolean> webScrollIntoView()> -> _SOURCE_
<androidx.test.jank.JankTestBase: int getCurrentIteration()> -> _SOURCE_
<androidx.test.jank.JankTest: java.lang.String beforeTest()> -> _SINK_
<androidx.test.jank.JankTest: int defaultIterationCount()> -> _SINK_
<androidx.test.jank.JankTest: int expectedFrames()> -> _SOURCE_
<androidx.test.rule.logging.AtraceLogger: void atraceStart(Set<String>,int,int,java.io.File,java.lang.String)> -> _SINK_
<androidx.test.rule.logging.AtraceLogger: void atraceStop()> -> _SINK_
<androidx.test.rule.logging.AtraceLogger: AtraceLogger getAtraceLoggerInstance(android.app.Instrumentation)> -> _SINK_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowBlob(int,Matcher<byte[]>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowBlob(Matcher<String>,Matcher<byte[]>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowBlob(java.lang.String,Matcher<byte[]>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowBlob(java.lang.String,byte[])> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowBlob(int,byte[])> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowDouble(int,Matcher<Double>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowDouble(java.lang.String,double)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowDouble(Matcher<String>,Matcher<Double>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowDouble(int,double)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowDouble(java.lang.String,Matcher<Double>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowFloat(java.lang.String,Matcher<Float>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowFloat(Matcher<String>,Matcher<Float>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowFloat(java.lang.String,float)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowFloat(int,Matcher<Float>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowFloat(int,float)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowInt(java.lang.String,Matcher<Integer>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowInt(java.lang.String,int)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowInt(Matcher<String>,Matcher<Integer>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowInt(int,int)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowInt(int,Matcher<Integer>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowLong(java.lang.String,long)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowLong(int,long)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowLong(Matcher<String>,Matcher<Long>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowLong(java.lang.String,Matcher<Long>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowLong(int,Matcher<Long>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowShort(int,Matcher<Short>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowShort(java.lang.String,short)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowShort(Matcher<String>,Matcher<Short>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowShort(java.lang.String,Matcher<Short>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowShort(int,short)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowString(int,Matcher<String>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowString(java.lang.String,Matcher<String>)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowString(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowString(int,java.lang.String)> -> _SOURCE_
<androidx.test.espresso.matcher.CursorMatchers: CursorMatchers.CursorMatcher withRowString(Matcher<String>,Matcher<String>)> -> _SOURCE_
<androidx.test.filters.SdkSuppress: int maxSdkVersion()> -> _SOURCE_
<androidx.test.runner.intercepting.SingleActivityFactory: Activity create(java.lang.ClassLoader,java.lang.String,android.content.Intent)> -> _SINK_
<androidx.test.runner.intercepting.SingleActivityFactory: Class getActivityClassToIntercept()> -> _SOURCE_
<androidx.test.runner.permission.PermissionRequester: void addPermissions(String[])> -> _SINK_
<androidx.test.runner.permission.PermissionRequester: void requestPermissions()> -> _SOURCE_
<androidx.test.runner.screenshot.Screenshot: ScreenCapture capture(android.app.Activity)> -> _SOURCE_
<androidx.test.runner.screenshot.Screenshot: void setScreenshotProcessors(Set<ScreenCaptureProcessor>)> -> _SINK_
<androidx.test.uiautomator.IAutomationSupport: void sendStatus(int,android.os.Bundle)> -> _SINK_
<androidx.test.uiautomator.By: BySelector desc(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector desc(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.By: BySelector descContains(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector descEndsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector descStartsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector enabled(boolean)> -> _SINK_
<androidx.test.uiautomator.By: BySelector focusable(boolean)> -> _SINK_
<androidx.test.uiautomator.By: BySelector focused(boolean)> -> _SINK_
<androidx.test.uiautomator.By: BySelector pkg(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.By: BySelector pkg(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector text(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.By: BySelector text(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector textContains(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector textEndsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.By: BySelector textStartsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.UiAutomatorTestCase: android.os.Bundle getParams()> -> _SOURCE_
<androidx.test.uiautomator.UiAutomatorTestCase: androidx.test.uiautomator.UiDevice getUiDevice()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: long getActionAcknowledgmentTimeout()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: Configurator getInstance()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: long getKeyInjectionDelay()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: int getToolType()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: int getUiAutomationFlags()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: long getWaitForIdleTimeout()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: long getWaitForSelectorTimeout()> -> _SOURCE_
<androidx.test.uiautomator.Configurator: androidx.test.uiautomator.Configurator setKeyInjectionDelay(long)> -> _SINK_
<androidx.test.uiautomator.Configurator: androidx.test.uiautomator.Configurator setToolType(int)> -> _SINK_
<androidx.test.uiautomator.Configurator: androidx.test.uiautomator.Configurator setWaitForIdleTimeout(long)> -> _SINK_
<androidx.test.jank.IMonitorFactory: List<IMonitor> getMonitors(java.lang.reflect.Method,java.lang.Object)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: void dumpWindowHierarchy(java.io.File)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: void dumpWindowHierarchy(java.io.OutputStream)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: void dumpWindowHierarchy(java.lang.String)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiObject2 findObject(androidx.test.uiautomator.BySelector)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: List<UiObject2> findObjects(androidx.test.uiautomator.BySelector)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: java.lang.String getCurrentActivityName()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: java.lang.String getCurrentPackageName()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: int getDisplayHeight()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: int getDisplayRotation()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: android.graphics.Point getDisplaySizeDp()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: int getDisplayWidth()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: UiDevice getInstance()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: UiDevice getInstance(android.app.Instrumentation)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: java.lang.String getLastTraversedText()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: java.lang.String getLauncherPackageName()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: java.lang.String getProductName()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: boolean hasObject(androidx.test.uiautomator.BySelector)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: boolean isScreenOn()> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: boolean openQuickSettings()> -> _SINK_
<androidx.test.uiautomator.UiDevice: boolean pressEnter()> -> _SINK_
<androidx.test.uiautomator.UiDevice: boolean pressHome()> -> _SINK_
<androidx.test.uiautomator.UiDevice: void setOrientationNatural()> -> _SINK_
<androidx.test.uiautomator.UiDevice: boolean swipe(int,int,int,int,int)> -> _SOURCE_
<androidx.test.uiautomator.UiDevice: boolean takeScreenshot(java.io.File,float,int)> -> _SINK_
<androidx.test.uiautomator.UiDevice: boolean takeScreenshot(java.io.File)> -> _SINK_
<androidx.test.uiautomator.UiDevice: void unfreezeRotation()> -> _SINK_
<androidx.test.uiautomator.UiObject: android.graphics.Rect getBounds()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: java.lang.String getClassName()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: java.lang.String getContentDescription()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: java.lang.String getPackageName()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: UiSelector getSelector()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: java.lang.String getText()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: android.graphics.Rect getVisibleBounds()> -> _SOURCE_
<androidx.test.uiautomator.UiObject: boolean setText(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.UiScrollable: boolean flingForward()> -> _SINK_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiObject getChildByDescription(androidx.test.uiautomator.UiSelector,java.lang.String,boolean)> -> _SOURCE_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiObject getChildByDescription(androidx.test.uiautomator.UiSelector,java.lang.String)> -> _SOURCE_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiObject getChildByText(androidx.test.uiautomator.UiSelector,java.lang.String)> -> _SOURCE_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiObject getChildByText(androidx.test.uiautomator.UiSelector,java.lang.String,boolean)> -> _SOURCE_
<androidx.test.uiautomator.UiScrollable: int getMaxSearchSwipes()> -> _SOURCE_
<androidx.test.uiautomator.UiScrollable: double getSwipeDeadZonePercentage()> -> _SOURCE_
<androidx.test.uiautomator.UiScrollable: boolean scrollForward(int)> -> _SINK_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiScrollable setAsHorizontalList()> -> _SINK_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiScrollable setAsVerticalList()> -> _SINK_
<androidx.test.uiautomator.UiScrollable: androidx.test.uiautomator.UiScrollable setSwipeDeadZonePercentage(double)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector checkable(boolean)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector checked(boolean)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector clazz(java.lang.String,java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector clazz(java.lang.Class)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector clazz(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector clazz(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector clickable(boolean)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector depth(int,int)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector depth(int)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector desc(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector desc(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector descContains(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector descEndsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector descStartsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector enabled(boolean)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector focused(boolean)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector hasDescendant(androidx.test.uiautomator.BySelector,int)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector hasDescendant(androidx.test.uiautomator.BySelector)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector longClickable(boolean)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector maxDepth(int)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector minDepth(int)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector pkg(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector pkg(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector res(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector res(java.lang.String,java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector res(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector text(java.util.regex.Pattern)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector text(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector textContains(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector textEndsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: androidx.test.uiautomator.BySelector textStartsWith(java.lang.String)> -> _SINK_
<androidx.test.uiautomator.BySelector: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request build()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setHints(List<String>)> -> _SINK_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setMaxSuggestions(int)> -> _SINK_
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setTypeConfig(android.view.textclassifier.TextClassifier.EntityConfig)> -> _SINK_
<android.view.textclassifier.ConversationActions.Message: ConversationActions.Message createFromBundle(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationActions.Message: android.app.Person getAuthor()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: java.lang.Long getReferenceTime()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.textclassifier.ExtrasUtils: Locale getTopLanguage(android.content.Intent)> -> _SOURCE_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setAction(androidx.core.app.RemoteActionCompat)> -> _SINK_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setConfidenceScore(float)> -> _SINK_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setTextReply(java.lang.CharSequence)> -> _SINK_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder addAction(androidx.core.app.RemoteActionCompat)> -> _SINK_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification build()> -> _SOURCE_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setEntityType(java.lang.String,float)> -> _SOURCE_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setText(java.lang.CharSequence)> -> _SINK_
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()> -> _SOURCE_
<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions.Request)> -> _SOURCE_
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection.Request)> -> _SOURCE_
<android.view.textclassifier.ConversationActions: List<ConversationAction> getConversationActions()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: java.lang.String getId()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message build()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setReferenceTime(java.lang.Long)> -> _SINK_
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setText(java.lang.CharSequence)> -> _SINK_
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder addLink(int,int,java.util.Map -> _SINK_
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig: TextClassifier.EntityConfig createFromBundle(android.os.Bundle)> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: Collection<String> getHints()> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: Collection<String> resolveTypes(Collection<String>)> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: boolean shouldIncludeTypesFromTextClassifier()> -> _SOURCE_
<android.view.textclassifier.TextClassifier.EntityConfig: android.os.Bundle toBundle()> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig build()> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder includeTypesFromTextClassifier(boolean)> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setHints(Collection<String>)> -> _SINK_
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setIncludedTypes(Collection<String>)> -> _SINK_
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setEntityType(java.lang.String,float)> -> _SINK_
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setExtras(android.os.Bundle)> -> _SINK_
<android.transition.ArcMotion: float getMaximumAngle()> -> _SOURCE_
<android.transition.ArcMotion: float getMinimumHorizontalAngle()> -> _SOURCE_
<android.transition.ArcMotion: float getMinimumVerticalAngle()> -> _SOURCE_
<android.transition.ArcMotion: void setMaximumAngle(float)> -> _SINK_
<android.view.textclassifier.TextLinks.TextLinkSpan: TextLinks.TextLinkSpanData getTextLinkSpanData()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext.Builder: android.view.textclassifier.TextClassificationContext.Builder setWidgetVersion(java.lang.String)> -> _SINK_
<androidx.textclassifier.TextLinks.SpanFactory: TextLinks.TextLinkSpan createSpan(androidx.textclassifier.TextLinks.TextLinkSpanData)> -> _SINK_
<android.view.textclassifier.ConversationAction: androidx.core.app.RemoteActionCompat getAction()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: float getConfidenceScore()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.CharSequence getTextReply()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.String getType()> -> _SOURCE_
<android.transition.ChangeImageTransform: String[] getTransitionProperties()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: List<ConversationActions.Message> getConversation()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: List<String> getHints()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: int getMaxSuggestions()> -> _SOURCE_
<android.view.textclassifier.ConversationActions.Request: android.view.textclassifier.TextClassifier.EntityConfig getTypeConfig()> -> _SOURCE_
<android.transition.ChangeBounds: String[] getTransitionProperties()> -> _SOURCE_
<android.os.Trace: void beginAsyncSection(java.lang.String,int)> -> _SINK_
<android.os.Trace: void beginSection(java.lang.String)> -> _SINK_
<android.os.Trace: void forceEnableAppTracing()> -> _SINK_
<android.transition.ChangeScroll: String[] getTransitionProperties()> -> _SOURCE_
<android.transition.ChangeTransform: boolean getReparent()> -> _SOURCE_
<android.transition.ChangeTransform: String[] getTransitionProperties()> -> _SOURCE_
<android.transition.ChangeTransform: void setReparent(boolean)> -> _SINK_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getDefaultTextClassifier()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: TextClassificationManager of(android.content.Context)> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: void setTextClassifier(android.view.textclassifier.TextClassifier)> -> _SINK_
<android.transition.PatternPathMotion: android.graphics.Path getPatternPath()> -> _SOURCE_
<android.transition.PatternPathMotion: void setPatternPath(android.graphics.Path)> -> _SINK_
<android.transition.Scene: void enter()> -> _SINK_
<android.transition.Scene: Scene getCurrentScene(android.view.ViewGroup)> -> _SOURCE_
<android.transition.Scene: Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)> -> _SOURCE_
<android.transition.VisibilityPropagation: String[] getPropagationProperties()> -> _SOURCE_
<android.transition.VisibilityPropagation: int getViewVisibility(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.VisibilityPropagation: int getViewX(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.VisibilityPropagation: int getViewY(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.SidePropagation: void setPropagationSpeed(float)> -> _SINK_
<android.transition.SidePropagation: void setSide(int)> -> _SINK_
<android.transition.Slide: int getSlideEdge()> -> _SOURCE_
<android.transition.Slide: void setSlideEdge(int)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setAppLinkColor(int)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setAppLinkIconUri(android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setAppLinkIntent(android.content.Intent)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setAppLinkIntentUri(android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setAppLinkPosterArtUri(android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setAppLinkText(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setConfigurationDisplayOrder(int)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setDescription(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setDisplayName(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setDisplayNumber(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setGlobalContentId(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInputId(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderData(byte[])> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderData(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderFlag1(long)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderFlag2(long)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderFlag3(long)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderFlag4(long)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setInternalProviderId(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setNetworkAffiliation(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setOriginalNetworkId(int)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setSearchable(boolean)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setServiceId(int)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setServiceType(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setSystemChannelKey(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setTransient(boolean)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setTransportStreamId(int)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setType(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.Channel.Builder: androidx.tvprovider.media.tv.Channel.Builder setVideoFormat(java.lang.String)> -> _SINK_
<android.transition.CircularPropagation: void setPropagationSpeed(float)> -> _SINK_
<android.transition.ChangeClipBounds: String[] getTransitionProperties()> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setAppLinkIntent(android.content.Intent)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setAppLinkIntentUri(android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setDescription(java.lang.CharSequence)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setDisplayName(java.lang.CharSequence)> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setInternalProviderData(byte[])> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setInternalProviderFlag1(long)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setInternalProviderFlag2(long)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setInternalProviderFlag3(long)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setInternalProviderFlag4(long)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setInternalProviderId(java.lang.String)> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setLogo(android.graphics.Bitmap)> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannel.Builder: androidx.tvprovider.media.tv.PreviewChannel.Builder setLogo(android.net.Uri)> -> _SOURCE_
<android.opengl.Visibility: int getMode()> -> _SOURCE_
<android.opengl.Visibility: String[] getTransitionProperties()> -> _SOURCE_
<android.opengl.Visibility: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)> -> _SOURCE_
<android.opengl.Visibility: boolean isVisible(android.transition.TransitionValues)> -> _SOURCE_
<android.transition.TransitionPropagation: String[] getPropagationProperties()> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannelHelper: List<PreviewChannel> getAllChannels()> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannelHelper: androidx.tvprovider.media.tv.PreviewChannel getPreviewChannel(long)> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannelHelper: androidx.tvprovider.media.tv.PreviewProgram getPreviewProgram(long)> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannelHelper: androidx.tvprovider.media.tv.WatchNextProgram getWatchNextProgram(long)> -> _SOURCE_
<androidx.tvprovider.media.tv.PreviewChannelHelper: long publishChannel(androidx.tvprovider.media.tv.PreviewChannel)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannelHelper: long publishDefaultChannel(androidx.tvprovider.media.tv.PreviewChannel)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannelHelper: long publishPreviewProgram(androidx.tvprovider.media.tv.PreviewProgram)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannelHelper: long publishWatchNextProgram(androidx.tvprovider.media.tv.WatchNextProgram)> -> _SINK_
<androidx.tvprovider.media.tv.PreviewChannelHelper: void updatePreviewChannel(long,androidx.tvprovider.media.tv.PreviewChannel)> -> _SINK_
<androidx.tvprovider.media.tv.ChannelLogoUtils: Bitmap loadChannelLogo(android.content.Context,long)> -> _SOURCE_
<androidx.tvprovider.media.tv.ChannelLogoUtils: boolean storeChannelLogo(android.content.Context,long,android.graphics.Bitmap)> -> _SINK_
<androidx.tvprovider.media.tv.ChannelLogoUtils: boolean storeChannelLogo(android.content.Context,long,android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat.Channels: String getVideoResolution(java.lang.String)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildChannelLogoUri(android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildChannelLogoUri(long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildChannelUriForPassthroughInput(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: String buildInputId(android.content.ComponentName)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildPreviewProgramUri(long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildPreviewProgramsUriForChannel(android.net.Uri)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildPreviewProgramsUriForChannel(long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildProgramUri(long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildProgramsUriForChannel(long,long,long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildProgramsUriForChannel(long)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildProgramsUriForChannel(android.net.Uri)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildProgramsUriForChannel(android.net.Uri,long,long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildRecordedProgramUri(long)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: Uri buildWatchNextProgramUri(long)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat: boolean isChannelUri(android.net.Uri)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: boolean isChannelUriForPassthroughInput(android.net.Uri)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: boolean isChannelUriForTunerInput(android.net.Uri)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: boolean isProgramUri(android.net.Uri)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: boolean isRecordedProgramUri(android.net.Uri)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat: void requestChannelBrowsable(android.content.Context,long)> -> _SINK_
<androidx.viewpager2.adapter.FragmentStateAdapter: void onAttachedToRecyclerView(androidx.recyclerview.widget.RecyclerView)> -> _SOURCE_
<androidx.viewpager2.adapter.FragmentStateAdapter: void onBindViewHolder(androidx.viewpager2.adapter.FragmentViewHolder,int)> -> _SOURCE_
<androidx.viewpager2.adapter.FragmentStateAdapter: Parcelable saveState()> -> _SOURCE_
<androidx.viewpager2.widget.CompositePageTransformer: void transformPage(android.view.View,float)> -> _SINK_
<androidx.versionedparcelable.ParcelUtils: <T extends VersionedParcelable> T getVersionedParcelable(android.os.Bundle,java.lang.String)> -> _SOURCE_
<androidx.versionedparcelable.ParcelUtils: <T extends VersionedParcelable> List getVersionedParcelableList(android.os.Bundle,java.lang.String)> -> _SOURCE_
<androidx.versionedparcelable.ParcelUtils: void putVersionedParcelable(android.os.Bundle,java.lang.String,androidx.versionedparcelable.VersionedParcelable)> -> _SINK_
<androidx.versionedparcelable.ParcelUtils: void putVersionedParcelableList(android.os.Bundle,java.lang.String,List<?)> -> _SINK_
<androidx.viewpager2.widget.MarginPageTransformer: void transformPage(android.view.View,float)> -> _SINK_
<androidx.viewpager.widget.PagerAdapter: int getCount()> -> _SOURCE_
<androidx.viewpager.widget.PagerAdapter: float getPageWidth(int)> -> _SOURCE_
<androidx.viewpager.widget.PagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> -> _SINK_
<androidx.viewpager.widget.PagerAdapter: boolean isViewFromObject(android.view.View,java.lang.Object)> -> _SOURCE_
<androidx.viewpager.widget.PagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> -> _SOURCE_
<androidx.viewpager.widget.PagerAdapter: void setPrimaryItem(android.view.View,int,java.lang.Object)> -> _SINK_
<androidx.viewpager.widget.PagerAdapter: void startUpdate(android.view.View)> -> _SOURCE_
<androidx.tvprovider.media.tv.TvContractCompat.Programs.Genres: String[] decode(java.lang.String)> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat.Programs.Genres: String encode(String[])> -> _SINK_
<androidx.tvprovider.media.tv.TvContractCompat.Programs.Genres: boolean isCanonical(java.lang.String)> -> _SOURCE_
<androidx.viewpager.widget.ViewPager.PageTransformer: void transformPage(android.view.View,float)> -> _SINK_
<androidx.viewpager2.widget.ViewPager2.PageTransformer: void transformPage(android.view.View,float)> -> _SINK_
<androidx.viewpager2.adapter.StatefulAdapter: Parcelable saveState()> -> _SOURCE_
<androidx.webkit.SafeBrowsingResponseCompat: void showInterstitial(boolean)> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder addBypassRule(java.lang.String)> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder addDirect(java.lang.String)> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder addDirect()> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder addProxyRule(java.lang.String)> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder addProxyRule(java.lang.String,java.lang.String)> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder bypassSimpleHostnames()> -> _SINK_
<androidx.webkit.ProxyConfig.Builder: androidx.webkit.ProxyConfig.Builder removeImplicitRules()> -> _SINK_
<androidx.webkit.ServiceWorkerControllerCompat: ServiceWorkerControllerCompat getInstance()> -> _SOURCE_
<androidx.webkit.ServiceWorkerControllerCompat: ServiceWorkerWebSettingsCompat getServiceWorkerWebSettings()> -> _SOURCE_
<androidx.webkit.ServiceWorkerControllerCompat: void setServiceWorkerClient(androidx.webkit.ServiceWorkerClientCompat)> -> _SINK_
<androidx.webkit.ServiceWorkerWebSettingsCompat: boolean getAllowContentAccess()> -> _SOURCE_
<androidx.webkit.ServiceWorkerWebSettingsCompat: boolean getAllowFileAccess()> -> _SOURCE_
<androidx.webkit.ServiceWorkerWebSettingsCompat: boolean getBlockNetworkLoads()> -> _SOURCE_
<androidx.webkit.ServiceWorkerWebSettingsCompat: int getCacheMode()> -> _SOURCE_
<androidx.webkit.ServiceWorkerWebSettingsCompat: void setAllowContentAccess(boolean)> -> _SINK_
<androidx.webkit.ServiceWorkerWebSettingsCompat: void setAllowFileAccess(boolean)> -> _SINK_
<androidx.webkit.ServiceWorkerWebSettingsCompat: void setBlockNetworkLoads(boolean)> -> _SINK_
<androidx.webkit.ProxyController: ProxyController getInstance()> -> _SOURCE_
<androidx.webkit.ProxyController: void setProxyOverride(androidx.webkit.ProxyConfig,java.util.concurrent.Executor,java.lang.Runnable)> -> _SINK_
<androidx.webkit.ServiceWorkerClientCompat: WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)> -> _SINK_
<android.webkit.TracingController: TracingController getInstance()> -> _SOURCE_
<android.webkit.TracingController: boolean isTracing()> -> _SOURCE_
<android.webkit.TracingController: void start(android.webkit.TracingConfig)> -> _SINK_
<androidx.webkit.WebResourceErrorCompat: CharSequence getDescription()> -> _SOURCE_
<androidx.webkit.WebResourceErrorCompat: int getErrorCode()> -> _SOURCE_
<androidx.webkit.ProxyConfig.ProxyRule: java.lang.String getSchemeFilter()> -> _SOURCE_
<androidx.webkit.ProxyConfig.ProxyRule: java.lang.String getUrl()> -> _SOURCE_
<androidx.webkit.WebViewAssetLoader: android.webkit.WebResourceResponse shouldInterceptRequest(android.net.Uri)> -> _SOURCE_
<androidx.webkit.ProxyConfig: List<String> getBypassRules()> -> _SOURCE_
<androidx.webkit.ProxyConfig: List<ProxyConfig.ProxyRule> getProxyRules()> -> _SOURCE_
<androidx.webkit.WebMessageCompat: java.lang.String getData()> -> _SOURCE_
<androidx.webkit.WebMessageCompat: WebMessagePortCompat[] getPorts()> -> _SOURCE_
<androidx.webkit.WebSettingsCompat: int getDisabledActionModeMenuItems(android.webkit.WebSettings)> -> _SOURCE_
<androidx.webkit.WebSettingsCompat: int getForceDark(android.webkit.WebSettings)> -> _SINK_
<androidx.webkit.WebSettingsCompat: int getForceDarkStrategy(android.webkit.WebSettings)> -> _SOURCE_
<androidx.webkit.WebSettingsCompat: boolean getOffscreenPreRaster(android.webkit.WebSettings)> -> _SOURCE_
<androidx.webkit.WebSettingsCompat: boolean getSafeBrowsingEnabled(android.webkit.WebSettings)> -> _SOURCE_
<androidx.webkit.WebSettingsCompat: void setForceDark(android.webkit.WebSettings,int)> -> _SINK_
<androidx.webkit.WebSettingsCompat: void setForceDarkStrategy(android.webkit.WebSettings,int)> -> _SINK_
<androidx.webkit.WebSettingsCompat: void setOffscreenPreRaster(android.webkit.WebSettings,boolean)> -> _SOURCE_
<androidx.webkit.WebSettingsCompat: void setSafeBrowsingEnabled(android.webkit.WebSettings,boolean)> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(Collection<String>)> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(String[])> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(int[])> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig build()> -> _SINK_
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder setTracingMode(int)> -> _SINK_
<androidx.webkit.WebViewAssetLoader.ResourcesPathHandler: android.webkit.WebResourceResponse handle(java.lang.String)> -> _SOURCE_
<androidx.webkit.WebViewAssetLoader.InternalStoragePathHandler: android.webkit.WebResourceResponse handle(java.lang.String)> -> _SOURCE_
<androidx.webkit.WebResourceRequestCompat: boolean isRedirect(android.webkit.WebResourceRequest)> -> _SOURCE_
<androidx.webkit.WebViewCompat: WebMessagePortCompat[] createWebMessageChannel(android.webkit.WebView)> -> _SOURCE_
<androidx.webkit.WebViewCompat: PackageInfo getCurrentWebViewPackage(android.content.Context)> -> _SOURCE_
<androidx.webkit.WebViewCompat: Uri getSafeBrowsingPrivacyPolicyUrl()> -> _SOURCE_
<androidx.webkit.WebViewCompat: WebChromeClient getWebChromeClient(android.webkit.WebView)> -> _SOURCE_
<androidx.webkit.WebViewCompat: WebViewClient getWebViewClient(android.webkit.WebView)> -> _SOURCE_
<androidx.webkit.WebViewCompat: WebViewRenderProcess getWebViewRenderProcess(android.webkit.WebView)> -> _SOURCE_
<androidx.webkit.WebViewCompat: WebViewRenderProcessClient getWebViewRenderProcessClient(android.webkit.WebView)> -> _SOURCE_
<androidx.webkit.WebViewCompat: boolean isMultiProcessEnabled()> -> _SOURCE_
<androidx.webkit.WebViewCompat: void postWebMessage(android.webkit.WebView,androidx.webkit.WebMessageCompat,android.net.Uri)> -> _SINK_
<androidx.webkit.WebViewCompat: void setSafeBrowsingAllowlist(Set<String>,ValueCallback<Boolean>)> -> _SINK_
<androidx.webkit.WebViewCompat: void setWebViewRenderProcessClient(android.webkit.WebView,java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)> -> _SINK_
<androidx.webkit.WebViewCompat: void setWebViewRenderProcessClient(android.webkit.WebView,android.webkit.WebViewRenderProcessClient)> -> _SINK_
<android.webkit.TracingConfig: List<String> getCustomIncludedCategories()> -> _SOURCE_
<android.webkit.TracingConfig: int getPredefinedCategories()> -> _SOURCE_
<android.webkit.TracingConfig: int getTracingMode()> -> _SOURCE_
<androidx.webkit.WebViewAssetLoader.Builder: androidx.webkit.WebViewAssetLoader.Builder addPathHandler(java.lang.String,androidx.webkit.WebViewAssetLoader.PathHandler)> -> _SINK_
<androidx.webkit.WebViewAssetLoader.Builder: androidx.webkit.WebViewAssetLoader.Builder setDomain(java.lang.String)> -> _SINK_
<androidx.webkit.WebViewAssetLoader.Builder: androidx.webkit.WebViewAssetLoader.Builder setHttpAllowed(boolean)> -> _SINK_
<androidx.webkit.WebViewAssetLoader.PathHandler: WebResourceResponse handle(java.lang.String)> -> _SOURCE_
<androidx.webkit.WebViewCompat.WebMessageListener: void onPostMessage(android.webkit.WebView,androidx.webkit.WebMessageCompat,android.net.Uri,boolean,androidx.webkit.JavaScriptReplyProxy)> -> _SOURCE_
<androidx.webkit.WebViewClientCompat: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)> -> _SINK_
<androidx.webkit.WebViewFeature: boolean isFeatureSupported(java.lang.String)> -> _SOURCE_
<androidx.webkit.WebViewAssetLoader.AssetsPathHandler: android.webkit.WebResourceResponse handle(java.lang.String)> -> _SOURCE_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder addContentUriTrigger(android.net.Uri,boolean)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.compose.ui.unit.Constraints build()> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setRequiredNetworkType(androidx.work.NetworkType)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setRequiresBatteryNotLow(boolean)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setRequiresCharging(boolean)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setRequiresDeviceIdle(boolean)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setRequiresStorageNotLow(boolean)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setTriggerContentMaxDelay(java.time.Duration)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setTriggerContentMaxDelay(long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setTriggerContentUpdateDelay(long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.work.Constraints.Builder: androidx.work.Constraints.Builder setTriggerContentUpdateDelay(java.time.Duration)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putAll(java.util.Map -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putAll(androidx.work.Data)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putBoolean(java.lang.String,boolean)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putByte(java.lang.String,byte)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putByteArray(java.lang.String,byte[])> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putFloat(java.lang.String,float)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putFloatArray(java.lang.String,float[])> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putInt(java.lang.String,int)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putIntArray(java.lang.String,int[])> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putLongArray(java.lang.String,long[])> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putString(java.lang.String,java.lang.String)> -> _SINK_
<androidx.work.Data.Builder: androidx.work.Data.Builder putStringArray(java.lang.String,String[])> -> _SINK_
<androidx.work.Configuration.Builder: android.content.res.Configuration build()> -> _SINK_
<androidx.work.Configuration.Builder: androidx.work.Configuration.Builder setInputMergerFactory(androidx.work.InputMergerFactory)> -> _SINK_
<androidx.work.Configuration.Builder: androidx.work.Configuration.Builder setJobSchedulerJobIdRange(int,int)> -> _SINK_
<androidx.work.Configuration.Builder: androidx.work.Configuration.Builder setMaxSchedulerLimit(int)> -> _SINK_
<androidx.work.Configuration.Builder: androidx.work.Configuration.Builder setMinimumLoggingLevel(int)> -> _SINK_
<androidx.work.Configuration.Builder: androidx.work.Configuration.Builder setTaskExecutor(java.util.concurrent.Executor)> -> _SINK_
<androidx.work.ListenableWorker: Context getApplicationContext()> -> _SOURCE_
<androidx.work.ListenableWorker: ListenableFuture<ForegroundInfo> getForegroundInfoAsync()> -> _SOURCE_
<androidx.work.ListenableWorker: UUID getId()> -> _SOURCE_
<androidx.work.ListenableWorker: Data getInputData()> -> _SOURCE_
<androidx.work.ListenableWorker: int getRunAttemptCount()> -> _SOURCE_
<androidx.work.ListenableWorker: Set<String> getTags()> -> _SOURCE_
<androidx.work.ListenableWorker: List<String> getTriggeredContentAuthorities()> -> _SOURCE_
<androidx.work.ListenableWorker: List<Uri> getTriggeredContentUris()> -> _SOURCE_
<androidx.work.Operation: ListenableFuture<Operation.State.SUCCESS> getResult()> -> _SOURCE_
<androidx.work.Operation: LiveData<Operation.State> getState()> -> _SOURCE_
<androidx.work.OneTimeWorkRequest: List<OneTimeWorkRequest> from(List<Class<?)> -> _SINK_
<androidx.work.OneTimeWorkRequest: OneTimeWorkRequest from(Class<?)> -> _SINK_
<androidx.work.WorkContinuation: ListenableFuture<List<WorkInfo>> getWorkInfos()> -> _SOURCE_
<androidx.work.WorkContinuation: LiveData<List<WorkInfo>> getWorkInfosLiveData()> -> _SOURCE_
<androidx.work.RxWorker: Single<ForegroundInfo> getForegroundInfo()> -> _SOURCE_
<androidx.work.RxWorker: ListenableFuture<ForegroundInfo> getForegroundInfoAsync()> -> _SOURCE_
<androidx.work.Worker: androidx.work.ForegroundInfo getForegroundInfo()> -> _SOURCE_
<androidx.work.Worker: ListenableFuture<ForegroundInfo> getForegroundInfoAsync()> -> _SOURCE_
<androidx.work.WorkManager: WorkManager getInstance()> -> _SOURCE_
<androidx.work.WorkManager: WorkManager getInstance(android.content.Context)> -> _SOURCE_
<androidx.work.WorkManager: ListenableFuture<WorkInfo> getWorkInfoById(java.util.UUID)> -> _SOURCE_
<androidx.work.WorkManager: LiveData<WorkInfo> getWorkInfoByIdLiveData(java.util.UUID)> -> _SOURCE_
<androidx.work.WorkManager: ListenableFuture<List<WorkInfo>> getWorkInfos(androidx.work.WorkQuery)> -> _SOURCE_
<androidx.work.WorkManager: ListenableFuture<List<WorkInfo>> getWorkInfosByTag(java.lang.String)> -> _SOURCE_
<androidx.work.WorkManager: LiveData<List<WorkInfo>> getWorkInfosByTagLiveData(java.lang.String)> -> _SOURCE_
<androidx.work.WorkManager: ListenableFuture<List<WorkInfo>> getWorkInfosForUniqueWork(java.lang.String)> -> _SOURCE_
<androidx.work.WorkManager: LiveData<List<WorkInfo>> getWorkInfosForUniqueWorkLiveData(java.lang.String)> -> _SOURCE_
<androidx.work.WorkManager: LiveData<List<WorkInfo>> getWorkInfosLiveData(androidx.work.WorkQuery)> -> _SOURCE_
<androidx.work.WorkerParameters: java.util.UUID getId()> -> _SOURCE_
<androidx.work.WorkerParameters: androidx.work.Data getInputData()> -> _SOURCE_
<androidx.work.WorkerParameters: int getRunAttemptCount()> -> _SOURCE_
<androidx.work.WorkerParameters: Set<String> getTags()> -> _SOURCE_
<androidx.work.WorkerParameters: List<String> getTriggeredContentAuthorities()> -> _SOURCE_
<androidx.work.WorkerParameters: List<Uri> getTriggeredContentUris()> -> _SOURCE_
<androidx.work.WorkQuery.Builder: androidx.work.WorkQuery.Builder addStates(List<WorkInfo.State>)> -> _SINK_
<androidx.work.WorkQuery.Builder: androidx.work.WorkQuery.Builder addTags(List<String>)> -> _SINK_
<androidx.work.WorkQuery.Builder: androidx.work.WorkQuery.Builder addUniqueWorkNames(List<String>)> -> _SOURCE_
<androidx.work.WorkQuery.Builder: WorkQuery.Builder fromIds(List<UUID>)> -> _SOURCE_
<androidx.work.WorkQuery.Builder: WorkQuery.Builder fromTags(List<String>)> -> _SOURCE_
<androidx.work.WorkQuery.Builder: WorkQuery.Builder fromUniqueWorkNames(List<String>)> -> _SOURCE_
<androidx.work.WorkRequest: java.util.UUID getId()> -> _SOURCE_
<com.android.billingclient.api.AcknowledgePurchaseParams.Builder: com.android.billingclient.api.AcknowledgePurchaseParams build()> -> _SOURCE_
<com.android.billingclient.api.BillingClient: @AnyThread void acknowledgePurchase(com.android.billingclient.api.AcknowledgePurchaseParams,com.android.billingclient.api.AcknowledgePurchaseResponseListener)> -> _SINK_
<com.android.billingclient.api.BillingClient: @AnyThread int getConnectionState()> -> _SOURCE_
<com.android.billingclient.api.BillingClient: @AnyThread BillingResult isFeatureSupported(java.lang.String)> -> _SOURCE_
<com.android.billingclient.api.BillingClient: @UiThread BillingResult launchBillingFlow(android.app.Activity,com.android.billingclient.api.BillingFlowParams)> -> _SINK_
<com.android.billingclient.api.BillingClient: @AnyThread void queryPurchaseHistoryAsync(java.lang.String,com.android.billingclient.api.PurchaseHistoryResponseListener)> -> _SOURCE_
<com.android.billingclient.api.BillingClient: Purchase.PurchasesResult queryPurchases(java.lang.String)> -> _SOURCE_
<com.android.billingclient.api.BillingClient: @AnyThread void queryPurchasesAsync(java.lang.String,com.android.billingclient.api.PurchasesResponseListener)> -> _SOURCE_
<com.android.billingclient.api.BillingClient: @AnyThread void querySkuDetailsAsync(com.android.billingclient.api.SkuDetailsParams,com.android.billingclient.api.SkuDetailsResponseListener)> -> _SOURCE_
<com.android.billingclient.api.BillingClient: @AnyThread BillingResult showInAppMessages(android.app.Activity,InAppMessageParams,InAppMessageResponseListener)> -> _SINK_
<androidx.work.WorkRequest.Builder: B addTag(java.lang.String)> -> _SINK_
<androidx.work.WorkRequest.Builder: B keepResultsForAtLeast(long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.work.WorkRequest.Builder: B keepResultsForAtLeast(java.time.Duration)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setBackoffCriteria(androidx.work.BackoffPolicy,long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setBackoffCriteria(androidx.work.BackoffPolicy,java.time.Duration)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setConstraints(androidx.compose.ui.unit.Constraints)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setExpedited(androidx.work.OutOfQuotaPolicy)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setInitialDelay(java.time.Duration)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setInitialDelay(long,android.icu.util.TimeUnit)> -> _SINK_
<androidx.work.WorkRequest.Builder: B setInputData(androidx.work.Data)> -> _SINK_
<com.android.billingclient.api.Purchase.PurchasesResult: com.android.billingclient.api.BillingResult getBillingResult()> -> _SOURCE_
<com.android.billingclient.api.Purchase.PurchasesResult: List<Purchase> getPurchasesList()> -> _SOURCE_
<com.android.billingclient.api.Purchase.PurchasesResult: int getResponseCode()> -> _SOURCE_
<com.android.billingclient.api.SkuDetailsParams: java.lang.String getSkuType()> -> _SOURCE_
<com.android.billingclient.api.SkuDetailsParams: List<String> getSkusList()> -> _SOURCE_
<com.android.billingclient.api.SkuDetailsParams.Builder: com.android.billingclient.api.SkuDetailsParams build()> -> _SINK_
<com.android.billingclient.api.SkuDetailsParams.Builder: com.android.billingclient.api.SkuDetailsParams.Builder setSkusList(List<String>)> -> _SINK_
<com.android.billingclient.api.SkuDetailsParams.Builder: com.android.billingclient.api.SkuDetailsParams.Builder setType(java.lang.String)> -> _SOURCE_
<com.android.billingclient.api.BillingFlowParams.Builder: com.android.billingclient.api.BillingFlowParams build()> -> _SOURCE_
<com.android.billingclient.api.BillingFlowParams.Builder: com.android.billingclient.api.BillingFlowParams.Builder setObfuscatedAccountId(java.lang.String)> -> _SOURCE_
<com.android.billingclient.api.BillingFlowParams.Builder: com.android.billingclient.api.BillingFlowParams.Builder setObfuscatedProfileId(java.lang.String)> -> _SOURCE_
<com.android.billingclient.api.BillingFlowParams.Builder: com.android.billingclient.api.BillingFlowParams.Builder setSkuDetails(com.android.billingclient.api.SkuDetails)> -> _SOURCE_
<com.android.billingclient.api.BillingFlowParams.Builder: com.android.billingclient.api.BillingFlowParams.Builder setVrPurchaseFlow(boolean)> -> _SINK_
<com.android.installreferrer.api.InstallReferrerClient: ReferrerDetails getInstallReferrer()> -> _SOURCE_
<androidx.work.multiprocess.RemoteWorkManager: ListenableFuture<Void> enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,androidx.work.OneTimeWorkRequest)> -> _SINK_
<androidx.work.multiprocess.RemoteWorkManager: ListenableFuture<Void> enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,List<OneTimeWorkRequest>)> -> _SINK_
<androidx.work.multiprocess.RemoteWorkManager: RemoteWorkManager getInstance(android.content.Context)> -> _SOURCE_
<androidx.work.multiprocess.RemoteWorkManager: ListenableFuture<List<WorkInfo>> getWorkInfos(androidx.work.WorkQuery)> -> _SOURCE_
<com.android.installreferrer.commons.InstallReferrerCommons: void logVerbose(java.lang.String,java.lang.String)> -> _SINK_
<androidx.work.multiprocess.RemoteListenableWorker: ListenableFuture<ListenableWorker.Result> startRemoteWork()> -> _SINK_
<androidx.work.RxWorker: Single<ForegroundInfo> getForegroundInfo()> -> _SOURCE_
<androidx.work.RxWorker: ListenableFuture<ForegroundInfo> getForegroundInfoAsync()> -> _SOURCE_
<com.android.installreferrer.api.ReferrerDetails: long getInstallBeginTimestampSeconds()> -> _SOURCE_
<com.android.installreferrer.api.ReferrerDetails: java.lang.String getInstallReferrer()> -> _SOURCE_
<com.android.installreferrer.api.ReferrerDetails: long getReferrerClickTimestampSeconds()> -> _SOURCE_
<com.google.android.material.appbar.AppBarLayout.LayoutParams: com.google.android.material.appbar.AppBarLayout.ChildScrollEffect getScrollEffect()> -> _SINK_
<com.google.android.material.appbar.AppBarLayout.LayoutParams: android.graphics.Interpolator getScrollInterpolator()> -> _SOURCE_
<com.google.android.material.appbar.AppBarLayout.LayoutParams: void setScrollEffect(com.google.android.material.appbar.AppBarLayout.ChildScrollEffect)> -> _SINK_
<com.google.android.material.appbar.AppBarLayout.LayoutParams: void setScrollFlags(int)> -> _SINK_
<com.google.android.material.appbar.AppBarLayout.LayoutParams: void setScrollInterpolator(android.graphics.Interpolator)> -> _SINK_
<com.google.android.material.appbar.CollapsingToolbarLayout.LayoutParams: float getParallaxMultiplier()> -> _SOURCE_
<com.google.android.material.appbar.CollapsingToolbarLayout.LayoutParams: void setCollapseMode(int)> -> _SINK_
<com.google.android.material.appbar.CollapsingToolbarLayout.LayoutParams: void setParallaxMultiplier(float)> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: W build()> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: TestListenableWorkerBuilder<W> setForegroundUpdater(androidx.work.ForegroundUpdater)> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: TestListenableWorkerBuilder<W> setInputData(androidx.work.Data)> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: TestListenableWorkerBuilder<W> setNetwork(android.net.Network)> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: TestListenableWorkerBuilder<W> setTags(List<String>)> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: TestListenableWorkerBuilder<W> setTriggeredContentAuthorities(List<String>)> -> _SINK_
<androidx.work.testing.TestListenableWorkerBuilder: TestListenableWorkerBuilder<W> setTriggeredContentUris(List<Uri>)> -> _SINK_
<com.android.billingclient.api.AccountIdentifiers: java.lang.String getObfuscatedAccountId()> -> _SINK_
<com.android.billingclient.api.AccountIdentifiers: java.lang.String getObfuscatedProfileId()> -> _SINK_
<androidx.work.testing.TestDriver: void setAllConstraintsMet(java.util.UUID)> -> _SINK_
<com.google.android.material.bottomnavigation.BottomNavigationView: int getMaxItemCount()> -> _SOURCE_
<com.google.android.material.bottomnavigation.BottomNavigationView: boolean isItemHorizontalTranslationEnabled()> -> _SOURCE_
<com.google.android.material.bottomnavigation.BottomNavigationView: void setItemHorizontalTranslationEnabled(boolean)> -> _SINK_
<com.google.android.material.circularreveal.CircularRevealWidget: void buildCircularRevealCache()> -> _SINK_
<com.google.android.material.circularreveal.CircularRevealWidget: void destroyCircularRevealCache()> -> _SINK_
<com.google.android.material.circularreveal.CircularRevealWidget: Drawable getCircularRevealOverlayDrawable()> -> _SOURCE_
<com.google.android.material.circularreveal.CircularRevealWidget: CircularRevealWidget.RevealInfo getRevealInfo()> -> _SOURCE_
<com.google.android.material.circularreveal.CircularRevealWidget: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.google.android.material.circularreveal.CircularRevealWidget: void setCircularRevealScrimColor(int)> -> _SINK_
<com.google.android.material.circularreveal.CircularRevealWidget: void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo)> -> _SINK_
<com.google.android.material.checkbox.MaterialCheckBox: boolean isUseMaterialThemeColors()> -> _SOURCE_
<com.google.android.material.checkbox.MaterialCheckBox: void setUseMaterialThemeColors(boolean)> -> _SINK_
<com.google.android.material.circularreveal.CircularRevealHelper.Delegate: void actualDraw(android.graphics.Canvas)> -> _SINK_
<com.google.android.material.datepicker.CalendarConstraints.Builder: com.google.android.material.datepicker.CalendarConstraints build()> -> _SINK_
<com.google.android.material.datepicker.CalendarConstraints.Builder: com.google.android.material.datepicker.CalendarConstraints.Builder setStart(long)> -> _SOURCE_
<com.google.android.material.color.DynamicColors: void applyIfAvailable(android.app.Activity)> -> _SINK_
<com.google.android.material.color.DynamicColors: void applyIfAvailable(android.app.Activity,int)> -> _SINK_
<com.google.android.material.color.DynamicColors: void applyIfAvailable(android.app.Activity,com.google.android.material.color.DynamicColors.Precondition)> -> _SINK_
<com.google.android.material.color.DynamicColors: void applyToActivitiesIfAvailable(android.app.Application,int,com.google.android.material.color.DynamicColors.Precondition)> -> _SINK_
<com.google.android.material.color.DynamicColors: void applyToActivitiesIfAvailable(android.app.Application,int)> -> _SINK_
<com.google.android.material.color.DynamicColors: void applyToActivitiesIfAvailable(android.app.Application,com.google.android.material.color.DynamicColors.Precondition)> -> _SINK_
<com.google.android.material.color.DynamicColors: void applyToActivitiesIfAvailable(android.app.Application)> -> _SINK_
<com.google.android.material.color.DynamicColors: boolean isDynamicColorAvailable()> -> _SOURCE_
<com.google.android.material.datepicker.CalendarConstraints.DateValidator: boolean isValid(long)> -> _SOURCE_
<com.google.android.material.color.ColorRoles: int getAccent()> -> _SOURCE_
<com.google.android.material.color.ColorRoles: int getAccentContainer()> -> _SOURCE_
<com.google.android.material.color.ColorRoles: int getOnAccent()> -> _SOURCE_
<com.google.android.material.color.ColorRoles: int getOnAccentContainer()> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int compositeARGBWithAlpha(int,int)> -> _SINK_
<com.google.android.material.color.MaterialColors: int getColor(android.content.Context,int,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int getColor(android.view.View,int,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int getColor(android.view.View,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int getColor(android.content.Context,int,java.lang.String)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: ColorRoles getColorRoles(int,boolean)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: ColorRoles getColorRoles(android.content.Context,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int harmonize(int,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int harmonizeWithPrimary(android.content.Context,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: boolean isColorLight(int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int layer(android.view.View,int,int,float)> -> _SINK_
<com.google.android.material.color.MaterialColors: int layer(int,int)> -> _SOURCE_
<com.google.android.material.color.MaterialColors: int layer(android.view.View,int,int)> -> _SINK_
<com.google.android.material.color.MaterialColors: int layer(int,int,float)> -> _SOURCE_
<com.google.android.material.expandable.ExpandableWidget: boolean isExpanded()> -> _SOURCE_
<com.google.android.material.expandable.ExpandableWidget: boolean setExpanded(boolean)> -> _SINK_
<com.google.android.material.expandable.ExpandableTransformationWidget: int getExpandedComponentIdHint()> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: int calculateOverlayAlpha(float)> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: float calculateOverlayAlphaFraction(float)> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: int compositeOverlay(int,float)> -> _SINK_
<com.google.android.material.elevation.ElevationOverlayProvider: int compositeOverlayIfNeeded(int,float)> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: int compositeOverlayWithThemeSurfaceColorIfNeeded(float)> -> _SINK_
<com.google.android.material.elevation.ElevationOverlayProvider: int compositeOverlayWithThemeSurfaceColorIfNeeded(float,android.view.View)> -> _SINK_
<com.google.android.material.elevation.ElevationOverlayProvider: float getParentAbsoluteElevation(android.view.View)> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: int getThemeElevationOverlayColor()> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: int getThemeSurfaceColor()> -> _SOURCE_
<com.google.android.material.elevation.ElevationOverlayProvider: boolean isThemeElevationOverlayEnabled()> -> _SOURCE_
<androidx.core.math.MathUtils: float dist(float,float,float,float)> -> _SOURCE_
<androidx.core.math.MathUtils: float distanceToFurthestCorner(float,float,float,float,float,float)> -> _SOURCE_
<androidx.core.math.MathUtils: float lerp(float,float,float)> -> _SOURCE_
<com.google.android.material.expandable.ExpandableWidgetHelper: int getExpandedComponentIdHint()> -> _SOURCE_
<com.google.android.material.expandable.ExpandableWidgetHelper: void setExpandedComponentIdHint(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: int getDividerColor()> -> _SOURCE_
<com.google.android.material.divider.MaterialDivider: void setDividerColor(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerColorResource(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerInsetEnd(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerInsetEndResource(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerInsetStart(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerInsetStartResource(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerThickness(int)> -> _SINK_
<com.google.android.material.divider.MaterialDivider: void setDividerThicknessResource(int)> -> _SINK_
<com.google.android.material.navigationrail.NavigationRailView: void addHeaderView(int)> -> _SINK_
<com.google.android.material.navigationrail.NavigationRailView: void addHeaderView(android.view.View)> -> _SINK_
<com.google.android.material.navigationrail.NavigationRailView: android.view.View getHeaderView()> -> _SOURCE_
<com.google.android.material.navigationrail.NavigationRailView: int getItemMinimumHeight()> -> _SINK_
<com.google.android.material.navigationrail.NavigationRailView: int getMaxItemCount()> -> _SOURCE_
<com.google.android.material.navigationrail.NavigationRailView: int getMenuGravity()> -> _SOURCE_
<com.google.android.material.navigationrail.NavigationRailView: void setItemMinimumHeight(int)> -> _SINK_
<com.google.android.material.navigationrail.NavigationRailView: void setMenuGravity(int)> -> _SINK_
<androidx.compose.foundation.shape.CornerSize: float getCornerSize(android.graphics.RectF)> -> _SOURCE_
<com.google.android.material.shape.EdgeTreatment: void getEdgePath(float,float,com.google.android.material.shape.ShapePath)> -> _SOURCE_
<com.google.android.material.shape.MaterialShapeUtils: void setElevation(android.view.View,float)> -> _SINK_
<com.google.android.material.shape.MaterialShapeUtils: void setParentAbsoluteElevation(android.view.View)> -> _SINK_
<com.google.android.material.shape.MaterialShapeUtils: void setParentAbsoluteElevation(android.view.View,com.google.android.material.shape.MaterialShapeDrawable)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: com.google.android.material.badge.BadgeDrawable getBadge(int)> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: android.content.res.ColorStateList getItemActiveIndicatorColor()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemActiveIndicatorHeight()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: com.google.android.material.shape.ShapeAppearanceModel getItemActiveIndicatorShapeAppearance()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemActiveIndicatorWidth()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: android.graphics.drawable.Drawable getItemBackground()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemBackgroundResource()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemIconSize()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: android.content.res.ColorStateList getItemIconTintList()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemPaddingBottom()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemPaddingTop()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: android.content.res.ColorStateList getItemRippleColor()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemTextAppearanceActive()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getItemTextAppearanceInactive()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: android.content.res.ColorStateList getItemTextColor()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getLabelVisibilityMode()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getMaxItemCount()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: android.view.Menu getMenu()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: int getSelectedItemId()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: void inflateMenu(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: boolean isItemActiveIndicatorEnabled()> -> _SOURCE_
<com.google.android.material.navigation.NavigationBarView: void setElevation(float)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemActiveIndicatorColor(android.content.res.ColorStateList)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemActiveIndicatorEnabled(boolean)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemActiveIndicatorHeight(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemActiveIndicatorWidth(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemBackground(android.graphics.drawable.Drawable)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemBackgroundResource(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemIconSize(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemIconSizeRes(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemIconTintList(android.content.res.ColorStateList)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemPaddingBottom(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemRippleColor(android.content.res.ColorStateList)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemTextAppearanceActive(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemTextAppearanceInactive(int)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setItemTextColor(android.content.res.ColorStateList)> -> _SINK_
<com.google.android.material.navigation.NavigationBarView: void setLabelVisibilityMode(int)> -> _SINK_
<com.google.android.material.shape.ShapePath: void addArc(float,float,float,float,float,float)> -> _SINK_
<com.google.android.material.shape.ShapePath: void cubicToPoint(float,float,float,float,float,float)> -> _SINK_
<com.google.android.material.shape.ShapePath: void lineTo(float,float)> -> _SINK_
<com.google.android.material.shape.ShapePath: void quadToPoint(float,float,float,float)> -> _SINK_
<com.google.android.material.shape.ShapePath: void reset(float,float)> -> _SINK_
<androidx.wear.tiles.material.CircularProgressIndicator: int getIndicatorDirection()> -> _SOURCE_
<androidx.wear.tiles.material.CircularProgressIndicator: int getIndicatorInset()> -> _SOURCE_
<androidx.wear.tiles.material.CircularProgressIndicator: int getIndicatorSize()> -> _SOURCE_
<androidx.wear.tiles.material.CircularProgressIndicator: void setIndicatorDirection(int)> -> _SINK_
<androidx.wear.tiles.material.CircularProgressIndicator: void setIndicatorInset(int)> -> _SINK_
<androidx.wear.tiles.material.CircularProgressIndicator: void setIndicatorSize(int)> -> _SINK_
<androidx.wear.tiles.material.CircularProgressIndicator: void setTrackThickness(int)> -> _SINK_
<com.google.android.material.shape.ShapePath.PathQuadOperation: void applyToPath(android.graphics.Matrix,android.graphics.Path)> -> _SOURCE_
<com.google.android.material.shape.ShapePath.PathCubicOperation: void applyToPath(android.graphics.Matrix,android.graphics.Path)> -> _SOURCE_
<com.google.android.material.shape.ShapePath.PathOperation: void applyToPath(android.graphics.Matrix,android.graphics.Path)> -> _SOURCE_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setAllCornerSizes(androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setAllCornerSizes(float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setAllCorners(com.google.android.material.shape.CornerTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setAllCorners(int,float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setAllEdges(com.google.android.material.shape.EdgeTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomEdge(com.google.android.material.shape.EdgeTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomLeftCorner(int,float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomLeftCorner(int,androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomLeftCorner(com.google.android.material.shape.CornerTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomLeftCornerSize(androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomLeftCornerSize(float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomRightCorner(com.google.android.material.shape.CornerTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomRightCorner(int,androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomRightCorner(int,float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomRightCornerSize(float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setBottomRightCornerSize(androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setLeftEdge(com.google.android.material.shape.EdgeTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setRightEdge(com.google.android.material.shape.EdgeTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopEdge(com.google.android.material.shape.EdgeTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopLeftCorner(com.google.android.material.shape.CornerTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopLeftCorner(int,float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopLeftCorner(int,androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopLeftCornerSize(androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopLeftCornerSize(float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopRightCorner(com.google.android.material.shape.CornerTreatment)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopRightCorner(int,androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopRightCorner(int,float)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopRightCornerSize(androidx.compose.foundation.shape.CornerSize)> -> _SINK_
<com.google.android.material.shape.ShapeAppearanceModel.Builder: com.google.android.material.shape.ShapeAppearanceModel.Builder setTopRightCornerSize(float)> -> _SINK_
<com.google.android.material.shape.Shapeable: ShapeAppearanceModel getShapeAppearanceModel()> -> _SOURCE_
<com.google.android.material.progressindicator.LinearProgressIndicator: int getIndeterminateAnimationType()> -> _SOURCE_
<com.google.android.material.progressindicator.LinearProgressIndicator: int getIndicatorDirection()> -> _SOURCE_
<com.google.android.material.progressindicator.LinearProgressIndicator: void setIndeterminateAnimationType(int)> -> _SINK_
<com.google.android.material.progressindicator.LinearProgressIndicator: void setIndicatorColor(int[])> -> _SINK_
<com.google.android.material.progressindicator.LinearProgressIndicator: void setIndicatorDirection(int)> -> _SINK_
<com.google.android.material.progressindicator.LinearProgressIndicator: void setProgressCompat(int,boolean)> -> _SINK_
<com.google.android.material.progressindicator.LinearProgressIndicator: void setTrackCornerRadius(int)> -> _SINK_
<com.google.android.material.shape.ShapePath.PathArcOperation: void applyToPath(android.graphics.Matrix,android.graphics.Path)> -> _SOURCE_
<com.google.android.material.shape.ShapePath.PathLineOperation: void applyToPath(android.graphics.Matrix,android.graphics.Path)> -> _SOURCE_
<com.google.android.material.radiobutton.MaterialRadioButton: void setUseMaterialThemeColors(boolean)> -> _SINK_
<com.google.android.material.shape.CornerTreatment: void getCornerPath(float,float,com.google.android.material.shape.ShapePath)> -> _SOURCE_
<com.google.android.material.tabs.TabLayoutMediator: boolean isAttached()> -> _SOURCE_
<com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper: void setContainingScrollView(android.widget.ScrollView)> -> _SINK_
<com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper: void setMaterialShapeDrawable(com.google.android.material.shape.MaterialShapeDrawable)> -> _SINK_
<com.google.android.material.snackbar.BaseTransientBottomBar: android.view.View getAnchorView()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: android.content.Context getContext()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: int getDuration()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: android.view.View getView()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: boolean isAnchorViewLayoutListenerEnabled()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: boolean isShown()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: boolean isShownOrQueued()> -> _SOURCE_
<com.google.android.material.snackbar.BaseTransientBottomBar: B setAnchorView(android.view.View)> -> _SINK_
<com.google.android.material.snackbar.BaseTransientBottomBar: void setAnchorViewLayoutListenerEnabled(boolean)> -> _SINK_
<com.google.android.material.snackbar.BaseTransientBottomBar: B setAnimationMode(int)> -> _SINK_
<com.google.android.material.snackbar.BaseTransientBottomBar: B setDuration(int)> -> _SINK_
<com.google.android.material.snackbar.BaseTransientBottomBar: B setGestureInsetBottomIgnored(boolean)> -> _SINK_
<com.google.android.material.theme.overlay.MaterialThemeOverlay: Context wrap(android.content.Context,android.util.AttributeSet,int,int)> -> _SINK_
<com.google.android.material.tabs.TabLayoutMediator.TabConfigurationStrategy: void onConfigureTab(com.google.android.material.tabs.TabLayout.Tab,int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker build()> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setHour(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setInputMode(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setMinute(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setNegativeButtonText(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setNegativeButtonText(java.lang.CharSequence)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setPositiveButtonText(java.lang.CharSequence)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setPositiveButtonText(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setTheme(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setTimeFormat(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setTitleText(int)> -> _SINK_
<com.google.android.material.timepicker.MaterialTimePicker.Builder: com.google.android.material.timepicker.MaterialTimePicker.Builder setTitleText(java.lang.CharSequence)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: float getIncomingEndScale()> -> _SINK_
<com.google.android.material.transition.ScaleProvider: float getOutgoingEndScale()> -> _SINK_
<com.google.android.material.transition.ScaleProvider: float getOutgoingStartScale()> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setGrowing(boolean)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setIncomingEndScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setIncomingStartScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setOutgoingEndScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setOutgoingStartScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setScaleOnDisappear(boolean)> -> _SINK_
<com.google.android.material.transition.FadeProvider: float getIncomingEndThreshold()> -> _SOURCE_
<com.google.android.material.transition.FadeProvider: void setIncomingEndThreshold(float)> -> _SINK_
<com.google.android.material.transition.FadeThroughProvider: void setProgressThreshold(float)> -> _SINK_
<com.google.android.material.transition.FadeProvider: float getIncomingEndThreshold()> -> _SOURCE_
<com.google.android.material.transition.FadeProvider: void setIncomingEndThreshold(float)> -> _SINK_
<com.google.android.play.core.appupdate.AppUpdateOptions: int appUpdateType()> -> _SINK_
<com.google.android.play.core.appupdate.AppUpdateOptions: AppUpdateOptions defaultOptions(int)> -> _SOURCE_
<com.google.android.material.transition.ScaleProvider: float getIncomingEndScale()> -> _SINK_
<com.google.android.material.transition.ScaleProvider: float getOutgoingEndScale()> -> _SINK_
<com.google.android.material.transition.ScaleProvider: float getOutgoingStartScale()> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setGrowing(boolean)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setIncomingEndScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setIncomingStartScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setOutgoingEndScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setOutgoingStartScale(float)> -> _SINK_
<com.google.android.material.transition.ScaleProvider: void setScaleOnDisappear(boolean)> -> _SINK_
<com.google.android.play.core.appupdate.AppUpdateOptions.Builder: AppUpdateOptions.Builder setAppUpdateType(int)> -> _SINK_
<com.google.android.material.switchmaterial.SwitchMaterial: boolean isUseMaterialThemeColors()> -> _SOURCE_
<com.google.android.material.switchmaterial.SwitchMaterial: void setUseMaterialThemeColors(boolean)> -> _SINK_
<com.google.android.play.core.assetpacks.AssetPackException: int getErrorCode()> -> _SOURCE_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: Task<AppUpdateInfo> getAppUpdateInfo()> -> _SOURCE_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: java.lang.Integer getTypeForUpdateInProgress()> -> _SOURCE_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: boolean isConfirmationDialogVisible()> -> _SOURCE_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: boolean isImmediateFlowVisible()> -> _SOURCE_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: boolean isInstallSplashScreenVisible()> -> _SOURCE_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: void setBytesDownloaded(long)> -> _SINK_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: void setClientVersionStalenessDays(java.lang.Integer)> -> _SINK_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: void setInstallErrorCode(int)> -> _SINK_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: void setTotalBytesToDownload(long)> -> _SINK_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: void setUpdateAvailable(int)> -> _SINK_
<com.google.android.play.core.appupdate.testing.FakeAppUpdateManager: void setUpdatePriority(int)> -> _SINK_
<com.google.android.material.transition.FadeThroughProvider: void setProgressThreshold(float)> -> _SINK_
<com.google.android.play.core.assetpacks.AssetLocation: long offset()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetLocation: String path()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetLocation: long size()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackState: long bytesDownloaded()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackState: int errorCode()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackState: String name()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackState: int status()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackState: long totalBytesToDownload()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackState: int transferProgressPercentage()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackStates: java.util.Map packStates()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackStates: long totalBytes()> -> _SOURCE_
<com.google.android.play.core.install.InstallException: int getErrorCode()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: int availableVersionCode()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: long bytesDownloaded()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: java.lang.Integer clientVersionStalenessDays()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: int installStatus()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: boolean isUpdateTypeAllowed(com.google.android.play.core.appupdate.AppUpdateOptions)> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: boolean isUpdateTypeAllowed(int)> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: java.lang.String packageName()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: long totalBytesToDownload()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: int updateAvailability()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateInfo: int updatePriority()> -> _SOURCE_
<com.google.android.play.core.appupdate.AppUpdateManager: Task<AppUpdateInfo> getAppUpdateInfo()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackLocation: String assetsPath()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackLocation: int packStorageMethod()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackLocation: String path()> -> _SOURCE_
<com.google.android.play.core.review.ReviewManager: Task<ReviewInfo> requestReviewFlow()> -> _SOURCE_
<com.google.android.play.core.review.testing.FakeReviewManager: Task<ReviewInfo> requestReviewFlow()> -> _SOURCE_
<com.google.android.play.core.install.InstallState: long bytesDownloaded()> -> _SOURCE_
<com.google.android.play.core.install.InstallState: int installErrorCode()> -> _SOURCE_
<com.google.android.play.core.install.InstallState: int installStatus()> -> _SOURCE_
<com.google.android.play.core.install.InstallState: String packageName()> -> _SOURCE_
<com.google.android.play.core.install.InstallState: long totalBytesToDownload()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackManager: AssetLocation getAssetLocation(java.lang.String,java.lang.String)> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackManager: AssetPackLocation getPackLocation(java.lang.String)> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackManager: java.util.Map getPackLocations()> -> _SOURCE_
<com.google.android.play.core.assetpacks.AssetPackManager: Task<AssetPackStates> getPackStates(List<String>)> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallHelper: void loadLibrary(android.content.Context,java.lang.String)> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallException: int getErrorCode()> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallRequest.Builder: com.google.android.play.core.splitinstall.SplitInstallRequest.Builder addLanguage(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<com.google.android.play.core.splitinstall.SplitInstallRequest.Builder: com.google.android.play.core.splitinstall.SplitInstallRequest.Builder addModule(java.lang.String)> -> _SINK_
<com.google.android.play.core.review.ReviewException: int getErrorCode()> -> _SOURCE_
<com.google.android.play.core.tasks.OnFailureListener: void onFailure(java.lang.Exception)> -> _SINK_
<com.google.android.play.core.missingsplits.MissingSplitsManagerFactory: MissingSplitsManager create(android.content.Context)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Task<Void> deferredInstall(List<String>)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Task<Void> deferredLanguageInstall(List<Locale>)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Task<Void> deferredLanguageUninstall(List<Locale>)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Task<Void> deferredUninstall(List<String>)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Set<String> getInstalledLanguages()> -> _SOURCE_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Set<String> getInstalledModules()> -> _SOURCE_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Task<SplitInstallSessionState> getSessionState(int)> -> _SOURCE_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: boolean startConfirmationDialogForResult(com.google.android.play.core.splitinstall.SplitInstallSessionState,com.google.android.play.core.common.IntentSenderForResultStarter,int)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: boolean startConfirmationDialogForResult(com.google.android.play.core.splitinstall.SplitInstallSessionState,android.app.Activity,int)> -> _SINK_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManager: Task<Integer> startInstall(com.google.android.play.core.splitinstall.SplitInstallRequest)> -> _SINK_
<com.google.android.play.core.common.IntentSenderForResultStarter: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<com.google.android.play.core.tasks.Tasks: Task<Void> whenAll(Collection<?)> -> _SOURCE_
<com.google.android.things.device.TimeManager: TimeManager getInstance()> -> _SOURCE_
<com.google.android.things.device.TimeManager: void setAutoTimeEnabled(boolean)> -> _SINK_
<com.google.android.things.device.TimeManager: void setTime(long)> -> _SINK_
<com.google.android.things.device.TimeManager: void setTimeFormat(int)> -> _SINK_
<com.google.android.things.device.TimeManager: void setTimeZone(java.lang.String)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothProfileManager: boolean disableProfiles(List<Integer>)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothProfileManager: boolean enableAndDisableProfiles(List<Integer>,List<Integer>)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothProfileManager: boolean enableProfiles(List<Integer>)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothProfileManager: List<Integer> getEnabledProfiles()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothProfileManager: BluetoothProfileManager getInstance()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothProfileManager: boolean setEnabledProfiles(List<Integer>)> -> _SINK_
<com.google.android.things.device.DeviceManager: DeviceManager getInstance()> -> _SOURCE_
<com.google.android.things.device.DeviceManager: void setSystemLocales(android.os.LocaleList)> -> _SINK_
<com.google.android.things.lowpan.LowpanCredential: LowpanCredential createMasterKey(java.lang.String)> -> _SOURCE_
<com.google.android.things.lowpan.LowpanCredential: LowpanCredential createMasterKey(byte[])> -> _SOURCE_
<com.google.android.things.lowpan.LowpanCredential: byte[] getMasterKey()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanCredential: boolean isMasterKey()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanCredential: java.lang.String toString()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity.Builder: com.google.android.things.lowpan.LowpanIdentity build()> -> _SINK_
<com.google.android.things.lowpan.LowpanIdentity.Builder: com.google.android.things.lowpan.LowpanIdentity.Builder setChannel(int)> -> _SINK_
<com.google.android.things.lowpan.LowpanIdentity.Builder: com.google.android.things.lowpan.LowpanIdentity.Builder setName(java.lang.String)> -> _SINK_
<com.google.android.things.lowpan.LowpanIdentity.Builder: com.google.android.things.lowpan.LowpanIdentity.Builder setPanid(int)> -> _SINK_
<com.google.android.things.lowpan.LowpanIdentity.Builder: com.google.android.things.lowpan.LowpanIdentity.Builder setRawName(byte[])> -> _SINK_
<com.google.android.things.lowpan.LowpanIdentity.Builder: com.google.android.things.lowpan.LowpanIdentity.Builder setXpanid(byte[])> -> _SINK_
<com.google.android.things.lowpan.LowpanEnergyScanResult: int getChannel()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanEnergyScanResult: int getMaxRssi()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanEnergyScanResult: java.lang.String toString()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothClassFactory: BluetoothClass build(int,int)> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothClassFactory: BluetoothClass build(byte[])> -> _SINK_
<com.google.android.things.lowpan.LowpanIdentity: int getChannel()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity: java.lang.String getName()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity: int getPanid()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity: byte[] getRawName()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity: byte[] getXpanid()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity: boolean isNameValid()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanIdentity: java.lang.String toString()> -> _SOURCE_
<com.google.android.play.core.splitinstall.testing.FakeSplitInstallManagerFactory: FakeSplitInstallManager create(android.content.Context,java.io.File)> -> _SINK_
<com.google.android.things.lowpan.LowpanInterface: void form(com.google.android.things.lowpan.LowpanProvisioningParams)> -> _SINK_
<com.google.android.things.lowpan.LowpanInterface: com.google.android.things.lowpan.LowpanProvisioningParams getLowpanProvisioningParams(boolean)> -> _SOURCE_
<com.google.android.things.lowpan.LowpanInterface: java.lang.String getName()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanInterface: int getRole()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanInterface: int getState()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanInterface: String[] getSupportedNetworkTypes()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanInterface: void join(com.google.android.things.lowpan.LowpanProvisioningParams)> -> _SINK_
<com.google.android.things.lowpan.LowpanInterface: void provision(com.google.android.things.lowpan.LowpanProvisioningParams)> -> _SINK_
<com.google.android.things.pio.Pwm: default String getName()> -> _SOURCE_
<com.google.android.things.pio.Pwm: void setPwmDutyCycle(double)> -> _SINK_
<com.google.android.things.pio.Pwm: void setPwmFrequencyHz(double)> -> _SINK_
<com.google.android.things.pio.PeripheralManager: List<String> getGpioList()> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: List<String> getI2cBusList()> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: PeripheralManager getInstance()> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: List<String> getPwmList()> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: List<String> getSpiBusList()> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: List<String> getUartDeviceList()> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: com.google.android.things.pio.SpiDevice openSpiDevice(java.lang.String)> -> _SOURCE_
<com.google.android.things.pio.PeripheralManager: com.google.android.things.pio.UartDevice openUartDevice(java.lang.String)> -> _SOURCE_
<com.google.android.things.pio.I2cDevice: default String getName()> -> _SOURCE_
<com.google.android.things.pio.I2cDevice: void read(byte[],int)> -> _SOURCE_
<com.google.android.things.pio.I2cDevice: byte readRegByte(int)> -> _SOURCE_
<com.google.android.things.pio.I2cDevice: short readRegWord(int)> -> _SOURCE_
<com.google.android.things.pio.I2cDevice: void write(byte[],int)> -> _SINK_
<com.google.android.things.pio.I2cDevice: void writeRegBuffer(int,byte[],int)> -> _SINK_
<com.google.android.things.pio.I2cDevice: void writeRegByte(int,byte)> -> _SINK_
<com.google.android.things.pio.I2cDevice: void writeRegWord(int,short)> -> _SINK_
<com.google.android.play.core.tasks.RuntimeExecutionException: int getErrorCode()> -> _SOURCE_
<com.google.android.things.update.UpdatePolicy.Builder: com.google.android.things.update.UpdatePolicy build()> -> _SINK_
<com.google.android.things.update.UpdatePolicy.Builder: com.google.android.things.update.UpdatePolicy.Builder setApplyDeadline(long,android.icu.util.TimeUnit)> -> _SINK_
<com.google.android.things.update.UpdatePolicy.Builder: com.google.android.things.update.UpdatePolicy.Builder setPolicy(int)> -> _SINK_
<com.google.android.things.lowpan.LowpanBeaconInfo: byte[] getBeaconAddress()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanBeaconInfo: Collection<Integer> getFlags()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanBeaconInfo: com.google.android.things.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanBeaconInfo: int getLqi()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanBeaconInfo: int getRssi()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanBeaconInfo: boolean isFlagSet(int)> -> _SOURCE_
<com.google.android.things.update.UpdateManager: java.lang.String getChannel()> -> _SOURCE_
<com.google.android.things.update.UpdateManager: UpdateManager getInstance()> -> _SOURCE_
<com.google.android.things.update.UpdateManager: com.google.android.things.update.UpdateManagerStatus getStatus()> -> _SOURCE_
<com.google.android.things.update.UpdateManager: void setChannel(java.lang.String)> -> _SINK_
<com.google.android.things.update.UpdateManager: void setPolicy(com.google.android.things.update.UpdatePolicy)> -> _SINK_
<com.google.android.things.pio.Gpio: default String getName()> -> _SOURCE_
<com.google.android.things.pio.Gpio: boolean getValue()> -> _SOURCE_
<com.google.android.things.pio.Gpio: void setActiveType(int)> -> _SINK_
<com.google.android.things.pio.Gpio: void setDirection(int)> -> _SINK_
<com.google.android.things.pio.Gpio: void setEdgeTriggerType(int)> -> _SINK_
<com.google.android.things.pio.Gpio: void setValue(boolean)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: void confirmOrDenyConnection(android.bluetooth.BluetoothDevice,com.google.android.things.bluetooth.ConnectionParams,boolean)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: boolean connect(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: boolean connect(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: boolean finishPairing(android.bluetooth.BluetoothDevice)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: boolean finishPairing(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: List<Integer> getConnectableProfiles(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConnectionManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConnectionManager: BluetoothConnectionManager getInstance()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConnectionManager: void registerConnectionCallback(com.google.android.things.bluetooth.BluetoothConnectionCallback)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConnectionManager: void registerPairingCallback(com.google.android.things.bluetooth.BluetoothPairingCallback)> -> _SINK_
<com.google.android.things.userdriver.input.InputDriverEvent: void setContact(boolean)> -> _SINK_
<com.google.android.things.userdriver.input.InputDriverEvent: void setKeyPressed(int,boolean)> -> _SINK_
<com.google.android.things.userdriver.input.InputDriverEvent: void setPosition(int,int)> -> _SINK_
<com.google.android.play.core.tasks.Task: Exception getException()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanScanner: int getTxPower()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanScanner: void setTxPower(int)> -> _SINK_
<com.google.android.play.core.splitinstall.SplitInstallManager: Set<String> getInstalledLanguages()> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallManager: Set<String> getInstalledModules()> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallManager: Task<SplitInstallSessionState> getSessionState(int)> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallManager: Task<List<SplitInstallSessionState>> getSessionStates()> -> _SOURCE_
<com.google.android.play.core.splitinstall.SplitInstallManager: Task<Integer> startInstall(com.google.android.play.core.splitinstall.SplitInstallRequest)> -> _SINK_
<com.google.android.play.core.missingsplits.MissingSplitsManager: boolean disableAppIfMissingRequiredSplits()> -> _SINK_
<com.google.android.play.core.missingsplits.MissingSplitsManager: boolean isMissingRequiredSplits()> -> _SINK_
<com.google.android.things.userdriver.UserDriverManager: UserDriverManager getInstance()> -> _SOURCE_
<com.google.android.things.userdriver.UserDriverManager: void registerGnssDriver(com.google.android.things.userdriver.location.GnssDriver)> -> _SINK_
<com.google.android.things.userdriver.UserDriverManager: void registerSensor(com.google.android.things.userdriver.sensor.UserSensor)> -> _SOURCE_
<com.google.android.things.userdriver.pio.SpiBusDriver: SpiDevice createSpiDevice(java.lang.String)> -> _SINK_
<com.google.android.things.userdriver.pio.SpiBusDriver: String[] getChipSelectNames()> -> _SOURCE_
<com.google.android.things.userdriver.pio.PioDriverManager: PioDriverManager getInstance()> -> _SOURCE_
<com.google.android.things.userdriver.pio.UartDeviceDriver: default String getName()> -> _SOURCE_
<com.google.android.things.userdriver.pio.UartDeviceDriver: void open()> -> _SINK_
<android.icu.util.VersionInfo: java.lang.String toString()> -> _SOURCE_
<com.google.android.things.lowpan.LowpanScanner.Callback: void onEnergyScanResult(com.google.android.things.lowpan.LowpanEnergyScanResult)> -> _SOURCE_
<com.google.android.things.lowpan.LowpanScanner.Callback: void onNetScanBeacon(com.google.android.things.lowpan.LowpanBeaconInfo)> -> _SOURCE_
<com.google.android.things.pio.UartDevice: default String getName()> -> _SOURCE_
<com.google.android.things.pio.UartDevice: int read(byte[],int)> -> _SOURCE_
<com.google.android.things.pio.UartDevice: void setBaudrate(int)> -> _SINK_
<com.google.android.things.pio.UartDevice: void setDataSize(int)> -> _SINK_
<com.google.android.things.pio.UartDevice: void setHardwareFlowControl(int)> -> _SINK_
<com.google.android.things.pio.UartDevice: void setModemControl(int)> -> _SINK_
<com.google.android.things.pio.UartDevice: void setParity(int)> -> _SINK_
<com.google.android.things.pio.UartDevice: int write(byte[],int)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensorDriver: UserSensorReading read()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensorDriver: default void setEnabled(boolean)> -> _SINK_
<com.google.android.wearable.playstore.PlayStoreAvailability: int getPlayStoreAvailabilityOnPhone(android.content.Context)> -> _SOURCE_
<com.google.android.things.userdriver.input.InputDriver.Builder: com.google.android.things.userdriver.input.InputDriver.Builder setName(java.lang.String)> -> _SINK_
<com.google.android.things.userdriver.input.InputDriver.Builder: com.google.android.things.userdriver.input.InputDriver.Builder setProductId(int)> -> _SINK_
<com.google.android.things.userdriver.input.InputDriver.Builder: com.google.android.things.userdriver.input.InputDriver.Builder setSupportedKeys(int[])> -> _SINK_
<com.google.android.things.userdriver.input.InputDriver.Builder: com.google.android.things.userdriver.input.InputDriver.Builder setVendorId(int)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: android.location.GnssStatus build()> -> _SOURCE_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setAzimuth(int,float)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setCarrierFrequency(int,float)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setCn0DbHz(int,float)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setConstellation(int,int)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setElevation(int,float)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setFlags(int,int)> -> _SINK_
<com.google.android.things.userdriver.location.GnssStatusBuilder: com.google.android.things.userdriver.location.GnssStatusBuilder setSvid(int,int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: default String getName()> -> _SOURCE_
<com.google.android.things.pio.SpiDevice: default void read(byte[],int)> -> _SOURCE_
<com.google.android.things.pio.SpiDevice: void setBitJustification(int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: void setBitsPerWord(int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: void setCsChange(boolean)> -> _SINK_
<com.google.android.things.pio.SpiDevice: void setDelay(int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: void setFrequency(int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: void setMode(int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: void transfer(byte[],byte[],int)> -> _SINK_
<com.google.android.things.pio.SpiDevice: default void write(byte[],int)> -> _SINK_
<com.google.android.wearable.intent.RemoteIntent: void startRemoteActivity(android.content.Context,android.content.Intent,android.os.ResultReceiver,java.lang.String)> -> _SINK_
<com.google.android.wearable.intent.RemoteIntent: void startRemoteActivity(android.content.Context,android.content.Intent,android.os.ResultReceiver)> -> _SINK_
<com.google.android.things.lowpan.LowpanProvisioningParams: com.google.android.things.lowpan.LowpanCredential getLowpanCredential()> -> _SINK_
<com.google.android.things.lowpan.LowpanProvisioningParams: com.google.android.things.lowpan.LowpanIdentity getLowpanIdentity()> -> _SINK_
<com.google.android.things.lowpan.LowpanProvisioningParams: java.lang.String toString()> -> _SOURCE_
<com.google.android.things.userdriver.pio.GpioDriver: default String getName()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: UserSensorDriver getDriver()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: int getMaxDelay()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: float getMaxRange()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: int getMinDelay()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: String getName()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: float getPower()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: int getReportingMode()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: float getResolution()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: String getStringType()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: int getType()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: UUID getUuid()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: String getVendor()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor: int getVersion()> -> _SOURCE_
<com.google.android.things.userdriver.location.GnssDriver: void reportLocation(android.location.Location)> -> _SOURCE_
<com.google.android.things.userdriver.location.GnssDriver: void reportMeasurements(android.location.GnssMeasurementsEvent)> -> _SINK_
<com.google.android.things.userdriver.location.GnssDriver: void reportNmea(java.lang.String)> -> _SOURCE_
<com.google.android.things.userdriver.location.GnssDriver: void reportStatus(android.location.GnssStatus)> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConfigManager: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConfigManager: BluetoothConfigManager getInstance()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConfigManager: int getIoCapability()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConfigManager: int getLeIoCapability()> -> _SOURCE_
<com.google.android.things.bluetooth.BluetoothConfigManager: boolean setBluetoothClass(android.bluetooth.BluetoothClass)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConfigManager: boolean setIoCapability(int)> -> _SINK_
<com.google.android.things.bluetooth.BluetoothConfigManager: boolean setLeIoCapability(int)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor build()> -> _SOURCE_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setCustomType(int,java.lang.String,int)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setDriver(com.google.android.things.userdriver.sensor.UserSensorDriver)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setMaxDelay(int)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setMaxRange(float)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setMinDelay(int)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setName(java.lang.String)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setPower(float)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setResolution(float)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setType(int)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setUuid(java.util.UUID)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setVendor(java.lang.String)> -> _SINK_
<com.google.android.things.userdriver.sensor.UserSensor.Builder: com.google.android.things.userdriver.sensor.UserSensor.Builder setVersion(int)> -> _SINK_
<com.google.android.things.userdriver.pio.PwmDriver: default String getName()> -> _SOURCE_
<dalvik.system.DexFile: Enumeration<String> entries()> -> _SOURCE_
<dalvik.system.DexFile: java.lang.String getName()> -> _SOURCE_
<dalvik.system.DexFile: boolean isDexOptNeeded(java.lang.String)> -> _SOURCE_
<dalvik.system.DexFile: java.lang.String toString()> -> _SOURCE_
<dalvik.system.DelegateLastClassLoader: java.net.URL getResource(java.lang.String)> -> _SOURCE_
<dalvik.system.DelegateLastClassLoader: Enumeration<URL> getResources(java.lang.String)> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.Object getPropagationId()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.String toString()> -> _SOURCE_
<dalvik.system.BaseDexClassLoader: java.lang.String findLibrary(java.lang.String)> -> _SOURCE_
<dalvik.system.BaseDexClassLoader: java.lang.String toString()> -> _SOURCE_
<java.beans.PropertyChangeSupport: void fireIndexedPropertyChange(java.lang.String,int,int,int)> -> _SINK_
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,int,int)> -> _SINK_
<java.beans.PropertyChangeSupport: PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)> -> _SOURCE_
<java.beans.IndexedPropertyChangeEvent: int getIndex()> -> _SOURCE_
<java.io.ByteArrayInputStream: int available()> -> _SOURCE_
<java.io.ByteArrayInputStream: void mark(int)> -> _SINK_
<java.io.ByteArrayInputStream: int read()> -> _SOURCE_
<java.io.ByteArrayInputStream: int readNBytes(byte[],int,int)> -> _SOURCE_
<java.io.CharArrayReader: int read()> -> _SOURCE_
<java.io.CharArrayReader: int read(char[],int,int)> -> _SOURCE_
<java.io.BufferedWriter: void newLine()> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.beans.PropertyChangeListenerProxy: java.lang.String getPropertyName()> -> _SOURCE_
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<java.io.FileOutputStream: FileDescriptor getFD()> -> _SOURCE_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.BufferedInputStream: int available()> -> _SOURCE_
<java.io.BufferedInputStream: int read()> -> _SOURCE_
<java.io.BufferedInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.BufferedReader: Stream<String> lines()> -> _SOURCE_
<java.io.BufferedReader: int read()> -> _SOURCE_
<java.io.BufferedReader: int read(char[],int,int)> -> _SOURCE_
<java.io.BufferedReader: java.lang.String readLine()> -> _SOURCE_
<java.io.File: boolean canExecute()> -> _SOURCE_
<java.io.File: boolean canRead()> -> _SOURCE_
<java.io.File: boolean canWrite()> -> _SOURCE_
<java.io.File: boolean exists()> -> _SOURCE_
<java.io.File: java.io.File getAbsoluteFile()> -> _SOURCE_
<java.io.File: java.lang.String getAbsolutePath()> -> _SOURCE_
<java.io.File: java.io.File getCanonicalFile()> -> _SOURCE_
<java.io.File: java.lang.String getCanonicalPath()> -> _SOURCE_
<java.io.File: long getFreeSpace()> -> _SOURCE_
<java.io.File: java.lang.String getName()> -> _SOURCE_
<java.io.File: java.lang.String getParent()> -> _SOURCE_
<java.io.File: java.io.File getParentFile()> -> _SOURCE_
<java.io.File: java.lang.String getPath()> -> _SOURCE_
<java.io.File: long getTotalSpace()> -> _SOURCE_
<java.io.File: long getUsableSpace()> -> _SOURCE_
<java.io.File: int hashCode()> -> _SOURCE_
<java.io.File: boolean isAbsolute()> -> _SOURCE_
<java.io.File: boolean isDirectory()> -> _SOURCE_
<java.io.File: boolean isFile()> -> _SOURCE_
<java.io.File: boolean isHidden()> -> _SOURCE_
<java.io.File: long lastModified()> -> _SOURCE_
<java.io.File: long length()> -> _SOURCE_
<java.io.File: String[] list(java.io.FilenameFilter)> -> _SOURCE_
<java.io.File: String[] list()> -> _SOURCE_
<java.io.File: File[] listFiles()> -> _SOURCE_
<java.io.File: File[] listFiles(java.io.FileFilter)> -> _SOURCE_
<java.io.File: File[] listFiles(java.io.FilenameFilter)> -> _SOURCE_
<java.io.File: File[] listRoots()> -> _SOURCE_
<java.io.File: boolean mkdir()> -> _SOURCE_
<java.io.File: boolean mkdirs()> -> _SOURCE_
<java.io.File: boolean renameTo(java.io.File)> -> _SINK_
<java.io.File: boolean setExecutable(boolean,boolean)> -> _SINK_
<java.io.File: boolean setLastModified(long)> -> _SOURCE_
<java.io.File: boolean setReadable(boolean)> -> _SINK_
<java.io.File: boolean setReadable(boolean,boolean)> -> _SINK_
<java.io.File: boolean setWritable(boolean,boolean)> -> _SINK_
<java.io.File: boolean setWritable(boolean)> -> _SINK_
<java.io.File: android.graphics.Path toPath()> -> _SOURCE_
<java.io.File: java.lang.String toString()> -> _SOURCE_
<java.io.File: java.net.URI toURI()> -> _SOURCE_
<java.io.Externalizable: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<java.io.FileFilter: boolean accept(java.io.File)> -> _SOURCE_
<java.io.Console: java.io.Console format(java.lang.String,Object[])> -> _SINK_
<java.io.Console: java.io.Console printf(java.lang.String,Object[])> -> _SINK_
<java.io.Console: java.lang.String readLine()> -> _SOURCE_
<java.io.Console: char[] readPassword()> -> _SOURCE_
<java.io.Console: android.se.omapi.Reader reader()> -> _SOURCE_
<java.io.Console: java.io.PrintWriter writer()> -> _SOURCE_
<java.io.BufferedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.BufferedOutputStream: void write(int)> -> _SINK_
<java.io.ByteArrayOutputStream: int size()> -> _SOURCE_
<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)> -> _SINK_
<java.io.ByteArrayOutputStream: java.lang.String toString(java.nio.charset.Charset)> -> _SINK_
<java.io.ByteArrayOutputStream: java.lang.String toString()> -> _SINK_
<java.io.ByteArrayOutputStream: java.lang.String toString(int)> -> _SOURCE_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(int)> -> _SINK_
<java.io.ByteArrayOutputStream: void writeBytes(byte[])> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> -> _SINK_
<java.io.DataOutputStream: int size()> -> _SOURCE_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.FileDescriptor: boolean valid()> -> _SOURCE_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.CharArrayWriter: int size()> -> _SOURCE_
<java.io.CharArrayWriter: void write(int)> -> _SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.CharArrayWriter: void write(char[],int,int)> -> _SINK_
<java.io.CharArrayWriter: void writeTo(java.io.Writer)> -> _SINK_
<java.io.DataInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: boolean readBoolean()> -> _SOURCE_
<java.io.DataInputStream: byte readByte()> -> _SOURCE_
<java.io.DataInputStream: char readChar()> -> _SOURCE_
<java.io.DataInputStream: double readDouble()> -> _SOURCE_
<java.io.DataInputStream: float readFloat()> -> _SOURCE_
<java.io.DataInputStream: void readFully(byte[])> -> _SOURCE_
<java.io.DataInputStream: void readFully(byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: int readInt()> -> _SOURCE_
<java.io.DataInputStream: String readLine()> -> _SOURCE_
<java.io.DataInputStream: long readLong()> -> _SOURCE_
<java.io.DataInputStream: short readShort()> -> _SOURCE_
<java.io.DataInputStream: String readUTF()> -> _SOURCE_
<java.io.DataInputStream: String readUTF(java.io.DataInput)> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedByte()> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedShort()> -> _SOURCE_
<java.io.DataOutput: void write(int)> -> _SINK_
<java.io.DataOutput: void writeBoolean(boolean)> -> _SINK_
<java.io.DataOutput: void writeByte(int)> -> _SINK_
<java.io.DataOutput: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutput: void writeChar(int)> -> _SINK_
<java.io.DataOutput: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutput: void writeDouble(double)> -> _SINK_
<java.io.DataOutput: void writeFloat(float)> -> _SINK_
<java.io.DataOutput: void writeInt(int)> -> _SINK_
<java.io.DataOutput: void writeLong(long)> -> _SINK_
<java.io.DataOutput: void writeShort(int)> -> _SINK_
<java.io.DataOutput: void writeUTF(java.lang.String)> -> _SINK_
<java.awt.font.NumericShaper: NumericShaper getContextualShaper(Set<NumericShaper.Range>)> -> _SOURCE_
<java.awt.font.NumericShaper: NumericShaper getContextualShaper(int,int)> -> _SOURCE_
<java.awt.font.NumericShaper: NumericShaper getContextualShaper(Set<NumericShaper.Range>,java.awt.font.NumericShaper.Range)> -> _SOURCE_
<java.awt.font.NumericShaper: NumericShaper getContextualShaper(int)> -> _SOURCE_
<java.awt.font.NumericShaper: Set<NumericShaper.Range> getRangeSet()> -> _SOURCE_
<java.awt.font.NumericShaper: NumericShaper getShaper(int)> -> _SOURCE_
<java.awt.font.NumericShaper: NumericShaper getShaper(java.awt.font.NumericShaper.Range)> -> _SOURCE_
<java.awt.font.NumericShaper: int hashCode()> -> _SOURCE_
<java.awt.font.NumericShaper: boolean isContextual()> -> _SOURCE_
<java.awt.font.NumericShaper: void shape(char[],int,int,java.awt.font.NumericShaper.Range)> -> _SINK_
<java.awt.font.NumericShaper: void shape(char[],int,int,int)> -> _SINK_
<java.awt.font.NumericShaper: java.lang.String toString()> -> _SOURCE_
<java.io.DataInput: byte readByte()> -> _SOURCE_
<java.io.DataInput: char readChar()> -> _SOURCE_
<java.io.DataInput: double readDouble()> -> _SOURCE_
<java.io.DataInput: float readFloat()> -> _SOURCE_
<java.io.DataInput: void readFully(byte[],int,int)> -> _SOURCE_
<java.io.DataInput: int readInt()> -> _SOURCE_
<java.io.DataInput: String readLine()> -> _SOURCE_
<java.io.DataInput: long readLong()> -> _SOURCE_
<java.io.DataInput: short readShort()> -> _SOURCE_
<java.io.DataInput: String readUTF()> -> _SOURCE_
<java.io.DataInput: int readUnsignedShort()> -> _SOURCE_
<java.io.FilterInputStream: int available()> -> _SOURCE_
<java.io.FilterInputStream: int read()> -> _SOURCE_
<java.io.FilterInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.FilterOutputStream: void write(byte[])> -> _SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<java.io.InvalidClassException: java.lang.String getMessage()> -> _SOURCE_
<java.io.FilterReader: int read()> -> _SOURCE_
<java.io.FilterReader: int read(char[],int,int)> -> _SOURCE_
<java.io.LineNumberReader: int getLineNumber()> -> _SOURCE_
<java.io.LineNumberReader: void mark(int)> -> _SINK_
<java.io.LineNumberReader: int read()> -> _SOURCE_
<java.io.LineNumberReader: int read(char[],int,int)> -> _SOURCE_
<java.io.LineNumberReader: java.lang.String readLine()> -> _SOURCE_
<java.io.LineNumberReader: void setLineNumber(int)> -> _SINK_
<java.io.LineNumberReader: long skip(long)> -> _SINK_
<java.io.ObjectOutputStream: void defaultWriteObject()> -> _SOURCE_
<java.io.ObjectOutputStream: java.io.ObjectOutputStream.PutField putFields()> -> _SOURCE_
<java.io.ObjectOutputStream: void useProtocolVersion(int)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[])> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<java.io.ObjectOutputStream: void writeFields()> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<java.io.PipedInputStream: int available()> -> _SOURCE_
<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)> -> _SINK_
<java.io.PipedInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.FilterWriter: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.FilterWriter: void write(char[],int,int)> -> _SINK_
<java.io.ObjectInput: int available()> -> _SOURCE_
<java.io.ObjectInput: int read()> -> _SOURCE_
<java.io.ObjectInput: int read(byte[],int,int)> -> _SOURCE_
<java.io.ObjectInput: int read(byte[])> -> _SOURCE_
<java.io.ObjectInput: Object readObject()> -> _SOURCE_
<java.io.ObjectStreamClass: Class<?> forClass()> -> _SOURCE_
<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)> -> _SOURCE_
<java.io.ObjectStreamClass: ObjectStreamField[] getFields()> -> _SOURCE_
<java.io.ObjectStreamClass: java.lang.String getName()> -> _SOURCE_
<java.io.ObjectStreamClass: long getSerialVersionUID()> -> _SOURCE_
<java.io.ObjectStreamClass: ObjectStreamClass lookup(Class<?>)> -> _SOURCE_
<java.io.ObjectStreamClass: ObjectStreamClass lookupAny(Class<?>)> -> _SOURCE_
<java.io.ObjectStreamClass: java.lang.String toString()> -> _SOURCE_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,float)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,double)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,int)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,long)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,byte)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,short)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,char)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,boolean)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void write(java.io.ObjectOutput)> -> _SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.PipedOutputStream: void write(int)> -> _SINK_
<java.io.InputStream: int available()> -> _SOURCE_
<java.io.InputStream: InputStream nullInputStream()> -> _SOURCE_
<java.io.InputStream: int read()> -> _SOURCE_
<java.io.InputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.InputStream: int readNBytes(byte[],int,int)> -> _SOURCE_
<java.io.InputStream: byte[] readNBytes(int)> -> _SOURCE_
<java.io.ObjectInputStream: int available()> -> _SOURCE_
<java.io.ObjectInputStream: void defaultReadObject()> -> _SOURCE_
<java.io.ObjectInputStream: int read()> -> _SOURCE_
<java.io.ObjectInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.ObjectInputStream: byte readByte()> -> _SOURCE_
<java.io.ObjectInputStream: char readChar()> -> _SOURCE_
<java.io.ObjectInputStream: double readDouble()> -> _SOURCE_
<java.io.ObjectInputStream: java.io.ObjectInputStream.GetField readFields()> -> _SINK_
<java.io.ObjectInputStream: float readFloat()> -> _SOURCE_
<java.io.ObjectInputStream: int readInt()> -> _SOURCE_
<java.io.ObjectInputStream: long readLong()> -> _SOURCE_
<java.io.ObjectInputStream: Object readObject()> -> _SOURCE_
<java.io.ObjectInputStream: short readShort()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.String readUTF()> -> _SOURCE_
<java.io.ObjectInputStream: int readUnsignedByte()> -> _SOURCE_
<java.io.ObjectInputStream: int readUnsignedShort()> -> _SOURCE_
<java.io.ObjectInputStream.GetField: boolean defaulted(java.lang.String)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: boolean get(java.lang.String,boolean)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: byte get(java.lang.String,byte)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: short get(java.lang.String,short)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: char get(java.lang.String,char)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: int get(java.lang.String,int)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: float get(java.lang.String,float)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: double get(java.lang.String,double)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: long get(java.lang.String,long)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: Object get(java.lang.String,java.lang.Object)> -> _SOURCE_
<java.io.ObjectInputStream.GetField: ObjectStreamClass getObjectStreamClass()> -> _SOURCE_
<java.io.FileInputStream: int available()> -> _SOURCE_
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<java.io.FileInputStream: FileDescriptor getFD()> -> _SOURCE_
<java.io.FileInputStream: int read()> -> _SOURCE_
<java.io.FileInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.ObjectStreamField: java.lang.String getName()> -> _SOURCE_
<java.io.ObjectStreamField: int getOffset()> -> _SOURCE_
<java.io.ObjectStreamField: Class<?> getType()> -> _SOURCE_
<java.io.ObjectStreamField: char getTypeCode()> -> _SOURCE_
<java.io.ObjectStreamField: java.lang.String getTypeString()> -> _SOURCE_
<java.io.ObjectStreamField: boolean isPrimitive()> -> _SOURCE_
<java.io.ObjectStreamField: java.lang.String toString()> -> _SOURCE_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<android.se.omapi.Reader: Reader nullReader()> -> _SOURCE_
<android.se.omapi.Reader: int read()> -> _SOURCE_
<android.se.omapi.Reader: int read(char[],int,int)> -> _SOURCE_
<android.se.omapi.Reader: int read(char[])> -> _SOURCE_
<java.io.PipedWriter: void write(int)> -> _SINK_
<java.io.PipedWriter: void write(char[],int,int)> -> _SINK_
<java.io.LineNumberInputStream: int available()> -> _SOURCE_
<java.io.LineNumberInputStream: int getLineNumber()> -> _SOURCE_
<java.io.LineNumberInputStream: int read()> -> _SOURCE_
<java.io.LineNumberInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.LineNumberInputStream: void setLineNumber(int)> -> _SINK_
<java.io.ObjectOutput: void write(byte[])> -> _SINK_
<java.io.ObjectOutput: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutput: void write(int)> -> _SINK_
<java.io.ObjectOutput: void writeObject(java.lang.Object)> -> _SINK_
<java.io.RandomAccessFile: FileChannel getChannel()> -> _SOURCE_
<java.io.RandomAccessFile: FileDescriptor getFD()> -> _SOURCE_
<java.io.RandomAccessFile: long getFilePointer()> -> _SOURCE_
<java.io.RandomAccessFile: long length()> -> _SOURCE_
<java.io.RandomAccessFile: int read()> -> _SOURCE_
<java.io.RandomAccessFile: int read(byte[])> -> _SOURCE_
<java.io.RandomAccessFile: int read(byte[],int,int)> -> _SOURCE_
<java.io.RandomAccessFile: boolean readBoolean()> -> _SOURCE_
<java.io.RandomAccessFile: byte readByte()> -> _SOURCE_
<java.io.RandomAccessFile: char readChar()> -> _SOURCE_
<java.io.RandomAccessFile: double readDouble()> -> _SOURCE_
<java.io.RandomAccessFile: float readFloat()> -> _SOURCE_
<java.io.RandomAccessFile: void readFully(byte[])> -> _SOURCE_
<java.io.RandomAccessFile: void readFully(byte[],int,int)> -> _SOURCE_
<java.io.RandomAccessFile: int readInt()> -> _SOURCE_
<java.io.RandomAccessFile: String readLine()> -> _SOURCE_
<java.io.RandomAccessFile: long readLong()> -> _SOURCE_
<java.io.RandomAccessFile: short readShort()> -> _SOURCE_
<java.io.RandomAccessFile: String readUTF()> -> _SOURCE_
<java.io.RandomAccessFile: int readUnsignedByte()> -> _SOURCE_
<java.io.RandomAccessFile: int readUnsignedShort()> -> _SOURCE_
<java.io.RandomAccessFile: void setLength(long)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBoolean(boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeByte(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<java.io.RandomAccessFile: void writeShort(int)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<java.io.PushbackReader: int read()> -> _SOURCE_
<java.io.PushbackReader: int read(char[],int,int)> -> _SOURCE_
<java.io.PrintStream: java.io.PrintStream append(char)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream format(androidx.compose.ui.text.intl.Locale,java.lang.String,Object[])> -> _SINK_
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,Object[])> -> _SINK_
<java.io.PrintStream: void print(int)> -> _SINK_
<java.io.PrintStream: void print(double)> -> _SINK_
<java.io.PrintStream: void print(boolean)> -> _SINK_
<java.io.PrintStream: void print(char)> -> _SINK_
<java.io.PrintStream: void print(long)> -> _SOURCE_
<java.io.PrintStream: void print(float)> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SOURCE_
<java.io.PrintStream: void print(java.lang.Object)> -> _SOURCE_
<java.io.PrintStream: void print(char[])> -> _SOURCE_
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,Object[])> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(androidx.compose.ui.text.intl.Locale,java.lang.String,Object[])> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SOURCE_
<java.io.PrintStream: void println(boolean)> -> _SINK_
<java.io.PrintStream: void println(long)> -> _SINK_
<java.io.PrintStream: void println(int)> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(char[])> -> _SINK_
<java.io.PrintStream: void println(float)> -> _SINK_
<java.io.PrintStream: void write(byte[],int,int)> -> _SINK_
<java.io.PrintStream: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: java.lang.String getEncoding()> -> _SOURCE_
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<java.io.PipedReader: void connect(java.io.PipedWriter)> -> _SINK_
<java.io.PipedReader: int read()> -> _SOURCE_
<java.io.PipedReader: int read(char[],int,int)> -> _SOURCE_
<java.io.StringBufferInputStream: int available()> -> _SOURCE_
<java.io.StringBufferInputStream: int read()> -> _SOURCE_
<java.io.StringBufferInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.SequenceInputStream: int available()> -> _SOURCE_
<java.io.SequenceInputStream: int read()> -> _SOURCE_
<java.io.SequenceInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.StringReader: int read()> -> _SOURCE_
<java.io.StringReader: int read(char[],int,int)> -> _SOURCE_
<java.io.PushbackInputStream: int available()> -> _SOURCE_
<java.io.PushbackInputStream: int read()> -> _SOURCE_
<java.io.PushbackInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.InputStreamReader: java.lang.String getEncoding()> -> _SOURCE_
<java.io.InputStreamReader: int read()> -> _SOURCE_
<java.io.InputStreamReader: int read(char[],int,int)> -> _SOURCE_
<java.io.StringWriter: java.io.StringWriter append(char)> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.StringWriter: void close()> -> _SINK_
<java.io.StringWriter: java.lang.StringBuffer getBuffer()> -> _SOURCE_
<java.io.StringWriter: java.lang.String toString()> -> _SOURCE_
<java.io.StringWriter: void write(java.lang.String)> -> _SINK_
<java.io.StringWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.StringWriter: void write(char[],int,int)> -> _SINK_
<java.io.WriteAbortedException: java.lang.Throwable getCause()> -> _SOURCE_
<java.io.WriteAbortedException: java.lang.String getMessage()> -> _SOURCE_
<java.lang.Appendable: Appendable append(char)> -> _SINK_
<java.lang.Appendable: Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<java.lang.Appendable: Appendable append(java.lang.CharSequence)> -> _SINK_
<java.io.UncheckedIOException: java.io.IOException getCause()> -> _SOURCE_
<java.io.StreamTokenizer: void commentChar(int)> -> _SINK_
<java.io.StreamTokenizer: int lineno()> -> _SOURCE_
<java.io.StreamTokenizer: int nextToken()> -> _SOURCE_
<java.io.StreamTokenizer: void ordinaryChars(int,int)> -> _SINK_
<java.io.StreamTokenizer: void pushBack()> -> _SINK_
<java.io.StreamTokenizer: java.lang.String toString()> -> _SOURCE_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(char)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter format(androidx.compose.ui.text.intl.Locale,java.lang.String,Object[])> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,Object[])> -> _SINK_
<java.io.PrintWriter: void print(int)> -> _SINK_
<java.io.PrintWriter: void print(double)> -> _SINK_
<java.io.PrintWriter: void print(boolean)> -> _SINK_
<java.io.PrintWriter: void print(char)> -> _SINK_
<java.io.PrintWriter: void print(long)> -> _SOURCE_
<java.io.PrintWriter: void print(float)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SOURCE_
<java.io.PrintWriter: void print(java.lang.Object)> -> _SOURCE_
<java.io.PrintWriter: void print(char[])> -> _SOURCE_
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,Object[])> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(androidx.compose.ui.text.intl.Locale,java.lang.String,Object[])> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<java.io.PrintWriter: void println(long)> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(char[])> -> _SOURCE_
<java.io.PrintWriter: void println(float)> -> _SINK_
<java.io.PrintWriter: void println(double)> -> _SINK_
<java.io.PrintWriter: void write(int)> -> _SINK_
<java.io.PrintWriter: void write(char[],int,int)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.PrintWriter: void write(char[])> -> _SINK_
<java.lang.Boolean: boolean booleanValue()> -> _SOURCE_
<java.lang.Boolean: boolean getBoolean(java.lang.String)> -> _SOURCE_
<java.lang.Boolean: int hashCode()> -> _SOURCE_
<java.lang.Boolean: int hashCode(boolean)> -> _SOURCE_
<java.lang.Boolean: boolean logicalAnd(boolean,boolean)> -> _SOURCE_
<java.lang.Boolean: boolean logicalXor(boolean,boolean)> -> _SOURCE_
<java.lang.Boolean: java.lang.String toString()> -> _SOURCE_
<java.lang.Boolean: String toString(boolean)> -> _SOURCE_
<java.lang.Boolean: Boolean valueOf(java.lang.String)> -> _SOURCE_
<java.lang.Boolean: Boolean valueOf(boolean)> -> _SOURCE_
<java.lang.Character.Subset: int hashCode()> -> _SOURCE_
<java.lang.Character.Subset: String toString()> -> _SOURCE_
<java.lang.CharSequence: char charAt(int)> -> _SOURCE_
<java.lang.CharSequence: default IntStream codePoints()> -> _SOURCE_
<java.lang.CharSequence: int length()> -> _SOURCE_
<java.lang.CharSequence: CharSequence subSequence(int,int)> -> _SOURCE_
<java.lang.CharSequence: String toString()> -> _SOURCE_
<java.lang.Compiler: Object command(java.lang.Object)> -> _SINK_
<java.lang.Compiler: void enable()> -> _SINK_
<java.lang.Byte: byte byteValue()> -> _SOURCE_
<java.lang.Byte: int compare(byte,byte)> -> _SOURCE_
<java.lang.Byte: double doubleValue()> -> _SOURCE_
<java.lang.Byte: float floatValue()> -> _SOURCE_
<java.lang.Byte: int hashCode()> -> _SOURCE_
<java.lang.Byte: int hashCode(byte)> -> _SOURCE_
<java.lang.Byte: int intValue()> -> _SOURCE_
<java.lang.Byte: long longValue()> -> _SOURCE_
<java.lang.Byte: byte parseByte(java.lang.String)> -> _SOURCE_
<java.lang.Byte: byte parseByte(java.lang.String,int)> -> _SOURCE_
<java.lang.Byte: short shortValue()> -> _SOURCE_
<java.lang.Byte: java.lang.String toString()> -> _SOURCE_
<java.lang.Byte: String toString(byte)> -> _SOURCE_
<java.lang.Byte: long toUnsignedLong(byte)> -> _SINK_
<java.lang.Byte: Byte valueOf(java.lang.String)> -> _SOURCE_
<java.lang.Byte: Byte valueOf(java.lang.String,int)> -> _SOURCE_
<java.lang.Byte: Byte valueOf(byte)> -> _SOURCE_
<java.lang.ClassLoader: void clearAssertionStatus()> -> _SINK_
<java.lang.ClassLoader: ClassLoader getParent()> -> _SOURCE_
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: Enumeration<URL> getResources(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: ClassLoader getSystemClassLoader()> -> _SOURCE_
<java.lang.ClassLoader: URL getSystemResource(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: InputStream getSystemResourceAsStream(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: Enumeration<URL> getSystemResources(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)> -> _SINK_
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> -> _SINK_
<java.lang.Character.UnicodeBlock: Character.UnicodeBlock forName(java.lang.String)> -> _SOURCE_
<java.lang.Character.UnicodeBlock: Character.UnicodeBlock of(char)> -> _SOURCE_
<java.lang.Character.UnicodeBlock: Character.UnicodeBlock of(int)> -> _SOURCE_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> -> _SOURCE_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> -> _SOURCE_
<java.lang.Deprecated: java.lang.String since()> -> _SOURCE_
<java.lang.Enum: Class<E> getDeclaringClass()> -> _SOURCE_
<java.lang.Enum: int hashCode()> -> _SOURCE_
<java.lang.Enum: String name()> -> _SOURCE_
<java.lang.Enum: int ordinal()> -> _SOURCE_
<java.lang.Enum: java.lang.String toString()> -> _SOURCE_
<java.lang.Enum: <T extends Enum> T valueOf(Class,java.lang.String)> -> _SOURCE_
<java.lang.Double: byte byteValue()> -> _SOURCE_
<java.lang.Double: double doubleValue()> -> _SOURCE_
<java.lang.Double: int hashCode()> -> _SOURCE_
<java.lang.Double: int hashCode(double)> -> _SOURCE_
<java.lang.Double: boolean isInfinite(double)> -> _SOURCE_
<java.lang.Double: double longBitsToDouble(long)> -> _SOURCE_
<java.lang.Double: double max(double,double)> -> _SOURCE_
<java.lang.Double: double parseDouble(java.lang.String)> -> _SOURCE_
<java.lang.Double: String toHexString(double)> -> _SOURCE_
<java.lang.Double: String toString(double)> -> _SOURCE_
<java.lang.Double: java.lang.String toString()> -> _SOURCE_
<java.lang.Double: Double valueOf(java.lang.String)> -> _SOURCE_
<java.lang.Double: Double valueOf(double)> -> _SOURCE_
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()> -> _SOURCE_
<java.lang.ClassNotFoundException: java.lang.Throwable getException()> -> _SOURCE_
<java.lang.Character: int charCount(int)> -> _SINK_
<java.lang.Character: char charValue()> -> _SOURCE_
<java.lang.Character: int codePointAt(char[],int,int)> -> _SOURCE_
<java.lang.Character: int codePointAt(char[],int)> -> _SOURCE_
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)> -> _SOURCE_
<java.lang.Character: int codePointBefore(char[],int)> -> _SOURCE_
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> -> _SOURCE_
<java.lang.Character: int codePointBefore(char[],int,int)> -> _SOURCE_
<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> -> _SOURCE_
<java.lang.Character: int codePointCount(char[],int,int)> -> _SOURCE_
<java.lang.Character: int digit(int,int)> -> _SOURCE_
<java.lang.Character: int digit(char,int)> -> _SOURCE_
<java.lang.Character: byte getDirectionality(char)> -> _SOURCE_
<java.lang.Character: byte getDirectionality(int)> -> _SOURCE_
<java.lang.Character: String getName(int)> -> _SOURCE_
<java.lang.Character: int getNumericValue(int)> -> _SOURCE_
<java.lang.Character: int getNumericValue(char)> -> _SOURCE_
<java.lang.Character: int getType(char)> -> _SOURCE_
<java.lang.Character: int getType(int)> -> _SOURCE_
<java.lang.Character: int hashCode(char)> -> _SOURCE_
<java.lang.Character: int hashCode()> -> _SOURCE_
<java.lang.Character: char highSurrogate(int)> -> _SOURCE_
<java.lang.Character: boolean isBmpCodePoint(int)> -> _SOURCE_
<java.lang.Character: boolean isDefined(int)> -> _SOURCE_
<java.lang.Character: boolean isDigit(char)> -> _SOURCE_
<java.lang.Character: boolean isISOControl(char)> -> _SOURCE_
<java.lang.Character: boolean isISOControl(int)> -> _SOURCE_
<java.lang.Character: boolean isIdeographic(int)> -> _SOURCE_
<java.lang.Character: boolean isJavaIdentifierPart(char)> -> _SOURCE_
<java.lang.Character: boolean isJavaIdentifierStart(char)> -> _SOURCE_
<java.lang.Character: boolean isLetterOrDigit(char)> -> _SOURCE_
<java.lang.Character: boolean isLowerCase(char)> -> _SOURCE_
<java.lang.Character: boolean isSpaceChar(char)> -> _SOURCE_
<java.lang.Character: boolean isSurrogate(char)> -> _SOURCE_
<java.lang.Character: boolean isValidCodePoint(int)> -> _SOURCE_
<java.lang.Character: char lowSurrogate(int)> -> _SOURCE_
<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> -> _SOURCE_
<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> -> _SOURCE_
<java.lang.Character: char reverseBytes(char)> -> _SOURCE_
<java.lang.Character: int toChars(int,char[],int)> -> _SINK_
<java.lang.Character: int toLowerCase(int)> -> _SINK_
<java.lang.Character: char toLowerCase(char)> -> _SINK_
<java.lang.Character: java.lang.String toString()> -> _SOURCE_
<java.lang.Character: String toString(char)> -> _SOURCE_
<java.lang.Character: char toTitleCase(char)> -> _SOURCE_
<java.lang.Character: int toTitleCase(int)> -> _SOURCE_
<java.lang.Character: char toUpperCase(char)> -> _SINK_
<java.lang.Character: int toUpperCase(int)> -> _SINK_
<java.lang.Character: Character valueOf(char)> -> _SOURCE_
<java.lang.EnumConstantNotPresentException: java.lang.String constantName()> -> _SOURCE_
<java.lang.EnumConstantNotPresentException: Class<? extends Enum> enumType()> -> _SOURCE_
<java.lang.Float: byte byteValue()> -> _SOURCE_
<java.lang.Float: int floatToIntBits(float)> -> _SOURCE_
<java.lang.Float: float floatValue()> -> _SOURCE_
<java.lang.Float: int hashCode()> -> _SOURCE_
<java.lang.Float: int hashCode(float)> -> _SOURCE_
<java.lang.Float: float intBitsToFloat(int)> -> _SOURCE_
<java.lang.Float: boolean isInfinite()> -> _SOURCE_
<java.lang.Float: boolean isInfinite(float)> -> _SOURCE_
<java.lang.Float: float max(float,float)> -> _SOURCE_
<java.lang.Float: float min(float,float)> -> _SOURCE_
<java.lang.Float: float parseFloat(java.lang.String)> -> _SOURCE_
<java.lang.Float: short shortValue()> -> _SOURCE_
<java.lang.Float: java.lang.String toString()> -> _SOURCE_
<java.lang.Float: String toString(float)> -> _SOURCE_
<java.lang.Long: int bitCount(long)> -> _SOURCE_
<java.lang.Long: byte byteValue()> -> _SOURCE_
<java.lang.Long: Long decode(java.lang.String)> -> _SOURCE_
<java.lang.Long: float floatValue()> -> _SOURCE_
<java.lang.Long: Long getLong(java.lang.String,java.lang.Long)> -> _SOURCE_
<java.lang.Long: Long getLong(java.lang.String)> -> _SOURCE_
<java.lang.Long: Long getLong(java.lang.String,long)> -> _SOURCE_
<java.lang.Long: int hashCode()> -> _SOURCE_
<java.lang.Long: int hashCode(long)> -> _SOURCE_
<java.lang.Long: long highestOneBit(long)> -> _SOURCE_
<java.lang.Long: long longValue()> -> _SOURCE_
<java.lang.Long: long lowestOneBit(long)> -> _SOURCE_
<java.lang.Long: long max(long,long)> -> _SOURCE_
<java.lang.Long: int numberOfLeadingZeros(long)> -> _SOURCE_
<java.lang.Long: int numberOfTrailingZeros(long)> -> _SOURCE_
<java.lang.Long: long parseLong(java.lang.String)> -> _SINK_
<java.lang.Long: long parseLong(java.lang.String,int)> -> _SINK_
<java.lang.Long: long parseUnsignedLong(java.lang.String)> -> _SINK_
<java.lang.Long: long parseUnsignedLong(java.lang.String,int)> -> _SINK_
<java.lang.Long: long reverse(long)> -> _SOURCE_
<java.lang.Long: long reverseBytes(long)> -> _SOURCE_
<java.lang.Long: long rotateLeft(long,int)> -> _SOURCE_
<java.lang.Long: long rotateRight(long,int)> -> _SOURCE_
<java.lang.Long: short shortValue()> -> _SOURCE_
<java.lang.Long: int signum(long)> -> _SOURCE_
<java.lang.Long: long sum(long,long)> -> _SINK_
<java.lang.Long: String toBinaryString(long)> -> _SOURCE_
<java.lang.Long: String toHexString(long)> -> _SOURCE_
<java.lang.Long: String toOctalString(long)> -> _SOURCE_
<java.lang.Long: String toString(long,int)> -> _SOURCE_
<java.lang.Long: java.lang.String toString()> -> _SOURCE_
<java.lang.Long: String toString(long)> -> _SOURCE_
<java.lang.Long: String toUnsignedString(long)> -> _SOURCE_
<java.lang.Long: String toUnsignedString(long,int)> -> _SOURCE_
<java.lang.Long: Long valueOf(java.lang.String)> -> _SOURCE_
<java.lang.Long: Long valueOf(java.lang.String,int)> -> _SOURCE_
<java.lang.Long: Long valueOf(long)> -> _SOURCE_
<java.lang.Integer: int bitCount(int)> -> _SOURCE_
<java.lang.Integer: byte byteValue()> -> _SOURCE_
<java.lang.Integer: Integer decode(java.lang.String)> -> _SOURCE_
<java.lang.Integer: double doubleValue()> -> _SOURCE_
<java.lang.Integer: Integer getInteger(java.lang.String)> -> _SOURCE_
<java.lang.Integer: Integer getInteger(java.lang.String,java.lang.Integer)> -> _SOURCE_
<java.lang.Integer: Integer getInteger(java.lang.String,int)> -> _SOURCE_
<java.lang.Integer: int hashCode()> -> _SOURCE_
<java.lang.Integer: int hashCode(int)> -> _SOURCE_
<java.lang.Integer: int max(int,int)> -> _SOURCE_
<java.lang.Integer: int min(int,int)> -> _SOURCE_
<java.lang.Integer: int numberOfLeadingZeros(int)> -> _SOURCE_
<java.lang.Integer: int numberOfTrailingZeros(int)> -> _SOURCE_
<java.lang.Integer: int parseInt(java.lang.String)> -> _SINK_
<java.lang.Integer: int parseUnsignedInt(java.lang.String)> -> _SINK_
<java.lang.Integer: int parseUnsignedInt(java.lang.String,int)> -> _SINK_
<java.lang.Integer: int reverseBytes(int)> -> _SOURCE_
<java.lang.Integer: short shortValue()> -> _SOURCE_
<java.lang.Integer: int signum(int)> -> _SOURCE_
<java.lang.Integer: int sum(int,int)> -> _SINK_
<java.lang.Integer: String toBinaryString(int)> -> _SOURCE_
<java.lang.Integer: String toOctalString(int)> -> _SOURCE_
<java.lang.Integer: java.lang.String toString()> -> _SOURCE_
<java.lang.Integer: String toString(int)> -> _SOURCE_
<java.lang.Integer: String toString(int,int)> -> _SOURCE_
<java.lang.Integer: long toUnsignedLong(int)> -> _SINK_
<java.lang.Integer: String toUnsignedString(int,int)> -> _SOURCE_
<java.lang.Integer: String toUnsignedString(int)> -> _SOURCE_
<java.lang.Integer: Integer valueOf(java.lang.String)> -> _SOURCE_
<java.lang.Integer: Integer valueOf(java.lang.String,int)> -> _SOURCE_
<java.lang.Math: double IEEEremainder(double,double)> -> _SOURCE_
<java.lang.Math: int abs(int)> -> _SOURCE_
<java.lang.Math: float abs(float)> -> _SOURCE_
<java.lang.Math: double atan(double)> -> _SOURCE_
<java.lang.Math: double atan2(double,double)> -> _SOURCE_
<java.lang.Math: double cbrt(double)> -> _SOURCE_
<java.lang.Math: double exp(double)> -> _SOURCE_
<java.lang.Math: int floorDiv(int,int)> -> _SOURCE_
<java.lang.Math: long floorDiv(long,long)> -> _SOURCE_
<java.lang.Math: long floorDiv(long,int)> -> _SOURCE_
<java.lang.Math: long floorMod(long,long)> -> _SOURCE_
<java.lang.Math: int getExponent(double)> -> _SOURCE_
<java.lang.Math: int getExponent(float)> -> _SOURCE_
<java.lang.Math: double log(double)> -> _SOURCE_
<java.lang.Math: double log1p(double)> -> _SOURCE_
<java.lang.Math: int max(int,int)> -> _SOURCE_
<java.lang.Math: float max(float,float)> -> _SOURCE_
<java.lang.Math: double max(double,double)> -> _SOURCE_
<java.lang.Math: float min(float,float)> -> _SOURCE_
<java.lang.Math: double min(double,double)> -> _SOURCE_
<java.lang.Math: int min(int,int)> -> _SOURCE_
<java.lang.Math: long min(long,long)> -> _SOURCE_
<java.lang.Math: long multiplyFull(int,int)> -> _SOURCE_
<java.lang.Math: long multiplyHigh(long,long)> -> _SOURCE_
<java.lang.Math: double pow(double,double)> -> _SOURCE_
<java.lang.Math: long round(double)> -> _SOURCE_
<java.lang.Math: int round(float)> -> _SOURCE_
<java.lang.Math: double scalb(double,int)> -> _SOURCE_
<java.lang.Math: int subtractExact(int,int)> -> _SOURCE_
<java.lang.Math: double tan(double)> -> _SOURCE_
<java.lang.Math: double ulp(double)> -> _SOURCE_
<java.lang.Math: float ulp(float)> -> _SOURCE_
<java.lang.Object: Class<?> getClass()> -> _SOURCE_
<java.lang.Object: void notifyAll()> -> _SINK_
<java.lang.Object: java.lang.String toString()> -> _SOURCE_
<android.os.Process: int exitValue()> -> _SOURCE_
<android.os.Process: InputStream getErrorStream()> -> _SOURCE_
<android.os.Process: InputStream getInputStream()> -> _SOURCE_
<android.os.Process: OutputStream getOutputStream()> -> _SOURCE_
<java.lang.ProcessBuilder: List<String> command()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(String[])> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(List<String>)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder: java.io.File directory()> -> _SOURCE_
<java.lang.ProcessBuilder: java.util.Map environment()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder inheritIO()> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.lang.ProcessBuilder.Redirect)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectError()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectInput()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.lang.ProcessBuilder.Redirect)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder.Redirect)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectOutput()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder: android.os.Process start()> -> _SINK_
<java.lang.Runtime: int availableProcessors()> -> _SOURCE_
<java.lang.Runtime: android.os.Process exec(String[])> -> _SINK_
<java.lang.Runtime: android.os.Process exec(String[],String[])> -> _SINK_
<java.lang.Runtime: android.os.Process exec(java.lang.String)> -> _SINK_
<java.lang.Runtime: android.os.Process exec(java.lang.String,String[])> -> _SINK_
<java.lang.Runtime: android.os.Process exec(String[],String[],java.io.File)> -> _SINK_
<java.lang.Runtime: android.os.Process exec(java.lang.String,String[],java.io.File)> -> _SINK_
<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)> -> _SOURCE_
<java.lang.Runtime: Runtime getRuntime()> -> _SOURCE_
<java.lang.Runtime: void loadLibrary(java.lang.String)> -> _SOURCE_
<java.lang.Runtime: long maxMemory()> -> _SOURCE_
<java.lang.Runtime: long totalMemory()> -> _SOURCE_
<java.lang.Runtime: void traceInstructions(boolean)> -> _SINK_
<java.lang.Number: double doubleValue()> -> _SOURCE_
<java.lang.Number: long longValue()> -> _SOURCE_
<java.lang.Number: short shortValue()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getClassName()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getFileName()> -> _SOURCE_
<java.lang.StackTraceElement: int getLineNumber()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getMethodName()> -> _SOURCE_
<java.lang.StackTraceElement: int hashCode()> -> _SOURCE_
<java.lang.StackTraceElement: boolean isNativeMethod()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String toString()> -> _SOURCE_
<java.lang.Thread.UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> -> _SOURCE_
<java.lang.ProcessBuilder.Redirect: java.io.File file()> -> _SOURCE_
<java.lang.ProcessBuilder.Redirect: ProcessBuilder.Redirect from(java.io.File)> -> _SOURCE_
<java.lang.ProcessBuilder.Redirect: int hashCode()> -> _SOURCE_
<java.lang.ProcessBuilder.Redirect: ProcessBuilder.Redirect to(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder.Redirect: ProcessBuilder.Redirect.Type type()> -> _SOURCE_
<java.lang.String: char charAt(int)> -> _SOURCE_
<java.lang.String: int codePointAt(int)> -> _SOURCE_
<java.lang.String: int codePointBefore(int)> -> _SOURCE_
<java.lang.String: int codePointCount(int,int)> -> _SOURCE_
<java.lang.String: java.util.stream.IntStream codePoints()> -> _SOURCE_
<java.lang.String: java.lang.String concat(java.lang.String)> -> _SINK_
<java.lang.String: boolean contains(java.lang.CharSequence)> -> _SOURCE_
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)> -> _SOURCE_
<java.lang.String: String copyValueOf(char[])> -> _SOURCE_
<java.lang.String: boolean endsWith(java.lang.String)> -> _SOURCE_
<java.lang.String: String format(androidx.compose.ui.text.intl.Locale,java.lang.String,Object[])> -> _SOURCE_
<java.lang.String: String format(java.lang.String,Object[])> -> _SOURCE_
<java.lang.String: byte[] getBytes(java.lang.String)> -> _SOURCE_
<java.lang.String: byte[] getBytes()> -> _SOURCE_
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)> -> _SINK_
<java.lang.String: void getBytes(int,int,byte[],int)> -> _SOURCE_
<java.lang.String: int hashCode()> -> _SOURCE_
<java.lang.String: int indexOf(int,int)> -> _SOURCE_
<java.lang.String: int indexOf(java.lang.String)> -> _SOURCE_
<java.lang.String: int indexOf(int)> -> _SOURCE_
<java.lang.String: int indexOf(java.lang.String,int)> -> _SOURCE_
<java.lang.String: java.lang.String intern()> -> _SOURCE_
<java.lang.String: boolean isBlank()> -> _SOURCE_
<java.lang.String: int lastIndexOf(int)> -> _SOURCE_
<java.lang.String: int lastIndexOf(java.lang.String,int)> -> _SOURCE_
<java.lang.String: int lastIndexOf(java.lang.String)> -> _SOURCE_
<java.lang.String: int lastIndexOf(int,int)> -> _SOURCE_
<java.lang.String: int length()> -> _SOURCE_
<java.lang.String: Stream<String> lines()> -> _SOURCE_
<java.lang.String: int offsetByCodePoints(int,int)> -> _SOURCE_
<java.lang.String: java.lang.String repeat(int)> -> _SOURCE_
<java.lang.String: String[] split(java.lang.String,int)> -> _SOURCE_
<java.lang.String: String[] split(java.lang.String)> -> _SOURCE_
<java.lang.String: boolean startsWith(java.lang.String)> -> _SOURCE_
<java.lang.String: boolean startsWith(java.lang.String,int)> -> _SOURCE_
<java.lang.String: java.lang.String strip()> -> _SOURCE_
<java.lang.String: java.lang.String stripLeading()> -> _SOURCE_
<java.lang.String: java.lang.String stripTrailing()> -> _SOURCE_
<java.lang.String: java.lang.String substring(int,int)> -> _SOURCE_
<java.lang.String: java.lang.String substring(int)> -> _SOURCE_
<java.lang.String: java.lang.String toLowerCase()> -> _SOURCE_
<java.lang.String: java.lang.String toLowerCase(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.lang.String: java.lang.String toUpperCase(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.lang.String: java.lang.String trim()> -> _SOURCE_
<java.lang.String: String valueOf(boolean)> -> _SOURCE_
<java.lang.String: String valueOf(double)> -> _SOURCE_
<java.lang.String: String valueOf(char[],int,int)> -> _SOURCE_
<java.lang.String: String valueOf(float)> -> _SOURCE_
<java.lang.String: String valueOf(int)> -> _SOURCE_
<java.lang.String: String valueOf(char)> -> _SOURCE_
<java.lang.String: String valueOf(long)> -> _SOURCE_
<java.lang.String: String valueOf(java.lang.Object)> -> _SOURCE_
<java.lang.String: String valueOf(char[])> -> _SOURCE_
<java.lang.Short: byte byteValue()> -> _SOURCE_
<java.lang.Short: Short decode(java.lang.String)> -> _SOURCE_
<java.lang.Short: double doubleValue()> -> _SOURCE_
<java.lang.Short: float floatValue()> -> _SOURCE_
<java.lang.Short: int hashCode(short)> -> _SOURCE_
<java.lang.Short: int hashCode()> -> _SOURCE_
<java.lang.Short: int intValue()> -> _SOURCE_
<java.lang.Short: long longValue()> -> _SOURCE_
<java.lang.Short: short parseShort(java.lang.String)> -> _SINK_
<java.lang.Short: short parseShort(java.lang.String,int)> -> _SINK_
<java.lang.Short: short reverseBytes(short)> -> _SOURCE_
<java.lang.Short: short shortValue()> -> _SOURCE_
<java.lang.Short: String toString(short)> -> _SOURCE_
<java.lang.Short: java.lang.String toString()> -> _SOURCE_
<java.lang.Short: long toUnsignedLong(short)> -> _SINK_
<java.lang.Short: Short valueOf(java.lang.String)> -> _SOURCE_
<java.lang.Short: Short valueOf(short)> -> _SOURCE_
<java.lang.Short: Short valueOf(java.lang.String,int)> -> _SOURCE_
<java.lang.StrictMath: double IEEEremainder(double,double)> -> _SOURCE_
<java.lang.StrictMath: int abs(int)> -> _SOURCE_
<java.lang.StrictMath: float abs(float)> -> _SOURCE_
<java.lang.StrictMath: double atan(double)> -> _SOURCE_
<java.lang.StrictMath: double atan2(double,double)> -> _SOURCE_
<java.lang.StrictMath: double cbrt(double)> -> _SOURCE_
<java.lang.StrictMath: double exp(double)> -> _SOURCE_
<java.lang.StrictMath: int floorDiv(int,int)> -> _SOURCE_
<java.lang.StrictMath: long floorDiv(long,long)> -> _SOURCE_
<java.lang.StrictMath: long floorDiv(long,int)> -> _SOURCE_
<java.lang.StrictMath: long floorMod(long,long)> -> _SOURCE_
<java.lang.StrictMath: int getExponent(double)> -> _SOURCE_
<java.lang.StrictMath: int getExponent(float)> -> _SOURCE_
<java.lang.StrictMath: double log(double)> -> _SOURCE_
<java.lang.StrictMath: double log1p(double)> -> _SOURCE_
<java.lang.StrictMath: int max(int,int)> -> _SOURCE_
<java.lang.StrictMath: float max(float,float)> -> _SOURCE_
<java.lang.StrictMath: double max(double,double)> -> _SOURCE_
<java.lang.StrictMath: float min(float,float)> -> _SOURCE_
<java.lang.StrictMath: double min(double,double)> -> _SOURCE_
<java.lang.StrictMath: int min(int,int)> -> _SOURCE_
<java.lang.StrictMath: long min(long,long)> -> _SOURCE_
<java.lang.StrictMath: long multiplyFull(int,int)> -> _SOURCE_
<java.lang.StrictMath: long multiplyHigh(long,long)> -> _SOURCE_
<java.lang.StrictMath: double pow(double,double)> -> _SOURCE_
<java.lang.StrictMath: long round(double)> -> _SOURCE_
<java.lang.StrictMath: int round(float)> -> _SOURCE_
<java.lang.StrictMath: double scalb(double,int)> -> _SOURCE_
<java.lang.StrictMath: int subtractExact(int,int)> -> _SOURCE_
<java.lang.StrictMath: double tan(double)> -> _SOURCE_
<java.lang.StrictMath: double ulp(double)> -> _SOURCE_
<java.lang.StrictMath: float ulp(float)> -> _SOURCE_
<java.lang.System: Console console()> -> _SOURCE_
<java.lang.System: long currentTimeMillis()> -> _SOURCE_
<java.lang.System: Properties getProperties()> -> _SINK_
<java.lang.System: String getProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<java.lang.System: String getProperty(java.lang.String)> -> _SOURCE_
<java.lang.System: SecurityManager getSecurityManager()> -> _SOURCE_
<java.lang.System: String getenv(java.lang.String)> -> _SOURCE_
<java.lang.System: java.util.Map getenv()> -> _SOURCE_
<java.lang.System: int identityHashCode(java.lang.Object)> -> _SOURCE_
<java.lang.System: Channel inheritedChannel()> -> _SOURCE_
<java.lang.System: String lineSeparator()> -> _SOURCE_
<java.lang.System: void loadLibrary(java.lang.String)> -> _SOURCE_
<java.lang.System: String mapLibraryName(java.lang.String)> -> _SOURCE_
<java.lang.System: long nanoTime()> -> _SOURCE_
<java.lang.System: void setErr(java.io.PrintStream)> -> _SINK_
<java.lang.System: String setProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.lang.System: void setSecurityManager(java.lang.SecurityManager)> -> _SOURCE_
<java.lang.ThreadGroup: int getMaxPriority()> -> _SOURCE_
<java.lang.ThreadGroup: String getName()> -> _SOURCE_
<java.lang.ThreadGroup: ThreadGroup getParent()> -> _SOURCE_
<java.lang.ThreadGroup: boolean isDaemon()> -> _SOURCE_
<java.lang.ThreadGroup: void list()> -> _SOURCE_
<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)> -> _SOURCE_
<java.lang.ThreadGroup: void setDaemon(boolean)> -> _SINK_
<java.lang.ThreadGroup: void setMaxPriority(int)> -> _SINK_
<java.lang.ThreadGroup: java.lang.String toString()> -> _SOURCE_
<java.lang.Thread: Thread currentThread()> -> _SOURCE_
<java.lang.Thread: void dumpStack()> -> _SOURCE_
<java.lang.Thread: java.util.Map getAllStackTraces()> -> _SOURCE_
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> -> _SOURCE_
<java.lang.Thread: Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> -> _SOURCE_
<java.lang.Thread: long getId()> -> _SOURCE_
<java.lang.Thread: String getName()> -> _SOURCE_
<java.lang.Thread: int getPriority()> -> _SOURCE_
<java.lang.Thread: StackTraceElement[] getStackTrace()> -> _SOURCE_
<java.lang.Thread: java.lang.Thread.State getState()> -> _SOURCE_
<java.lang.Thread: ThreadGroup getThreadGroup()> -> _SOURCE_
<java.lang.Thread: java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()> -> _SOURCE_
<java.lang.Thread: void join(long,int)> -> _SOURCE_
<java.lang.Thread: void run()> -> _SOURCE_
<java.lang.Thread: void setName(java.lang.String)> -> _SINK_
<java.lang.Thread: void setPriority(int)> -> _SINK_
<java.lang.Thread: java.lang.String toString()> -> _SOURCE_
<android.text.Annotation: Class<? extends Annotation> annotationType()> -> _SOURCE_
<android.text.Annotation: int hashCode()> -> _SOURCE_
<android.text.Annotation: String toString()> -> _SOURCE_
<java.lang.ThreadLocal: T get()> -> _SOURCE_
<java.lang.Throwable: java.lang.Throwable getCause()> -> _SOURCE_
<java.lang.Throwable: java.lang.String getLocalizedMessage()> -> _SOURCE_
<java.lang.Throwable: java.lang.String getMessage()> -> _SOURCE_
<java.lang.Throwable: Throwable[] getSuppressed()> -> _SOURCE_
<java.lang.Throwable: void printStackTrace()> -> _SINK_
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> -> _SINK_
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)> -> _SINK_
<java.lang.Throwable: void setStackTrace(StackTraceElement[])> -> _SINK_
<java.lang.Throwable: java.lang.String toString()> -> _SOURCE_
<java.lang.annotation.AnnotationTypeMismatchException: java.lang.reflect.Method element()> -> _SOURCE_
<java.lang.annotation.AnnotationTypeMismatchException: java.lang.String foundType()> -> _SOURCE_
<androidx.palette.graphics.Target: ElementType[] value()> -> _SOURCE_
<java.lang.invoke.ConstantCallSite: MethodHandle dynamicInvoker()> -> _SOURCE_
<java.lang.invoke.ConstantCallSite: MethodHandle getTarget()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: Class<?> getDeclaringClass()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: MethodType getMethodType()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: int getModifiers()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: String getName()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: int getReferenceKind()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: boolean refKindIsField(int)> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: boolean refKindIsValid(int)> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: String refKindName(int)> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: String referenceKindToString(int)> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: <T extends Member> T reflectAs(Class,java.lang.invoke.MethodHandles.Lookup)> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: String toString(int,Class<?>,java.lang.String,java.lang.invoke.MethodType)> -> _SOURCE_
<java.lang.TypeNotPresentException: java.lang.String typeName()> -> _SOURCE_
<java.lang.annotation.IncompleteAnnotationException: Class<? extends Annotation> annotationType()> -> _SOURCE_
<java.lang.annotation.IncompleteAnnotationException: java.lang.String elementName()> -> _SOURCE_
<java.lang.invoke.VolatileCallSite: MethodHandle getTarget()> -> _SOURCE_
<java.lang.invoke.CallSite: MethodHandle getTarget()> -> _SOURCE_
<java.lang.invoke.CallSite: java.lang.invoke.MethodType type()> -> _SOURCE_
<java.lang.invoke.MethodType: int hashCode()> -> _SOURCE_
<java.lang.invoke.MethodType: Class<?> lastParameterType()> -> _SOURCE_
<java.lang.invoke.MethodType: Class[]<?> parameterArray()> -> _SINK_
<java.lang.invoke.MethodType: int parameterCount()> -> _SOURCE_
<java.lang.invoke.MethodType: List<Class<?>> parameterList()> -> _SOURCE_
<java.lang.invoke.MethodType: Class<?> parameterType(int)> -> _SOURCE_
<java.lang.invoke.MethodType: Class<?> returnType()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.String toMethodDescriptorString()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.String toString()> -> _SOURCE_
<java.lang.invoke.MethodHandles: VarHandle arrayElementVarHandle(Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandle arrayLength(Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandle constant(Class<?>,java.lang.Object)> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandle identity(Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandles.Lookup lookup()> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandles.Lookup privateLookupIn(Class<?>,java.lang.invoke.MethodHandles.Lookup)> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandles.Lookup publicLookup()> -> _SOURCE_
<java.lang.invoke.MethodHandles: MethodHandle zero(Class<?>)> -> _SOURCE_
<java.lang.invoke.MutableCallSite: MethodHandle getTarget()> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findGetter(Class<?>,java.lang.String,Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findSetter(Class<?>,java.lang.String,Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findStaticGetter(Class<?>,java.lang.String,Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findStaticSetter(Class<?>,java.lang.String,Class<?>)> -> _SINK_
<java.lang.invoke.MethodHandles.Lookup: VarHandle findStaticVarHandle(Class<?>,java.lang.String,Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: VarHandle findVarHandle(Class<?>,java.lang.String,Class<?>)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: Class<?> lookupClass()> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: int lookupModes()> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.String toString()> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field)> -> _SOURCE_
<java.lang.invoke.MethodHandles.Lookup: VarHandle unreflectVarHandle(java.lang.reflect.Field)> -> _SOURCE_
<java.lang.invoke.MethodHandle: java.lang.String toString()> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: Annotation[] getAnnotations()> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: default <T extends Annotation> T[] getAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: default <T extends Annotation> T getDeclaredAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: default <T extends Annotation> T[] getDeclaredAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.AnnotatedElement: default boolean isAnnotationPresent(Class<?)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: Annotation[] getAnnotations()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: <T extends Annotation> T[] getAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: <T extends Annotation> T getDeclaredAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: <T extends Annotation> T[] getDeclaredAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: boolean isAccessible()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(Class<?)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)> -> _SINK_
<java.lang.reflect.AccessibleObject: void setAccessible(AccessibleObject[],boolean)> -> _SINK_
<java.lang.reflect.InvocationHandler: Object invoke(java.lang.Object,java.lang.reflect.Method,Object[])> -> _SOURCE_
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)> -> _SOURCE_
<java.lang.reflect.Array: int getLength(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)> -> _SINK_
<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)> -> _SINK_
<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)> -> _SINK_
<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)> -> _SINK_
<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)> -> _SINK_
<java.lang.ref.SoftReference: T get()> -> _SOURCE_
<java.lang.reflect.GenericDeclaration: TypeVariable[]<?> getTypeParameters()> -> _SOURCE_
<java.lang.ref.Reference: T get()> -> _SOURCE_
<java.lang.ref.PhantomReference: T get()> -> _SOURCE_
<java.lang.reflect.Member: Class<?> getDeclaringClass()> -> _SOURCE_
<java.lang.reflect.Member: int getModifiers()> -> _SOURCE_
<java.lang.reflect.Member: String getName()> -> _SOURCE_
<java.lang.reflect.Constructor: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.Constructor: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.Constructor: Class getDeclaringClass()> -> _SOURCE_
<java.lang.reflect.Constructor: Type[] getGenericParameterTypes()> -> _SOURCE_
<java.lang.reflect.Constructor: int getModifiers()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.String getName()> -> _SOURCE_
<java.lang.reflect.Constructor: Annotation[][] getParameterAnnotations()> -> _SOURCE_
<java.lang.reflect.Constructor: int getParameterCount()> -> _SOURCE_
<java.lang.reflect.Constructor: Class[]<?> getParameterTypes()> -> _SOURCE_
<java.lang.reflect.Constructor: TypeVariable[]<Constructor> getTypeParameters()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.String toGenericString()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.String toString()> -> _SOURCE_
<java.lang.reflect.Method: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.Method: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.Method: Class<?> getDeclaringClass()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.Object getDefaultValue()> -> _SOURCE_
<java.lang.reflect.Method: Type[] getGenericParameterTypes()> -> _SOURCE_
<java.lang.reflect.Method: android.renderscript.Type getGenericReturnType()> -> _SOURCE_
<java.lang.reflect.Method: int getModifiers()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.String getName()> -> _SOURCE_
<java.lang.reflect.Method: Annotation[][] getParameterAnnotations()> -> _SOURCE_
<java.lang.reflect.Method: int getParameterCount()> -> _SOURCE_
<java.lang.reflect.Method: Class[]<?> getParameterTypes()> -> _SOURCE_
<java.lang.reflect.Method: Class<?> getReturnType()> -> _SOURCE_
<java.lang.reflect.Method: TypeVariable[]<Method> getTypeParameters()> -> _SOURCE_
<java.lang.reflect.Method: int hashCode()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.String toGenericString()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.String toString()> -> _SOURCE_
<java.lang.reflect.ParameterizedType: Type[] getActualTypeArguments()> -> _SOURCE_
<java.lang.reflect.ParameterizedType: Type getOwnerType()> -> _SOURCE_
<java.lang.reflect.ParameterizedType: Type getRawType()> -> _SOURCE_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> -> _SOURCE_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()> -> _SOURCE_
<java.lang.reflect.Parameter: boolean equals(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Parameter: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.Parameter: Annotation[] getAnnotations()> -> _SOURCE_
<java.lang.reflect.Parameter: <T extends Annotation> T[] getAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.Parameter: <T extends Annotation> T getDeclaredAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.Parameter: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.Parameter: <T extends Annotation> T[] getDeclaredAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()> -> _SOURCE_
<java.lang.reflect.Parameter: int getModifiers()> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.String getName()> -> _SOURCE_
<java.lang.reflect.Parameter: android.renderscript.Type getParameterizedType()> -> _SOURCE_
<java.lang.reflect.Parameter: Class<?> getType()> -> _SOURCE_
<java.lang.reflect.Parameter: int hashCode()> -> _SOURCE_
<java.lang.reflect.Parameter: boolean isNamePresent()> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.String toString()> -> _SOURCE_
<androidx.compose.ui.Modifier: int classModifiers()> -> _SOURCE_
<androidx.compose.ui.Modifier: int constructorModifiers()> -> _SOURCE_
<androidx.compose.ui.Modifier: int fieldModifiers()> -> _SOURCE_
<androidx.compose.ui.Modifier: int interfaceModifiers()> -> _SOURCE_
<androidx.compose.ui.Modifier: int methodModifiers()> -> _SOURCE_
<androidx.compose.ui.Modifier: int parameterModifiers()> -> _SOURCE_
<androidx.compose.ui.Modifier: String toString(int)> -> _SOURCE_
<java.lang.reflect.WildcardType: Type[] getLowerBounds()> -> _SOURCE_
<java.lang.reflect.WildcardType: Type[] getUpperBounds()> -> _SOURCE_
<android.renderscript.Type: default String getTypeName()> -> _SOURCE_
<java.net.Authenticator: PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator.RequestorType)> -> _SOURCE_
<java.net.Authenticator: PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.Authenticator: PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.Authenticator: void setDefault(java.net.Authenticator)> -> _SINK_
<android.icu.math.MathContext: int getPrecision()> -> _SOURCE_
<android.icu.math.MathContext: java.math.RoundingMode getRoundingMode()> -> _SOURCE_
<android.icu.math.MathContext: int hashCode()> -> _SOURCE_
<android.icu.math.MathContext: java.lang.String toString()> -> _SOURCE_
<java.lang.reflect.Executable: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.Executable: <T extends Annotation> T[] getAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.Executable: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.Executable: Class<?> getDeclaringClass()> -> _SOURCE_
<java.lang.reflect.Executable: Type[] getGenericParameterTypes()> -> _SOURCE_
<java.lang.reflect.Executable: int getModifiers()> -> _SOURCE_
<java.lang.reflect.Executable: String getName()> -> _SOURCE_
<java.lang.reflect.Executable: Annotation[][] getParameterAnnotations()> -> _SOURCE_
<java.lang.reflect.Executable: int getParameterCount()> -> _SOURCE_
<java.lang.reflect.Executable: Class[]<?> getParameterTypes()> -> _SOURCE_
<java.lang.reflect.Executable: Parameter[] getParameters()> -> _SOURCE_
<java.lang.reflect.Executable: TypeVariable[]<?> getTypeParameters()> -> _SOURCE_
<java.lang.reflect.Executable: boolean isAnnotationPresent(Class<?)> -> _SOURCE_
<java.lang.reflect.Executable: String toGenericString()> -> _SOURCE_
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()> -> _SOURCE_
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()> -> _SOURCE_
<java.lang.reflect.Field: boolean equals(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: <T extends Annotation> T getAnnotation(Class)> -> _SOURCE_
<java.lang.reflect.Field: <T extends Annotation> T[] getAnnotationsByType(Class)> -> _SOURCE_
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: byte getByte(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: char getChar(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.reflect.Field: Class<?> getDeclaringClass()> -> _SOURCE_
<java.lang.reflect.Field: double getDouble(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: float getFloat(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: int getInt(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: long getLong(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: int getModifiers()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.String getName()> -> _SOURCE_
<java.lang.reflect.Field: short getShort(java.lang.Object)> -> _SOURCE_
<java.lang.reflect.Field: Class<?> getType()> -> _SOURCE_
<java.lang.reflect.Field: int hashCode()> -> _SOURCE_
<java.lang.reflect.Field: boolean isAnnotationPresent(Class<?)> -> _SOURCE_
<java.lang.reflect.Field: boolean isEnumConstant()> -> _SOURCE_
<java.lang.reflect.Field: boolean isSynthetic()> -> _SOURCE_
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)> -> _SINK_
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)> -> _SINK_
<java.lang.reflect.Field: void setChar(java.lang.Object,char)> -> _SINK_
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)> -> _SINK_
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)> -> _SINK_
<java.lang.reflect.Field: void setInt(java.lang.Object,int)> -> _SINK_
<java.lang.reflect.Field: void setLong(java.lang.Object,long)> -> _SINK_
<java.lang.reflect.Field: void setShort(java.lang.Object,short)> -> _SINK_
<java.lang.reflect.Field: java.lang.String toGenericString()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.String toString()> -> _SOURCE_
<android.net.Proxy: InvocationHandler getInvocationHandler(java.lang.Object)> -> _SOURCE_
<android.net.Proxy: Class<?> getProxyClass(java.lang.ClassLoader,Class[]<?>)> -> _SOURCE_
<android.net.Proxy: boolean isProxyClass(Class<?>)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger abs()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: int bitCount()> -> _SOURCE_
<java.math.BigInteger: int bitLength()> -> _SOURCE_
<java.math.BigInteger: byte byteValueExact()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger clearBit(int)> -> _SOURCE_
<java.math.BigInteger: int compareTo(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: BigInteger[] divideAndRemainder(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: int getLowestSetBit()> -> _SOURCE_
<java.math.BigInteger: int hashCode()> -> _SOURCE_
<java.math.BigInteger: boolean isProbablePrime(int)> -> _SOURCE_
<java.math.BigInteger: long longValueExact()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger negate()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger nextProbablePrime()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger not()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger pow(int)> -> _SOURCE_
<java.math.BigInteger: BigInteger probablePrime(int,java.util.Random)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger setBit(int)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger shiftLeft(int)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger shiftRight(int)> -> _SOURCE_
<java.math.BigInteger: short shortValueExact()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger sqrt()> -> _SOURCE_
<java.math.BigInteger: BigInteger[] sqrtAndRemainder()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)> -> _SOURCE_
<java.math.BigInteger: byte[] toByteArray()> -> _SOURCE_
<java.math.BigInteger: java.lang.String toString()> -> _SOURCE_
<java.math.BigInteger: java.lang.String toString(int)> -> _SOURCE_
<java.math.BigInteger: BigInteger valueOf(long)> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)> -> _SOURCE_
<java.net.CacheRequest: OutputStream getBody()> -> _SOURCE_
<java.net.ContentHandler: Object getContent(java.net.URLConnection)> -> _SOURCE_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,Class[])> -> _SOURCE_
<java.net.CacheResponse: InputStream getBody()> -> _SOURCE_
<java.net.CacheResponse: java.util.Map> getHeaders()> -> _SOURCE_
<android.webkit.CookieManager: java.util.Map> get(java.net.URI,java.util.Map -> _SOURCE_
<android.webkit.CookieManager: java.net.CookieStore getCookieStore()> -> _SOURCE_
<android.webkit.CookieManager: void put(java.net.URI,java.util.Map -> _SINK_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal abs(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal abs()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal add(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: byte byteValueExact()> -> _SOURCE_
<android.icu.math.BigDecimal: int compareTo(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int,java.math.RoundingMode)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int)> -> _SINK_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,java.math.RoundingMode)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: BigDecimal[] divideAndRemainder(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: BigDecimal[] divideAndRemainder(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divideToIntegralValue(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divideToIntegralValue(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: double doubleValue()> -> _SOURCE_
<android.icu.math.BigDecimal: boolean equals(java.lang.Object)> -> _SOURCE_
<android.icu.math.BigDecimal: int hashCode()> -> _SOURCE_
<android.icu.math.BigDecimal: int intValue()> -> _SOURCE_
<android.icu.math.BigDecimal: long longValueExact()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal max(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal min(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal negate(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal plus(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal pow(int,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal pow(int)> -> _SOURCE_
<android.icu.math.BigDecimal: int precision()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal,android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal round(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: int scale()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int,int)> -> _SINK_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int,java.math.RoundingMode)> -> _SOURCE_
<android.icu.math.BigDecimal: short shortValueExact()> -> _SOURCE_
<android.icu.math.BigDecimal: int signum()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal sqrt(android.icu.math.MathContext)> -> _SOURCE_
<android.icu.math.BigDecimal: java.math.BigInteger toBigIntegerExact()> -> _SOURCE_
<android.icu.math.BigDecimal: java.lang.String toEngineeringString()> -> _SOURCE_
<android.icu.math.BigDecimal: java.lang.String toPlainString()> -> _SOURCE_
<android.icu.math.BigDecimal: java.lang.String toString()> -> _SOURCE_
<android.icu.math.BigDecimal: android.icu.math.BigDecimal ulp()> -> _SOURCE_
<android.icu.math.BigDecimal: java.math.BigInteger unscaledValue()> -> _SOURCE_
<android.icu.math.BigDecimal: BigDecimal valueOf(long,int)> -> _SINK_
<java.net.DatagramPacket: java.net.InetAddress getAddress()> -> _SOURCE_
<java.net.DatagramPacket: byte[] getData()> -> _SOURCE_
<java.net.DatagramPacket: int getLength()> -> _SOURCE_
<java.net.DatagramPacket: int getOffset()> -> _SOURCE_
<java.net.DatagramPacket: int getPort()> -> _SOURCE_
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()> -> _SOURCE_
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)> -> _SINK_
<java.net.DatagramPacket: void setData(byte[],int,int)> -> _SINK_
<java.net.DatagramPacket: void setData(byte[])> -> _SINK_
<java.net.DatagramPacket: void setLength(int)> -> _SINK_
<java.net.DatagramPacket: void setPort(int)> -> _SINK_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> -> _SINK_
<java.lang.reflect.TypeVariable: Type[] getBounds()> -> _SOURCE_
<java.lang.reflect.TypeVariable: D getGenericDeclaration()> -> _SOURCE_
<java.lang.reflect.TypeVariable: String getName()> -> _SOURCE_
<java.net.DatagramSocket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.DatagramSocket: void close()> -> _SINK_
<java.net.DatagramSocket: boolean getBroadcast()> -> _SOURCE_
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()> -> _SOURCE_
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<java.net.DatagramSocket: int getLocalPort()> -> _SOURCE_
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SOURCE_
<java.net.DatagramSocket:  T getOption(SocketOption)> -> _SOURCE_
<java.net.DatagramSocket: int getPort()> -> _SOURCE_
<java.net.DatagramSocket: int getReceiveBufferSize()> -> _SOURCE_
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()> -> _SOURCE_
<java.net.DatagramSocket: boolean getReuseAddress()> -> _SOURCE_
<java.net.DatagramSocket: int getSendBufferSize()> -> _SOURCE_
<java.net.DatagramSocket: int getSoTimeout()> -> _SOURCE_
<java.net.DatagramSocket: int getTrafficClass()> -> _SOURCE_
<java.net.DatagramSocket: boolean isBound()> -> _SOURCE_
<java.net.DatagramSocket: boolean isClosed()> -> _SOURCE_
<java.net.DatagramSocket: boolean isConnected()> -> _SOURCE_
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void setBroadcast(boolean)> -> _SINK_
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)> -> _SINK_
<java.net.DatagramSocket:  DatagramSocket setOption(SocketOption,T)> -> _SINK_
<java.net.DatagramSocket: void setReceiveBufferSize(int)> -> _SINK_
<java.net.DatagramSocket: void setReuseAddress(boolean)> -> _SINK_
<java.net.DatagramSocket: void setSendBufferSize(int)> -> _SINK_
<java.net.DatagramSocket: void setSoTimeout(int)> -> _SINK_
<java.net.DatagramSocket: void setTrafficClass(int)> -> _SINK_
<java.net.DatagramSocket: Set<SocketOption<?>> supportedOptions()> -> _SOURCE_
<java.net.HttpCookie: boolean domainMatches(java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getComment()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getCommentURL()> -> _SOURCE_
<java.net.HttpCookie: boolean getDiscard()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getDomain()> -> _SOURCE_
<java.net.HttpCookie: long getMaxAge()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getName()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getPath()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getPortlist()> -> _SOURCE_
<java.net.HttpCookie: boolean getSecure()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getValue()> -> _SOURCE_
<java.net.HttpCookie: int getVersion()> -> _SOURCE_
<java.net.HttpCookie: boolean hasExpired()> -> _SOURCE_
<java.net.HttpCookie: int hashCode()> -> _SOURCE_
<java.net.HttpCookie: boolean isHttpOnly()> -> _SOURCE_
<java.net.HttpCookie: List<HttpCookie> parse(java.lang.String)> -> _SOURCE_
<java.net.HttpCookie: void setComment(java.lang.String)> -> _SINK_
<java.net.HttpCookie: void setCommentURL(java.lang.String)> -> _SINK_
<java.net.HttpCookie: void setDomain(java.lang.String)> -> _SINK_
<java.net.HttpCookie: void setMaxAge(long)> -> _SINK_
<java.net.HttpCookie: void setPortlist(java.lang.String)> -> _SINK_
<java.net.HttpCookie: void setSecure(boolean)> -> _SINK_
<java.net.HttpCookie: void setVersion(int)> -> _SINK_
<java.net.HttpCookie: java.lang.String toString()> -> _SOURCE_
<java.net.FileNameMap: String getContentTypeFor(java.lang.String)> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> -> _SOURCE_
<java.net.HttpURLConnection: boolean getFollowRedirects()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getHeaderField(int)> -> _SOURCE_
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getHeaderFieldKey(int)> -> _SOURCE_
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()> -> _SOURCE_
<java.net.HttpURLConnection: java.security.Permission getPermission()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getRequestMethod()> -> _SOURCE_
<java.net.HttpURLConnection: int getResponseCode()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SOURCE_
<java.net.HttpURLConnection: void setFollowRedirects(boolean)> -> _SINK_
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)> -> _SINK_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
<java.net.HttpURLConnection: boolean usingProxy()> -> _SOURCE_
<java.net.HttpRetryException: java.lang.String getLocation()> -> _SOURCE_
<java.net.HttpRetryException: java.lang.String getReason()> -> _SOURCE_
<java.net.HttpRetryException: int responseCode()> -> _SOURCE_
<java.net.CookieStore: void add(java.net.URI,java.net.HttpCookie)> -> _SINK_
<java.net.CookieStore: List<HttpCookie> get(java.net.URI)> -> _SOURCE_
<java.net.CookieStore: List<HttpCookie> getCookies()> -> _SOURCE_
<java.net.CookieStore: List<URI> getURIs()> -> _SOURCE_
<java.net.Inet4Address: byte[] getAddress()> -> _SOURCE_
<java.net.Inet4Address: java.lang.String getHostAddress()> -> _SOURCE_
<java.net.Inet4Address: int hashCode()> -> _SOURCE_
<java.net.Inet4Address: boolean isAnyLocalAddress()> -> _SOURCE_
<java.net.Inet4Address: boolean isLinkLocalAddress()> -> _SOURCE_
<java.net.Inet4Address: boolean isLoopbackAddress()> -> _SOURCE_
<java.net.Inet4Address: boolean isMCGlobal()> -> _SOURCE_
<java.net.Inet4Address: boolean isMCLinkLocal()> -> _SOURCE_
<java.net.Inet4Address: boolean isMCNodeLocal()> -> _SOURCE_
<java.net.Inet4Address: boolean isMCOrgLocal()> -> _SOURCE_
<java.net.Inet4Address: boolean isMCSiteLocal()> -> _SOURCE_
<java.net.Inet4Address: boolean isMulticastAddress()> -> _SOURCE_
<java.net.Inet4Address: boolean isSiteLocalAddress()> -> _SOURCE_
<java.net.InetAddress: byte[] getAddress()> -> _SOURCE_
<java.net.InetAddress: InetAddress[] getAllByName(java.lang.String)> -> _SOURCE_
<java.net.InetAddress: InetAddress getByAddress(byte[])> -> _SOURCE_
<java.net.InetAddress: InetAddress getByAddress(java.lang.String,byte[])> -> _SINK_
<java.net.InetAddress: InetAddress getByName(java.lang.String)> -> _SOURCE_
<java.net.InetAddress: java.lang.String getCanonicalHostName()> -> _SOURCE_
<java.net.InetAddress: java.lang.String getHostAddress()> -> _SOURCE_
<java.net.InetAddress: java.lang.String getHostName()> -> _SOURCE_
<java.net.InetAddress: InetAddress getLocalHost()> -> _SOURCE_
<java.net.InetAddress: InetAddress getLoopbackAddress()> -> _SOURCE_
<java.net.InetAddress: int hashCode()> -> _SOURCE_
<java.net.InetAddress: boolean isAnyLocalAddress()> -> _SOURCE_
<java.net.InetAddress: boolean isLinkLocalAddress()> -> _SOURCE_
<java.net.InetAddress: boolean isLoopbackAddress()> -> _SOURCE_
<java.net.InetAddress: boolean isMCGlobal()> -> _SOURCE_
<java.net.InetAddress: boolean isMCLinkLocal()> -> _SOURCE_
<java.net.InetAddress: boolean isMCNodeLocal()> -> _SOURCE_
<java.net.InetAddress: boolean isMCOrgLocal()> -> _SOURCE_
<java.net.InetAddress: boolean isMCSiteLocal()> -> _SOURCE_
<java.net.InetAddress: boolean isMulticastAddress()> -> _SOURCE_
<java.net.InetAddress: boolean isReachable(int)> -> _SOURCE_
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)> -> _SOURCE_
<java.net.InetAddress: boolean isSiteLocalAddress()> -> _SOURCE_
<java.net.InetAddress: java.lang.String toString()> -> _SOURCE_
<java.net.InterfaceAddress: java.net.InetAddress getAddress()> -> _SOURCE_
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()> -> _SOURCE_
<java.net.InterfaceAddress: short getNetworkPrefixLength()> -> _SOURCE_
<java.net.InterfaceAddress: int hashCode()> -> _SOURCE_
<java.net.InterfaceAddress: java.lang.String toString()> -> _SOURCE_
<java.net.InetSocketAddress: InetAddress getAddress()> -> _SOURCE_
<java.net.InetSocketAddress: String getHostName()> -> _SOURCE_
<java.net.InetSocketAddress: String getHostString()> -> _SOURCE_
<java.net.InetSocketAddress: int getPort()> -> _SOURCE_
<java.net.InetSocketAddress: int hashCode()> -> _SOURCE_
<java.net.InetSocketAddress: boolean isUnresolved()> -> _SOURCE_
<java.net.InetSocketAddress: java.lang.String toString()> -> _SINK_
<java.net.IDN: String toUnicode(java.lang.String,int)> -> _SINK_
<java.net.IDN: String toUnicode(java.lang.String)> -> _SINK_
<java.net.MulticastSocket: java.net.InetAddress getInterface()> -> _SOURCE_
<java.net.MulticastSocket: boolean getLoopbackMode()> -> _SOURCE_
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()> -> _SOURCE_
<java.net.MulticastSocket: byte getTTL()> -> _SOURCE_
<java.net.MulticastSocket: int getTimeToLive()> -> _SOURCE_
<java.net.MulticastSocket: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)> -> _SOURCE_
<java.net.MulticastSocket: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)> -> _SINK_
<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> -> _SINK_
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)> -> _SINK_
<java.net.MulticastSocket: void setLoopbackMode(boolean)> -> _SINK_
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<java.net.MulticastSocket: void setTTL(byte)> -> _SINK_
<java.net.MulticastSocket: void setTimeToLive(int)> -> _SINK_
<java.net.MulticastSocket: Set<SocketOption<?>> supportedOptions()> -> _SOURCE_
<java.net.ProtocolFamily: String name()> -> _SOURCE_
<java.net.PasswordAuthentication: char[] getPassword()> -> _SOURCE_
<java.net.PasswordAuthentication: java.lang.String getUserName()> -> _SOURCE_
<java.net.NetworkInterface: NetworkInterface getByIndex(int)> -> _SOURCE_
<java.net.NetworkInterface: NetworkInterface getByInetAddress(java.net.InetAddress)> -> _SOURCE_
<java.net.NetworkInterface: NetworkInterface getByName(java.lang.String)> -> _SOURCE_
<java.net.NetworkInterface: java.lang.String getDisplayName()> -> _SOURCE_
<java.net.NetworkInterface: byte[] getHardwareAddress()> -> _SOURCE_
<java.net.NetworkInterface: int getIndex()> -> _SOURCE_
<java.net.NetworkInterface: Enumeration<InetAddress> getInetAddresses()> -> _SOURCE_
<java.net.NetworkInterface: List<InterfaceAddress> getInterfaceAddresses()> -> _SOURCE_
<java.net.NetworkInterface: int getMTU()> -> _SOURCE_
<java.net.NetworkInterface: java.lang.String getName()> -> _SOURCE_
<java.net.NetworkInterface: Enumeration<NetworkInterface> getNetworkInterfaces()> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getParent()> -> _SOURCE_
<java.net.NetworkInterface: Enumeration<NetworkInterface> getSubInterfaces()> -> _SOURCE_
<java.net.NetworkInterface: boolean isLoopback()> -> _SOURCE_
<java.net.NetworkInterface: boolean isPointToPoint()> -> _SOURCE_
<java.net.NetworkInterface: boolean isUp()> -> _SOURCE_
<java.net.NetworkInterface: boolean isVirtual()> -> _SOURCE_
<java.net.NetworkInterface: boolean supportsMulticast()> -> _SOURCE_
<java.net.NetworkInterface: java.lang.String toString()> -> _SOURCE_
<android.net.Proxy: java.net.SocketAddress address()> -> _SOURCE_
<android.net.Proxy: int hashCode()> -> _SOURCE_
<android.net.Proxy: java.lang.String toString()> -> _SINK_
<android.net.Proxy: java.net.Proxy.Type type()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.Attributes getAttributes()> -> _SOURCE_
<java.net.JarURLConnection: Certificate[] getCertificates()> -> _SOURCE_
<java.net.JarURLConnection: java.lang.String getEntryName()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()> -> _SOURCE_
<java.net.JarURLConnection: JarFile getJarFile()> -> _SOURCE_
<java.net.JarURLConnection: java.net.URL getJarFileURL()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()> -> _SOURCE_
<java.net.Inet6Address: byte[] getAddress()> -> _SOURCE_
<java.net.Inet6Address: Inet6Address getByAddress(java.lang.String,byte[],int)> -> _SOURCE_
<java.net.Inet6Address: Inet6Address getByAddress(java.lang.String,byte[],java.net.NetworkInterface)> -> _SOURCE_
<java.net.Inet6Address: java.lang.String getHostAddress()> -> _SOURCE_
<java.net.Inet6Address: int getScopeId()> -> _SOURCE_
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> -> _SOURCE_
<java.net.Inet6Address: int hashCode()> -> _SOURCE_
<java.net.Inet6Address: boolean isAnyLocalAddress()> -> _SOURCE_
<java.net.Inet6Address: boolean isIPv4CompatibleAddress()> -> _SOURCE_
<java.net.Inet6Address: boolean isLinkLocalAddress()> -> _SOURCE_
<java.net.Inet6Address: boolean isLoopbackAddress()> -> _SOURCE_
<java.net.Inet6Address: boolean isMCGlobal()> -> _SOURCE_
<java.net.Inet6Address: boolean isMCLinkLocal()> -> _SOURCE_
<java.net.Inet6Address: boolean isMCNodeLocal()> -> _SOURCE_
<java.net.Inet6Address: boolean isMCOrgLocal()> -> _SOURCE_
<java.net.Inet6Address: boolean isMCSiteLocal()> -> _SOURCE_
<java.net.Inet6Address: boolean isMulticastAddress()> -> _SOURCE_
<java.net.Inet6Address: boolean isSiteLocalAddress()> -> _SOURCE_
<java.net.ResponseCache: CacheResponse get(java.net.URI,java.lang.String,java.util.Map -> _SOURCE_
<java.net.ResponseCache: ResponseCache getDefault()> -> _SOURCE_
<java.net.ResponseCache: void setDefault(java.net.ResponseCache)> -> _SINK_
<java.net.CookieHandler: java.util.Map> get(java.net.URI,java.util.Map -> _SOURCE_
<java.net.CookieHandler: CookieHandler getDefault()> -> _SOURCE_
<java.net.CookieHandler: void put(java.net.URI,java.util.Map -> _SINK_
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)> -> _SINK_
<java.net.SocketOption: String name()> -> _SOURCE_
<java.net.SocketOption: Class type()> -> _SOURCE_
<java.net.Socket: void connect(java.net.SocketAddress,int)> -> _SINK_
<java.net.Socket: java.nio.channels.SocketChannel getChannel()> -> _SOURCE_
<java.net.Socket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SOURCE_
<java.net.Socket: boolean getKeepAlive()> -> _SOURCE_
<java.net.Socket: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<java.net.Socket: int getLocalPort()> -> _SOURCE_
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()> -> _SOURCE_
<java.net.Socket: boolean getOOBInline()> -> _SOURCE_
<java.net.Socket:  T getOption(SocketOption)> -> _SOURCE_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<java.net.Socket: int getPort()> -> _SOURCE_
<java.net.Socket: int getReceiveBufferSize()> -> _SOURCE_
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()> -> _SOURCE_
<java.net.Socket: boolean getReuseAddress()> -> _SOURCE_
<java.net.Socket: int getSendBufferSize()> -> _SOURCE_
<java.net.Socket: int getSoLinger()> -> _SOURCE_
<java.net.Socket: int getSoTimeout()> -> _SOURCE_
<java.net.Socket: boolean getTcpNoDelay()> -> _SOURCE_
<java.net.Socket: int getTrafficClass()> -> _SOURCE_
<java.net.Socket: boolean isBound()> -> _SOURCE_
<java.net.Socket: boolean isClosed()> -> _SOURCE_
<java.net.Socket: boolean isConnected()> -> _SOURCE_
<java.net.Socket: boolean isInputShutdown()> -> _SOURCE_
<java.net.Socket: boolean isOutputShutdown()> -> _SOURCE_
<java.net.Socket: void sendUrgentData(int)> -> _SINK_
<java.net.Socket: void setKeepAlive(boolean)> -> _SINK_
<java.net.Socket: void setOOBInline(boolean)> -> _SINK_
<java.net.Socket:  Socket setOption(SocketOption,T)> -> _SINK_
<java.net.Socket: void setPerformancePreferences(int,int,int)> -> _SINK_
<java.net.Socket: void setReceiveBufferSize(int)> -> _SINK_
<java.net.Socket: void setReuseAddress(boolean)> -> _SINK_
<java.net.Socket: void setSendBufferSize(int)> -> _SINK_
<java.net.Socket: void setSoLinger(boolean,int)> -> _SINK_
<java.net.Socket: void setSoTimeout(int)> -> _SINK_
<java.net.Socket: void setTcpNoDelay(boolean)> -> _SINK_
<java.net.Socket: void setTrafficClass(int)> -> _SINK_
<java.net.Socket: Set<SocketOption<?>> supportedOptions()> -> _SOURCE_
<java.net.ProxySelector: ProxySelector getDefault()> -> _SOURCE_
<java.net.ProxySelector: List<Proxy> select(java.net.URI)> -> _SOURCE_
<java.net.ProxySelector: void setDefault(java.net.ProxySelector)> -> _SINK_
<java.net.SocketImplFactory: SocketImpl createSocketImpl()> -> _SINK_
<java.net.SecureCacheResponse: String getCipherSuite()> -> _SOURCE_
<java.net.SecureCacheResponse: List<Certificate> getLocalCertificateChain()> -> _SOURCE_
<java.net.SecureCacheResponse: Principal getLocalPrincipal()> -> _SOURCE_
<java.net.SecureCacheResponse: Principal getPeerPrincipal()> -> _SOURCE_
<java.net.SecureCacheResponse: List<Certificate> getServerCertificateChain()> -> _SOURCE_
<java.net.SocketOptions: Object getOption(int)> -> _SOURCE_
<java.net.SocketOptions: void setOption(int,java.lang.Object)> -> _SINK_
<java.net.URI: int compareTo(java.net.URI)> -> _SOURCE_
<java.net.URI: URI create(java.lang.String)> -> _SOURCE_
<java.net.URI: java.lang.String getAuthority()> -> _SOURCE_
<java.net.URI: java.lang.String getFragment()> -> _SOURCE_
<java.net.URI: java.lang.String getHost()> -> _SOURCE_
<java.net.URI: java.lang.String getPath()> -> _SOURCE_
<java.net.URI: int getPort()> -> _SOURCE_
<java.net.URI: java.lang.String getQuery()> -> _SOURCE_
<java.net.URI: java.lang.String getRawAuthority()> -> _SOURCE_
<java.net.URI: java.lang.String getRawFragment()> -> _SOURCE_
<java.net.URI: java.lang.String getRawPath()> -> _SOURCE_
<java.net.URI: java.lang.String getRawQuery()> -> _SOURCE_
<java.net.URI: java.lang.String getRawSchemeSpecificPart()> -> _SOURCE_
<java.net.URI: java.lang.String getRawUserInfo()> -> _SOURCE_
<java.net.URI: java.lang.String getScheme()> -> _SOURCE_
<java.net.URI: java.lang.String getSchemeSpecificPart()> -> _SOURCE_
<java.net.URI: java.lang.String getUserInfo()> -> _SOURCE_
<java.net.URI: int hashCode()> -> _SOURCE_
<java.net.URI: boolean isAbsolute()> -> _SOURCE_
<java.net.URI: boolean isOpaque()> -> _SOURCE_
<java.net.URI: java.net.URI normalize()> -> _SOURCE_
<java.net.URI: java.net.URI resolve(java.net.URI)> -> _SOURCE_
<java.net.URI: java.lang.String toASCIIString()> -> _SOURCE_
<java.net.URI: java.lang.String toString()> -> _SOURCE_
<java.net.SocketImpl: java.lang.String toString()> -> _SOURCE_
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()> -> _SOURCE_
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<java.net.ServerSocket: int getLocalPort()> -> _SOURCE_
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SOURCE_
<java.net.ServerSocket:  T getOption(SocketOption)> -> _SOURCE_
<java.net.ServerSocket: int getReceiveBufferSize()> -> _SOURCE_
<java.net.ServerSocket: boolean getReuseAddress()> -> _SOURCE_
<java.net.ServerSocket: int getSoTimeout()> -> _SOURCE_
<java.net.ServerSocket: boolean isBound()> -> _SOURCE_
<java.net.ServerSocket: boolean isClosed()> -> _SOURCE_
<java.net.ServerSocket:  ServerSocket setOption(SocketOption,T)> -> _SINK_
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)> -> _SINK_
<java.net.ServerSocket: void setReceiveBufferSize(int)> -> _SINK_
<java.net.ServerSocket: void setReuseAddress(boolean)> -> _SINK_
<java.net.ServerSocket: void setSoTimeout(int)> -> _SINK_
<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)> -> _SINK_
<java.net.ServerSocket: Set<SocketOption<?>> supportedOptions()> -> _SOURCE_
<java.net.ServerSocket: java.lang.String toString()> -> _SOURCE_
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLConnection: boolean getAllowUserInteraction()> -> _SOURCE_
<java.net.URLConnection: int getConnectTimeout()> -> _SOURCE_
<java.net.URLConnection: java.lang.Object getContent()> -> _SOURCE_
<java.net.URLConnection: java.lang.Object getContent(Class[])> -> _SOURCE_
<java.net.URLConnection: java.lang.String getContentEncoding()> -> _SOURCE_
<java.net.URLConnection: int getContentLength()> -> _SOURCE_
<java.net.URLConnection: long getContentLengthLong()> -> _SOURCE_
<java.net.URLConnection: java.lang.String getContentType()> -> _SOURCE_
<java.net.URLConnection: long getDate()> -> _SOURCE_
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()> -> _SOURCE_
<java.net.URLConnection: String getDefaultRequestProperty(java.lang.String)> -> _SOURCE_
<java.net.URLConnection: boolean getDefaultUseCaches()> -> _SOURCE_
<java.net.URLConnection: boolean getDoInput()> -> _SOURCE_
<java.net.URLConnection: boolean getDoOutput()> -> _SOURCE_
<java.net.URLConnection: long getExpiration()> -> _SOURCE_
<java.net.URLConnection: FileNameMap getFileNameMap()> -> _SOURCE_
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)> -> _SOURCE_
<java.net.URLConnection: java.lang.String getHeaderField(int)> -> _SOURCE_
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SOURCE_
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)> -> _SOURCE_
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)> -> _SOURCE_
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)> -> _SOURCE_
<java.net.URLConnection: java.util.Map> getHeaderFields()> -> _SOURCE_
<java.net.URLConnection: long getIfModifiedSince()> -> _SOURCE_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<java.net.URLConnection: long getLastModified()> -> _SOURCE_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SOURCE_
<java.net.URLConnection: java.security.Permission getPermission()> -> _SOURCE_
<java.net.URLConnection: int getReadTimeout()> -> _SOURCE_
<java.net.URLConnection: java.util.Map> getRequestProperties()> -> _SOURCE_
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> -> _SOURCE_
<java.net.URLConnection: java.net.URL getURL()> -> _SOURCE_
<java.net.URLConnection: boolean getUseCaches()> -> _SOURCE_
<java.net.URLConnection: String guessContentTypeFromName(java.lang.String)> -> _SOURCE_
<java.net.URLConnection: void setAllowUserInteraction(boolean)> -> _SINK_
<java.net.URLConnection: void setConnectTimeout(int)> -> _SINK_
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)> -> _SINK_
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLConnection: void setDefaultUseCaches(boolean)> -> _SINK_
<java.net.URLConnection: void setDoInput(boolean)> -> _SINK_
<java.net.URLConnection: void setDoOutput(boolean)> -> _SINK_
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)> -> _SINK_
<java.net.URLConnection: void setIfModifiedSince(long)> -> _SINK_
<java.net.URLConnection: void setReadTimeout(int)> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLConnection: void setUseCaches(boolean)> -> _SINK_
<java.net.URLConnection: java.lang.String toString()> -> _SOURCE_
<java.net.URLDecoder: String decode(java.lang.String)> -> _SOURCE_
<java.net.URLDecoder: String decode(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<java.net.URLDecoder: String decode(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: java.lang.String getAuthority()> -> _SOURCE_
<java.net.URL: java.lang.Object getContent()> -> _SOURCE_
<java.net.URL: java.lang.Object getContent(Class[])> -> _SOURCE_
<java.net.URL: int getDefaultPort()> -> _SOURCE_
<java.net.URL: java.lang.String getFile()> -> _SOURCE_
<java.net.URL: java.lang.String getHost()> -> _SOURCE_
<java.net.URL: java.lang.String getPath()> -> _SOURCE_
<java.net.URL: int getPort()> -> _SOURCE_
<java.net.URL: java.lang.String getProtocol()> -> _SOURCE_
<java.net.URL: java.lang.String getQuery()> -> _SOURCE_
<java.net.URL: java.lang.String getRef()> -> _SOURCE_
<java.net.URL: java.lang.String getUserInfo()> -> _SOURCE_
<java.net.URL: int hashCode()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection(android.net.Proxy)> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
<java.net.URL: java.lang.String toExternalForm()> -> _SOURCE_
<java.net.URL: java.lang.String toString()> -> _SOURCE_
<java.net.URL: java.net.URI toURI()> -> _SOURCE_
<java.net.URLEncoder: String encode(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLEncoder: String encode(java.lang.String)> -> _SOURCE_
<java.net.URLEncoder: String encode(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)> -> _SOURCE_
<java.net.URLClassLoader: Enumeration<URL> findResources(java.lang.String)> -> _SOURCE_
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SOURCE_
<java.net.URLClassLoader: URL[] getURLs()> -> _SOURCE_
<java.nio.Buffer: Object array()> -> _SOURCE_
<java.nio.Buffer: int arrayOffset()> -> _SOURCE_
<java.nio.Buffer: int capacity()> -> _SOURCE_
<java.nio.Buffer: int limit()> -> _SOURCE_
<java.nio.Buffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.Buffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.Buffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.Buffer: int position()> -> _SOURCE_
<java.nio.Buffer: int remaining()> -> _SOURCE_
<java.net.URISyntaxException: int getIndex()> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getInput()> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getMessage()> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getReason()> -> _SOURCE_
<java.nio.ByteOrder: ByteOrder nativeOrder()> -> _SOURCE_
<java.nio.ByteOrder: java.lang.String toString()> -> _SOURCE_
<java.nio.ByteBuffer: int alignmentOffset(int,int)> -> _SOURCE_
<java.nio.ByteBuffer: byte[] array()> -> _SOURCE_
<java.nio.ByteBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.ByteBuffer: byte get()> -> _SOURCE_
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> -> _SOURCE_
<java.nio.ByteBuffer: byte get(int)> -> _SOURCE_
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])> -> _SOURCE_
<java.nio.ByteBuffer: char getChar()> -> _SOURCE_
<java.nio.ByteBuffer: char getChar(int)> -> _SOURCE_
<java.nio.ByteBuffer: double getDouble(int)> -> _SOURCE_
<java.nio.ByteBuffer: double getDouble()> -> _SOURCE_
<java.nio.ByteBuffer: float getFloat()> -> _SOURCE_
<java.nio.ByteBuffer: float getFloat(int)> -> _SOURCE_
<java.nio.ByteBuffer: int getInt(int)> -> _SOURCE_
<java.nio.ByteBuffer: int getInt()> -> _SOURCE_
<java.nio.ByteBuffer: long getLong(int)> -> _SOURCE_
<java.nio.ByteBuffer: long getLong()> -> _SOURCE_
<java.nio.ByteBuffer: short getShort(int)> -> _SOURCE_
<java.nio.ByteBuffer: short getShort()> -> _SOURCE_
<java.nio.ByteBuffer: int hashCode()> -> _SOURCE_
<java.nio.ByteBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.ByteBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.ByteBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.ByteBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer put(byte[])> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer put(byte)> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer put(int,byte)> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putChar(int,char)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putChar(char)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putDouble(double)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putDouble(int,double)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putFloat(int,float)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putFloat(float)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putInt(int,int)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putInt(int)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putLong(long)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putLong(int,long)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putShort(short)> -> _SINK_
<java.nio.ByteBuffer: ByteBuffer putShort(int,short)> -> _SINK_
<java.nio.ByteBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.FloatBuffer: float[] array()> -> _SOURCE_
<java.nio.FloatBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])> -> _SOURCE_
<java.nio.FloatBuffer: float get()> -> _SOURCE_
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)> -> _SOURCE_
<java.nio.FloatBuffer: float get(int)> -> _SOURCE_
<java.nio.FloatBuffer: int hashCode()> -> _SOURCE_
<java.nio.FloatBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.FloatBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.FloatBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.FloatBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)> -> _SINK_
<java.nio.FloatBuffer: FloatBuffer put(float)> -> _SINK_
<java.nio.FloatBuffer: FloatBuffer put(int,float)> -> _SINK_
<java.nio.FloatBuffer: FloatBuffer put(float[])> -> _SINK_
<java.nio.FloatBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.LongBuffer: long[] array()> -> _SOURCE_
<java.nio.LongBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)> -> _SOURCE_
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])> -> _SOURCE_
<java.nio.LongBuffer: long get()> -> _SOURCE_
<java.nio.LongBuffer: long get(int)> -> _SOURCE_
<java.nio.LongBuffer: int hashCode()> -> _SOURCE_
<java.nio.LongBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.LongBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.LongBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.LongBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.LongBuffer: LongBuffer put(long)> -> _SINK_
<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)> -> _SINK_
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)> -> _SINK_
<java.nio.LongBuffer: LongBuffer put(int,long)> -> _SINK_
<java.nio.LongBuffer: LongBuffer put(long[])> -> _SINK_
<java.nio.LongBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.IntBuffer: int[] array()> -> _SOURCE_
<java.nio.IntBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.IntBuffer: int get()> -> _SOURCE_
<java.nio.IntBuffer: int get(int)> -> _SOURCE_
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)> -> _SOURCE_
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])> -> _SOURCE_
<java.nio.IntBuffer: int hashCode()> -> _SOURCE_
<java.nio.IntBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.IntBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.IntBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.IntBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.IntBuffer: IntBuffer put(int)> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)> -> _SINK_
<java.nio.IntBuffer: IntBuffer put(int,int)> -> _SINK_
<java.nio.IntBuffer: IntBuffer put(int[])> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)> -> _SINK_
<java.nio.IntBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.DoubleBuffer: double[] array()> -> _SOURCE_
<java.nio.DoubleBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.DoubleBuffer: double get()> -> _SOURCE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)> -> _SOURCE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])> -> _SOURCE_
<java.nio.DoubleBuffer: double get(int)> -> _SOURCE_
<java.nio.DoubleBuffer: int hashCode()> -> _SOURCE_
<java.nio.DoubleBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.DoubleBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.DoubleBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.DoubleBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)> -> _SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)> -> _SINK_
<java.nio.DoubleBuffer: DoubleBuffer put(double)> -> _SINK_
<java.nio.DoubleBuffer: DoubleBuffer put(double[])> -> _SINK_
<java.nio.DoubleBuffer: DoubleBuffer put(int,double)> -> _SINK_
<java.nio.DoubleBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.CharBuffer: char[] array()> -> _SOURCE_
<java.nio.CharBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.CharBuffer: char charAt(int)> -> _SOURCE_
<java.nio.CharBuffer: char get()> -> _SOURCE_
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])> -> _SOURCE_
<java.nio.CharBuffer: char get(int)> -> _SOURCE_
<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)> -> _SOURCE_
<java.nio.CharBuffer: int hashCode()> -> _SOURCE_
<java.nio.CharBuffer: int length()> -> _SOURCE_
<java.nio.CharBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.CharBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.CharBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.CharBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.CharBuffer: CharBuffer put(char[])> -> _SINK_
<java.nio.CharBuffer: CharBuffer put(int,char)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)> -> _SINK_
<java.nio.CharBuffer: CharBuffer put(java.lang.String)> -> _SINK_
<java.nio.CharBuffer: CharBuffer put(char)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)> -> _SINK_
<java.nio.CharBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.AsynchronousByteChannel: <A> void read(java.nio.ByteBuffer,A,CompletionHandler<Integer,)> -> _SOURCE_
<java.nio.channels.AsynchronousByteChannel: Future<Integer> read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.AsynchronousByteChannel: <A> void write(java.nio.ByteBuffer,A,CompletionHandler<Integer,)> -> _SINK_
<java.nio.channels.AsynchronousByteChannel: Future<Integer> write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.ShortBuffer: short[] array()> -> _SOURCE_
<java.nio.ShortBuffer: int arrayOffset()> -> _SOURCE_
<java.nio.ShortBuffer: short get()> -> _SOURCE_
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)> -> _SOURCE_
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])> -> _SOURCE_
<java.nio.ShortBuffer: short get(int)> -> _SOURCE_
<java.nio.ShortBuffer: int hashCode()> -> _SOURCE_
<java.nio.ShortBuffer: java.nio.Buffer limit(int)> -> _SINK_
<java.nio.ShortBuffer: java.nio.Buffer mark()> -> _SOURCE_
<java.nio.ShortBuffer: ByteOrder order()> -> _SOURCE_
<java.nio.ShortBuffer: java.nio.Buffer position(int)> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)> -> _SINK_
<java.nio.ShortBuffer: ShortBuffer put(short[])> -> _SINK_
<java.nio.ShortBuffer: ShortBuffer put(short)> -> _SINK_
<java.nio.ShortBuffer: ShortBuffer put(int,short)> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)> -> _SINK_
<java.nio.ShortBuffer: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.AsynchronousChannelGroup: boolean isTerminated()> -> _SOURCE_
<java.nio.channels.AsynchronousChannelGroup: AsynchronousChannelProvider provider()> -> _SOURCE_
<java.nio.channels.AsynchronousChannelGroup: AsynchronousChannelGroup withThreadPool(java.util.concurrent.ExecutorService)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: <A> void lock(long,long,boolean,A,CompletionHandler<FileLock,)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: Future<FileLock> lock(long,long,boolean)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: <A> void lock(A,CompletionHandler<FileLock,)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: Future<FileLock> lock()> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: <A> void read(java.nio.ByteBuffer,long,A,CompletionHandler<Integer,)> -> _SOURCE_
<java.nio.channels.AsynchronousFileChannel: Future<Integer> read(java.nio.ByteBuffer,long)> -> _SOURCE_
<java.nio.channels.AsynchronousFileChannel: long size()> -> _SOURCE_
<java.nio.channels.AsynchronousFileChannel: AsynchronousFileChannel truncate(long)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: FileLock tryLock()> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: Future<Integer> write(java.nio.ByteBuffer,long)> -> _SOURCE_
<java.nio.channels.AsynchronousFileChannel: <A> void write(java.nio.ByteBuffer,long,A,CompletionHandler<Integer,)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: Future<Void> connect(java.net.SocketAddress)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: <A> void connect(java.net.SocketAddress,A,CompletionHandler<Void,)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: SocketAddress getLocalAddress()> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: SocketAddress getRemoteAddress()> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: AsynchronousChannelProvider provider()> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: Future<Integer> read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: <A> void read(java.nio.ByteBuffer,A,CompletionHandler<Integer,)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: <A> void read(ByteBuffer[],int,int,long,android.icu.util.TimeUnit,A,CompletionHandler<Long,)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: <A> void read(java.nio.ByteBuffer,long,android.icu.util.TimeUnit,A,CompletionHandler<Integer,)> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel:  AsynchronousSocketChannel setOption(SocketOption,T)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: Future<Integer> write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: <A> void write(java.nio.ByteBuffer,long,android.icu.util.TimeUnit,A,CompletionHandler<Integer,)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: <A> void write(java.nio.ByteBuffer,A,CompletionHandler<Integer,)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: <A> void write(ByteBuffer[],int,int,long,android.icu.util.TimeUnit,A,CompletionHandler<Long,)> -> _SINK_
<java.nio.channels.AsynchronousServerSocketChannel: <A> void accept(A,CompletionHandler<AsynchronousSocketChannel,)> -> _SOURCE_
<java.nio.channels.AsynchronousServerSocketChannel: Future<AsynchronousSocketChannel> accept()> -> _SOURCE_
<java.nio.channels.AsynchronousServerSocketChannel: SocketAddress getLocalAddress()> -> _SOURCE_
<java.nio.channels.AsynchronousServerSocketChannel: AsynchronousChannelProvider provider()> -> _SOURCE_
<java.nio.channels.AsynchronousServerSocketChannel:  AsynchronousServerSocketChannel setOption(SocketOption,T)> -> _SINK_
<java.nio.channels.Channels: ReadableByteChannel newChannel(java.io.InputStream)> -> _SOURCE_
<java.nio.channels.Channels: InputStream newInputStream(java.nio.channels.ReadableByteChannel)> -> _SOURCE_
<java.nio.channels.Channels: InputStream newInputStream(java.nio.channels.AsynchronousByteChannel)> -> _SOURCE_
<java.nio.channels.Channels: OutputStream newOutputStream(java.nio.channels.AsynchronousByteChannel)> -> _SINK_
<java.nio.channels.Channels: OutputStream newOutputStream(java.nio.channels.WritableByteChannel)> -> _SINK_
<java.nio.channels.Channels: Reader newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.Charset)> -> _SOURCE_
<java.nio.channels.Channels: Reader newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)> -> _SOURCE_
<java.nio.channels.Channels: Reader newReader(java.nio.channels.ReadableByteChannel,java.lang.String)> -> _SOURCE_
<java.nio.channels.DatagramChannel: DatagramChannel connect(java.net.SocketAddress)> -> _SOURCE_
<java.nio.channels.DatagramChannel: SocketAddress getLocalAddress()> -> _SOURCE_
<java.nio.channels.DatagramChannel: SocketAddress getRemoteAddress()> -> _SOURCE_
<java.nio.channels.DatagramChannel: boolean isConnected()> -> _SOURCE_
<java.nio.channels.DatagramChannel: DatagramChannel open()> -> _SINK_
<java.nio.channels.DatagramChannel: DatagramChannel open(java.net.ProtocolFamily)> -> _SINK_
<java.nio.channels.DatagramChannel: long read(ByteBuffer[],int,int)> -> _SOURCE_
<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.DatagramChannel: long read(ByteBuffer[])> -> _SOURCE_
<java.nio.channels.DatagramChannel: SocketAddress receive(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)> -> _SINK_
<java.nio.channels.DatagramChannel:  DatagramChannel setOption(SocketOption,T)> -> _SINK_
<java.nio.channels.DatagramChannel: DatagramSocket socket()> -> _SOURCE_
<java.nio.channels.DatagramChannel: int validOps()> -> _SOURCE_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.DatagramChannel: long write(ByteBuffer[])> -> _SINK_
<java.nio.channels.DatagramChannel: long write(ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.FileChannel.MapMode: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.FileChannel: FileLock lock(long,long,boolean)> -> _SINK_
<java.nio.channels.FileChannel: FileLock lock()> -> _SINK_
<java.nio.channels.FileChannel: MappedByteBuffer map(java.nio.channels.FileChannel.MapMode,long,long)> -> _SINK_
<java.nio.channels.FileChannel: FileChannel position(long)> -> _SINK_
<java.nio.channels.FileChannel: long position()> -> _SOURCE_
<java.nio.channels.FileChannel: long read(ByteBuffer[],int,int)> -> _SOURCE_
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.FileChannel: long read(ByteBuffer[])> -> _SOURCE_
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)> -> _SOURCE_
<java.nio.channels.FileChannel: long size()> -> _SOURCE_
<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)> -> _SINK_
<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)> -> _SINK_
<java.nio.channels.FileChannel: FileChannel truncate(long)> -> _SINK_
<java.nio.channels.FileChannel: FileLock tryLock()> -> _SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)> -> _SOURCE_
<java.nio.channels.FileChannel: long write(ByteBuffer[])> -> _SINK_
<java.nio.channels.FileChannel: long write(ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.MembershipKey: MulticastChannel channel()> -> _SOURCE_
<java.nio.channels.MembershipKey: InetAddress group()> -> _SOURCE_
<java.nio.channels.MembershipKey: boolean isValid()> -> _SOURCE_
<java.nio.channels.MembershipKey: NetworkInterface networkInterface()> -> _SOURCE_
<java.nio.channels.MembershipKey: InetAddress sourceAddress()> -> _SOURCE_
<java.nio.MappedByteBuffer: MappedByteBuffer force()> -> _SOURCE_
<java.nio.channels.NetworkChannel: SocketAddress getLocalAddress()> -> _SOURCE_
<java.nio.channels.NetworkChannel:  T getOption(SocketOption)> -> _SOURCE_
<java.nio.channels.NetworkChannel:  NetworkChannel setOption(SocketOption,T)> -> _SINK_
<java.nio.channels.NetworkChannel: Set<SocketOption<?>> supportedOptions()> -> _SOURCE_
<java.nio.channels.GatheringByteChannel: long write(ByteBuffer[])> -> _SINK_
<java.nio.channels.GatheringByteChannel: long write(ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.MulticastChannel: MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)> -> _SINK_
<java.nio.channels.FileLock: android.se.omapi.Channel acquiredBy()> -> _SOURCE_
<java.nio.channels.FileLock: FileChannel channel()> -> _SOURCE_
<java.nio.channels.FileLock: boolean isShared()> -> _SOURCE_
<java.nio.channels.FileLock: boolean isValid()> -> _SOURCE_
<java.nio.channels.FileLock: boolean overlaps(long,long)> -> _SOURCE_
<java.nio.channels.FileLock: long position()> -> _SOURCE_
<java.nio.channels.FileLock: long size()> -> _SOURCE_
<java.nio.channels.FileLock: String toString()> -> _SOURCE_
<java.nio.channels.Pipe.SourceChannel: int validOps()> -> _SOURCE_
<java.nio.channels.SelectableChannel: Object blockingLock()> -> _SOURCE_
<java.nio.channels.SelectableChannel: SelectableChannel configureBlocking(boolean)> -> _SINK_
<java.nio.channels.SelectableChannel: SelectionKey keyFor(java.nio.channels.Selector)> -> _SOURCE_
<java.nio.channels.SelectableChannel: SelectorProvider provider()> -> _SOURCE_
<java.nio.channels.SelectableChannel: int validOps()> -> _SOURCE_
<java.nio.channels.Pipe: Pipe open()> -> _SOURCE_
<java.nio.channels.Pipe: Pipe.SinkChannel sink()> -> _SOURCE_
<java.nio.channels.Pipe: Pipe.SourceChannel source()> -> _SOURCE_
<java.nio.channels.Selector: Set<SelectionKey> keys()> -> _SOURCE_
<java.nio.channels.Selector: SelectorProvider provider()> -> _SOURCE_
<java.nio.channels.Selector: Set<SelectionKey> selectedKeys()> -> _SOURCE_
<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.ScatteringByteChannel: long read(ByteBuffer[],int,int)> -> _SOURCE_
<java.nio.channels.ScatteringByteChannel: long read(ByteBuffer[])> -> _SOURCE_
<java.nio.channels.ServerSocketChannel: SocketAddress getLocalAddress()> -> _SOURCE_
<java.nio.channels.ServerSocketChannel:  ServerSocketChannel setOption(SocketOption,T)> -> _SINK_
<java.nio.channels.ServerSocketChannel: ServerSocket socket()> -> _SOURCE_
<java.nio.channels.ServerSocketChannel: int validOps()> -> _SOURCE_
<java.nio.channels.SeekableByteChannel: long position()> -> _SOURCE_
<java.nio.channels.SeekableByteChannel: SeekableByteChannel position(long)> -> _SINK_
<java.nio.channels.SeekableByteChannel: int read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.SeekableByteChannel: long size()> -> _SOURCE_
<java.nio.channels.SeekableByteChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.Pipe.SinkChannel: int validOps()> -> _SOURCE_
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)> -> _SOURCE_
<java.nio.channels.SocketChannel: SocketAddress getLocalAddress()> -> _SOURCE_
<java.nio.channels.SocketChannel: SocketAddress getRemoteAddress()> -> _SOURCE_
<java.nio.channels.SocketChannel: boolean isConnected()> -> _SOURCE_
<java.nio.channels.SocketChannel: boolean isConnectionPending()> -> _SOURCE_
<java.nio.channels.SocketChannel: long read(ByteBuffer[],int,int)> -> _SOURCE_
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.SocketChannel: long read(ByteBuffer[])> -> _SOURCE_
<java.nio.channels.SocketChannel:  SocketChannel setOption(SocketOption,T)> -> _SINK_
<java.nio.channels.SocketChannel: Socket socket()> -> _SOURCE_
<java.nio.channels.SocketChannel: int validOps()> -> _SOURCE_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: long write(ByteBuffer[])> -> _SINK_
<java.nio.channels.SocketChannel: long write(ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.spi.AbstractSelector: SelectorProvider provider()> -> _SOURCE_
<java.nio.channels.SelectionKey: Object attachment()> -> _SOURCE_
<java.nio.channels.SelectionKey: SelectableChannel channel()> -> _SOURCE_
<java.nio.channels.SelectionKey: int interestOps()> -> _SOURCE_
<java.nio.channels.SelectionKey: SelectionKey interestOps(int)> -> _SINK_
<java.nio.channels.SelectionKey: int interestOpsAnd(int)> -> _SINK_
<java.nio.channels.SelectionKey: boolean isAcceptable()> -> _SOURCE_
<java.nio.channels.SelectionKey: boolean isConnectable()> -> _SOURCE_
<java.nio.channels.SelectionKey: boolean isReadable()> -> _SOURCE_
<java.nio.channels.SelectionKey: boolean isValid()> -> _SOURCE_
<java.nio.channels.SelectionKey: boolean isWritable()> -> _SOURCE_
<java.nio.channels.SelectionKey: Selector selector()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()> -> _SOURCE_
<java.nio.charset.Charset: Set<String> aliases()> -> _SOURCE_
<java.nio.charset.Charset: Sortedjava.util.Map availableCharsets()> -> _SINK_
<java.nio.charset.Charset: boolean canEncode()> -> _SOURCE_
<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)> -> _SOURCE_
<java.nio.charset.Charset: Charset defaultCharset()> -> _SOURCE_
<java.nio.charset.Charset: java.lang.String displayName()> -> _SOURCE_
<java.nio.charset.Charset: java.lang.String displayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.nio.charset.Charset: ByteBuffer encode(java.lang.String)> -> _SOURCE_
<java.nio.charset.Charset: Charset forName(java.lang.String)> -> _SOURCE_
<java.nio.charset.Charset: int hashCode()> -> _SOURCE_
<java.nio.charset.Charset: boolean isRegistered()> -> _SOURCE_
<java.nio.charset.Charset: boolean isSupported(java.lang.String)> -> _SOURCE_
<java.nio.charset.Charset: String name()> -> _SOURCE_
<java.nio.charset.Charset: String toString()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: Charset charset()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: String replacement()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _SOURCE_
<java.nio.channels.spi.SelectorProvider: android.se.omapi.Channel inheritedChannel()> -> _SOURCE_
<java.nio.channels.spi.SelectorProvider: DatagramChannel openDatagramChannel(java.net.ProtocolFamily)> -> _SINK_
<java.nio.channels.spi.SelectorProvider: DatagramChannel openDatagramChannel()> -> _SINK_
<java.nio.channels.spi.SelectorProvider: Pipe openPipe()> -> _SOURCE_
<java.nio.channels.spi.SelectorProvider: SelectorProvider provider()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: Charset charset()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)> -> _SINK_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: byte[] replacement()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _SOURCE_
<java.nio.charset.MalformedInputException: int getInputLength()> -> _SOURCE_
<java.nio.charset.MalformedInputException: java.lang.String getMessage()> -> _SOURCE_
<java.nio.charset.CodingErrorAction: java.lang.String toString()> -> _SOURCE_
<java.nio.charset.IllegalCharsetNameException: java.lang.String getCharsetName()> -> _SOURCE_
<java.nio.charset.UnsupportedCharsetException: java.lang.String getCharsetName()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectableChannel: Object blockingLock()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectableChannel: SelectableChannel configureBlocking(boolean)> -> _SINK_
<java.nio.channels.spi.AbstractSelectableChannel: SelectionKey keyFor(java.nio.channels.Selector)> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectableChannel: SelectorProvider provider()> -> _SOURCE_
<java.nio.charset.spi.CharsetProvider: Charset charsetForName(java.lang.String)> -> _SOURCE_
<java.nio.charset.UnmappableCharacterException: int getInputLength()> -> _SOURCE_
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()> -> _SOURCE_
<java.nio.file.FileSystem: Iterable<FileStore> getFileStores()> -> _SOURCE_
<java.nio.file.FileSystem: PathMatcher getPathMatcher(java.lang.String)> -> _SOURCE_
<java.nio.file.FileSystem: Iterable<Path> getRootDirectories()> -> _SOURCE_
<java.nio.file.FileSystem: String getSeparator()> -> _SOURCE_
<java.nio.file.FileSystem: UserPrincipalLookupService getUserPrincipalLookupService()> -> _SOURCE_
<java.nio.file.FileSystem: FileSystemProvider provider()> -> _SOURCE_
<java.nio.file.FileSystem: Set<String> supportedFileAttributeViews()> -> _SOURCE_
<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()> -> _SOURCE_
<java.nio.file.DirectoryStream: Iterator iterator()> -> _SOURCE_
<java.nio.file.FileStore: Object getAttribute(java.lang.String)> -> _SOURCE_
<java.nio.file.FileStore: long getBlockSize()> -> _SOURCE_
<java.nio.file.FileStore: <V extends FileStoreAttributeView> V getFileStoreAttributeView(Class<V>)> -> _SOURCE_
<java.nio.file.FileStore: long getTotalSpace()> -> _SOURCE_
<java.nio.file.FileStore: long getUnallocatedSpace()> -> _SOURCE_
<java.nio.file.FileStore: long getUsableSpace()> -> _SOURCE_
<java.nio.file.FileStore: boolean isReadOnly()> -> _SOURCE_
<java.nio.file.FileStore: String name()> -> _SOURCE_
<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.String)> -> _SOURCE_
<java.nio.file.FileStore: boolean supportsFileAttributeView(Class<?)> -> _SOURCE_
<java.nio.file.FileStore: String type()> -> _SOURCE_
<java.nio.file.FileSystems: FileSystem getDefault()> -> _SOURCE_
<java.nio.file.FileSystems: FileSystem getFileSystem(java.net.URI)> -> _SOURCE_
<java.nio.charset.CoderResult: boolean isMalformed()> -> _SOURCE_
<java.nio.charset.CoderResult: int length()> -> _SOURCE_
<java.nio.charset.CoderResult: CoderResult malformedForLength(int)> -> _SOURCE_
<java.nio.charset.CoderResult: java.lang.String toString()> -> _SOURCE_
<java.nio.file.InvalidPathException: int getIndex()> -> _SOURCE_
<java.nio.file.InvalidPathException: java.lang.String getInput()> -> _SOURCE_
<java.nio.file.InvalidPathException: java.lang.String getMessage()> -> _SOURCE_
<java.nio.file.InvalidPathException: java.lang.String getReason()> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getFile()> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getMessage()> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getOtherFile()> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getReason()> -> _SOURCE_
<java.nio.file.PathMatcher: boolean matches(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: boolean exists(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: Object getAttribute(android.graphics.Path,java.lang.String,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: <V extends FileAttributeView> V getFileAttributeView(android.graphics.Path,Class<V>,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: FileStore getFileStore(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: FileTime getLastModifiedTime(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: UserPrincipal getOwner(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: Set<PosixFilePermission> getPosixFilePermissions(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: boolean isDirectory(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: boolean isExecutable(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: boolean isHidden(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: boolean isReadable(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: boolean isRegularFile(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: boolean isSameFile(android.graphics.Path,android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: boolean isSymbolicLink(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: boolean isWritable(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: Stream<String> lines(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: Stream<String> lines(android.graphics.Path,java.nio.charset.Charset)> -> _SOURCE_
<java.nio.file.Files: Stream<Path> list(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: Path move(android.graphics.Path,android.graphics.Path,CopyOption[])> -> _SINK_
<java.nio.file.Files: BufferedReader newBufferedReader(android.graphics.Path,java.nio.charset.Charset)> -> _SOURCE_
<java.nio.file.Files: BufferedReader newBufferedReader(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: InputStream newInputStream(android.graphics.Path,OpenOption[])> -> _SOURCE_
<java.nio.file.Files: boolean notExists(android.graphics.Path,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: String probeContentType(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: byte[] readAllBytes(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: List<String> readAllLines(android.graphics.Path,java.nio.charset.Charset)> -> _SOURCE_
<java.nio.file.Files: List<String> readAllLines(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: java.util.Map readAttributes(android.graphics.Path,java.lang.String,LinkOption[])> -> _SINK_
<java.nio.file.Files: <A extends BasicFileAttributes> A readAttributes(android.graphics.Path,Class<A>,LinkOption[])> -> _SOURCE_
<java.nio.file.Files: Path readSymbolicLink(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: Path setAttribute(android.graphics.Path,java.lang.String,java.lang.Object,LinkOption[])> -> _SINK_
<java.nio.file.Files: Path setLastModifiedTime(android.graphics.Path,java.nio.file.attribute.FileTime)> -> _SINK_
<java.nio.file.Files: Path setOwner(android.graphics.Path,java.nio.file.attribute.UserPrincipal)> -> _SINK_
<java.nio.file.Files: Path setPosixFilePermissions(android.graphics.Path,Set<PosixFilePermission>)> -> _SINK_
<java.nio.file.Files: long size(android.graphics.Path)> -> _SOURCE_
<java.nio.file.Files: Path write(android.graphics.Path,Iterable<?,OpenOption[])> -> _SINK_
<java.nio.file.Files: Path write(android.graphics.Path,Iterable<?,java.nio.charset.Charset,OpenOption[])> -> _SINK_
<java.nio.file.Files: Path write(android.graphics.Path,byte[],OpenOption[])> -> _SINK_
<java.nio.file.Paths: Path get(java.net.URI)> -> _SOURCE_
<java.nio.file.SecureDirectoryStream: <V extends FileAttributeView> V getFileAttributeView(Class<V>)> -> _SOURCE_
<java.nio.file.SecureDirectoryStream: <V extends FileAttributeView> V getFileAttributeView(T,Class<V>,LinkOption[])> -> _SOURCE_
<java.nio.file.SecureDirectoryStream: SecureDirectoryStream newDirectoryStream(T,LinkOption[])> -> _SOURCE_
<java.nio.file.WatchEvent.Modifier: String name()> -> _SOURCE_
<java.nio.file.WatchEvent: T context()> -> _SOURCE_
<java.nio.file.WatchEvent: int count()> -> _SOURCE_
<java.nio.file.WatchEvent: Kind kind()> -> _SOURCE_
<java.nio.file.WatchKey: boolean isValid()> -> _SOURCE_
<java.nio.file.WatchKey: Watchable watchable()> -> _SOURCE_
<android.graphics.Path: boolean endsWith(java.lang.String)> -> _SOURCE_
<android.graphics.Path: boolean endsWith(android.graphics.Path)> -> _SOURCE_
<android.graphics.Path: Path getFileName()> -> _SOURCE_
<android.graphics.Path: FileSystem getFileSystem()> -> _SOURCE_
<android.graphics.Path: Path getName(int)> -> _SOURCE_
<android.graphics.Path: int getNameCount()> -> _SOURCE_
<android.graphics.Path: Path getParent()> -> _SOURCE_
<android.graphics.Path: Path getRoot()> -> _SOURCE_
<android.graphics.Path: int hashCode()> -> _SOURCE_
<android.graphics.Path: boolean isAbsolute()> -> _SOURCE_
<android.graphics.Path: Iterator<Path> iterator()> -> _SOURCE_
<android.graphics.Path: Path normalize()> -> _SOURCE_
<android.graphics.Path: boolean startsWith(android.graphics.Path)> -> _SOURCE_
<android.graphics.Path: boolean startsWith(java.lang.String)> -> _SOURCE_
<android.graphics.Path: Path subpath(int,int)> -> _SOURCE_
<android.graphics.Path: Path toAbsolutePath()> -> _SOURCE_
<android.graphics.Path: File toFile()> -> _SOURCE_
<android.graphics.Path: Path toRealPath(LinkOption[])> -> _SOURCE_
<android.graphics.Path: String toString()> -> _SOURCE_
<android.graphics.Path: URI toUri()> -> _SOURCE_
<java.nio.file.WatchEvent.Kind: String name()> -> _SOURCE_
<java.nio.file.WatchEvent.Kind: Class type()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: Set<AclEntryFlag> flags()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: int hashCode()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: Set<AclEntryPermission> permissions()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: java.nio.file.attribute.UserPrincipal principal()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: java.lang.String toString()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: java.nio.file.attribute.AclEntryType type()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributeView: BasicFileAttributes readAttributes()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)> -> _SINK_
<java.nio.file.attribute.BasicFileAttributes: FileTime creationTime()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: Object fileKey()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: boolean isOther()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: FileTime lastAccessTime()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: FileTime lastModifiedTime()> -> _SOURCE_
<java.nio.file.attribute.BasicFileAttributes: long size()> -> _SOURCE_
<java.nio.file.attribute.AttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.FileOwnerAttributeView: UserPrincipal getOwner()> -> _SOURCE_
<java.nio.file.attribute.FileOwnerAttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.FileOwnerAttributeView: void setOwner(java.nio.file.attribute.UserPrincipal)> -> _SINK_
<java.nio.file.attribute.DosFileAttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.DosFileAttributeView: DosFileAttributes readAttributes()> -> _SOURCE_
<java.nio.file.attribute.DosFileAttributeView: void setArchive(boolean)> -> _SINK_
<java.nio.file.attribute.DosFileAttributeView: void setHidden(boolean)> -> _SINK_
<java.nio.file.attribute.DosFileAttributeView: void setReadOnly(boolean)> -> _SINK_
<java.nio.file.attribute.DosFileAttributeView: void setSystem(boolean)> -> _SINK_
<java.nio.file.attribute.FileAttribute: String name()> -> _SOURCE_
<java.nio.file.attribute.FileAttribute: T value()> -> _SOURCE_
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setFlags(Set<AclEntryFlag>)> -> _SINK_
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setFlags(AclEntryFlag[])> -> _SINK_
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setPermissions(Set<AclEntryPermission>)> -> _SINK_
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setPermissions(AclEntryPermission[])> -> _SINK_
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setPrincipal(java.nio.file.attribute.UserPrincipal)> -> _SINK_
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setType(java.nio.file.attribute.AclEntryType)> -> _SINK_
<java.nio.file.attribute.AclFileAttributeView: List<AclEntry> getAcl()> -> _SINK_
<java.nio.file.attribute.AclFileAttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.AclFileAttributeView: void setAcl(List<AclEntry>)> -> _SINK_
<java.nio.file.attribute.PosixFileAttributes: GroupPrincipal group()> -> _SOURCE_
<java.nio.file.attribute.PosixFileAttributes: UserPrincipal owner()> -> _SOURCE_
<java.nio.file.attribute.PosixFileAttributes: Set<PosixFilePermission> permissions()> -> _SOURCE_
<java.nio.file.attribute.PosixFileAttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.PosixFileAttributeView: PosixFileAttributes readAttributes()> -> _SOURCE_
<java.nio.file.attribute.PosixFileAttributeView: void setGroup(java.nio.file.attribute.GroupPrincipal)> -> _SINK_
<java.nio.file.attribute.UserDefinedFileAttributeView: List<String> list()> -> _SOURCE_
<java.nio.file.attribute.UserDefinedFileAttributeView: String name()> -> _SOURCE_
<java.nio.file.attribute.UserDefinedFileAttributeView: int read(java.lang.String,java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.file.attribute.UserDefinedFileAttributeView: int size(java.lang.String)> -> _SOURCE_
<java.nio.file.attribute.UserDefinedFileAttributeView: int write(java.lang.String,java.nio.ByteBuffer)> -> _SINK_
<java.nio.file.attribute.UserPrincipalLookupService: GroupPrincipal lookupPrincipalByGroupName(java.lang.String)> -> _SOURCE_
<java.nio.file.attribute.UserPrincipalLookupService: UserPrincipal lookupPrincipalByName(java.lang.String)> -> _SOURCE_
<java.nio.file.attribute.PosixFilePermissions: FileAttribute<Set<PosixFilePermission>> asFileAttribute(Set<PosixFilePermission>)> -> _SINK_
<java.nio.file.attribute.PosixFilePermissions: Set<PosixFilePermission> fromString(java.lang.String)> -> _SOURCE_
<java.nio.file.attribute.PosixFilePermissions: String toString(Set<PosixFilePermission>)> -> _SOURCE_
<java.nio.file.attribute.DosFileAttributes: boolean isArchive()> -> _SOURCE_
<java.nio.file.attribute.DosFileAttributes: boolean isHidden()> -> _SOURCE_
<java.nio.file.attribute.DosFileAttributes: boolean isReadOnly()> -> _SOURCE_
<java.nio.file.attribute.DosFileAttributes: boolean isSystem()> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: void checkAccess(android.graphics.Path,AccessMode[])> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: <V extends FileAttributeView> V getFileAttributeView(android.graphics.Path,Class<V>,LinkOption[])> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: FileStore getFileStore(android.graphics.Path)> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: FileSystem getFileSystem(java.net.URI)> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: Path getPath(java.net.URI)> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: String getScheme()> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: List<FileSystemProvider> installedProviders()> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: boolean isHidden(android.graphics.Path)> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: boolean isSameFile(android.graphics.Path,android.graphics.Path)> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: void move(android.graphics.Path,android.graphics.Path,CopyOption[])> -> _SINK_
<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(android.graphics.Path,OpenOption[])> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(android.graphics.Path,java.lang.String,LinkOption[])> -> _SINK_
<java.nio.file.spi.FileSystemProvider: <A extends BasicFileAttributes> A readAttributes(android.graphics.Path,Class<A>,LinkOption[])> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: android.graphics.Path readSymbolicLink(android.graphics.Path)> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: void setAttribute(android.graphics.Path,java.lang.String,java.lang.Object,LinkOption[])> -> _SINK_
<java.nio.file.spi.FileTypeDetector: String probeContentType(android.graphics.Path)> -> _SOURCE_
<java.security.AlgorithmConstraints: boolean permits(Set<CryptoPrimitive>,java.lang.String,java.security.AlgorithmParameters)> -> _SOURCE_
<java.security.AlgorithmConstraints: boolean permits(Set<CryptoPrimitive>,java.lang.String,androidx.compose.ui.input.key.Key,java.security.AlgorithmParameters)> -> _SOURCE_
<java.security.AlgorithmConstraints: boolean permits(Set<CryptoPrimitive>,androidx.compose.ui.input.key.Key)> -> _SOURCE_
<java.nio.file.attribute.UserPrincipalNotFoundException: java.lang.String getName()> -> _SOURCE_
<java.security.Certificate: void encode(java.io.OutputStream)> -> _SOURCE_
<java.security.Certificate: String getFormat()> -> _SOURCE_
<java.security.Certificate: Principal getGuarantor()> -> _SOURCE_
<java.security.Certificate: Principal getPrincipal()> -> _SOURCE_
<java.security.Certificate: PublicKey getPublicKey()> -> _SOURCE_
<java.security.Certificate: String toString(boolean)> -> _SOURCE_
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()> -> _SOURCE_
<java.security.CodeSigner: java.security.Timestamp getTimestamp()> -> _SOURCE_
<java.security.CodeSigner: int hashCode()> -> _SOURCE_
<java.security.CodeSigner: java.lang.String toString()> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: AlgorithmParameters generateParameters()> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: String getAlgorithm()> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: AlgorithmParameterGenerator getInstance(java.lang.String)> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: AlgorithmParameterGenerator getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: AlgorithmParameterGenerator getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: Provider getProvider()> -> _SOURCE_
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> -> _SINK_
<java.security.AlgorithmParameterGenerator: void init(int)> -> _SINK_
<java.security.AlgorithmParameterGenerator: void init(int,java.security.SecureRandom)> -> _SINK_
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec)> -> _SINK_
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()> -> _SOURCE_
<java.security.DigestInputStream: void on(boolean)> -> _SINK_
<java.security.DigestInputStream: int read()> -> _SINK_
<java.security.DigestInputStream: void setMessageDigest(java.security.MessageDigest)> -> _SINK_
<java.security.DigestInputStream: java.lang.String toString()> -> _SOURCE_
<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)> -> _SOURCE_
<java.nio.file.attribute.FileTime: FileTime from(java.time.Instant)> -> _SOURCE_
<java.nio.file.attribute.FileTime: FileTime from(long,android.icu.util.TimeUnit)> -> _SOURCE_
<java.nio.file.attribute.FileTime: FileTime fromMillis(long)> -> _SOURCE_
<java.nio.file.attribute.FileTime: long to(android.icu.util.TimeUnit)> -> _SOURCE_
<java.nio.file.attribute.FileTime: long toMillis()> -> _SOURCE_
<java.nio.file.attribute.FileTime: java.lang.String toString()> -> _SOURCE_
<java.security.DomainLoadStoreParameter: java.net.URI getConfiguration()> -> _SOURCE_
<java.security.DomainLoadStoreParameter: java.security.KeyStore.ProtectionParameter getProtectionParameter()> -> _SOURCE_
<java.security.DomainLoadStoreParameter: java.util.Map getProtectionParams()> -> _SOURCE_
<java.security.AccessControlException: java.security.Permission getPermission()> -> _SOURCE_
<java.security.GuardedObject: java.lang.Object getObject()> -> _SOURCE_
<java.security.AlgorithmParameters: String getAlgorithm()> -> _SOURCE_
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)> -> _SOURCE_
<java.security.AlgorithmParameters: byte[] getEncoded()> -> _SOURCE_
<java.security.AlgorithmParameters: AlgorithmParameters getInstance(java.lang.String)> -> _SOURCE_
<java.security.AlgorithmParameters: AlgorithmParameters getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.AlgorithmParameters: AlgorithmParameters getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.AlgorithmParameters: <T extends AlgorithmParameterSpec> T getParameterSpec(Class)> -> _SOURCE_
<java.security.AlgorithmParameters: Provider getProvider()> -> _SOURCE_
<java.security.AlgorithmParameters: void init(byte[])> -> _SOURCE_
<java.security.AlgorithmParameters: void init(byte[],java.lang.String)> -> _SOURCE_
<java.security.AlgorithmParameters: String toString()> -> _SOURCE_
<java.security.Identity: Certificate[] certificates()> -> _SOURCE_
<java.security.Identity: java.lang.String getInfo()> -> _SOURCE_
<java.security.Identity: String getName()> -> _SOURCE_
<java.security.Identity: java.security.PublicKey getPublicKey()> -> _SOURCE_
<java.security.Identity: int hashCode()> -> _SOURCE_
<java.security.Identity: void setInfo(java.lang.String)> -> _SOURCE_
<java.security.Identity: java.lang.String toString()> -> _SOURCE_
<java.security.Identity: java.lang.String toString(boolean)> -> _SOURCE_
<java.security.DigestOutputStream: java.security.MessageDigest getMessageDigest()> -> _SOURCE_
<java.security.DigestOutputStream: void on(boolean)> -> _SINK_
<java.security.DigestOutputStream: void setMessageDigest(java.security.MessageDigest)> -> _SINK_
<java.security.DigestOutputStream: java.lang.String toString()> -> _SOURCE_
<java.security.DigestOutputStream: void write(int)> -> _SINK_
<androidx.compose.ui.input.key.Key: String getAlgorithm()> -> _SOURCE_
<androidx.compose.ui.input.key.Key: byte[] getEncoded()> -> _SOURCE_
<androidx.compose.ui.input.key.Key: String getFormat()> -> _SOURCE_
<java.security.KeyFactory: PublicKey generatePublic(java.security.spec.KeySpec)> -> _SOURCE_
<java.security.KeyFactory: String getAlgorithm()> -> _SOURCE_
<java.security.KeyFactory: KeyFactory getInstance(java.lang.String)> -> _SOURCE_
<java.security.KeyFactory: KeyFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.KeyFactory: KeyFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.KeyFactory: <T extends KeySpec> T getKeySpec(androidx.compose.ui.input.key.Key,Class)> -> _SOURCE_
<java.security.KeyFactory: Provider getProvider()> -> _SOURCE_
<java.security.IdentityScope: Identity getIdentity(java.lang.String)> -> _SOURCE_
<java.security.IdentityScope: Identity getIdentity(java.security.PublicKey)> -> _SOURCE_
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.Principal)> -> _SOURCE_
<java.security.IdentityScope: IdentityScope getSystemScope()> -> _SOURCE_
<java.security.IdentityScope: Enumeration<Identity> identities()> -> _SOURCE_
<java.security.IdentityScope: int size()> -> _SOURCE_
<java.security.IdentityScope: java.lang.String toString()> -> _SOURCE_
<java.security.KeyPairGenerator: java.lang.String getAlgorithm()> -> _SOURCE_
<java.security.KeyPairGenerator: KeyPairGenerator getInstance(java.lang.String)> -> _SOURCE_
<java.security.KeyPairGenerator: KeyPairGenerator getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.KeyPairGenerator: KeyPairGenerator getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.KeyPairGenerator: Provider getProvider()> -> _SOURCE_
<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)> -> _SOURCE_
<java.security.KeyPairGenerator: void initialize(int)> -> _SOURCE_
<java.security.KeyPair: java.security.PrivateKey getPrivate()> -> _SOURCE_
<java.security.KeyPair: java.security.PublicKey getPublic()> -> _SOURCE_
<java.security.KeyPairGeneratorSpi: void initialize(int,java.security.SecureRandom)> -> _SINK_
<java.security.KeyStore.Entry: default Set<KeyStore.Entry.Attribute> getAttributes()> -> _SOURCE_
<java.security.KeyStore.Builder: KeyStore getKeyStore()> -> _SOURCE_
<java.security.KeyStore.Builder: KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)> -> _SOURCE_
<java.security.KeyStore.PrivateKeyEntry: Set<KeyStore.Entry.Attribute> getAttributes()> -> _SOURCE_
<java.security.KeyStore.PrivateKeyEntry: java.security.Certificate getCertificate()> -> _SOURCE_
<java.security.KeyStore.PrivateKeyEntry: Certificate[] getCertificateChain()> -> _SOURCE_
<java.security.KeyStore.PrivateKeyEntry: java.security.PrivateKey getPrivateKey()> -> _SOURCE_
<java.security.KeyStore.PrivateKeyEntry: java.lang.String toString()> -> _SOURCE_
<java.security.KeyStore.LoadStoreParameter: KeyStore.ProtectionParameter getProtectionParameter()> -> _SOURCE_
<java.security.KeyStoreSpi: Enumeration<String> engineAliases()> -> _SOURCE_
<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)> -> _SOURCE_
<java.security.KeyStoreSpi: Certificate engineGetCertificate(java.lang.String)> -> _SOURCE_
<java.security.KeyStoreSpi: String engineGetCertificateAlias(java.security.Certificate)> -> _SOURCE_
<java.security.KeyStoreSpi: Certificate[] engineGetCertificateChain(java.lang.String)> -> _SOURCE_
<java.security.KeyStoreSpi: Date engineGetCreationDate(java.lang.String)> -> _SOURCE_
<java.security.KeyStoreSpi: java.security.KeyStore.Entry engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> -> _SOURCE_
<java.security.KeyStoreSpi: Key engineGetKey(java.lang.String,char[])> -> _SOURCE_
<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)> -> _SOURCE_
<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)> -> _SOURCE_
<java.security.KeyStoreSpi: void engineLoad(java.security.KeyStore.LoadStoreParameter)> -> _SOURCE_
<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])> -> _SOURCE_
<java.security.KeyStoreSpi: boolean engineProbe(java.io.InputStream)> -> _SOURCE_
<java.security.KeyStoreSpi: void engineSetEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)> -> _SINK_
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,androidx.compose.ui.input.key.Key,char[],Certificate[])> -> _SINK_
<java.security.KeyStoreSpi: int engineSize()> -> _SOURCE_
<java.security.KeyStoreSpi: void engineStore(java.security.KeyStore.LoadStoreParameter)> -> _SOURCE_
<java.security.KeyStoreSpi: void engineStore(java.io.OutputStream,char[])> -> _SOURCE_
<java.security.KeyStore: Enumeration<String> aliases()> -> _SOURCE_
<java.security.KeyStore: boolean containsAlias(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: Certificate getCertificate(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: String getCertificateAlias(java.security.Certificate)> -> _SOURCE_
<java.security.KeyStore: Certificate[] getCertificateChain(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: Date getCreationDate(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: String getDefaultType()> -> _SOURCE_
<java.security.KeyStore: KeyStore.Entry getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> -> _SOURCE_
<java.security.KeyStore: KeyStore getInstance(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: KeyStore getInstance(java.io.File,char[])> -> _SOURCE_
<java.security.KeyStore: KeyStore getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.KeyStore: KeyStore getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.KeyStore: KeyStore getInstance(java.io.File,java.security.KeyStore.LoadStoreParameter)> -> _SOURCE_
<java.security.KeyStore: Key getKey(java.lang.String,char[])> -> _SOURCE_
<java.security.KeyStore: Provider getProvider()> -> _SOURCE_
<java.security.KeyStore: String getType()> -> _SOURCE_
<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: boolean isKeyEntry(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: void load(java.security.KeyStore.LoadStoreParameter)> -> _SOURCE_
<java.security.KeyStore: void load(java.io.InputStream,char[])> -> _SOURCE_
<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)> -> _SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,androidx.compose.ui.input.key.Key,char[],Certificate[])> -> _SINK_
<java.security.KeyStore: int size()> -> _SOURCE_
<java.security.KeyStore: void store(java.io.OutputStream,char[])> -> _SOURCE_
<java.security.KeyStore: void store(java.security.KeyStore.LoadStoreParameter)> -> _SOURCE_
<java.security.KeyStore.Entry.Attribute: String getName()> -> _SOURCE_
<java.security.KeyStore.Entry.Attribute: String getValue()> -> _SOURCE_
<java.security.KeyStore.PasswordProtection: char[] getPassword()> -> _SOURCE_
<java.security.KeyStore.PasswordProtection: java.lang.String getProtectionAlgorithm()> -> _SOURCE_
<java.security.KeyStore.PasswordProtection: java.security.spec.AlgorithmParameterSpec getProtectionParameters()> -> _SOURCE_
<java.security.KeyStore.PasswordProtection: boolean isDestroyed()> -> _SOURCE_
<java.security.PKCS12Attribute: byte[] getEncoded()> -> _SOURCE_
<java.security.PKCS12Attribute: java.lang.String getName()> -> _SOURCE_
<java.security.PKCS12Attribute: java.lang.String getValue()> -> _SOURCE_
<java.security.PKCS12Attribute: int hashCode()> -> _SOURCE_
<java.security.PKCS12Attribute: java.lang.String toString()> -> _SOURCE_
<java.security.KeyStore.TrustedCertificateEntry: Set<KeyStore.Entry.Attribute> getAttributes()> -> _SOURCE_
<java.security.KeyStore.TrustedCertificateEntry: java.security.Certificate getTrustedCertificate()> -> _SOURCE_
<java.security.KeyStore.TrustedCertificateEntry: java.lang.String toString()> -> _SOURCE_
<java.security.KeyStore.CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()> -> _SOURCE_
<java.security.Provider.Service: String getAlgorithm()> -> _SOURCE_
<java.security.Provider.Service: String getAttribute(java.lang.String)> -> _SOURCE_
<java.security.Provider.Service: String getClassName()> -> _SOURCE_
<java.security.Provider.Service: String getType()> -> _SOURCE_
<java.security.Provider.Service: boolean supportsParameter(java.lang.Object)> -> _SOURCE_
<java.security.Provider.Service: java.lang.String toString()> -> _SOURCE_
<java.security.Security: String getAlgorithmProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.Security: Set<String> getAlgorithms(java.lang.String)> -> _SOURCE_
<java.security.Security: String getProperty(java.lang.String)> -> _SOURCE_
<java.security.Security: Provider getProvider(java.lang.String)> -> _SOURCE_
<java.security.Security: Provider[] getProviders(java.util.Map -> _SOURCE_
<java.security.Security: Provider[] getProviders()> -> _SOURCE_
<java.security.Security: Provider[] getProviders(java.lang.String)> -> _SOURCE_
<java.security.Security: int insertProviderAt(java.security.Provider,int)> -> _SINK_
<java.security.Security: void setProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.security.SecureRandom: byte[] generateSeed(int)> -> _SOURCE_
<java.security.SecureRandom: java.lang.String getAlgorithm()> -> _SOURCE_
<java.security.SecureRandom: SecureRandom getInstance(java.lang.String)> -> _SOURCE_
<java.security.SecureRandom: SecureRandom getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.SecureRandom: SecureRandom getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.SecureRandom: SecureRandom getInstanceStrong()> -> _SOURCE_
<java.security.SecureRandom: Provider getProvider()> -> _SOURCE_
<java.security.SecureRandom: byte[] getSeed(int)> -> _SOURCE_
<java.security.SecureRandom: void setSeed(long)> -> _SINK_
<java.security.SecureRandom: void setSeed(byte[])> -> _SINK_
<java.security.Signer: java.security.PrivateKey getPrivateKey()> -> _SOURCE_
<java.security.Signer: void setKeyPair(java.security.KeyPair)> -> _SINK_
<java.security.Signer: java.lang.String toString()> -> _SOURCE_
<java.security.Provider: java.lang.Object compute(java.lang.Object,BiFunction<?)> -> _SOURCE_
<java.security.Provider: Enumeration<Object> elements()> -> _SOURCE_
<java.security.Provider: Set<Entry<Object, Object>> entrySet()> -> _SOURCE_
<java.security.Provider: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<java.security.Provider: java.lang.String getInfo()> -> _SOURCE_
<java.security.Provider: java.lang.String getName()> -> _SOURCE_
<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)> -> _SOURCE_
<java.security.Provider: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<java.security.Provider: java.security.Provider.Service getService(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.Provider: double getVersion()> -> _SOURCE_
<java.security.Provider: Set<Object> keySet()> -> _SOURCE_
<java.security.Provider: Enumeration<Object> keys()> -> _SOURCE_
<java.security.Provider: void load(java.io.InputStream)> -> _SOURCE_
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,BiFunction<?)> -> _SOURCE_
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> _SOURCE_
<java.security.Provider: java.lang.Object replace(java.lang.Object,java.lang.Object)> -> _SINK_
<java.security.Provider: java.lang.String toString()> -> _SOURCE_
<java.security.Provider: Collection<Object> values()> -> _SOURCE_
<java.security.SignedObject: java.lang.String getAlgorithm()> -> _SOURCE_
<java.security.SignedObject: java.lang.Object getObject()> -> _SOURCE_
<java.security.SignedObject: byte[] getSignature()> -> _SOURCE_
<java.security.Principal: String getName()> -> _SOURCE_
<java.security.Principal: int hashCode()> -> _SOURCE_
<java.security.Principal: default boolean implies(javax.security.auth.Subject)> -> _SOURCE_
<java.security.Principal: String toString()> -> _SOURCE_
<java.security.acl.Acl: boolean addEntry(java.security.Principal,java.nio.file.attribute.AclEntry)> -> _SINK_
<java.security.acl.Acl: Enumeration<AclEntry> entries()> -> _SOURCE_
<java.security.acl.Acl: String getName()> -> _SOURCE_
<java.security.acl.Acl: Enumeration<Permission> getPermissions(java.security.Principal)> -> _SOURCE_
<java.security.acl.Acl: void setName(java.security.Principal,java.lang.String)> -> _SINK_
<java.security.acl.Acl: String toString()> -> _SOURCE_
<android.content.pm.Signature: String getAlgorithm()> -> _SOURCE_
<android.content.pm.Signature: Signature getInstance(java.lang.String)> -> _SOURCE_
<android.content.pm.Signature: Signature getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.Signature: Signature getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.content.pm.Signature: Object getParameter(java.lang.String)> -> _SOURCE_
<android.content.pm.Signature: AlgorithmParameters getParameters()> -> _SOURCE_
<android.content.pm.Signature: Provider getProvider()> -> _SOURCE_
<android.content.pm.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)> -> _SINK_
<android.content.pm.Signature: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.content.pm.Signature: byte[] sign()> -> _SOURCE_
<android.content.pm.Signature: java.lang.String toString()> -> _SOURCE_
<android.content.pm.Signature: void update(byte[])> -> _SINK_
<android.content.pm.Signature: void update(java.nio.ByteBuffer)> -> _SINK_
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()> -> _SOURCE_
<java.security.Timestamp: java.sql.Date getTimestamp()> -> _SOURCE_
<java.security.Timestamp: int hashCode()> -> _SOURCE_
<java.security.Timestamp: java.lang.String toString()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: boolean addPermission(java.security.Permission)> -> _SINK_
<java.nio.file.attribute.AclEntry: boolean checkPermission(java.security.Permission)> -> _SOURCE_
<java.nio.file.attribute.AclEntry: Object clone()> -> _SINK_
<java.nio.file.attribute.AclEntry: Principal getPrincipal()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: boolean isNegative()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: Enumeration<Permission> permissions()> -> _SOURCE_
<java.nio.file.attribute.AclEntry: void setNegativePermissions()> -> _SINK_
<java.nio.file.attribute.AclEntry: boolean setPrincipal(java.security.Principal)> -> _SINK_
<java.nio.file.attribute.AclEntry: String toString()> -> _SOURCE_
<java.security.PrivilegedActionException: java.lang.Throwable getCause()> -> _SOURCE_
<java.security.PrivilegedActionException: java.lang.Exception getException()> -> _SOURCE_
<java.security.PrivilegedActionException: java.lang.String toString()> -> _SOURCE_
<java.security.MessageDigest: int digest(byte[],int,int)> -> _SOURCE_
<java.security.MessageDigest: byte[] digest()> -> _SOURCE_
<java.security.MessageDigest: String getAlgorithm()> -> _SOURCE_
<java.security.MessageDigest: int getDigestLength()> -> _SOURCE_
<java.security.MessageDigest: MessageDigest getInstance(java.lang.String)> -> _SOURCE_
<java.security.MessageDigest: MessageDigest getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.MessageDigest: MessageDigest getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.MessageDigest: Provider getProvider()> -> _SOURCE_
<java.security.MessageDigest: java.lang.String toString()> -> _SOURCE_
<java.security.MessageDigest: void update(byte[])> -> _SINK_
<java.security.MessageDigest: void update(byte[],int,int)> -> _SINK_
<java.security.MessageDigest: void update(java.nio.ByteBuffer)> -> _SINK_
<java.security.MessageDigest: void update(byte)> -> _SINK_
<java.security.KeyStore.SecretKeyEntry: Set<KeyStore.Entry.Attribute> getAttributes()> -> _SOURCE_
<java.security.KeyStore.SecretKeyEntry: javax.crypto.SecretKey getSecretKey()> -> _SOURCE_
<java.security.KeyStore.SecretKeyEntry: java.lang.String toString()> -> _SOURCE_
<androidx.compose.ui.tooling.data.Group: boolean addMember(java.security.Principal)> -> _SINK_
<androidx.compose.ui.tooling.data.Group: Enumeration<? extends Principal> members()> -> _SOURCE_
<java.security.acl.Owner: boolean addOwner(java.security.Principal,java.security.Principal)> -> _SINK_
<java.security.acl.Owner: boolean isOwner(java.security.Principal)> -> _SOURCE_
<java.security.cert.CertPathBuilderSpi: CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)> -> _SOURCE_
<java.security.cert.CertPathBuilderResult: CertPath getCertPath()> -> _SOURCE_
<java.security.cert.CertPathChecker: void init(boolean)> -> _SOURCE_
<java.security.cert.CertPathParameters: Object clone()> -> _SOURCE_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()> -> _SOURCE_
<java.security.cert.CertPathValidatorException: int getIndex()> -> _SOURCE_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPathValidatorException.Reason getReason()> -> _SOURCE_
<java.security.cert.CertPathBuilder: CertPathBuilderResult build(java.security.cert.CertPathParameters)> -> _SOURCE_
<java.security.cert.CertPathBuilder: String getAlgorithm()> -> _SOURCE_
<java.security.cert.CertPathBuilder: String getDefaultType()> -> _SOURCE_
<java.security.cert.CertPathBuilder: CertPathBuilder getInstance(java.lang.String)> -> _SOURCE_
<java.security.cert.CertPathBuilder: CertPathBuilder getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.cert.CertPathBuilder: CertPathBuilder getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.cert.CertPathBuilder: Provider getProvider()> -> _SOURCE_
<java.security.cert.CertPathBuilder: CertPathChecker getRevocationChecker()> -> _SOURCE_
<java.security.cert.CertSelector: boolean match(java.security.Certificate)> -> _SOURCE_
<java.security.cert.CertPathValidator: String getAlgorithm()> -> _SOURCE_
<java.security.cert.CertPathValidator: String getDefaultType()> -> _SOURCE_
<java.security.cert.CertPathValidator: CertPathValidator getInstance(java.lang.String)> -> _SOURCE_
<java.security.cert.CertPathValidator: CertPathValidator getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.cert.CertPathValidator: CertPathValidator getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.cert.CertPathValidator: Provider getProvider()> -> _SOURCE_
<java.security.cert.CertPathValidator: CertPathChecker getRevocationChecker()> -> _SOURCE_
<java.security.cert.CertPathValidator: CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)> -> _SOURCE_
<java.security.cert.CertStoreSpi: Collection<? extends CRL> engineGetCRLs(java.security.cert.CRLSelector)> -> _SOURCE_
<java.security.cert.CertStoreSpi: Collection<? extends Certificate> engineGetCertificates(java.security.cert.CertSelector)> -> _SOURCE_
<java.security.cert.CertPathValidatorSpi: CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)> -> _SOURCE_
<java.security.cert.CertStore: Collection<? extends CRL> getCRLs(java.security.cert.CRLSelector)> -> _SOURCE_
<java.security.cert.CertStore: CertStoreParameters getCertStoreParameters()> -> _SOURCE_
<java.security.cert.CertStore: Collection<? extends Certificate> getCertificates(java.security.cert.CertSelector)> -> _SOURCE_
<java.security.cert.CertStore: String getDefaultType()> -> _SOURCE_
<java.security.cert.CertStore: CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)> -> _SOURCE_
<java.security.cert.CertStore: CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)> -> _SOURCE_
<java.security.cert.CertStore: CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)> -> _SOURCE_
<java.security.cert.CertStore: Provider getProvider()> -> _SOURCE_
<java.security.cert.CertStore: String getType()> -> _SOURCE_
<java.security.cert.CertPath: boolean equals(java.lang.Object)> -> _SOURCE_
<java.security.cert.CertPath: List<? extends Certificate> getCertificates()> -> _SOURCE_
<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)> -> _SOURCE_
<java.security.cert.CertPath: byte[] getEncoded()> -> _SOURCE_
<java.security.cert.CertPath: Iterator<String> getEncodings()> -> _SOURCE_
<java.security.cert.CertPath: java.lang.String getType()> -> _SOURCE_
<java.security.cert.CertPath: int hashCode()> -> _SOURCE_
<java.security.cert.CertPath: java.lang.String toString()> -> _SOURCE_
<java.security.cert.CRL: String getType()> -> _SOURCE_
<java.security.cert.CRL: boolean isRevoked(java.security.Certificate)> -> _SOURCE_
<java.security.cert.CRL: String toString()> -> _SOURCE_
<java.security.cert.CertificateRevokedException: javax.security.auth.x500.X500Principal getAuthorityName()> -> _SOURCE_
<java.security.cert.CertificateRevokedException: java.util.Map getExtensions()> -> _SOURCE_
<java.security.cert.CertificateRevokedException: java.sql.Date getInvalidityDate()> -> _SOURCE_
<java.security.cert.CertificateRevokedException: java.lang.String getMessage()> -> _SOURCE_
<java.security.cert.CertificateRevokedException: java.sql.Date getRevocationDate()> -> _SOURCE_
<java.security.cert.CertificateRevokedException: java.security.cert.CRLReason getRevocationReason()> -> _SOURCE_
<java.security.cert.Extension: void encode(java.io.OutputStream)> -> _SINK_
<java.security.cert.Extension: String getId()> -> _SOURCE_
<java.security.cert.Extension: byte[] getValue()> -> _SOURCE_
<java.security.cert.Extension: boolean isCritical()> -> _SOURCE_
<java.security.Certificate: byte[] getEncoded()> -> _SOURCE_
<java.security.Certificate: PublicKey getPublicKey()> -> _SOURCE_
<java.security.Certificate: String getType()> -> _SOURCE_
<java.security.Certificate: int hashCode()> -> _SOURCE_
<java.security.Certificate: String toString()> -> _SOURCE_
<java.security.Certificate: void verify(java.security.PublicKey,java.lang.String)> -> _SINK_
<java.security.Certificate: void verify(java.security.PublicKey,java.security.Provider)> -> _SINK_
<java.security.Certificate: void verify(java.security.PublicKey)> -> _SINK_
<java.security.cert.CertificateFactorySpi: Collection<? extends CRL> engineGenerateCRLs(java.io.InputStream)> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: Collection<? extends Certificate> engineGenerateCertificates(java.io.InputStream)> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: Iterator<String> engineGetCertPathEncodings()> -> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: int getPort()> -> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: java.lang.String getServerName()> -> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: java.lang.String toString()> -> _SOURCE_
<java.security.cert.PKIXCertPathChecker: void check(java.security.Certificate)> -> _SOURCE_
<java.security.cert.PKIXCertPathChecker: Set<String> getSupportedExtensions()> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.PublicKey getPublicKey()> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.lang.String toString()> -> _SOURCE_
<java.security.cert.PKIXParameters: void addCertPathChecker(java.security.cert.PKIXCertPathChecker)> -> _SOURCE_
<java.security.cert.PKIXParameters: List<PKIXCertPathChecker> getCertPathCheckers()> -> _SOURCE_
<java.security.cert.PKIXParameters: List<CertStore> getCertStores()> -> _SOURCE_
<java.security.cert.PKIXParameters: java.sql.Date getDate()> -> _SOURCE_
<java.security.cert.PKIXParameters: Set<String> getInitialPolicies()> -> _SOURCE_
<java.security.cert.PKIXParameters: boolean getPolicyQualifiersRejected()> -> _SOURCE_
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()> -> _SOURCE_
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()> -> _SOURCE_
<java.security.cert.PKIXParameters: Set<TrustAnchor> getTrustAnchors()> -> _SOURCE_
<java.security.cert.PKIXParameters: boolean isAnyPolicyInhibited()> -> _SOURCE_
<java.security.cert.PKIXParameters: boolean isPolicyMappingInhibited()> -> _SOURCE_
<java.security.cert.PKIXParameters: void setAnyPolicyInhibited(boolean)> -> _SINK_
<java.security.cert.PKIXParameters: void setCertPathCheckers(List<PKIXCertPathChecker>)> -> _SOURCE_
<java.security.cert.PKIXParameters: void setCertStores(List<CertStore>)> -> _SINK_
<java.security.cert.PKIXParameters: void setDate(java.sql.Date)> -> _SINK_
<java.security.cert.PKIXParameters: void setExplicitPolicyRequired(boolean)> -> _SINK_
<java.security.cert.PKIXParameters: void setInitialPolicies(Set<String>)> -> _SINK_
<java.security.cert.PKIXParameters: void setPolicyMappingInhibited(boolean)> -> _SINK_
<java.security.cert.PKIXParameters: void setPolicyQualifiersRejected(boolean)> -> _SINK_
<java.security.cert.PKIXParameters: void setRevocationEnabled(boolean)> -> _SINK_
<java.security.cert.PKIXParameters: void setSigProvider(java.lang.String)> -> _SINK_
<java.security.cert.PKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)> -> _SINK_
<java.security.cert.PKIXParameters: void setTrustAnchors(Set<TrustAnchor>)> -> _SINK_
<java.security.cert.PKIXParameters: java.lang.String toString()> -> _SOURCE_
<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.CertPath getCertPath()> -> _SOURCE_
<java.security.cert.PKIXCertPathBuilderResult: java.lang.String toString()> -> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: Collection<?> getCollection()> -> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: java.lang.String toString()> -> _SOURCE_
<java.security.cert.PKIXRevocationChecker: List<Extension> getOcspExtensions()> -> _SOURCE_
<java.security.cert.PKIXRevocationChecker: java.net.URI getOcspResponder()> -> _SOURCE_
<java.security.cert.PKIXRevocationChecker: java.security.cert.X509Certificate getOcspResponderCert()> -> _SOURCE_
<java.security.cert.PKIXRevocationChecker: java.util.Map getOcspResponses()> -> _SOURCE_
<java.security.cert.PKIXRevocationChecker: List<CertPathValidatorException> getSoftFailExceptions()> -> _SOURCE_
<java.security.cert.PKIXRevocationChecker: void setOcspExtensions(List<Extension>)> -> _SINK_
<java.security.cert.PKIXRevocationChecker: void setOcspResponder(java.net.URI)> -> _SINK_
<java.security.cert.PKIXRevocationChecker: void setOcspResponderCert(java.security.cert.X509Certificate)> -> _SINK_
<java.security.cert.PKIXRevocationChecker: void setOcspResponses(java.util.Map -> _SINK_
<java.security.cert.PKIXRevocationChecker: void setOptions(Set<PKIXRevocationChecker.Option>)> -> _SINK_
<java.security.cert.X509Certificate: void checkValidity(java.sql.Date)> -> _SOURCE_
<java.security.cert.X509Certificate: int getBasicConstraints()> -> _SOURCE_
<java.security.cert.X509Certificate: List<String> getExtendedKeyUsage()> -> _SOURCE_
<java.security.cert.X509Certificate: Collection<List<?>> getIssuerAlternativeNames()> -> _SOURCE_
<java.security.cert.X509Certificate: Principal getIssuerDN()> -> _SOURCE_
<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()> -> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SOURCE_
<java.security.cert.X509Certificate: boolean[] getKeyUsage()> -> _SOURCE_
<java.security.cert.X509Certificate: Date getNotAfter()> -> _SOURCE_
<java.security.cert.X509Certificate: Date getNotBefore()> -> _SOURCE_
<java.security.cert.X509Certificate: BigInteger getSerialNumber()> -> _SOURCE_
<java.security.cert.X509Certificate: String getSigAlgName()> -> _SOURCE_
<java.security.cert.X509Certificate: String getSigAlgOID()> -> _SOURCE_
<java.security.cert.X509Certificate: byte[] getSigAlgParams()> -> _SOURCE_
<java.security.cert.X509Certificate: byte[] getSignature()> -> _SOURCE_
<java.security.cert.X509Certificate: Collection<List<?>> getSubjectAlternativeNames()> -> _SOURCE_
<java.security.cert.X509Certificate: Principal getSubjectDN()> -> _SOURCE_
<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()> -> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()> -> _SOURCE_
<java.security.cert.X509Certificate: byte[] getTBSCertificate()> -> _SOURCE_
<java.security.cert.X509Certificate: int getVersion()> -> _SOURCE_
<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.security.Provider)> -> _SINK_
<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()> -> _SOURCE_
<java.security.cert.X509CRLEntry: byte[] getEncoded()> -> _SOURCE_
<java.security.cert.X509CRLEntry: Date getRevocationDate()> -> _SOURCE_
<java.security.cert.X509CRLEntry: java.security.cert.CRLReason getRevocationReason()> -> _SOURCE_
<java.security.cert.X509CRLEntry: BigInteger getSerialNumber()> -> _SOURCE_
<java.security.cert.X509CRLEntry: boolean hasExtensions()> -> _SOURCE_
<java.security.cert.X509CRLEntry: int hashCode()> -> _SOURCE_
<java.security.cert.X509CRLEntry: String toString()> -> _SOURCE_
<java.security.cert.X509CRLSelector: void addIssuer(javax.security.auth.x500.X500Principal)> -> _SINK_
<java.security.cert.X509CRLSelector: void addIssuerName(byte[])> -> _SINK_
<java.security.cert.X509CRLSelector: void addIssuerName(java.lang.String)> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.security.cert.X509Certificate getCertificateChecking()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.sql.Date getDateAndTime()> -> _SOURCE_
<java.security.cert.X509CRLSelector: Collection<Object> getIssuerNames()> -> _SOURCE_
<java.security.cert.X509CRLSelector: Collection<X500Principal> getIssuers()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.math.BigInteger getMaxCRL()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.math.BigInteger getMinCRL()> -> _SOURCE_
<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)> -> _SINK_
<java.security.cert.X509CRLSelector: void setDateAndTime(java.sql.Date)> -> _SINK_
<java.security.cert.X509CRLSelector: void setIssuerNames(Collection<?>)> -> _SINK_
<java.security.cert.X509CRLSelector: void setIssuers(Collection<X500Principal>)> -> _SINK_
<java.security.cert.X509CRLSelector: void setMaxCRLNumber(java.math.BigInteger)> -> _SINK_
<java.security.cert.X509CRLSelector: void setMinCRLNumber(java.math.BigInteger)> -> _SINK_
<java.security.cert.X509CRLSelector: java.lang.String toString()> -> _SOURCE_
<java.security.cert.CertificateFactory: Collection<? extends CRL> generateCRLs(java.io.InputStream)> -> _SOURCE_
<java.security.cert.CertificateFactory: CertPath generateCertPath(java.io.InputStream)> -> _SOURCE_
<java.security.cert.CertificateFactory: CertPath generateCertPath(java.io.InputStream,java.lang.String)> -> _SOURCE_
<java.security.cert.CertificateFactory: Collection<? extends Certificate> generateCertificates(java.io.InputStream)> -> _SOURCE_
<java.security.cert.CertificateFactory: Iterator<String> getCertPathEncodings()> -> _SOURCE_
<java.security.cert.CertificateFactory: CertificateFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.cert.CertificateFactory: CertificateFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<java.security.cert.CertificateFactory: Provider getProvider()> -> _SOURCE_
<java.security.cert.CertificateFactory: String getType()> -> _SOURCE_
<java.security.interfaces.DSAKey: DSAParams getParams()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: byte[] getEncoded()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: byte[] getPolicyQualifier()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: String getPolicyQualifierId()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: java.lang.String toString()> -> _SOURCE_
<java.security.cert.X509Extension: Set<String> getCriticalExtensionOIDs()> -> _SOURCE_
<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)> -> _SOURCE_
<java.security.cert.X509Extension: Set<String> getNonCriticalExtensionOIDs()> -> _SOURCE_
<java.security.cert.X509Extension: boolean hasUnsupportedCriticalExtension()> -> _SINK_
<java.security.cert.TrustAnchor: X500Principal getCA()> -> _SOURCE_
<java.security.cert.TrustAnchor: String getCAName()> -> _SOURCE_
<java.security.cert.TrustAnchor: PublicKey getCAPublicKey()> -> _SOURCE_
<java.security.cert.TrustAnchor: byte[] getNameConstraints()> -> _SOURCE_
<java.security.cert.TrustAnchor: X509Certificate getTrustedCert()> -> _SOURCE_
<java.security.cert.TrustAnchor: java.lang.String toString()> -> _SOURCE_
<java.security.cert.PKIXBuilderParameters: int getMaxPathLength()> -> _SOURCE_
<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)> -> _SINK_
<java.security.cert.PKIXBuilderParameters: java.lang.String toString()> -> _SOURCE_
<java.security.interfaces.RSAKey: BigInteger getModulus()> -> _SOURCE_
<java.security.interfaces.ECPrivateKey: BigInteger getS()> -> _SOURCE_
<java.security.interfaces.DSAKeyPairGenerator: void initialize(java.security.interfaces.DSAParams,java.security.SecureRandom)> -> _SOURCE_
<java.security.interfaces.DSAKeyPairGenerator: void initialize(int,boolean,java.security.SecureRandom)> -> _SINK_
<java.security.interfaces.DSAParams: BigInteger getG()> -> _SOURCE_
<java.security.interfaces.DSAParams: BigInteger getQ()> -> _SOURCE_
<java.security.interfaces.DSAPublicKey: BigInteger getY()> -> _SOURCE_
<java.security.cert.PolicyNode: Iterator<? extends PolicyNode> getChildren()> -> _SOURCE_
<java.security.cert.PolicyNode: int getDepth()> -> _SOURCE_
<java.security.cert.PolicyNode: Set<String> getExpectedPolicies()> -> _SOURCE_
<java.security.cert.PolicyNode: PolicyNode getParent()> -> _SOURCE_
<java.security.cert.PolicyNode: Set<? extends PolicyQualifierInfo> getPolicyQualifiers()> -> _SOURCE_
<java.security.cert.PolicyNode: String getValidPolicy()> -> _SOURCE_
<java.security.cert.PolicyNode: boolean isCritical()> -> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: BigInteger getPrimeExponentP()> -> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: BigInteger getPrimeExponentQ()> -> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: BigInteger getPrimeP()> -> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: BigInteger getPrimeQ()> -> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: BigInteger getPublicExponent()> -> _SOURCE_
<java.security.interfaces.ECPublicKey: ECPoint getW()> -> _SOURCE_
<java.security.cert.X509CRL: byte[] getEncoded()> -> _SOURCE_
<java.security.cert.X509CRL: Principal getIssuerDN()> -> _SOURCE_
<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SOURCE_
<java.security.cert.X509CRL: Date getNextUpdate()> -> _SOURCE_
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)> -> _SOURCE_
<java.security.cert.X509CRL: X509CRLEntry getRevokedCertificate(java.math.BigInteger)> -> _SOURCE_
<java.security.cert.X509CRL: Set<? extends X509CRLEntry> getRevokedCertificates()> -> _SOURCE_
<java.security.cert.X509CRL: String getSigAlgName()> -> _SOURCE_
<java.security.cert.X509CRL: String getSigAlgOID()> -> _SOURCE_
<java.security.cert.X509CRL: byte[] getSigAlgParams()> -> _SOURCE_
<java.security.cert.X509CRL: byte[] getSignature()> -> _SOURCE_
<java.security.cert.X509CRL: byte[] getTBSCertList()> -> _SOURCE_
<java.security.cert.X509CRL: Date getThisUpdate()> -> _SOURCE_
<java.security.cert.X509CRL: int getVersion()> -> _SOURCE_
<java.security.cert.X509CRL: int hashCode()> -> _SOURCE_
<java.security.cert.X509CertSelector: void addPathToName(int,java.lang.String)> -> _SINK_
<java.security.cert.X509CertSelector: void addPathToName(int,byte[])> -> _SINK_
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,java.lang.String)> -> _SOURCE_
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,byte[])> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getAuthorityKeyIdentifier()> -> _SOURCE_
<java.security.cert.X509CertSelector: int getBasicConstraints()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.security.cert.X509Certificate getCertificate()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.sql.Date getCertificateValid()> -> _SOURCE_
<java.security.cert.X509CertSelector: Set<String> getExtendedKeyUsage()> -> _SOURCE_
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getIssuer()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getIssuerAsBytes()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getIssuerAsString()> -> _SOURCE_
<java.security.cert.X509CertSelector: boolean[] getKeyUsage()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getNameConstraints()> -> _SOURCE_
<java.security.cert.X509CertSelector: Collection<List<?>> getPathToNames()> -> _SOURCE_
<java.security.cert.X509CertSelector: Set<String> getPolicy()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.sql.Date getPrivateKeyValid()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.math.BigInteger getSerialNumber()> -> _SOURCE_
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getSubject()> -> _SOURCE_
<java.security.cert.X509CertSelector: Collection<List<?>> getSubjectAlternativeNames()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getSubjectAsBytes()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getSubjectAsString()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getSubjectKeyIdentifier()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.security.PublicKey getSubjectPublicKey()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getSubjectPublicKeyAlgID()> -> _SOURCE_
<java.security.cert.X509CertSelector: boolean match(java.security.Certificate)> -> _SOURCE_
<java.security.cert.X509CertSelector: void setAuthorityKeyIdentifier(byte[])> -> _SINK_
<java.security.cert.X509CertSelector: void setBasicConstraints(int)> -> _SINK_
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)> -> _SINK_
<java.security.cert.X509CertSelector: void setCertificateValid(java.sql.Date)> -> _SINK_
<java.security.cert.X509CertSelector: void setIssuer(byte[])> -> _SINK_
<java.security.cert.X509CertSelector: void setIssuer(javax.security.auth.x500.X500Principal)> -> _SINK_
<java.security.cert.X509CertSelector: void setIssuer(java.lang.String)> -> _SOURCE_
<java.security.cert.X509CertSelector: void setKeyUsage(boolean[])> -> _SINK_
<java.security.cert.X509CertSelector: void setMatchAllSubjectAltNames(boolean)> -> _SINK_
<java.security.cert.X509CertSelector: void setNameConstraints(byte[])> -> _SINK_
<java.security.cert.X509CertSelector: void setPathToNames(Collection<List<?>>)> -> _SINK_
<java.security.cert.X509CertSelector: void setPolicy(Set<String>)> -> _SINK_
<java.security.cert.X509CertSelector: void setSerialNumber(java.math.BigInteger)> -> _SINK_
<java.security.cert.X509CertSelector: void setSubject(javax.security.auth.x500.X500Principal)> -> _SINK_
<java.security.cert.X509CertSelector: void setSubject(byte[])> -> _SINK_
<java.security.cert.X509CertSelector: void setSubject(java.lang.String)> -> _SOURCE_
<java.security.cert.X509CertSelector: void setSubjectAlternativeNames(Collection<List<?>>)> -> _SINK_
<java.security.cert.X509CertSelector: void setSubjectPublicKey(byte[])> -> _SINK_
<java.security.cert.X509CertSelector: void setSubjectPublicKey(java.security.PublicKey)> -> _SINK_
<java.security.cert.X509CertSelector: void setSubjectPublicKeyAlgID(java.lang.String)> -> _SINK_
<java.security.cert.X509CertSelector: java.lang.String toString()> -> _SOURCE_
<java.security.spec.ECFieldFp: int getFieldSize()> -> _SOURCE_
<java.security.spec.ECFieldFp: java.math.BigInteger getP()> -> _SOURCE_
<java.security.spec.ECFieldFp: int hashCode()> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()> -> _SOURCE_
<java.security.spec.ECField: int getFieldSize()> -> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: RSAOtherPrimeInfo[] getOtherPrimeInfo()> -> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: BigInteger getPrimeExponentP()> -> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: BigInteger getPrimeExponentQ()> -> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: BigInteger getPrimeP()> -> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: BigInteger getPrimeQ()> -> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: BigInteger getPublicExponent()> -> _SOURCE_
<java.security.interfaces.ECKey: ECParameterSpec getParams()> -> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getG()> -> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getQ()> -> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getX()> -> _SOURCE_
<java.security.interfaces.DSAPrivateKey: BigInteger getX()> -> _SOURCE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()> -> _SOURCE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()> -> _SOURCE_
<java.security.spec.ECPoint: int hashCode()> -> _SOURCE_
<java.security.interfaces.RSAPublicKey: BigInteger getPublicExponent()> -> _SOURCE_
<java.security.spec.ECPrivateKeySpec: java.security.spec.ECParameterSpec getParams()> -> _SOURCE_
<java.security.spec.ECPrivateKeySpec: java.math.BigInteger getS()> -> _SOURCE_
<java.security.spec.ECFieldF2m: int getFieldSize()> -> _SOURCE_
<java.security.spec.ECFieldF2m: int getM()> -> _SOURCE_
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()> -> _SOURCE_
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()> -> _SOURCE_
<java.security.spec.ECFieldF2m: int hashCode()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getA()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getB()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()> -> _SOURCE_
<java.security.spec.EllipticCurve: byte[] getSeed()> -> _SOURCE_
<java.security.spec.EllipticCurve: int hashCode()> -> _SOURCE_
<java.security.spec.EncodedKeySpec: byte[] getEncoded()> -> _SOURCE_
<java.security.spec.EncodedKeySpec: String getFormat()> -> _SOURCE_
<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()> -> _SOURCE_
<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()> -> _SOURCE_
<java.security.spec.ECParameterSpec: int getCofactor()> -> _SOURCE_
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()> -> _SOURCE_
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()> -> _SOURCE_
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()> -> _SOURCE_
<java.security.spec.ECGenParameterSpec: java.lang.String getName()> -> _SOURCE_
<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()> -> _SOURCE_
<java.security.spec.PKCS8EncodedKeySpec: String getFormat()> -> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: RSAOtherPrimeInfo[] getOtherPrimeInfo()> -> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()> -> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()> -> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeP()> -> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeQ()> -> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<java.security.interfaces.RSAPrivateKey: BigInteger getPrivateExponent()> -> _SOURCE_
<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()> -> _SOURCE_
<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()> -> _SOURCE_
<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<java.security.spec.RSAOtherPrimeInfo: BigInteger getCrtCoefficient()> -> _SOURCE_
<java.security.spec.RSAOtherPrimeInfo: BigInteger getExponent()> -> _SOURCE_
<java.security.spec.RSAOtherPrimeInfo: BigInteger getPrime()> -> _SOURCE_
<java.lang.reflect.Array: Object getArray(java.util.Map -> _SOURCE_
<java.lang.reflect.Array: Object getArray()> -> _SOURCE_
<java.lang.reflect.Array: Object getArray(long,int,java.util.Map -> _SOURCE_
<java.lang.reflect.Array: Object getArray(long,int)> -> _SOURCE_
<java.lang.reflect.Array: int getBaseType()> -> _SOURCE_
<java.lang.reflect.Array: String getBaseTypeName()> -> _SOURCE_
<java.lang.reflect.Array: ResultSet getResultSet()> -> _SOURCE_
<java.lang.reflect.Array: ResultSet getResultSet(java.util.Map -> _SOURCE_
<java.lang.reflect.Array: ResultSet getResultSet(long,int,java.util.Map -> _SOURCE_
<java.lang.reflect.Array: ResultSet getResultSet(long,int)> -> _SOURCE_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()> -> _SOURCE_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()> -> _SOURCE_
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()> -> _SOURCE_
<java.sql.BatchUpdateException: int[] getUpdateCounts()> -> _SOURCE_
<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()> -> _SOURCE_
<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()> -> _SOURCE_
<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()> -> _SOURCE_
<java.security.spec.X509EncodedKeySpec: String getFormat()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: int getSaltLength()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: int getTrailerField()> -> _SOURCE_
<java.sql.Driver: boolean acceptsURL(java.lang.String)> -> _SOURCE_
<java.sql.Driver: int getMajorVersion()> -> _SOURCE_
<java.sql.Driver: int getMinorVersion()> -> _SOURCE_
<java.sql.Driver: DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)> -> _SOURCE_
<java.sql.Blob: InputStream getBinaryStream(long,long)> -> _SOURCE_
<java.sql.Blob: InputStream getBinaryStream()> -> _SOURCE_
<java.sql.Blob: byte[] getBytes(long,int)> -> _SOURCE_
<java.sql.Blob: long length()> -> _SOURCE_
<java.sql.Blob: long position(java.sql.Blob,long)> -> _SOURCE_
<java.sql.Blob: long position(byte[],long)> -> _SOURCE_
<java.sql.Blob: OutputStream setBinaryStream(long)> -> _SOURCE_
<java.sql.Blob: int setBytes(long,byte[],int,int)> -> _SINK_
<java.sql.Blob: int setBytes(long,byte[])> -> _SINK_
<java.sql.Blob: void truncate(long)> -> _SINK_
<java.sql.DataTruncation: int getDataSize()> -> _SOURCE_
<java.sql.DataTruncation: int getIndex()> -> _SOURCE_
<java.sql.DataTruncation: boolean getParameter()> -> _SOURCE_
<java.sql.DataTruncation: int getTransferSize()> -> _SOURCE_
<java.sql.DriverManager: Connection getConnection(java.lang.String)> -> _SOURCE_
<java.sql.DriverManager: Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DriverManager: Connection getConnection(java.lang.String,java.util.Properties)> -> _SOURCE_
<java.sql.DriverManager: Driver getDriver(java.lang.String)> -> _SOURCE_
<java.sql.DriverManager: Enumeration<Driver> getDrivers()> -> _SOURCE_
<java.sql.DriverManager: PrintStream getLogStream()> -> _SOURCE_
<java.sql.DriverManager: PrintWriter getLogWriter()> -> _SOURCE_
<java.sql.DriverManager: int getLoginTimeout()> -> _SOURCE_
<java.sql.DriverManager: void setLogStream(java.io.PrintStream)> -> _SINK_
<java.sql.DriverManager: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<java.sql.DriverManager: void setLoginTimeout(int)> -> _SINK_
<java.sql.Clob: InputStream getAsciiStream()> -> _SOURCE_
<java.sql.Clob: Reader getCharacterStream()> -> _SOURCE_
<java.sql.Clob: Reader getCharacterStream(long,long)> -> _SOURCE_
<java.sql.Clob: String getSubString(long,int)> -> _SOURCE_
<java.sql.Clob: long length()> -> _SOURCE_
<java.sql.Clob: long position(java.lang.String,long)> -> _SOURCE_
<java.sql.Clob: long position(java.sql.Clob,long)> -> _SOURCE_
<java.sql.Clob: OutputStream setAsciiStream(long)> -> _SOURCE_
<java.sql.Clob: Writer setCharacterStream(long)> -> _SOURCE_
<java.sql.Clob: int setString(long,java.lang.String,int,int)> -> _SINK_
<java.sql.Clob: int setString(long,java.lang.String)> -> _SINK_
<java.sql.Clob: void truncate(long)> -> _SINK_
<java.sql.Date: int getHours()> -> _SOURCE_
<java.sql.Date: int getMinutes()> -> _SOURCE_
<java.sql.Date: int getSeconds()> -> _SOURCE_
<java.sql.Date: void setHours(int)> -> _SOURCE_
<java.sql.Date: void setMinutes(int)> -> _SOURCE_
<java.sql.Date: void setSeconds(int)> -> _SOURCE_
<java.sql.Date: void setTime(long)> -> _SINK_
<java.sql.Date: java.lang.String toString()> -> _SOURCE_
<java.sql.Date: Date valueOf(java.lang.String)> -> _SOURCE_
<java.sql.RowId: boolean equals(java.lang.Object)> -> _SOURCE_
<java.sql.RowId: byte[] getBytes()> -> _SOURCE_
<java.sql.RowId: int hashCode()> -> _SOURCE_
<java.sql.RowId: String toString()> -> _SOURCE_
<java.sql.ParameterMetaData: String getParameterClassName(int)> -> _SOURCE_
<java.sql.ParameterMetaData: int getParameterCount()> -> _SOURCE_
<java.sql.ParameterMetaData: int getParameterMode(int)> -> _SOURCE_
<java.sql.ParameterMetaData: int getParameterType(int)> -> _SOURCE_
<java.sql.ParameterMetaData: String getParameterTypeName(int)> -> _SOURCE_
<java.sql.ParameterMetaData: int getPrecision(int)> -> _SOURCE_
<java.sql.ParameterMetaData: int getScale(int)> -> _SOURCE_
<java.sql.ParameterMetaData: int isNullable(int)> -> _SOURCE_
<java.sql.ParameterMetaData: boolean isSigned(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: String getCatalogName(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: String getColumnClassName(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: int getColumnCount()> -> _SOURCE_
<java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> -> _SINK_
<java.sql.ResultSetMetaData: String getColumnLabel(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: String getColumnName(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: int getColumnType(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: String getColumnTypeName(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: int getPrecision(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: String getSchemaName(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: String getTableName(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: boolean isCaseSensitive(int)> -> _SOURCE_
<java.sql.ResultSetMetaData: boolean isCurrency(int)> -> _SINK_
<java.sql.ResultSetMetaData: boolean isDefinitelyWritable(int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean allProceduresAreCallable()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean allTablesAreSelectable()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean autoCommitFailureClosesAllResultSets()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean dataDefinitionIgnoredInTransactions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean deletesAreDetected(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean doesMaxRowSizeIncludeBlobs()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
<java.sql.DatabaseMetaData: String getCatalogSeparator()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getCatalogTerm()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getCatalogs()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getClientInfoProperties()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: Connection getConnection()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: int getDatabaseMajorVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getDatabaseMinorVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getDatabaseProductName()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getDatabaseProductVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getDefaultTransactionIsolation()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getDriverMajorVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getDriverMinorVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getDriverName()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getDriverVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: String getExtraNameCharacters()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getFunctions(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: String getIdentifierQuoteString()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SOURCE_
<java.sql.DatabaseMetaData: int getJDBCMajorVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getJDBCMinorVersion()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxBinaryLiteralLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxCatalogNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxCharLiteralLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxColumnNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxColumnsInGroupBy()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxColumnsInIndex()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxColumnsInOrderBy()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxColumnsInTable()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxConnections()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxCursorNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxIndexLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxProcedureNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxRowSize()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxSchemaNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxStatementLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxStatements()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxTableNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxTablesInSelect()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getMaxUserNameLength()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getNumericFunctions()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: String getProcedureTerm()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: int getResultSetHoldability()> -> _SOURCE_
<java.sql.DatabaseMetaData: RowIdLifetime getRowIdLifetime()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getSQLKeywords()> -> _SOURCE_
<java.sql.DatabaseMetaData: int getSQLStateType()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getSchemaTerm()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getSchemas(java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getSchemas()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getSearchStringEscape()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getStringFunctions()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: String getSystemFunctions()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getTableTypes()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,String[])> -> _SOURCE_
<java.sql.DatabaseMetaData: String getTimeDateFunctions()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getTypeInfo()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SOURCE_
<java.sql.DatabaseMetaData: String getURL()> -> _SOURCE_
<java.sql.DatabaseMetaData: String getUserName()> -> _SOURCE_
<java.sql.DatabaseMetaData: ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean insertsAreDetected(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean isCatalogAtStart()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean isReadOnly()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean nullsAreSortedAtEnd()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean nullsAreSortedAtStart()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean nullsAreSortedHigh()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean nullsAreSortedLow()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean othersDeletesAreVisible(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean othersInsertsAreVisible(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean othersUpdatesAreVisible(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean ownDeletesAreVisible(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean ownInsertsAreVisible(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean ownUpdatesAreVisible(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean storesLowerCaseIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean storesMixedCaseIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean storesUpperCaseIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean storesUpperCaseQuotedIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsANSI92EntryLevelSQL()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsANSI92FullSQL()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsANSI92IntermediateSQL()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsAlterTableWithAddColumn()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsAlterTableWithDropColumn()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsBatchUpdates()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInDataManipulation()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInProcedureCalls()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInTableDefinitions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsColumnAliasing()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsConvert(int,int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsConvert()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCoreSQLGrammar()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsDataDefinitionAndDataManipulationTransactions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsDataManipulationTransactionsOnly()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsDifferentTableCorrelationNames()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsExpressionsInOrderBy()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsExtendedSQLGrammar()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsFullOuterJoins()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsGetGeneratedKeys()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsGroupBy()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsGroupByUnrelated()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsIntegrityEnhancementFacility()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsLikeEscapeClause()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsLimitedOuterJoins()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsMinimumSQLGrammar()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsMixedCaseIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsMultipleOpenResults()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsMultipleResultSets()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsMultipleTransactions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsNamedParameters()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsNonNullableColumns()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsOpenCursorsAcrossCommit()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsOpenCursorsAcrossRollback()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsOpenStatementsAcrossCommit()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsOpenStatementsAcrossRollback()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsOrderByUnrelated()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsOuterJoins()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsPositionedDelete()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsPositionedUpdate()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsResultSetConcurrency(int,int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsResultSetHoldability(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsResultSetType(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSavepoints()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSchemasInDataManipulation()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSchemasInIndexDefinitions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSchemasInProcedureCalls()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSchemasInTableDefinitions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSelectForUpdate()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsStatementPooling()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsStoredFunctionsUsingCallSyntax()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsStoredProcedures()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInComparisons()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInExists()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInIns()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInQuantifieds()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsTableCorrelationNames()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsTransactions()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsUnion()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean supportsUnionAll()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean updatesAreDetected(int)> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean usesLocalFilePerTable()> -> _SOURCE_
<java.sql.DatabaseMetaData: boolean usesLocalFiles()> -> _SOURCE_
<android.telecom.Connection: void close()> -> _SINK_
<android.telecom.Connection: Statement createStatement(int,int)> -> _SINK_
<android.telecom.Connection: Statement createStatement()> -> _SINK_
<android.telecom.Connection: Statement createStatement(int,int,int)> -> _SINK_
<android.telecom.Connection: boolean getAutoCommit()> -> _SOURCE_
<android.telecom.Connection: String getCatalog()> -> _SOURCE_
<android.telecom.Connection: String getClientInfo(java.lang.String)> -> _SOURCE_
<android.telecom.Connection: Properties getClientInfo()> -> _SOURCE_
<android.telecom.Connection: int getHoldability()> -> _SOURCE_
<android.telecom.Connection: DatabaseMetaData getMetaData()> -> _SOURCE_
<android.telecom.Connection: int getTransactionIsolation()> -> _SOURCE_
<android.telecom.Connection: java.util.Map> getTypeMap()> -> _SOURCE_
<android.telecom.Connection: SQLWarning getWarnings()> -> _SOURCE_
<android.telecom.Connection: boolean isClosed()> -> _SOURCE_
<android.telecom.Connection: boolean isReadOnly()> -> _SOURCE_
<android.telecom.Connection: boolean isValid(int)> -> _SOURCE_
<android.telecom.Connection: PreparedStatement prepareStatement(java.lang.String,String[])> -> _SOURCE_
<android.telecom.Connection: PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<android.telecom.Connection: PreparedStatement prepareStatement(java.lang.String,int[])> -> _SOURCE_
<android.telecom.Connection: PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<android.telecom.Connection: PreparedStatement prepareStatement(java.lang.String,int)> -> _SOURCE_
<android.telecom.Connection: PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<android.telecom.Connection: void setAutoCommit(boolean)> -> _SINK_
<android.telecom.Connection: void setCatalog(java.lang.String)> -> _SINK_
<android.telecom.Connection: void setClientInfo(java.util.Properties)> -> _SINK_
<android.telecom.Connection: void setClientInfo(java.lang.String,java.lang.String)> -> _SINK_
<android.telecom.Connection: void setHoldability(int)> -> _SINK_
<android.telecom.Connection: void setReadOnly(boolean)> -> _SINK_
<android.telecom.Connection: void setTypeMap(java.util.Map -> _SINK_
<java.sql.SQLData: String getSQLTypeName()> -> _SOURCE_
<java.sql.SQLData: void readSQL(java.sql.SQLInput,java.lang.String)> -> _SOURCE_
<java.sql.SQLData: void writeSQL(java.sql.SQLOutput)> -> _SINK_
<java.sql.SQLInput: Array readArray()> -> _SOURCE_
<java.sql.SQLInput: InputStream readAsciiStream()> -> _SOURCE_
<java.sql.SQLInput: BigDecimal readBigDecimal()> -> _SOURCE_
<java.sql.SQLInput: InputStream readBinaryStream()> -> _SOURCE_
<java.sql.SQLInput: Blob readBlob()> -> _SOURCE_
<java.sql.SQLInput: boolean readBoolean()> -> _SOURCE_
<java.sql.SQLInput: byte readByte()> -> _SOURCE_
<java.sql.SQLInput: byte[] readBytes()> -> _SOURCE_
<java.sql.SQLInput: Reader readCharacterStream()> -> _SOURCE_
<java.sql.SQLInput: Clob readClob()> -> _SOURCE_
<java.sql.SQLInput: Date readDate()> -> _SOURCE_
<java.sql.SQLInput: double readDouble()> -> _SOURCE_
<java.sql.SQLInput: float readFloat()> -> _SOURCE_
<java.sql.SQLInput: int readInt()> -> _SOURCE_
<java.sql.SQLInput: long readLong()> -> _SOURCE_
<java.sql.SQLInput: NClob readNClob()> -> _SOURCE_
<java.sql.SQLInput: String readNString()> -> _SOURCE_
<java.sql.SQLInput: Object readObject()> -> _SOURCE_
<java.sql.SQLInput: Ref readRef()> -> _SOURCE_
<java.sql.SQLInput: RowId readRowId()> -> _SOURCE_
<java.sql.SQLInput: SQLXML readSQLXML()> -> _SOURCE_
<java.sql.SQLInput: short readShort()> -> _SOURCE_
<java.sql.SQLInput: String readString()> -> _SOURCE_
<java.sql.SQLInput: Time readTime()> -> _SOURCE_
<java.sql.SQLInput: Timestamp readTimestamp()> -> _SOURCE_
<java.sql.SQLInput: URL readURL()> -> _SOURCE_
<java.sql.SQLInput: boolean wasNull()> -> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()> -> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()> -> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()> -> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()> -> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<java.sql.PreparedStatement: void addBatch()> -> _SINK_
<java.sql.PreparedStatement: boolean execute()> -> _SINK_
<java.sql.PreparedStatement: ResultSet executeQuery()> -> _SOURCE_
<java.sql.PreparedStatement: int executeUpdate()> -> _SINK_
<java.sql.PreparedStatement: ResultSetMetaData getMetaData()> -> _SOURCE_
<java.sql.PreparedStatement: ParameterMetaData getParameterMetaData()> -> _SOURCE_
<java.sql.PreparedStatement: void setArray(int,java.lang.reflect.Array)> -> _SINK_
<java.sql.PreparedStatement: void setAsciiStream(int,java.io.InputStream,long)> -> _SINK_
<java.sql.PreparedStatement: void setAsciiStream(int,java.io.InputStream)> -> _SINK_
<java.sql.PreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.PreparedStatement: void setBigDecimal(int,android.icu.math.BigDecimal)> -> _SINK_
<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,long)> -> _SINK_
<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream)> -> _SINK_
<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.PreparedStatement: void setBlob(int,java.io.InputStream,long)> -> _SINK_
<java.sql.PreparedStatement: void setBlob(int,java.io.InputStream)> -> _SINK_
<java.sql.PreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<java.sql.PreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<java.sql.PreparedStatement: void setByte(int,byte)> -> _SINK_
<java.sql.PreparedStatement: void setBytes(int,byte[])> -> _SINK_
<java.sql.PreparedStatement: void setCharacterStream(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.PreparedStatement: void setCharacterStream(int,android.se.omapi.Reader,int)> -> _SINK_
<java.sql.PreparedStatement: void setCharacterStream(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.PreparedStatement: void setClob(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.PreparedStatement: void setClob(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.PreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<java.sql.PreparedStatement: void setDate(int,java.sql.Date,android.icu.util.Calendar)> -> _SINK_
<java.sql.PreparedStatement: void setDouble(int,double)> -> _SINK_
<java.sql.PreparedStatement: void setFloat(int,float)> -> _SINK_
<java.sql.PreparedStatement: void setInt(int,int)> -> _SINK_
<java.sql.PreparedStatement: void setLong(int,long)> -> _SINK_
<java.sql.PreparedStatement: void setNCharacterStream(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.PreparedStatement: void setNCharacterStream(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.PreparedStatement: void setNClob(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.PreparedStatement: void setNClob(int,java.sql.NClob)> -> _SINK_
<java.sql.PreparedStatement: void setNClob(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.PreparedStatement: void setNString(int,java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setNull(int,int)> -> _SINK_
<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<java.sql.PreparedStatement: void setObject(int,java.lang.Object)> -> _SINK_
<java.sql.PreparedStatement: void setRef(int,androidx.compose.ui.node.Ref)> -> _SINK_
<java.sql.PreparedStatement: void setRowId(int,java.sql.RowId)> -> _SOURCE_
<java.sql.PreparedStatement: void setSQLXML(int,java.sql.SQLXML)> -> _SINK_
<java.sql.PreparedStatement: void setShort(int,short)> -> _SINK_
<java.sql.PreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setTime(int,android.text.format.Time)> -> _SINK_
<java.sql.PreparedStatement: void setTimestamp(int,java.security.Timestamp)> -> _SINK_
<java.sql.PreparedStatement: void setTimestamp(int,java.security.Timestamp,android.icu.util.Calendar)> -> _SINK_
<java.sql.PreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<java.sql.PreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<androidx.compose.ui.node.Ref: String getBaseTypeName()> -> _SOURCE_
<androidx.compose.ui.node.Ref: Object getObject()> -> _SOURCE_
<androidx.compose.ui.node.Ref: Object getObject(java.util.Map -> _SOURCE_
<androidx.compose.ui.node.Ref: void setObject(java.lang.Object)> -> _SINK_
<android.database.SQLException: int getErrorCode()> -> _SOURCE_
<android.database.SQLException: android.database.SQLException getNextException()> -> _SOURCE_
<android.database.SQLException: java.lang.String getSQLState()> -> _SOURCE_
<java.sql.SQLClientInfoException: java.util.Map getFailedProperties()> -> _SOURCE_
<java.sql.ResultSet: boolean absolute(int)> -> _SOURCE_
<java.sql.ResultSet: int findColumn(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: Array getArray(int)> -> _SOURCE_
<java.sql.ResultSet: Array getArray(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: InputStream getAsciiStream(int)> -> _SOURCE_
<java.sql.ResultSet: InputStream getAsciiStream(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: BigDecimal getBigDecimal(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: BigDecimal getBigDecimal(java.lang.String,int)> -> _SOURCE_
<java.sql.ResultSet: BigDecimal getBigDecimal(int,int)> -> _SOURCE_
<java.sql.ResultSet: BigDecimal getBigDecimal(int)> -> _SOURCE_
<java.sql.ResultSet: InputStream getBinaryStream(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: InputStream getBinaryStream(int)> -> _SOURCE_
<java.sql.ResultSet: Blob getBlob(int)> -> _SOURCE_
<java.sql.ResultSet: Blob getBlob(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: boolean getBoolean(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: boolean getBoolean(int)> -> _SOURCE_
<java.sql.ResultSet: byte getByte(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: byte getByte(int)> -> _SOURCE_
<java.sql.ResultSet: byte[] getBytes(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: byte[] getBytes(int)> -> _SOURCE_
<java.sql.ResultSet: Reader getCharacterStream(int)> -> _SOURCE_
<java.sql.ResultSet: Reader getCharacterStream(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: Clob getClob(int)> -> _SOURCE_
<java.sql.ResultSet: Clob getClob(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: int getConcurrency()> -> _SOURCE_
<java.sql.ResultSet: String getCursorName()> -> _SOURCE_
<java.sql.ResultSet: Date getDate(int)> -> _SOURCE_
<java.sql.ResultSet: Date getDate(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: Date getDate(java.lang.String,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.ResultSet: Date getDate(int,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.ResultSet: double getDouble(int)> -> _SOURCE_
<java.sql.ResultSet: double getDouble(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: int getFetchDirection()> -> _SOURCE_
<java.sql.ResultSet: int getFetchSize()> -> _SOURCE_
<java.sql.ResultSet: float getFloat(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: float getFloat(int)> -> _SOURCE_
<java.sql.ResultSet: int getHoldability()> -> _SOURCE_
<java.sql.ResultSet: int getInt(int)> -> _SOURCE_
<java.sql.ResultSet: int getInt(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: long getLong(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: long getLong(int)> -> _SOURCE_
<java.sql.ResultSet: ResultSetMetaData getMetaData()> -> _SOURCE_
<java.sql.ResultSet: Reader getNCharacterStream(int)> -> _SOURCE_
<java.sql.ResultSet: Reader getNCharacterStream(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: NClob getNClob(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: NClob getNClob(int)> -> _SOURCE_
<java.sql.ResultSet: String getNString(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: String getNString(int)> -> _SOURCE_
<java.sql.ResultSet: Object getObject(int)> -> _SOURCE_
<java.sql.ResultSet: Object getObject(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: Object getObject(int,java.util.Map -> _SOURCE_
<java.sql.ResultSet: Object getObject(java.lang.String,java.util.Map -> _SOURCE_
<java.sql.ResultSet: Ref getRef(int)> -> _SOURCE_
<java.sql.ResultSet: Ref getRef(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: int getRow()> -> _SOURCE_
<java.sql.ResultSet: RowId getRowId(int)> -> _SOURCE_
<java.sql.ResultSet: RowId getRowId(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: SQLXML getSQLXML(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: SQLXML getSQLXML(int)> -> _SOURCE_
<java.sql.ResultSet: short getShort(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: short getShort(int)> -> _SOURCE_
<java.sql.ResultSet: Statement getStatement()> -> _SOURCE_
<java.sql.ResultSet: String getString(int)> -> _SOURCE_
<java.sql.ResultSet: String getString(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: Time getTime(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: Time getTime(java.lang.String,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.ResultSet: Time getTime(int)> -> _SOURCE_
<java.sql.ResultSet: Time getTime(int,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.ResultSet: Timestamp getTimestamp(int,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.ResultSet: Timestamp getTimestamp(int)> -> _SOURCE_
<java.sql.ResultSet: Timestamp getTimestamp(java.lang.String,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.ResultSet: Timestamp getTimestamp(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: URL getURL(int)> -> _SOURCE_
<java.sql.ResultSet: URL getURL(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: InputStream getUnicodeStream(int)> -> _SOURCE_
<java.sql.ResultSet: InputStream getUnicodeStream(java.lang.String)> -> _SOURCE_
<java.sql.ResultSet: SQLWarning getWarnings()> -> _SOURCE_
<java.sql.ResultSet: void insertRow()> -> _SOURCE_
<java.sql.ResultSet: boolean isAfterLast()> -> _SOURCE_
<java.sql.ResultSet: boolean isBeforeFirst()> -> _SOURCE_
<java.sql.ResultSet: boolean isClosed()> -> _SOURCE_
<java.sql.ResultSet: boolean isFirst()> -> _SOURCE_
<java.sql.ResultSet: boolean isLast()> -> _SOURCE_
<java.sql.ResultSet: boolean rowDeleted()> -> _SOURCE_
<java.sql.ResultSet: boolean rowUpdated()> -> _SOURCE_
<java.sql.ResultSet: void setFetchDirection(int)> -> _SOURCE_
<java.sql.ResultSet: void updateArray(java.lang.String,java.lang.reflect.Array)> -> _SINK_
<java.sql.ResultSet: void updateArray(int,java.lang.reflect.Array)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(int,java.io.InputStream)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(int,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSet: void updateBigDecimal(int,android.icu.math.BigDecimal)> -> _SINK_
<java.sql.ResultSet: void updateBigDecimal(java.lang.String,android.icu.math.BigDecimal)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(int,java.io.InputStream)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(int,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<java.sql.ResultSet: void updateBlob(java.lang.String,java.io.InputStream)> -> _SINK_
<java.sql.ResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<java.sql.ResultSet: void updateBlob(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateBlob(int,java.io.InputStream)> -> _SINK_
<java.sql.ResultSet: void updateBlob(int,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<java.sql.ResultSet: void updateBoolean(int,boolean)> -> _SINK_
<java.sql.ResultSet: void updateByte(int,byte)> -> _SINK_
<java.sql.ResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<java.sql.ResultSet: void updateBytes(int,byte[])> -> _SINK_
<java.sql.ResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(java.lang.String,android.se.omapi.Reader,int)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(int,android.se.omapi.Reader,int)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<java.sql.ResultSet: void updateClob(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateClob(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateClob(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateClob(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<java.sql.ResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<java.sql.ResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<java.sql.ResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<java.sql.ResultSet: void updateDouble(int,double)> -> _SINK_
<java.sql.ResultSet: void updateFloat(int,float)> -> _SINK_
<java.sql.ResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<java.sql.ResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<java.sql.ResultSet: void updateInt(int,int)> -> _SINK_
<java.sql.ResultSet: void updateLong(int,long)> -> _SINK_
<java.sql.ResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<java.sql.ResultSet: void updateNCharacterStream(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateNCharacterStream(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateNCharacterStream(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateNCharacterStream(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateNClob(int,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateNClob(int,java.sql.NClob)> -> _SINK_
<java.sql.ResultSet: void updateNClob(java.lang.String,java.sql.NClob)> -> _SINK_
<java.sql.ResultSet: void updateNClob(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateNClob(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.ResultSet: void updateNClob(int,android.se.omapi.Reader)> -> _SINK_
<java.sql.ResultSet: void updateNString(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateNString(int,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateNull(int)> -> _SINK_
<java.sql.ResultSet: void updateNull(java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<java.sql.ResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<java.sql.ResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<java.sql.ResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<java.sql.ResultSet: void updateRef(int,androidx.compose.ui.node.Ref)> -> _SINK_
<java.sql.ResultSet: void updateRef(java.lang.String,androidx.compose.ui.node.Ref)> -> _SINK_
<java.sql.ResultSet: void updateRow()> -> _SOURCE_
<java.sql.ResultSet: void updateRowId(int,java.sql.RowId)> -> _SINK_
<java.sql.ResultSet: void updateRowId(java.lang.String,java.sql.RowId)> -> _SINK_
<java.sql.ResultSet: void updateSQLXML(int,java.sql.SQLXML)> -> _SINK_
<java.sql.ResultSet: void updateSQLXML(java.lang.String,java.sql.SQLXML)> -> _SINK_
<java.sql.ResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<java.sql.ResultSet: void updateShort(int,short)> -> _SINK_
<java.sql.ResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateString(int,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateTime(int,android.text.format.Time)> -> _SINK_
<java.sql.ResultSet: void updateTime(java.lang.String,android.text.format.Time)> -> _SINK_
<java.sql.ResultSet: void updateTimestamp(java.lang.String,java.security.Timestamp)> -> _SINK_
<java.sql.ResultSet: void updateTimestamp(int,java.security.Timestamp)> -> _SINK_
<java.sql.CallableStatement: Array getArray(int)> -> _SOURCE_
<java.sql.CallableStatement: Array getArray(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: BigDecimal getBigDecimal(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: BigDecimal getBigDecimal(int,int)> -> _SOURCE_
<java.sql.CallableStatement: BigDecimal getBigDecimal(int)> -> _SOURCE_
<java.sql.CallableStatement: Blob getBlob(int)> -> _SOURCE_
<java.sql.CallableStatement: Blob getBlob(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: boolean getBoolean(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: boolean getBoolean(int)> -> _SOURCE_
<java.sql.CallableStatement: byte getByte(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: byte getByte(int)> -> _SOURCE_
<java.sql.CallableStatement: byte[] getBytes(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: byte[] getBytes(int)> -> _SOURCE_
<java.sql.CallableStatement: Reader getCharacterStream(int)> -> _SOURCE_
<java.sql.CallableStatement: Reader getCharacterStream(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: Clob getClob(int)> -> _SOURCE_
<java.sql.CallableStatement: Clob getClob(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: Date getDate(int)> -> _SOURCE_
<java.sql.CallableStatement: Date getDate(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: Date getDate(java.lang.String,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.CallableStatement: Date getDate(int,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.CallableStatement: double getDouble(int)> -> _SOURCE_
<java.sql.CallableStatement: double getDouble(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: float getFloat(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: float getFloat(int)> -> _SOURCE_
<java.sql.CallableStatement: int getInt(int)> -> _SOURCE_
<java.sql.CallableStatement: int getInt(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: long getLong(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: long getLong(int)> -> _SOURCE_
<java.sql.CallableStatement: Reader getNCharacterStream(int)> -> _SOURCE_
<java.sql.CallableStatement: Reader getNCharacterStream(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: NClob getNClob(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: NClob getNClob(int)> -> _SOURCE_
<java.sql.CallableStatement: String getNString(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: String getNString(int)> -> _SOURCE_
<java.sql.CallableStatement: Object getObject(int)> -> _SOURCE_
<java.sql.CallableStatement: Object getObject(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: Object getObject(int,java.util.Map -> _SOURCE_
<java.sql.CallableStatement: Object getObject(java.lang.String,java.util.Map -> _SOURCE_
<java.sql.CallableStatement: Ref getRef(int)> -> _SOURCE_
<java.sql.CallableStatement: Ref getRef(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: RowId getRowId(int)> -> _SOURCE_
<java.sql.CallableStatement: RowId getRowId(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: SQLXML getSQLXML(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: SQLXML getSQLXML(int)> -> _SOURCE_
<java.sql.CallableStatement: short getShort(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: short getShort(int)> -> _SOURCE_
<java.sql.CallableStatement: String getString(int)> -> _SOURCE_
<java.sql.CallableStatement: String getString(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: Time getTime(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: Time getTime(java.lang.String,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.CallableStatement: Time getTime(int)> -> _SOURCE_
<java.sql.CallableStatement: Time getTime(int,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.CallableStatement: Timestamp getTimestamp(int,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.CallableStatement: Timestamp getTimestamp(int)> -> _SOURCE_
<java.sql.CallableStatement: Timestamp getTimestamp(java.lang.String,android.icu.util.Calendar)> -> _SOURCE_
<java.sql.CallableStatement: Timestamp getTimestamp(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: URL getURL(int)> -> _SOURCE_
<java.sql.CallableStatement: URL getURL(java.lang.String)> -> _SOURCE_
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<java.sql.CallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<java.sql.CallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.CallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream)> -> _SINK_
<java.sql.CallableStatement: void setBigDecimal(java.lang.String,android.icu.math.BigDecimal)> -> _SINK_
<java.sql.CallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream)> -> _SINK_
<java.sql.CallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.CallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<java.sql.CallableStatement: void setBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<java.sql.CallableStatement: void setBlob(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.CallableStatement: void setBlob(java.lang.String,java.io.InputStream)> -> _SINK_
<java.sql.CallableStatement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<java.sql.CallableStatement: void setByte(java.lang.String,byte)> -> _SINK_
<java.sql.CallableStatement: void setBytes(java.lang.String,byte[])> -> _SINK_
<java.sql.CallableStatement: void setCharacterStream(java.lang.String,android.se.omapi.Reader,int)> -> _SINK_
<java.sql.CallableStatement: void setCharacterStream(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.CallableStatement: void setCharacterStream(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.CallableStatement: void setClob(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.CallableStatement: void setClob(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.CallableStatement: void setDate(java.lang.String,java.sql.Date,android.icu.util.Calendar)> -> _SINK_
<java.sql.CallableStatement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<java.sql.CallableStatement: void setDouble(java.lang.String,double)> -> _SINK_
<java.sql.CallableStatement: void setFloat(java.lang.String,float)> -> _SINK_
<java.sql.CallableStatement: void setInt(java.lang.String,int)> -> _SINK_
<java.sql.CallableStatement: void setLong(java.lang.String,long)> -> _SINK_
<java.sql.CallableStatement: void setNCharacterStream(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.CallableStatement: void setNCharacterStream(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.CallableStatement: void setNClob(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<java.sql.CallableStatement: void setNClob(java.lang.String,java.sql.NClob)> -> _SINK_
<java.sql.CallableStatement: void setNClob(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<java.sql.CallableStatement: void setNString(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setNull(java.lang.String,int)> -> _SINK_
<java.sql.CallableStatement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<java.sql.CallableStatement: void setRowId(java.lang.String,java.sql.RowId)> -> _SOURCE_
<java.sql.CallableStatement: void setSQLXML(java.lang.String,java.sql.SQLXML)> -> _SINK_
<java.sql.CallableStatement: void setShort(java.lang.String,short)> -> _SINK_
<java.sql.CallableStatement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setTime(java.lang.String,android.text.format.Time)> -> _SINK_
<java.sql.CallableStatement: void setTimestamp(java.lang.String,java.security.Timestamp,android.icu.util.Calendar)> -> _SINK_
<java.sql.CallableStatement: void setTimestamp(java.lang.String,java.security.Timestamp)> -> _SINK_
<java.sql.CallableStatement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<java.sql.CallableStatement: boolean wasNull()> -> _SOURCE_
<java.sql.SQLXML: InputStream getBinaryStream()> -> _SOURCE_
<java.sql.SQLXML: Reader getCharacterStream()> -> _SOURCE_
<java.sql.SQLXML: <T extends Source> T getSource(Class)> -> _SOURCE_
<java.sql.SQLXML: String getString()> -> _SOURCE_
<java.sql.SQLXML: OutputStream setBinaryStream()> -> _SOURCE_
<java.sql.SQLXML: Writer setCharacterStream()> -> _SOURCE_
<java.sql.SQLXML: <T extends Result> T setResult(Class)> -> _SOURCE_
<java.sql.SQLXML: void setString(java.lang.String)> -> _SINK_
<java.sql.Struct: Object[] getAttributes()> -> _SOURCE_
<java.sql.Struct: Object[] getAttributes(java.util.Map -> _SOURCE_
<java.sql.Struct: String getSQLTypeName()> -> _SOURCE_
<java.sql.Savepoint: int getSavepointId()> -> _SOURCE_
<java.sql.Savepoint: String getSavepointName()> -> _SOURCE_
<java.sql.SQLOutput: void writeArray(java.lang.reflect.Array)> -> _SINK_
<java.sql.SQLOutput: void writeAsciiStream(java.io.InputStream)> -> _SINK_
<java.sql.SQLOutput: void writeBigDecimal(android.icu.math.BigDecimal)> -> _SINK_
<java.sql.SQLOutput: void writeBinaryStream(java.io.InputStream)> -> _SINK_
<java.sql.SQLOutput: void writeBlob(java.sql.Blob)> -> _SINK_
<java.sql.SQLOutput: void writeBoolean(boolean)> -> _SINK_
<java.sql.SQLOutput: void writeByte(byte)> -> _SINK_
<java.sql.SQLOutput: void writeBytes(byte[])> -> _SINK_
<java.sql.SQLOutput: void writeCharacterStream(android.se.omapi.Reader)> -> _SINK_
<java.sql.SQLOutput: void writeClob(java.sql.Clob)> -> _SINK_
<java.sql.SQLOutput: void writeDate(java.sql.Date)> -> _SINK_
<java.sql.SQLOutput: void writeDouble(double)> -> _SINK_
<java.sql.SQLOutput: void writeFloat(float)> -> _SINK_
<java.sql.SQLOutput: void writeInt(int)> -> _SINK_
<java.sql.SQLOutput: void writeLong(long)> -> _SINK_
<java.sql.SQLOutput: void writeNClob(java.sql.NClob)> -> _SINK_
<java.sql.SQLOutput: void writeNString(java.lang.String)> -> _SOURCE_
<java.sql.SQLOutput: void writeObject(java.sql.SQLData)> -> _SINK_
<java.sql.SQLOutput: void writeRef(androidx.compose.ui.node.Ref)> -> _SINK_
<java.sql.SQLOutput: void writeRowId(java.sql.RowId)> -> _SINK_
<java.sql.SQLOutput: void writeSQLXML(java.sql.SQLXML)> -> _SINK_
<java.sql.SQLOutput: void writeShort(short)> -> _SINK_
<java.sql.SQLOutput: void writeString(java.lang.String)> -> _SOURCE_
<java.sql.SQLOutput: void writeStruct(java.sql.Struct)> -> _SINK_
<java.sql.SQLOutput: void writeTime(android.text.format.Time)> -> _SINK_
<java.sql.SQLOutput: void writeTimestamp(java.security.Timestamp)> -> _SINK_
<java.sql.SQLOutput: void writeURL(java.net.URL)> -> _SINK_
<java.security.Timestamp: int getNanos()> -> _SOURCE_
<java.security.Timestamp: long getTime()> -> _SOURCE_
<java.security.Timestamp: int hashCode()> -> _SOURCE_
<java.security.Timestamp: void setNanos(int)> -> _SINK_
<java.security.Timestamp: void setTime(long)> -> _SINK_
<java.security.Timestamp: java.lang.String toString()> -> _SOURCE_
<java.security.Timestamp: Timestamp valueOf(java.lang.String)> -> _SOURCE_
<android.text.format.Time: int getDate()> -> _SOURCE_
<android.text.format.Time: int getDay()> -> _SOURCE_
<android.text.format.Time: int getMonth()> -> _SOURCE_
<android.text.format.Time: int getYear()> -> _SOURCE_
<android.text.format.Time: void setDate(int)> -> _SOURCE_
<android.text.format.Time: void setMonth(int)> -> _SOURCE_
<android.text.format.Time: void setTime(long)> -> _SINK_
<android.text.format.Time: void setYear(int)> -> _SOURCE_
<android.text.format.Time: java.lang.String toString()> -> _SOURCE_
<android.text.format.Time: Time valueOf(java.lang.String)> -> _SOURCE_
<android.text.Annotation: java.lang.Object getValue()> -> _SOURCE_
<android.text.Annotation: java.lang.String toString()> -> _SOURCE_
<java.sql.SQLWarning: java.sql.SQLWarning getNextWarning()> -> _SOURCE_
<android.icu.text.Bidi: boolean baseIsLeftToRight()> -> _SOURCE_
<android.icu.text.Bidi: int getLength()> -> _SOURCE_
<android.icu.text.Bidi: int getLevelAt(int)> -> _SOURCE_
<android.icu.text.Bidi: int getRunCount()> -> _SOURCE_
<android.icu.text.Bidi: boolean isLeftToRight()> -> _SOURCE_
<android.icu.text.Bidi: boolean isRightToLeft()> -> _SOURCE_
<android.icu.text.Bidi: java.lang.String toString()> -> _SOURCE_
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object)> -> _SINK_
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object,int,int)> -> _SINK_
<java.text.AttributedString: void addAttributes(java.util.Map -> _SINK_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()> -> _SOURCE_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(Attribute[])> -> _SOURCE_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(Attribute[],int,int)> -> _SOURCE_
<java.text.AttributedCharacterIterator: Set<AttributedCharacterIterator.Attribute> getAllAttributeKeys()> -> _SOURCE_
<java.text.AttributedCharacterIterator: Object getAttribute(java.text.AttributedCharacterIterator.Attribute)> -> _SOURCE_
<java.text.AttributedCharacterIterator: java.util.Map getAttributes()> -> _SOURCE_
<java.text.AttributedCharacterIterator: int getRunLimit()> -> _SOURCE_
<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator.Attribute)> -> _SOURCE_
<java.text.AttributedCharacterIterator: int getRunLimit(Set<?)> -> _SOURCE_
<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator.Attribute)> -> _SOURCE_
<java.text.AttributedCharacterIterator: int getRunStart(Set<?)> -> _SOURCE_
<java.text.AttributedCharacterIterator: int getRunStart()> -> _SOURCE_
<java.text.AttributedCharacterIterator.Attribute: java.lang.String toString()> -> _SOURCE_
<java.text.CharacterIterator: char current()> -> _SOURCE_
<java.text.CharacterIterator: char first()> -> _SOURCE_
<java.text.CharacterIterator: int getBeginIndex()> -> _SOURCE_
<java.text.CharacterIterator: int getEndIndex()> -> _SOURCE_
<java.text.CharacterIterator: int getIndex()> -> _SOURCE_
<android.icu.text.CollationElementIterator: int getOffset()> -> _SOURCE_
<android.icu.text.CollationElementIterator: int next()> -> _SOURCE_
<android.icu.text.CollationElementIterator: int previous()> -> _SOURCE_
<android.icu.text.CollationElementIterator: int primaryOrder(int)> -> _SOURCE_
<android.icu.text.CollationElementIterator: short secondaryOrder(int)> -> _SOURCE_
<android.icu.text.CollationElementIterator: void setOffset(int)> -> _SINK_
<android.icu.text.CollationElementIterator: void setText(java.lang.String)> -> _SINK_
<android.icu.text.CollationElementIterator: void setText(java.text.CharacterIterator)> -> _SINK_
<android.icu.text.CollationElementIterator: short tertiaryOrder(int)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getAmPmStrings()> -> _SINK_
<android.icu.text.DateFormatSymbols: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getEras()> -> _SINK_
<android.icu.text.DateFormatSymbols: DateFormatSymbols getInstance()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: DateFormatSymbols getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormatSymbols: java.lang.String getLocalPatternChars()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: String[] getMonths()> -> _SINK_
<android.icu.text.DateFormatSymbols: String[] getShortMonths()> -> _SINK_
<android.icu.text.DateFormatSymbols: String[] getShortWeekdays()> -> _SINK_
<android.icu.text.DateFormatSymbols: String[][] getZoneStrings()> -> _SOURCE_
<android.icu.text.DateFormatSymbols: void setAmPmStrings(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setEras(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setMonths(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setShortMonths(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setShortWeekdays(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setWeekdays(String[])> -> _SINK_
<android.icu.text.DateFormatSymbols: void setZoneStrings(String[][])> -> _SINK_
<java.sql.Wrapper:  T unwrap(Class)> -> _SOURCE_
<android.icu.text.DateFormat: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DateFormat: StringBuffer format(java.sql.Date,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DateFormat: String format(java.sql.Date)> -> _SOURCE_
<android.icu.text.DateFormat: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.DateFormat: android.icu.util.Calendar getCalendar()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance(int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateInstance()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(int,int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance(int,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getDateTimeInstance()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getInstance()> -> _SINK_
<android.icu.text.DateFormat: android.icu.text.NumberFormat getNumberFormat()> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(int)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance(int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DateFormat: DateFormat getTimeInstance()> -> _SOURCE_
<android.icu.text.DateFormat: android.icu.util.TimeZone getTimeZone()> -> _SOURCE_
<android.icu.text.DateFormat: void setCalendar(android.icu.util.Calendar)> -> _SINK_
<android.icu.text.DateFormat: void setLenient(boolean)> -> _SINK_
<android.icu.text.DateFormat: void setNumberFormat(android.icu.text.NumberFormat)> -> _SINK_
<android.icu.text.DateFormat: void setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getDecimalSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getDigit()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getGroupingSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols getInstance()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getMinusSign()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: java.lang.String getNaN()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getPatternSeparator()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getPerMill()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getPercent()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: char getZeroDigit()> -> _SOURCE_
<android.icu.text.DecimalFormatSymbols: void setCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setInfinity(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMinusSign(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setNaN(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setPerMill(char)> -> _SINK_
<android.icu.text.DecimalFormatSymbols: void setZeroDigit(char)> -> _SINK_
<android.icu.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void applyPattern(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.DecimalFormat: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.DecimalFormat: android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getGroupingSize()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMaximumFractionDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMaximumIntegerDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMinimumFractionDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMinimumIntegerDigits()> -> _SOURCE_
<android.icu.text.DecimalFormat: int getMultiplier()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getNegativePrefix()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getNegativeSuffix()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getPositivePrefix()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.lang.String getPositiveSuffix()> -> _SOURCE_
<android.icu.text.DecimalFormat: java.math.RoundingMode getRoundingMode()> -> _SOURCE_
<android.icu.text.DecimalFormat: boolean isParseBigDecimal()> -> _SOURCE_
<android.icu.text.DecimalFormat: void setCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.DecimalFormat: void setDecimalFormatSymbols(android.icu.text.DecimalFormatSymbols)> -> _SINK_
<android.icu.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setGroupingSize(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setGroupingUsed(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setMaximumFractionDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumFractionDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMinimumIntegerDigits(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setMultiplier(int)> -> _SINK_
<android.icu.text.DecimalFormat: void setNegativePrefix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setNegativeSuffix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setParseIntegerOnly(boolean)> -> _SINK_
<android.icu.text.DecimalFormat: void setPositivePrefix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setPositiveSuffix(java.lang.String)> -> _SINK_
<android.icu.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)> -> _SINK_
<android.icu.text.CollationKey: java.lang.String getSourceString()> -> _SOURCE_
<android.icu.text.Collator: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.Collator: CollationKey getCollationKey(java.lang.String)> -> _SOURCE_
<android.icu.text.Collator: int getDecomposition()> -> _SOURCE_
<android.icu.text.Collator: Collator getInstance()> -> _SOURCE_
<android.icu.text.Collator: Collator getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.Collator: int getStrength()> -> _SOURCE_
<android.icu.text.Collator: int hashCode()> -> _SOURCE_
<android.icu.text.Collator: void setDecomposition(int)> -> _SINK_
<android.icu.text.Collator: void setStrength(int)> -> _SINK_
<android.icu.text.DateFormat.Field: int getCalendarField()> -> _SOURCE_
<android.icu.text.DateFormat.Field: DateFormat.Field ofCalendarField(int)> -> _SOURCE_
<android.icu.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: String format(double)> -> _SINK_
<android.icu.text.NumberFormat: StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: String format(long)> -> _SINK_
<android.icu.text.NumberFormat: StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.NumberFormat: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.NumberFormat: android.icu.util.Currency getCurrency()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getCurrencyInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getCurrencyInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getIntegerInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getIntegerInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: int getMaximumFractionDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: int getMaximumIntegerDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: int getMinimumFractionDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: int getMinimumIntegerDigits()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getNumberInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getNumberInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getPercentInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.NumberFormat: NumberFormat getPercentInstance()> -> _SOURCE_
<android.icu.text.NumberFormat: java.math.RoundingMode getRoundingMode()> -> _SOURCE_
<android.icu.text.NumberFormat: void setCurrency(android.icu.util.Currency)> -> _SINK_
<android.icu.text.NumberFormat: void setGroupingUsed(boolean)> -> _SINK_
<android.icu.text.NumberFormat: void setMaximumFractionDigits(int)> -> _SINK_
<android.icu.text.NumberFormat: void setMinimumFractionDigits(int)> -> _SINK_
<android.icu.text.NumberFormat: void setMinimumIntegerDigits(int)> -> _SINK_
<android.icu.text.NumberFormat: void setParseIntegerOnly(boolean)> -> _SINK_
<android.icu.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)> -> _SINK_
<android.icu.text.BreakIterator: int current()> -> _SOURCE_
<android.icu.text.BreakIterator: int first()> -> _SOURCE_
<android.icu.text.BreakIterator: int following(int)> -> _SOURCE_
<android.icu.text.BreakIterator: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getCharacterInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getCharacterInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getLineInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getLineInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getSentenceInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getSentenceInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: CharacterIterator getText()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getWordInstance()> -> _SOURCE_
<android.icu.text.BreakIterator: BreakIterator getWordInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.text.BreakIterator: boolean isBoundary(int)> -> _SOURCE_
<android.icu.text.BreakIterator: int last()> -> _SOURCE_
<android.icu.text.BreakIterator: int next()> -> _SOURCE_
<android.icu.text.BreakIterator: int next(int)> -> _SOURCE_
<android.icu.text.BreakIterator: int preceding(int)> -> _SOURCE_
<android.icu.text.BreakIterator: int previous()> -> _SOURCE_
<android.icu.text.BreakIterator: void setText(java.lang.String)> -> _SINK_
<android.icu.text.BreakIterator: void setText(java.text.CharacterIterator)> -> _SINK_
<java.text.ParsePosition: int getErrorIndex()> -> _SOURCE_
<java.text.ParsePosition: int getIndex()> -> _SOURCE_
<java.text.ParsePosition: int hashCode()> -> _SOURCE_
<java.text.ParsePosition: void setErrorIndex(int)> -> _SOURCE_
<java.text.ParsePosition: void setIndex(int)> -> _SINK_
<java.text.ParsePosition: java.lang.String toString()> -> _SOURCE_
<android.net.ParseException: int getErrorOffset()> -> _SOURCE_
<android.icu.text.MessageFormat: void applyPattern(java.lang.String)> -> _SINK_
<android.icu.text.MessageFormat: StringBuffer format(Object[],java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.MessageFormat: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.MessageFormat: String format(java.lang.String,Object[])> -> _SINK_
<android.icu.text.MessageFormat: Format[] getFormats()> -> _SOURCE_
<android.icu.text.MessageFormat: Format[] getFormatsByArgumentIndex()> -> _SOURCE_
<android.icu.text.MessageFormat: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<android.icu.text.MessageFormat: int hashCode()> -> _SOURCE_
<android.icu.text.MessageFormat: Object[] parse(java.lang.String)> -> _SINK_
<android.icu.text.MessageFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> -> _SINK_
<android.icu.text.MessageFormat: void setFormat(int,java.text.Format)> -> _SINK_
<android.icu.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)> -> _SINK_
<android.icu.text.MessageFormat: void setFormats(Format[])> -> _SINK_
<android.icu.text.MessageFormat: void setFormatsByArgumentIndex(Format[])> -> _SINK_
<android.icu.text.MessageFormat: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.text.MessageFormat: java.lang.String toPattern()> -> _SOURCE_
<java.text.FieldPosition: int getBeginIndex()> -> _SOURCE_
<java.text.FieldPosition: int getEndIndex()> -> _SOURCE_
<java.text.FieldPosition: int getField()> -> _SOURCE_
<java.text.FieldPosition: java.text.Format.Field getFieldAttribute()> -> _SOURCE_
<java.text.FieldPosition: void setBeginIndex(int)> -> _SINK_
<java.text.FieldPosition: void setEndIndex(int)> -> _SINK_
<java.text.FieldPosition: java.lang.String toString()> -> _SOURCE_
<java.time.Clock: ZoneId getZone()> -> _SOURCE_
<java.time.Clock: int hashCode()> -> _SOURCE_
<java.time.Clock: Instant instant()> -> _SOURCE_
<java.time.Clock: long millis()> -> _SOURCE_
<java.time.Clock: Clock system(java.time.ZoneId)> -> _SOURCE_
<java.time.Clock: Clock systemDefaultZone()> -> _SOURCE_
<java.time.Clock: Clock systemUTC()> -> _SOURCE_
<java.time.Clock: Clock tick(java.time.Clock,java.time.Duration)> -> _SOURCE_
<java.time.Clock: Clock tickMinutes(java.time.ZoneId)> -> _SOURCE_
<java.time.Clock: Clock tickSeconds(java.time.ZoneId)> -> _SOURCE_
<java.time.Clock: Clock withZone(java.time.ZoneId)> -> _SOURCE_
<java.text.StringCharacterIterator: int getBeginIndex()> -> _SOURCE_
<java.text.StringCharacterIterator: int getEndIndex()> -> _SOURCE_
<java.text.StringCharacterIterator: int getIndex()> -> _SOURCE_
<java.text.StringCharacterIterator: char setIndex(int)> -> _SINK_
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(java.lang.String)> -> _SOURCE_
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)> -> _SOURCE_
<android.icu.text.RuleBasedCollator: java.lang.String getRules()> -> _SOURCE_
<android.icu.text.RuleBasedCollator: int hashCode()> -> _SOURCE_
<java.text.Format: String format(java.lang.Object)> -> _SOURCE_
<java.text.Format: StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<java.text.Format: java.lang.Object parseObject(java.lang.String)> -> _SOURCE_
<android.icu.text.SimpleDateFormat: java.lang.StringBuffer format(java.sql.Date,java.lang.StringBuffer,java.text.FieldPosition)> -> _SINK_
<android.icu.text.SimpleDateFormat: java.sql.Date get2DigitYearStart()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: android.icu.text.DateFormatSymbols getDateFormatSymbols()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: int hashCode()> -> _SOURCE_
<android.icu.text.SimpleDateFormat: void set2DigitYearStart(java.sql.Date)> -> _SINK_
<android.icu.text.SimpleDateFormat: void setDateFormatSymbols(android.icu.text.DateFormatSymbols)> -> _SINK_
<android.icu.text.SimpleDateFormat: java.lang.String toPattern()> -> _SOURCE_
<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)> -> _SINK_
<java.time.Instant: Instant from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.Instant: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Instant: long getEpochSecond()> -> _SOURCE_
<java.time.Instant: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Instant: int getNano()> -> _SOURCE_
<java.time.Instant: int hashCode()> -> _SOURCE_
<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Instant: java.time.Instant minusMillis(long)> -> _SOURCE_
<java.time.Instant: java.time.Instant minusNanos(long)> -> _SOURCE_
<java.time.Instant: java.time.Instant minusSeconds(long)> -> _SOURCE_
<java.time.Instant: Instant now()> -> _SOURCE_
<java.time.Instant: Instant now(java.time.Clock)> -> _SOURCE_
<java.time.Instant: Instant ofEpochMilli(long)> -> _SOURCE_
<java.time.Instant: Instant ofEpochSecond(long)> -> _SOURCE_
<java.time.Instant: java.time.Instant plusMillis(long)> -> _SOURCE_
<java.time.Instant: java.time.Instant plusNanos(long)> -> _SOURCE_
<java.time.Instant: java.time.Instant plusSeconds(long)> -> _SOURCE_
<java.time.Instant: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Instant: long toEpochMilli()> -> _SOURCE_
<java.time.Instant: java.lang.String toString()> -> _SOURCE_
<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Instant: java.time.Instant with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.LocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)> -> _SINK_
<java.time.LocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDateTime: int getDayOfMonth()> -> _SOURCE_
<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<java.time.LocalDateTime: int getDayOfYear()> -> _SINK_
<java.time.LocalDateTime: int getHour()> -> _SINK_
<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDateTime: int getMinute()> -> _SOURCE_
<java.time.LocalDateTime: java.time.Month getMonth()> -> _SOURCE_
<java.time.LocalDateTime: int getNano()> -> _SOURCE_
<java.time.LocalDateTime: int getSecond()> -> _SOURCE_
<java.time.LocalDateTime: int getYear()> -> _SOURCE_
<java.time.LocalDateTime: int hashCode()> -> _SOURCE_
<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime now(java.time.ZoneId)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime now()> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime now(java.time.Clock)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(int,int,int,int,int,int)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(int,java.time.Month,int,int,int,int)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(int,java.time.Month,int,int,int,int,int)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(int,int,int,int,int)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(int,java.time.Month,int,int,int)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(java.time.LocalDate,java.time.LocalTime)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime of(int,int,int,int,int,int,int)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.LocalDateTime: LocalDateTime parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)> -> _SOURCE_
<java.time.LocalDateTime: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDate toLocalDate()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<java.time.LocalDateTime: java.lang.String toString()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)> -> _SINK_
<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)> -> _SINK_
<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetDateTime: int getDayOfMonth()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<java.time.OffsetDateTime: int getDayOfYear()> -> _SINK_
<java.time.OffsetDateTime: int getHour()> -> _SINK_
<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetDateTime: int getMinute()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.Month getMonth()> -> _SOURCE_
<java.time.OffsetDateTime: int getNano()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()> -> _SOURCE_
<java.time.OffsetDateTime: int getSecond()> -> _SOURCE_
<java.time.OffsetDateTime: int getYear()> -> _SOURCE_
<java.time.OffsetDateTime: int hashCode()> -> _SOURCE_
<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime now(java.time.ZoneId)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime now()> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime now(java.time.Clock)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime of(int,int,int,int,int,int,int,java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.OffsetDateTime: OffsetDateTime parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)> -> _SOURCE_
<java.time.OffsetDateTime: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetDateTime: long toEpochSecond()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<java.time.OffsetDateTime: java.lang.String toString()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)> -> _SOURCE_
<java.time.Period: long get(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Period: java.time.chrono.IsoChronology getChronology()> -> _SOURCE_
<java.time.Period: int getDays()> -> _SOURCE_
<java.time.Period: int getMonths()> -> _SOURCE_
<java.time.Period: List<TemporalUnit> getUnits()> -> _SOURCE_
<java.time.Period: java.time.Period normalized()> -> _SOURCE_
<java.time.Period: Period parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.Period: java.time.Period plusYears(long)> -> _SOURCE_
<java.time.Period: java.lang.String toString()> -> _SOURCE_
<java.time.Period: java.time.Period withDays(int)> -> _SOURCE_
<java.time.Period: java.time.Period withYears(int)> -> _SOURCE_
<java.time.Year: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.Year: java.time.LocalDate atDay(int)> -> _SINK_
<java.time.Year: java.time.LocalDate atMonthDay(java.time.MonthDay)> -> _SINK_
<java.time.Year: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.Year: Year from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.Year: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Year: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Year: int getValue()> -> _SOURCE_
<java.time.Year: int hashCode()> -> _SOURCE_
<java.time.Year: boolean isBefore(java.time.Year)> -> _SOURCE_
<java.time.Year: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Year: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Year: java.time.Year minus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.Year: java.time.Year minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Year: java.time.Year minusYears(long)> -> _SOURCE_
<java.time.Year: Year now(java.time.ZoneId)> -> _SOURCE_
<java.time.Year: Year now()> -> _SOURCE_
<java.time.Year: Year now(java.time.Clock)> -> _SOURCE_
<java.time.Year: Year of(int)> -> _SOURCE_
<java.time.Year: Year parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.Year: Year parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.Year: java.time.Year plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.Year: java.time.Year plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Year: java.time.Year plusYears(long)> -> _SOURCE_
<java.time.Year: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.Year: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.Year: java.lang.String toString()> -> _SINK_
<java.time.Year: java.time.Year with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.MonthDay: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.MonthDay: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.MonthDay: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.MonthDay: int getDayOfMonth()> -> _SOURCE_
<java.time.MonthDay: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.MonthDay: java.time.Month getMonth()> -> _SOURCE_
<java.time.MonthDay: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.MonthDay: MonthDay now(java.time.ZoneId)> -> _SOURCE_
<java.time.MonthDay: MonthDay now()> -> _SOURCE_
<java.time.MonthDay: MonthDay now(java.time.Clock)> -> _SOURCE_
<java.time.MonthDay: MonthDay of(java.time.Month,int)> -> _SOURCE_
<java.time.MonthDay: MonthDay of(int,int)> -> _SOURCE_
<java.time.MonthDay: MonthDay parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.MonthDay: MonthDay parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.MonthDay: <R> R query(TemporalQuery<R>)> -> _SINK_
<java.time.MonthDay: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.MonthDay: java.lang.String toString()> -> _SOURCE_
<java.sql.Statement: void addBatch(java.lang.String)> -> _SINK_
<java.sql.Statement: boolean execute(java.lang.String,int)> -> _SOURCE_
<java.sql.Statement: boolean execute(java.lang.String,int[])> -> _SOURCE_
<java.sql.Statement: boolean execute(java.lang.String,String[])> -> _SOURCE_
<java.sql.Statement: int[] executeBatch()> -> _SINK_
<java.sql.Statement: ResultSet executeQuery(java.lang.String)> -> _SOURCE_
<java.sql.Statement: int executeUpdate(java.lang.String,String[])> -> _SOURCE_
<java.sql.Statement: int executeUpdate(java.lang.String,int[])> -> _SOURCE_
<java.sql.Statement: int executeUpdate(java.lang.String,int)> -> _SOURCE_
<java.sql.Statement: Connection getConnection()> -> _SOURCE_
<java.sql.Statement: int getFetchDirection()> -> _SOURCE_
<java.sql.Statement: int getFetchSize()> -> _SOURCE_
<java.sql.Statement: ResultSet getGeneratedKeys()> -> _SOURCE_
<java.sql.Statement: int getMaxFieldSize()> -> _SOURCE_
<java.sql.Statement: int getMaxRows()> -> _SOURCE_
<java.sql.Statement: boolean getMoreResults()> -> _SOURCE_
<java.sql.Statement: int getQueryTimeout()> -> _SOURCE_
<java.sql.Statement: ResultSet getResultSet()> -> _SOURCE_
<java.sql.Statement: int getResultSetConcurrency()> -> _SOURCE_
<java.sql.Statement: int getResultSetHoldability()> -> _SOURCE_
<java.sql.Statement: int getResultSetType()> -> _SOURCE_
<java.sql.Statement: SQLWarning getWarnings()> -> _SOURCE_
<java.sql.Statement: boolean isClosed()> -> _SOURCE_
<java.sql.Statement: void setCursorName(java.lang.String)> -> _SINK_
<java.sql.Statement: void setEscapeProcessing(boolean)> -> _SINK_
<java.sql.Statement: void setMaxFieldSize(int)> -> _SOURCE_
<java.sql.Statement: void setMaxRows(int)> -> _SINK_
<java.sql.Statement: void setQueryTimeout(int)> -> _SINK_
<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.ZoneOffset: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZoneOffset: java.lang.String getId()> -> _SOURCE_
<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()> -> _SINK_
<java.time.ZoneOffset: int hashCode()> -> _SOURCE_
<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZoneOffset: ZoneOffset of(java.lang.String)> -> _SOURCE_
<java.time.ZoneOffset: ZoneOffset ofHours(int)> -> _SOURCE_
<java.time.ZoneOffset: ZoneOffset ofHoursMinutes(int,int)> -> _SINK_
<java.time.ZoneOffset: ZoneOffset ofHoursMinutesSeconds(int,int,int)> -> _SINK_
<java.time.ZoneOffset: ZoneOffset ofTotalSeconds(int)> -> _SOURCE_
<java.time.ZoneOffset: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZoneOffset: java.lang.String toString()> -> _SOURCE_
<java.time.ZoneId: ZoneId from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.ZoneId: Set<String> getAvailableZoneIds()> -> _SOURCE_
<java.time.ZoneId: java.lang.String getDisplayName(androidx.compose.ui.text.TextStyle,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.ZoneId: String getId()> -> _SOURCE_
<java.time.ZoneId: ZoneRules getRules()> -> _SOURCE_
<java.time.ZoneId: int hashCode()> -> _SOURCE_
<java.time.ZoneId: java.time.ZoneId normalized()> -> _SOURCE_
<java.time.ZoneId: ZoneId of(java.lang.String,java.util.Map -> _SOURCE_
<java.time.ZoneId: ZoneId of(java.lang.String)> -> _SOURCE_
<java.time.ZoneId: ZoneId systemDefault()> -> _SOURCE_
<java.time.ZoneId: java.lang.String toString()> -> _SOURCE_
<java.time.YearMonth: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.YearMonth: java.time.LocalDate atDay(int)> -> _SINK_
<java.time.YearMonth: java.time.LocalDate atEndOfMonth()> -> _SOURCE_
<java.time.YearMonth: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.YearMonth: YearMonth from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.YearMonth: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.YearMonth: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.YearMonth: java.time.Month getMonth()> -> _SOURCE_
<java.time.YearMonth: int getYear()> -> _SOURCE_
<java.time.YearMonth: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.YearMonth: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.YearMonth: int lengthOfYear()> -> _SOURCE_
<java.time.YearMonth: YearMonth now(java.time.ZoneId)> -> _SOURCE_
<java.time.YearMonth: YearMonth now()> -> _SOURCE_
<java.time.YearMonth: YearMonth now(java.time.Clock)> -> _SOURCE_
<java.time.YearMonth: YearMonth of(int,java.time.Month)> -> _SOURCE_
<java.time.YearMonth: YearMonth of(int,int)> -> _SOURCE_
<java.time.YearMonth: YearMonth parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.YearMonth: YearMonth parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.YearMonth: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.YearMonth: java.lang.String toString()> -> _SOURCE_
<java.time.YearMonth: java.time.YearMonth with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.YearMonth: java.time.YearMonth withYear(int)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.chrono.ChronoLocalDate: ChronoLocalDate from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: int hashCode()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: int lengthOfMonth()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default int lengthOfYear()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default ChronoLocalDate plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: String toString()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default ChronoLocalDate with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: default ChronoLocalDate with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.chrono.ChronoLocalDateTime: default String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: ChronoLocalDateTime<?> from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default Chronology getChronology()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: int hashCode()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default ChronoLocalDateTime<D> minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default ChronoLocalDateTime<D> plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: ChronoLocalDateTime<D> plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default long toEpochSecond(java.time.ZoneOffset)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: D toLocalDate()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: LocalTime toLocalTime()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: String toString()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: ChronoLocalDateTime<D> with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: default ChronoLocalDateTime<D> with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.ZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZonedDateTime: int getDayOfMonth()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<java.time.ZonedDateTime: int getDayOfYear()> -> _SINK_
<java.time.ZonedDateTime: int getHour()> -> _SINK_
<java.time.ZonedDateTime: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZonedDateTime: int getMinute()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.Month getMonth()> -> _SOURCE_
<java.time.ZonedDateTime: int getNano()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()> -> _SOURCE_
<java.time.ZonedDateTime: int getSecond()> -> _SOURCE_
<java.time.ZonedDateTime: int getYear()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZoneId getZone()> -> _SOURCE_
<java.time.ZonedDateTime: int hashCode()> -> _SOURCE_
<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime now(java.time.ZoneId)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime now()> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime now(java.time.Clock)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime of(int,int,int,int,int,int,int,java.time.ZoneId)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)> -> _SINK_
<java.time.ZonedDateTime: ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.ZonedDateTime: ZonedDateTime parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)> -> _SOURCE_
<java.time.ZonedDateTime: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<java.time.ZonedDateTime: java.lang.String toString()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)> -> _SOURCE_
<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)> -> _SINK_
<java.time.Duration: Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)> -> _SOURCE_
<java.time.Duration: java.time.Duration dividedBy(long)> -> _SOURCE_
<java.time.Duration: long dividedBy(java.time.Duration)> -> _SOURCE_
<java.time.Duration: long get(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Duration: int getNano()> -> _SOURCE_
<java.time.Duration: long getSeconds()> -> _SOURCE_
<java.time.Duration: List<TemporalUnit> getUnits()> -> _SOURCE_
<java.time.Duration: java.time.Duration minusDays(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration minusHours(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration minusMillis(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration minusMinutes(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration minusNanos(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration minusSeconds(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration multipliedBy(long)> -> _SOURCE_
<java.time.Duration: Duration of(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Duration: Duration ofDays(long)> -> _SOURCE_
<java.time.Duration: Duration ofHours(long)> -> _SOURCE_
<java.time.Duration: Duration ofMillis(long)> -> _SOURCE_
<java.time.Duration: Duration ofMinutes(long)> -> _SOURCE_
<java.time.Duration: Duration ofNanos(long)> -> _SOURCE_
<java.time.Duration: Duration ofSeconds(long)> -> _SOURCE_
<java.time.Duration: Duration parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.Duration: java.time.Duration plus(java.time.Duration)> -> _SOURCE_
<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Duration: java.time.Duration plusDays(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration plusHours(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration plusMillis(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration plusMinutes(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration plusNanos(long)> -> _SOURCE_
<java.time.Duration: java.time.Duration plusSeconds(long)> -> _SOURCE_
<java.time.Duration: long toDaysPart()> -> _SOURCE_
<java.time.Duration: int toHoursPart()> -> _SOURCE_
<java.time.Duration: int toMillisPart()> -> _SOURCE_
<java.time.Duration: long toMinutes()> -> _SOURCE_
<java.time.Duration: int toMinutesPart()> -> _SOURCE_
<java.time.Duration: int toNanosPart()> -> _SOURCE_
<java.time.Duration: long toSeconds()> -> _SOURCE_
<java.time.Duration: int toSecondsPart()> -> _SOURCE_
<java.time.Duration: java.lang.String toString()> -> _SOURCE_
<java.time.Duration: java.time.Duration truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.Duration: java.time.Duration withNanos(int)> -> _SOURCE_
<java.time.Duration: java.time.Duration withSeconds(long)> -> _SOURCE_
<java.time.LocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)> -> _SOURCE_
<java.time.LocalDate: LocalDate from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.LocalDate: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()> -> _SOURCE_
<java.time.LocalDate: int getDayOfMonth()> -> _SOURCE_
<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<java.time.LocalDate: int getDayOfYear()> -> _SINK_
<java.time.LocalDate: java.time.chrono.Era getEra()> -> _SOURCE_
<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDate: java.time.Month getMonth()> -> _SOURCE_
<java.time.LocalDate: int getYear()> -> _SOURCE_
<java.time.LocalDate: int hashCode()> -> _SOURCE_
<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDate: int lengthOfYear()> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate minusDays(long)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate minusYears(long)> -> _SOURCE_
<java.time.LocalDate: LocalDate now(java.time.ZoneId)> -> _SOURCE_
<java.time.LocalDate: LocalDate now()> -> _SOURCE_
<java.time.LocalDate: LocalDate now(java.time.Clock)> -> _SOURCE_
<java.time.LocalDate: LocalDate of(int,int,int)> -> _SOURCE_
<java.time.LocalDate: LocalDate of(int,java.time.Month,int)> -> _SOURCE_
<java.time.LocalDate: LocalDate parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.LocalDate: LocalDate parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate plusDays(long)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate plusYears(long)> -> _SOURCE_
<java.time.LocalDate: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalDate: java.lang.String toString()> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate withMonth(int)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate withYear(int)> -> _SOURCE_
<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.OffsetTime: int compareTo(java.time.OffsetTime)> -> _SOURCE_
<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SINK_
<java.time.OffsetTime: OffsetTime from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.OffsetTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetTime: int getHour()> -> _SINK_
<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetTime: int getMinute()> -> _SOURCE_
<java.time.OffsetTime: int getNano()> -> _SOURCE_
<java.time.OffsetTime: java.time.ZoneOffset getOffset()> -> _SOURCE_
<java.time.OffsetTime: int getSecond()> -> _SOURCE_
<java.time.OffsetTime: int hashCode()> -> _SINK_
<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime minusHours(long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)> -> _SOURCE_
<java.time.OffsetTime: OffsetTime now(java.time.ZoneId)> -> _SOURCE_
<java.time.OffsetTime: OffsetTime now()> -> _SOURCE_
<java.time.OffsetTime: OffsetTime now(java.time.Clock)> -> _SOURCE_
<java.time.OffsetTime: OffsetTime of(int,int,int,int,java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetTime: OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetTime: OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)> -> _SOURCE_
<java.time.OffsetTime: OffsetTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime plusHours(long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)> -> _SOURCE_
<java.time.OffsetTime: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.OffsetTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<java.time.OffsetTime: java.lang.String toString()> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime withHour(int)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime withMinute(int)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime withNano(int)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime withSecond(int)> -> _SOURCE_
<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)> -> _SINK_
<java.time.LocalTime: LocalTime from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.LocalTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalTime: int getHour()> -> _SINK_
<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalTime: int getMinute()> -> _SOURCE_
<java.time.LocalTime: int getNano()> -> _SOURCE_
<java.time.LocalTime: int getSecond()> -> _SOURCE_
<java.time.LocalTime: int hashCode()> -> _SINK_
<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime minusHours(long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime minusMinutes(long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime minusNanos(long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime minusSeconds(long)> -> _SOURCE_
<java.time.LocalTime: LocalTime now(java.time.ZoneId)> -> _SOURCE_
<java.time.LocalTime: LocalTime now()> -> _SOURCE_
<java.time.LocalTime: LocalTime now(java.time.Clock)> -> _SOURCE_
<java.time.LocalTime: LocalTime of(int,int,int)> -> _SOURCE_
<java.time.LocalTime: LocalTime of(int,int,int,int)> -> _SOURCE_
<java.time.LocalTime: LocalTime of(int,int)> -> _SOURCE_
<java.time.LocalTime: LocalTime ofInstant(java.time.Instant,java.time.ZoneId)> -> _SOURCE_
<java.time.LocalTime: LocalTime ofNanoOfDay(long)> -> _SOURCE_
<java.time.LocalTime: LocalTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.LocalTime: LocalTime parse(java.lang.CharSequence)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime plusHours(long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime plusMinutes(long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime plusNanos(long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime plusSeconds(long)> -> _SOURCE_
<java.time.LocalTime: <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.LocalTime: long toEpochSecond(java.time.LocalDate,java.time.ZoneOffset)> -> _SOURCE_
<java.time.LocalTime: long toNanoOfDay()> -> _SOURCE_
<java.time.LocalTime: int toSecondOfDay()> -> _SOURCE_
<java.time.LocalTime: java.lang.String toString()> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime withHour(int)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime withMinute(int)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime withNano(int)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime withSecond(int)> -> _SOURCE_
<java.time.chrono.Chronology: ChronoLocalDate date(int,int,int)> -> _SINK_
<java.time.chrono.Chronology: default ChronoLocalDate dateNow(java.time.Clock)> -> _SOURCE_
<java.time.chrono.Chronology: default ChronoLocalDate dateNow()> -> _SOURCE_
<java.time.chrono.Chronology: ChronoLocalDate dateYearDay(int,int)> -> _SOURCE_
<java.time.chrono.Chronology: List<Era> eras()> -> _SOURCE_
<java.time.chrono.Chronology: Set<Chronology> getAvailableChronologies()> -> _SOURCE_
<java.time.chrono.Chronology: String getCalendarType()> -> _SOURCE_
<java.time.chrono.Chronology: default String getDisplayName(androidx.compose.ui.text.TextStyle,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.chrono.Chronology: String getId()> -> _SOURCE_
<java.time.chrono.Chronology: int hashCode()> -> _SINK_
<java.time.chrono.Chronology: default ChronoLocalDateTime<? extends ChronoLocalDate> localDateTime(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.Chronology: Chronology of(java.lang.String)> -> _SOURCE_
<java.time.chrono.Chronology: int prolepticYear(java.time.chrono.Era,int)> -> _SOURCE_
<java.time.chrono.Chronology: ValueRange range(java.time.temporal.ChronoField)> -> _SOURCE_
<java.time.chrono.Chronology: ChronoLocalDate resolveDate(java.util.Map -> _SINK_
<java.time.chrono.Chronology: String toString()> -> _SOURCE_
<java.time.chrono.Chronology: default ChronoZonedDateTime<? extends ChronoLocalDate> zonedDateTime(java.time.Instant,java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default String format(java.time.format.DateTimeFormatter)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ChronoZonedDateTime<?> from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default Chronology getChronology()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ZoneOffset getOffset()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ZoneId getZone()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: int hashCode()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default ChronoZonedDateTime<D> minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default ChronoZonedDateTime<D> plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ChronoZonedDateTime<D> plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default long toEpochSecond()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default D toLocalDate()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ChronoLocalDateTime<D> toLocalDateTime()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default LocalTime toLocalTime()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: String toString()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ChronoZonedDateTime<D> with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: default ChronoZonedDateTime<D> with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ChronoZonedDateTime<D> withZoneSameInstant(java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: ChronoZonedDateTime<D> withZoneSameLocal(java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.Era: default int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.Era: default String getDisplayName(androidx.compose.ui.text.TextStyle,androidx.compose.ui.text.intl.Locale)> -> _SINK_
<java.time.chrono.Era: default long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.Era: int getValue()> -> _SOURCE_
<java.time.chrono.Era: default boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.Era: default <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.chrono.Era: default ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.AbstractChronology: int hashCode()> -> _SINK_
<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map -> _SINK_
<java.time.chrono.AbstractChronology: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.ChronoPeriod: ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)> -> _SOURCE_
<java.time.chrono.ChronoPeriod: long get(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ChronoPeriod: Chronology getChronology()> -> _SOURCE_
<java.time.chrono.ChronoPeriod: List<TemporalUnit> getUnits()> -> _SOURCE_
<java.time.chrono.ChronoPeriod: String toString()> -> _SOURCE_
<java.time.chrono.HijrahDate: HijrahDate from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahChronology getChronology()> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahEra getEra()> -> _SOURCE_
<java.time.chrono.HijrahDate: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.HijrahDate: int hashCode()> -> _SOURCE_
<java.time.chrono.HijrahDate: int lengthOfYear()> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.HijrahDate: HijrahDate now(java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.HijrahDate: HijrahDate now()> -> _SOURCE_
<java.time.chrono.HijrahDate: HijrahDate now(java.time.Clock)> -> _SOURCE_
<java.time.chrono.HijrahDate: HijrahDate of(int,int,int)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate withVariant(java.time.chrono.HijrahChronology)> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)> -> _SINK_
<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()> -> _SINK_
<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()> -> _SINK_
<java.time.format.DateTimeFormatter: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<java.time.format.DateTimeFormatter: Set<TemporalField> getResolverFields()> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()> -> _SINK_
<java.time.format.DateTimeFormatter: DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)> -> _SOURCE_
<java.time.format.DateTimeFormatter: DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)> -> _SOURCE_
<java.time.format.DateTimeFormatter: DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)> -> _SOURCE_
<java.time.format.DateTimeFormatter: DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)> -> _SOURCE_
<java.time.format.DateTimeFormatter: DateTimeFormatter ofPattern(java.lang.String)> -> _SINK_
<java.time.format.DateTimeFormatter:  T parse(java.lang.CharSequence,TemporalQuery)> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence,java.text.ParsePosition)> -> _SINK_
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(java.lang.CharSequence,TemporalQuery[]<?>)> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)> -> _SOURCE_
<java.time.format.DateTimeFormatter: TemporalQuery<Period> parsedExcessDays()> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.text.Format toFormat(TemporalQuery<?>)> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.text.Format toFormat()> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.lang.String toString()> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.format.DateTimeParseException: int getErrorIndex()> -> _SOURCE_
<java.time.format.DateTimeParseException: java.lang.String getParsedString()> -> _SOURCE_
<java.time.chrono.JapaneseDate: JapaneseDate from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseChronology getChronology()> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseEra getEra()> -> _SOURCE_
<java.time.chrono.JapaneseDate: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.JapaneseDate: int hashCode()> -> _SOURCE_
<java.time.chrono.JapaneseDate: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.JapaneseDate: int lengthOfYear()> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.JapaneseDate: JapaneseDate now(java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.JapaneseDate: JapaneseDate now()> -> _SOURCE_
<java.time.chrono.JapaneseDate: JapaneseDate now(java.time.Clock)> -> _SOURCE_
<java.time.chrono.JapaneseDate: JapaneseDate of(java.time.chrono.JapaneseEra,int,int,int)> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.chrono.JapaneseEra: java.lang.String getDisplayName(androidx.compose.ui.text.TextStyle,androidx.compose.ui.text.intl.Locale)> -> _SINK_
<java.time.chrono.JapaneseEra: int getValue()> -> _SOURCE_
<java.time.chrono.JapaneseEra: JapaneseEra of(int)> -> _SOURCE_
<java.time.chrono.JapaneseEra: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.JapaneseEra: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.JapaneseEra: JapaneseEra valueOf(java.lang.String)> -> _SOURCE_
<java.time.chrono.JapaneseEra: JapaneseEra[] values()> -> _SOURCE_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyId()> -> _SOURCE_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyText(androidx.compose.ui.text.TextStyle)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendFraction(java.time.temporal.TemporalField,int,int,boolean)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendInstant(int)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendInstant()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLocalized(java.time.format.FormatStyle,java.time.format.FormatStyle)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLocalizedOffset(androidx.compose.ui.text.TextStyle)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOffset(java.lang.String,java.lang.String)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOffsetId()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOptional(java.time.format.DateTimeFormatter)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField,java.util.Map -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField,androidx.compose.ui.text.TextStyle)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField,int,int,java.time.format.SignStyle)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField,int)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValueReduced(java.time.temporal.TemporalField,int,int,java.time.chrono.ChronoLocalDate)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValueReduced(java.time.temporal.TemporalField,int,int,int)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneId()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneOrOffsetId()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneText(androidx.compose.ui.text.TextStyle)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneText(androidx.compose.ui.text.TextStyle,Set<ZoneId>)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: String getLocalizedDateTimePattern(java.time.format.FormatStyle,java.time.format.FormatStyle,java.time.chrono.Chronology,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder optionalStart()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseCaseSensitive()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseDefaulting(java.time.temporal.TemporalField,long)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseLenient()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseStrict()> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter()> -> _SINK_
<java.time.temporal.TemporalAdjuster: Temporal adjustInto(java.time.temporal.Temporal)> -> _SINK_
<java.time.format.DecimalStyle: Set<Locale> getAvailableLocales()> -> _SOURCE_
<java.time.format.DecimalStyle: char getDecimalSeparator()> -> _SOURCE_
<java.time.format.DecimalStyle: char getNegativeSign()> -> _SOURCE_
<java.time.format.DecimalStyle: char getPositiveSign()> -> _SOURCE_
<java.time.format.DecimalStyle: char getZeroDigit()> -> _SOURCE_
<java.time.format.DecimalStyle: int hashCode()> -> _SOURCE_
<java.time.format.DecimalStyle: DecimalStyle of(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.format.DecimalStyle: DecimalStyle ofDefaultLocale()> -> _SOURCE_
<java.time.format.DecimalStyle: java.lang.String toString()> -> _SOURCE_
<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)> -> _SOURCE_
<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)> -> _SOURCE_
<java.time.temporal.TemporalAmount: Temporal addTo(java.time.temporal.Temporal)> -> _SINK_
<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.temporal.TemporalAmount: List<TemporalUnit> getUnits()> -> _SOURCE_
<java.time.temporal.TemporalAccessor: default int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.temporal.TemporalAccessor: default <R> R query(TemporalQuery<R>)> -> _SOURCE_
<java.time.temporal.TemporalAccessor: default ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoChronology getChronology()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoEra getEra()> -> _SOURCE_
<java.time.chrono.MinguoDate: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.MinguoDate: int hashCode()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.MinguoDate: MinguoDate now(java.time.Clock)> -> _SOURCE_
<java.time.chrono.MinguoDate: MinguoDate now(java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.MinguoDate: MinguoDate now()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.MinguoDate: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.temporal.TemporalField: <R extends Temporal> R adjustInto(R,long)> -> _SOURCE_
<java.time.temporal.TemporalField: TemporalUnit getBaseUnit()> -> _SOURCE_
<java.time.temporal.TemporalField: default String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.temporal.TemporalField: TemporalUnit getRangeUnit()> -> _SOURCE_
<java.time.temporal.TemporalField: boolean isDateBased()> -> _SOURCE_
<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.temporal.TemporalField: boolean isTimeBased()> -> _SOURCE_
<java.time.temporal.TemporalField: ValueRange range()> -> _SOURCE_
<java.time.temporal.TemporalField: ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.temporal.TemporalField: default TemporalAccessor resolve(java.util.Map -> _SINK_
<java.time.temporal.TemporalField: String toString()> -> _SOURCE_
<java.time.temporal.TemporalAdjusters: TemporalAdjuster firstDayOfMonth()> -> _SOURCE_
<java.time.temporal.TemporalQueries: TemporalQuery<Chronology> chronology()> -> _SOURCE_
<java.time.temporal.TemporalQueries: TemporalQuery<LocalDate> localDate()> -> _SOURCE_
<java.time.temporal.TemporalQueries: TemporalQuery<LocalTime> localTime()> -> _SOURCE_
<java.time.temporal.TemporalQueries: TemporalQuery<ZoneOffset> offset()> -> _SOURCE_
<java.time.temporal.TemporalQueries: TemporalQuery<TemporalUnit> precision()> -> _SOURCE_
<java.time.temporal.TemporalQueries: TemporalQuery<ZoneId> zone()> -> _SINK_
<java.time.temporal.TemporalQueries: TemporalQuery<ZoneId> zoneId()> -> _SOURCE_
<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)> -> _SOURCE_
<java.time.temporal.TemporalUnit: Duration getDuration()> -> _SOURCE_
<java.time.temporal.TemporalUnit: default boolean isSupportedBy(java.time.temporal.Temporal)> -> _SOURCE_
<java.time.temporal.TemporalUnit: boolean isTimeBased()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField dayOfWeek()> -> _SOURCE_
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)> -> _SOURCE_
<java.time.temporal.WeekFields: int hashCode()> -> _SINK_
<java.time.temporal.WeekFields: WeekFields of(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.time.temporal.WeekFields: java.lang.String toString()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekBasedYear()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfMonth()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfWeekBasedYear()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfYear()> -> _SOURCE_
<java.time.temporal.ValueRange: long getLargestMinimum()> -> _SOURCE_
<java.time.temporal.ValueRange: long getMaximum()> -> _SOURCE_
<java.time.temporal.ValueRange: long getMinimum()> -> _SOURCE_
<java.time.temporal.ValueRange: long getSmallestMaximum()> -> _SOURCE_
<java.time.temporal.ValueRange: boolean isFixed()> -> _SOURCE_
<java.time.temporal.ValueRange: ValueRange of(long,long,long,long)> -> _SOURCE_
<java.time.temporal.ValueRange: ValueRange of(long,long,long)> -> _SOURCE_
<java.time.temporal.ValueRange: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: ThaiBuddhistDate from(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistChronology getChronology()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistEra getEra()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: int hashCode()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: ThaiBuddhistDate now(java.time.Clock)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: ThaiBuddhistDate now(java.time.ZoneId)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: ThaiBuddhistDate now()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: ThaiBuddhistDate of(int,int,int)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.util.AbstractMap.SimpleEntry: K getKey()> -> _SOURCE_
<java.util.AbstractMap.SimpleEntry: V getValue()> -> _SOURCE_
<java.util.AbstractMap.SimpleEntry: int hashCode()> -> _SOURCE_
<java.util.AbstractMap.SimpleEntry: V setValue(V)> -> _SINK_
<java.util.AbstractMap.SimpleEntry: java.lang.String toString()> -> _SOURCE_
<java.util.AbstractSequentialList: E get(int)> -> _SOURCE_
<java.util.AbstractSequentialList: Iterator<E> iterator()> -> _SOURCE_
<java.util.AbstractSequentialList: ListIterator<E> listIterator(int)> -> _SOURCE_
<java.util.AbstractList: E get(int)> -> _SOURCE_
<java.util.AbstractList: int hashCode()> -> _SOURCE_
<java.util.AbstractList: int indexOf(java.lang.Object)> -> _SOURCE_
<java.util.AbstractList: Iterator<E> iterator()> -> _SOURCE_
<java.util.AbstractList: ListIterator<E> listIterator(int)> -> _SOURCE_
<java.util.AbstractList: ListIterator<E> listIterator()> -> _SOURCE_
<android.util.Base64: Base64.Decoder getDecoder()> -> _SOURCE_
<android.util.Base64: Base64.Encoder getEncoder()> -> _SOURCE_
<android.util.Base64: Base64.Decoder getMimeDecoder()> -> _SOURCE_
<android.util.Base64: Base64.Encoder getMimeEncoder()> -> _SOURCE_
<android.util.Base64: Base64.Encoder getMimeEncoder(int,byte[])> -> _SOURCE_
<android.util.Base64: Base64.Decoder getUrlDecoder()> -> _SOURCE_
<android.util.Base64: Base64.Encoder getUrlEncoder()> -> _SOURCE_
<java.time.temporal.Temporal: boolean isSupported(java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.temporal.Temporal: default Temporal minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.temporal.Temporal: Temporal plus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<java.time.temporal.Temporal: default Temporal plus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<java.time.temporal.Temporal: Temporal with(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.time.temporal.Temporal: default Temporal with(java.time.temporal.TemporalAdjuster)> -> _SOURCE_
<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)> -> _SOURCE_
<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)> -> _SINK_
<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)> -> _SOURCE_
<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)> -> _SOURCE_
<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)> -> _SINK_
<java.time.zone.ZoneRules: List<ZoneOffsetTransitionRule> getTransitionRules()> -> _SOURCE_
<java.time.zone.ZoneRules: List<ZoneOffsetTransition> getTransitions()> -> _SOURCE_
<java.time.zone.ZoneRules: List<ZoneOffset> getValidOffsets(java.time.LocalDateTime)> -> _SOURCE_
<java.time.zone.ZoneRules: int hashCode()> -> _SOURCE_
<java.time.zone.ZoneRules: boolean isFixedOffset()> -> _SINK_
<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)> -> _SOURCE_
<java.time.zone.ZoneRules: ZoneRules of(java.time.ZoneOffset,java.time.ZoneOffset,List<ZoneOffsetTransition>,List<ZoneOffsetTransition>,List<ZoneOffsetTransitionRule>)> -> _SOURCE_
<java.time.zone.ZoneRules: ZoneRules of(java.time.ZoneOffset)> -> _SINK_
<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)> -> _SOURCE_
<java.time.zone.ZoneRules: java.lang.String toString()> -> _SOURCE_
<java.time.temporal.TemporalQuery: R queryFrom(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<java.util.AbstractQueue: E element()> -> _SOURCE_
<java.util.ArrayDeque: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.ArrayDeque: E element()> -> _SOURCE_
<java.util.ArrayDeque: E peek()> -> _SOURCE_
<java.util.ArrayDeque: E peekFirst()> -> _SOURCE_
<java.util.ArrayDeque: E peekLast()> -> _SOURCE_
<java.util.ArrayDeque: int size()> -> _SOURCE_
<java.util.ArrayDeque: Object[] toArray()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: int hashCode()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: java.lang.String toString()> -> _SOURCE_
<java.util.AbstractMap.SimpleImmutableEntry: K getKey()> -> _SOURCE_
<java.util.AbstractMap.SimpleImmutableEntry: V getValue()> -> _SOURCE_
<java.util.AbstractMap.SimpleImmutableEntry: int hashCode()> -> _SOURCE_
<java.util.AbstractMap.SimpleImmutableEntry: java.lang.String toString()> -> _SOURCE_
<java.util.BitSet: int cardinality()> -> _SOURCE_
<java.util.BitSet: void clear(int,int)> -> _SINK_
<java.util.BitSet: void clear(int)> -> _SINK_
<java.util.BitSet: void flip(int)> -> _SINK_
<java.util.BitSet: void flip(int,int)> -> _SINK_
<java.util.BitSet: boolean get(int)> -> _SOURCE_
<java.util.BitSet: int hashCode()> -> _SOURCE_
<java.util.BitSet: boolean intersects(java.util.BitSet)> -> _SOURCE_
<java.util.BitSet: boolean isEmpty()> -> _SOURCE_
<java.util.BitSet: int length()> -> _SOURCE_
<java.util.BitSet: void set(int,int,boolean)> -> _SINK_
<java.util.BitSet: void set(int,int)> -> _SINK_
<java.util.BitSet: void set(int)> -> _SINK_
<java.util.BitSet: void set(int,boolean)> -> _SINK_
<java.util.BitSet: java.lang.String toString()> -> _SOURCE_
<java.util.AbstractCollection: Iterator<E> iterator()> -> _SOURCE_
<java.util.AbstractCollection: int size()> -> _SOURCE_
<java.util.AbstractCollection: java.lang.String toString()> -> _SOURCE_
<android.icu.util.Calendar: void add(int,int)> -> _SINK_
<android.icu.util.Calendar: void clear()> -> _SINK_
<android.icu.util.Calendar: void clear(int)> -> _SINK_
<android.icu.util.Calendar: int get(int)> -> _SOURCE_
<android.icu.util.Calendar: int getActualMaximum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getActualMinimum(int)> -> _SOURCE_
<android.icu.util.Calendar: Set<String> getAvailableCalendarTypes()> -> _SOURCE_
<android.icu.util.Calendar: Locale[] getAvailableLocales()> -> _SOURCE_
<android.icu.util.Calendar: java.lang.String getCalendarType()> -> _SOURCE_
<android.icu.util.Calendar: java.lang.String getDisplayName(int,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Calendar: java.util.Map getDisplayNames(int,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Calendar: int getFirstDayOfWeek()> -> _SOURCE_
<android.icu.util.Calendar: int getGreatestMinimum(int)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance()> -> _SINK_
<android.icu.util.Calendar: Calendar getInstance(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<android.icu.util.Calendar: Calendar getInstance(android.icu.util.TimeZone,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Calendar: Calendar getInstance(android.icu.util.TimeZone)> -> _SINK_
<android.icu.util.Calendar: int getLeastMaximum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getMaximum(int)> -> _SOURCE_
<android.icu.util.Calendar: int getMinimum(int)> -> _SOURCE_
<android.icu.util.Calendar: Date getTime()> -> _SOURCE_
<android.icu.util.Calendar: long getTimeInMillis()> -> _SOURCE_
<android.icu.util.Calendar: android.icu.util.TimeZone getTimeZone()> -> _SOURCE_
<android.icu.util.Calendar: int hashCode()> -> _SOURCE_
<android.icu.util.Calendar: boolean isSet(int)> -> _SOURCE_
<android.icu.util.Calendar: void roll(int,boolean)> -> _SINK_
<android.icu.util.Calendar: void roll(int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int,int,int,int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int,int,int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int)> -> _SINK_
<android.icu.util.Calendar: void set(int,int,int)> -> _SINK_
<android.icu.util.Calendar: void setFirstDayOfWeek(int)> -> _SINK_
<android.icu.util.Calendar: void setLenient(boolean)> -> _SINK_
<android.icu.util.Calendar: void setMinimalDaysInFirstWeek(int)> -> _SINK_
<android.icu.util.Calendar: void setTime(java.sql.Date)> -> _SINK_
<android.icu.util.Calendar: void setTimeInMillis(long)> -> _SINK_
<android.icu.util.Calendar: void setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<android.icu.util.Calendar: void setWeekDate(int,int,int)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder set(int,int)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setCalendarType(java.lang.String)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setDate(int,int,int)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setFields(int[])> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setInstant(java.sql.Date)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setInstant(long)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setLenient(boolean)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setTimeOfDay(int,int,int)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setTimeOfDay(int,int,int,int)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setWeekDate(int,int,int)> -> _SINK_
<java.util.Calendar.Builder: java.util.Calendar.Builder setWeekDefinition(int,int)> -> _SINK_
<java.time.zone.ZoneOffsetTransitionRule: java.time.LocalTime getLocalTime()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: java.time.Month getMonth()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getOffsetAfter()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getStandardOffset()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: java.time.zone.ZoneOffsetTransitionRule.TimeDefinition getTimeDefinition()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: int hashCode()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: boolean isMidnightEndOfDay()> -> _SINK_
<java.time.zone.ZoneOffsetTransitionRule: ZoneOffsetTransitionRule of(java.time.Month,int,java.time.DayOfWeek,java.time.LocalTime,boolean,java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,java.time.ZoneOffset,java.time.ZoneOffset,java.time.ZoneOffset)> -> _SINK_
<java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()> -> _SOURCE_
<java.util.Dictionary: Enumeration<V> elements()> -> _SOURCE_
<java.util.Dictionary: V get(java.lang.Object)> -> _SOURCE_
<java.util.Dictionary: boolean isEmpty()> -> _SOURCE_
<java.util.Dictionary: Enumeration<K> keys()> -> _SOURCE_
<java.util.Dictionary: V put(K,V)> -> _SINK_
<java.util.Dictionary: int size()> -> _SOURCE_
<java.util.Base64.Encoder: int encode(byte[],byte[])> -> _SINK_
<java.util.Base64.Encoder: byte[] encode(byte[])> -> _SINK_
<java.util.Base64.Encoder: java.nio.ByteBuffer encode(java.nio.ByteBuffer)> -> _SINK_
<java.util.Base64.Encoder: java.lang.String encodeToString(byte[])> -> _SINK_
<java.util.Base64.Encoder: java.util.Base64.Encoder withoutPadding()> -> _SOURCE_
<java.util.Base64.Encoder: java.io.OutputStream wrap(java.io.OutputStream)> -> _SINK_
<android.icu.util.Currency: Set<Currency> getAvailableCurrencies()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getCurrencyCode()> -> _SOURCE_
<android.icu.util.Currency: int getDefaultFractionDigits()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getDisplayName()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Currency: Currency getInstance(java.lang.String)> -> _SOURCE_
<android.icu.util.Currency: Currency getInstance(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Currency: int getNumericCode()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getSymbol(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.Currency: java.lang.String getSymbol()> -> _SOURCE_
<android.icu.util.Currency: java.lang.String toString()> -> _SOURCE_
<java.util.DuplicateFormatFlagsException: java.lang.String getFlags()> -> _SOURCE_
<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()> -> _SOURCE_
<java.util.AbstractMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.AbstractMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.AbstractMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.AbstractMap: int hashCode()> -> _SOURCE_
<java.util.AbstractMap: boolean isEmpty()> -> _SOURCE_
<java.util.AbstractMap: Set<K> keySet()> -> _SOURCE_
<java.util.AbstractMap: int size()> -> _SOURCE_
<java.util.AbstractMap: java.lang.String toString()> -> _SOURCE_
<java.util.AbstractMap: Collection<V> values()> -> _SOURCE_
<java.util.Collection: int hashCode()> -> _SOURCE_
<java.util.Collection: Iterator<E> iterator()> -> _SOURCE_
<java.util.Collection: int size()> -> _SOURCE_
<java.util.Collection: default  T[] toArray(IntFunction<T[]>)> -> _SOURCE_
<java.util.AbstractSet: int hashCode()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: void accept(double)> -> _SOURCE_
<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)> -> _SINK_
<java.util.DoubleSummaryStatistics: double getAverage()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: long getCount()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: double getMax()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: double getMin()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: double getSum()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: java.lang.String toString()> -> _SOURCE_
<java.util.Arrays: int binarySearch(byte[],int,int,byte)> -> _SOURCE_
<java.util.Arrays: int binarySearch(long[],int,int,long)> -> _SINK_
<java.util.Arrays: int binarySearch(double[],double)> -> _SOURCE_
<java.util.Arrays: int binarySearch(float[],float)> -> _SINK_
<java.util.Arrays: int binarySearch(char[],int,int,char)> -> _SINK_
<java.util.Arrays: int binarySearch(long[],long)> -> _SOURCE_
<java.util.Arrays: int binarySearch(float[],int,int,float)> -> _SINK_
<java.util.Arrays: int binarySearch(byte[],byte)> -> _SOURCE_
<java.util.Arrays: int binarySearch(double[],int,int,double)> -> _SOURCE_
<java.util.Arrays: String deepToString(Object[])> -> _SOURCE_
<java.util.Arrays: void fill(float[],int,int,float)> -> _SINK_
<java.util.Arrays: void fill(byte[],int,int,byte)> -> _SINK_
<java.util.Arrays: void fill(char[],char)> -> _SINK_
<java.util.Arrays: void fill(boolean[],int,int,boolean)> -> _SINK_
<java.util.Arrays: void fill(long[],int,int,long)> -> _SINK_
<java.util.Arrays: void fill(char[],int,int,char)> -> _SINK_
<java.util.Arrays: void fill(double[],double)> -> _SINK_
<java.util.Arrays: void fill(long[],long)> -> _SINK_
<java.util.Arrays: void fill(byte[],byte)> -> _SINK_
<java.util.Arrays: void fill(double[],int,int,double)> -> _SINK_
<java.util.Arrays: void fill(short[],int,int,short)> -> _SINK_
<java.util.Arrays: void fill(boolean[],boolean)> -> _SINK_
<java.util.Arrays: void fill(int[],int)> -> _SINK_
<java.util.Arrays: int mismatch(byte[],byte[])> -> _SOURCE_
<java.util.Arrays: void parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)> -> _SINK_
<java.util.Arrays: void parallelSetAll(double[],java.util.function.IntToDoubleFunction)> -> _SINK_
<java.util.Arrays: void parallelSetAll(int[],java.util.function.IntUnaryOperator)> -> _SINK_
<java.util.Arrays: void parallelSetAll(long[],java.util.function.IntToLongFunction)> -> _SINK_
<java.util.Arrays:  void parallelSetAll(T[],IntFunction<?)> -> _SINK_
<java.util.Arrays: Spliterator.OfDouble spliterator(double[])> -> _SOURCE_
<java.util.Arrays: Spliterator.OfDouble spliterator(double[],int,int)> -> _SOURCE_
<java.util.Arrays: DoubleStream stream(double[],int,int)> -> _SOURCE_
<java.util.Arrays: LongStream stream(long[],int,int)> -> _SOURCE_
<java.util.Arrays: IntStream stream(int[])> -> _SOURCE_
<java.util.Arrays: LongStream stream(long[])> -> _SOURCE_
<java.util.Arrays:  Stream stream(T[])> -> _SOURCE_
<java.util.Arrays: IntStream stream(int[],int,int)> -> _SOURCE_
<java.util.Arrays:  Stream stream(T[],int,int)> -> _SOURCE_
<java.util.Arrays: String toString(float[])> -> _SOURCE_
<java.util.Arrays: String toString(long[])> -> _SOURCE_
<java.util.Arrays: String toString(double[])> -> _SOURCE_
<java.util.Arrays: String toString(short[])> -> _SOURCE_
<java.util.Arrays: String toString(char[])> -> _SOURCE_
<java.util.Arrays: String toString(byte[])> -> _SOURCE_
<java.util.Arrays: String toString(int[])> -> _SOURCE_
<java.util.Arrays: String toString(Object[])> -> _SOURCE_
<java.util.Arrays: String toString(boolean[])> -> _SOURCE_
<java.util.Base64.Decoder: byte[] decode(java.lang.String)> -> _SOURCE_
<java.util.Base64.Decoder: int decode(byte[],byte[])> -> _SOURCE_
<java.util.Base64.Decoder: byte[] decode(byte[])> -> _SOURCE_
<java.util.Base64.Decoder: java.io.InputStream wrap(java.io.InputStream)> -> _SOURCE_
<java.util.EventObject: java.lang.Object getSource()> -> _SOURCE_
<java.util.Deque: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.Deque: E element()> -> _SOURCE_
<java.util.Deque: E peek()> -> _SOURCE_
<java.util.Deque: E peekFirst()> -> _SOURCE_
<java.util.Deque: E peekLast()> -> _SOURCE_
<java.util.Deque: int size()> -> _SOURCE_
<java.sql.Date: Date from(java.time.Instant)> -> _SOURCE_
<java.sql.Date: int getDate()> -> _SOURCE_
<java.sql.Date: int getDay()> -> _SOURCE_
<java.sql.Date: int getHours()> -> _SOURCE_
<java.sql.Date: int getMinutes()> -> _SOURCE_
<java.sql.Date: int getMonth()> -> _SOURCE_
<java.sql.Date: int getSeconds()> -> _SOURCE_
<java.sql.Date: long getTime()> -> _SOURCE_
<java.sql.Date: int getYear()> -> _SOURCE_
<java.sql.Date: int hashCode()> -> _SOURCE_
<java.sql.Date: long parse(java.lang.String)> -> _SOURCE_
<java.sql.Date: void setTime(long)> -> _SINK_
<java.sql.Date: java.lang.String toGMTString()> -> _SOURCE_
<java.sql.Date: java.lang.String toLocaleString()> -> _SOURCE_
<java.util.FormatFlagsConversionMismatchException: char getConversion()> -> _SOURCE_
<java.util.FormatFlagsConversionMismatchException: java.lang.String getFlags()> -> _SOURCE_
<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()> -> _SOURCE_
<java.util.Collections: <K, V> java.util.Map checkedMap(java.util.Map,Class<V>)> -> _SOURCE_
<java.util.Collections: <K, V> Navigablejava.util.Map checkedNavigableMap(Navigablejava.util.Map,Class<V>)> -> _SOURCE_
<java.util.Collections:  Enumeration emptyEnumeration()> -> _SOURCE_
<java.util.Collections:  ListIterator emptyListIterator()> -> _SOURCE_
<java.util.Collections: <K, V> java.util.Map emptyMap()> -> _SOURCE_
<java.util.Collections: <K, V> Navigablejava.util.Map emptyNavigableMap()> -> _SOURCE_
<java.util.Collections: <E> NavigableSet<E> emptyNavigableSet()> -> _SOURCE_
<java.util.Collections:  Enumeration enumeration(Collection)> -> _SOURCE_
<java.util.Collections: int frequency(Collection<?>,java.lang.Object)> -> _SOURCE_
<java.util.Collections: int lastIndexOfSubList(List<?>,List<?>)> -> _SOURCE_
<java.util.Collections:  ArrayList list(Enumeration)> -> _SOURCE_
<java.util.Collections: <T extends Object & Comparable<? super T>> T max(Collection<?)> -> _SOURCE_
<java.util.Collections: <T extends Object & Comparable<? super T>> T min(Collection<?)> -> _SOURCE_
<java.util.Collections: <E> Set<E> newSetFromMap(java.util.Map -> _SOURCE_
<java.util.Collections: void shuffle(List<?>,java.util.Random)> -> _SINK_
<java.util.Collections: void shuffle(List<?>)> -> _SINK_
<java.util.Collections:  Set singleton(T)> -> _SOURCE_
<java.util.Collections: <K, V> java.util.Map singletonMap(K,V)> -> _SOURCE_
<java.util.Collections:  List synchronizedList(List)> -> _SOURCE_
<java.util.Collections:  Collection unmodifiableCollection(Collection<?)> -> _SOURCE_
<java.util.Collections:  List unmodifiableList(List<?)> -> _SOURCE_
<java.util.Collections: <K, V> java.util.Map unmodifiableMap(Map<?)> -> _SOURCE_
<java.util.Collections: <K, V> Navigablejava.util.Map unmodifiableNavigableMap(Navigablejava.util.Map -> _SOURCE_
<java.util.Collections:  NavigableSet unmodifiableNavigableSet(NavigableSet)> -> _SOURCE_
<java.util.Collections:  Set unmodifiableSet(Set<?)> -> _SOURCE_
<java.util.Collections: <K, V> Sortedjava.util.Map unmodifiableSortedMap(Sortedjava.util.Map -> _SOURCE_
<java.util.Collections:  SortedSet unmodifiableSortedSet(SortedSet)> -> _SOURCE_
<java.util.IllegalFormatConversionException: Class<?> getArgumentClass()> -> _SOURCE_
<java.util.IllegalFormatConversionException: char getConversion()> -> _SOURCE_
<java.util.IllegalFormatConversionException: java.lang.String getMessage()> -> _SOURCE_
<java.util.HashMap: V compute(K,BiFunction<?)> -> _SOURCE_
<java.util.HashMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.HashMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.HashMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.HashMap: V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.HashMap: boolean isEmpty()> -> _SOURCE_
<java.util.HashMap: Set<K> keySet()> -> _SOURCE_
<java.util.HashMap: V merge(K,V,BiFunction<?)> -> _SOURCE_
<java.util.HashMap: V put(K,V)> -> _SOURCE_
<java.util.HashMap: V putIfAbsent(K,V)> -> _SOURCE_
<java.util.HashMap: V replace(K,V)> -> _SINK_
<java.util.HashMap: int size()> -> _SOURCE_
<java.util.HashMap: Collection<V> values()> -> _SOURCE_
<java.util.IllegalFormatFlagsException: java.lang.String getFlags()> -> _SOURCE_
<java.util.IllegalFormatFlagsException: java.lang.String getMessage()> -> _SOURCE_
<android.icu.util.IllformedLocaleException: int getErrorIndex()> -> _SOURCE_
<java.util.IllegalFormatPrecisionException: java.lang.String getMessage()> -> _SOURCE_
<java.util.IllegalFormatPrecisionException: int getPrecision()> -> _SOURCE_
<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.IdentityHashMap: boolean containsValue(java.lang.Object)> -> _SOURCE_
<java.util.IdentityHashMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.IdentityHashMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.IdentityHashMap: int hashCode()> -> _SOURCE_
<java.util.IdentityHashMap: boolean isEmpty()> -> _SOURCE_
<java.util.IdentityHashMap: Set<K> keySet()> -> _SOURCE_
<java.util.IdentityHashMap: V put(K,V)> -> _SOURCE_
<java.util.IdentityHashMap: int size()> -> _SOURCE_
<java.util.IdentityHashMap: Collection<V> values()> -> _SOURCE_
<java.util.Hashtable: V compute(K,BiFunction<?)> -> _SOURCE_
<java.util.Hashtable: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.Hashtable: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.Hashtable: boolean containsValue(java.lang.Object)> -> _SOURCE_
<java.util.Hashtable: Enumeration<V> elements()> -> _SOURCE_
<java.util.Hashtable: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.Hashtable: V get(java.lang.Object)> -> _SOURCE_
<java.util.Hashtable: V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.Hashtable: int hashCode()> -> _SOURCE_
<java.util.Hashtable: boolean isEmpty()> -> _SOURCE_
<java.util.Hashtable: Set<K> keySet()> -> _SOURCE_
<java.util.Hashtable: Enumeration<K> keys()> -> _SOURCE_
<java.util.Hashtable: V merge(K,V,BiFunction<?)> -> _SOURCE_
<java.util.Hashtable: V put(K,V)> -> _SOURCE_
<java.util.Hashtable: V putIfAbsent(K,V)> -> _SOURCE_
<java.util.Hashtable: V replace(K,V)> -> _SINK_
<java.util.Hashtable: int size()> -> _SOURCE_
<java.util.Hashtable: java.lang.String toString()> -> _SOURCE_
<java.util.Hashtable: Collection<V> values()> -> _SOURCE_
<java.util.IllegalFormatWidthException: java.lang.String getMessage()> -> _SOURCE_
<java.util.IllegalFormatWidthException: int getWidth()> -> _SOURCE_
<java.util.HashSet: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.HashSet: boolean isEmpty()> -> _SOURCE_
<java.util.HashSet: Iterator<E> iterator()> -> _SOURCE_
<java.util.HashSet: int size()> -> _SOURCE_
<java.util.Formattable: void formatTo(android.text.format.Formatter,int,int,int)> -> _SOURCE_
<java.util.IntSummaryStatistics: void accept(int)> -> _SINK_
<java.util.IntSummaryStatistics: double getAverage()> -> _SOURCE_
<java.util.IntSummaryStatistics: long getCount()> -> _SOURCE_
<java.util.IntSummaryStatistics: int getMax()> -> _SOURCE_
<java.util.IntSummaryStatistics: int getMin()> -> _SOURCE_
<java.util.IntSummaryStatistics: long getSum()> -> _SOURCE_
<java.util.IntSummaryStatistics: java.lang.String toString()> -> _SOURCE_
<java.util.IllegalFormatCodePointException: int getCodePoint()> -> _SOURCE_
<java.util.IllegalFormatCodePointException: java.lang.String getMessage()> -> _SOURCE_
<java.util.Locale.Builder: java.util.Locale.Builder addUnicodeLocaleAttribute(java.lang.String)> -> _SINK_
<java.util.Locale.Builder: androidx.compose.ui.text.intl.Locale build()> -> _SOURCE_
<java.util.Locale.Builder: java.util.Locale.Builder removeUnicodeLocaleAttribute(java.lang.String)> -> _SINK_
<java.util.Locale.Builder: java.util.Locale.Builder setExtension(char,java.lang.String)> -> _SINK_
<java.util.Locale.Builder: java.util.Locale.Builder setLanguage(java.lang.String)> -> _SINK_
<java.util.Locale.Builder: java.util.Locale.Builder setRegion(java.lang.String)> -> _SINK_
<java.util.Locale.Builder: java.util.Locale.Builder setScript(java.lang.String)> -> _SINK_
<java.util.Locale.Builder: java.util.Locale.Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)> -> _SINK_
<java.util.Locale.Builder: java.util.Locale.Builder setVariant(java.lang.String)> -> _SINK_
<java.util.EnumMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.EnumMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.EnumMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.EnumMap: int hashCode()> -> _SOURCE_
<java.util.EnumMap: Set<K> keySet()> -> _SOURCE_
<java.util.EnumMap: V put(K,V)> -> _SOURCE_
<java.util.EnumMap: int size()> -> _SOURCE_
<java.util.EnumMap: Collection<V> values()> -> _SOURCE_
<java.util.LinkedList: void addFirst(E)> -> _SINK_
<java.util.LinkedList: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.LinkedList: E element()> -> _SOURCE_
<java.util.LinkedList: E get(int)> -> _SOURCE_
<java.util.LinkedList: E getFirst()> -> _SOURCE_
<java.util.LinkedList: E getLast()> -> _SOURCE_
<java.util.LinkedList: int indexOf(java.lang.Object)> -> _SOURCE_
<java.util.LinkedList: ListIterator<E> listIterator(int)> -> _SOURCE_
<java.util.LinkedList: boolean offerFirst(E)> -> _SINK_
<java.util.LinkedList: E peek()> -> _SOURCE_
<java.util.LinkedList: Object[] toArray()> -> _SOURCE_
<android.icu.util.GregorianCalendar: void add(int,int)> -> _SINK_
<android.icu.util.GregorianCalendar: GregorianCalendar from(java.time.ZonedDateTime)> -> _SINK_
<android.icu.util.GregorianCalendar: int getActualMaximum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getActualMinimum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: java.lang.String getCalendarType()> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getGreatestMinimum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getLeastMaximum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getMaximum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getMinimum(int)> -> _SOURCE_
<android.icu.util.GregorianCalendar: android.icu.util.TimeZone getTimeZone()> -> _SOURCE_
<android.icu.util.GregorianCalendar: int getWeeksInWeekYear()> -> _SOURCE_
<android.icu.util.GregorianCalendar: int hashCode()> -> _SOURCE_
<android.icu.util.GregorianCalendar: void roll(int,boolean)> -> _SINK_
<android.icu.util.GregorianCalendar: void roll(int,int)> -> _SINK_
<android.icu.util.GregorianCalendar: void setGregorianChange(java.sql.Date)> -> _SINK_
<android.icu.util.GregorianCalendar: void setTimeZone(android.icu.util.TimeZone)> -> _SINK_
<android.icu.util.GregorianCalendar: void setWeekDate(int,int,int)> -> _SINK_
<androidx.compose.ui.text.intl.Locale: List<Locale> filter(List<Locale.LanguageRange>,Collection<Locale>)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: List<Locale> filter(List<Locale.LanguageRange>,Collection<Locale>,java.util.Locale.FilteringMode)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: List<String> filterTags(List<Locale.LanguageRange>,Collection<String>,java.util.Locale.FilteringMode)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: List<String> filterTags(List<Locale.LanguageRange>,Collection<String>)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Locale forLanguageTag(java.lang.String)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Locale[] getAvailableLocales()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getCountry()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Locale getDefault(java.util.Locale.Category)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Locale getDefault()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayCountry(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayCountry()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayLanguage(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayLanguage()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayName()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayScript()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayScript(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayVariant(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getDisplayVariant()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getExtension(char)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Set<Character> getExtensionKeys()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getISO3Country()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getISO3Language()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: String[] getISOCountries()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: String[] getISOLanguages()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getLanguage()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getScript()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Set<String> getUnicodeLocaleAttributes()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Set<String> getUnicodeLocaleKeys()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String getVariant()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: boolean hasExtensions()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: Locale lookup(List<Locale.LanguageRange>,Collection<Locale>)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: String lookupTag(List<Locale.LanguageRange>,Collection<String>)> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: void setDefault(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<androidx.compose.ui.text.intl.Locale: void setDefault(java.util.Locale.Category,androidx.compose.ui.text.intl.Locale)> -> _SINK_
<androidx.compose.ui.text.intl.Locale: androidx.compose.ui.text.intl.Locale stripExtensions()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String toLanguageTag()> -> _SOURCE_
<androidx.compose.ui.text.intl.Locale: java.lang.String toString()> -> _SOURCE_
<java.util.ListResourceBundle: Enumeration<String> getKeys()> -> _SOURCE_
<java.util.ListIterator: int nextIndex()> -> _SOURCE_
<java.util.ListIterator: int previousIndex()> -> _SOURCE_
<java.util.Map: default V compute(K,BiFunction<?)> -> _SOURCE_
<java.util.Map: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map copyOf(Map<?)> -> _SOURCE_
<java.util.Map: <K, V> Entry<K, V> entry(K,V)> -> _SOURCE_
<java.util.Map: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.Map: V get(java.lang.Object)> -> _SOURCE_
<java.util.Map: default V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.Map: int hashCode()> -> _SOURCE_
<java.util.Map: boolean isEmpty()> -> _SOURCE_
<java.util.Map: Set<K> keySet()> -> _SOURCE_
<java.util.Map: default V merge(K,V,BiFunction<?)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V,K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of()> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V,K,V,K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V,K,V,K,V,K,V)> -> _SOURCE_
<java.util.Map: <K, V> java.util.Map of(K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V)> -> _SINK_
<java.util.Map: <K, V> java.util.Map ofEntries(Entry[]<?)> -> _SOURCE_
<java.util.Map: default V putIfAbsent(K,V)> -> _SOURCE_
<java.util.Map: default V replace(K,V)> -> _SINK_
<java.util.Map: int size()> -> _SOURCE_
<java.util.Map: Collection<V> values()> -> _SOURCE_
<java.util.List: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.List: E get(int)> -> _SOURCE_
<java.util.List: int hashCode()> -> _SOURCE_
<java.util.List: int indexOf(java.lang.Object)> -> _SOURCE_
<java.util.List: Iterator<E> iterator()> -> _SOURCE_
<java.util.List: ListIterator<E> listIterator(int)> -> _SOURCE_
<java.util.List: ListIterator<E> listIterator()> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E,E,E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E,E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of()> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E,E,E,E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E[])> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E,E,E,E)> -> _SOURCE_
<java.util.List: <E> List<E> of(E)> -> _SOURCE_
<java.util.List: Object[] toArray()> -> _SOURCE_
<java.util.MissingResourceException: java.lang.String getClassName()> -> _SOURCE_
<java.util.MissingResourceException: java.lang.String getKey()> -> _SOURCE_
<java.util.Locale.LanguageRange: java.lang.String getRange()> -> _SOURCE_
<java.util.Locale.LanguageRange: double getWeight()> -> _SOURCE_
<java.util.Locale.LanguageRange: List<Locale.LanguageRange> mapEquivalents(List<Locale.LanguageRange>,java.util.Map -> _SINK_
<java.util.Locale.LanguageRange: List<Locale.LanguageRange> parse(java.lang.String)> -> _SOURCE_
<java.util.Locale.LanguageRange: List<Locale.LanguageRange> parse(java.lang.String,java.util.Map -> _SINK_
<java.util.MissingFormatArgumentException: java.lang.String getFormatSpecifier()> -> _SOURCE_
<java.util.MissingFormatArgumentException: java.lang.String getMessage()> -> _SOURCE_
<android.text.format.Formatter: android.text.format.Formatter format(androidx.compose.ui.text.intl.Locale,java.lang.String,Object[])> -> _SINK_
<android.text.format.Formatter: android.text.format.Formatter format(java.lang.String,Object[])> -> _SINK_
<android.text.format.Formatter: androidx.compose.ui.text.intl.Locale locale()> -> _SOURCE_
<android.text.format.Formatter: java.lang.String toString()> -> _SOURCE_
<java.util.LongSummaryStatistics: void accept(long)> -> _SINK_
<java.util.LongSummaryStatistics: double getAverage()> -> _SOURCE_
<java.util.LongSummaryStatistics: long getCount()> -> _SOURCE_
<java.util.LongSummaryStatistics: long getMax()> -> _SOURCE_
<java.util.LongSummaryStatistics: long getMin()> -> _SOURCE_
<java.util.LongSummaryStatistics: long getSum()> -> _SOURCE_
<java.util.LongSummaryStatistics: java.lang.String toString()> -> _SOURCE_
<java.util.NavigableMap: Entry<K, V> ceilingEntry(K)> -> _SOURCE_
<java.util.NavigableMap: K ceilingKey(K)> -> _SOURCE_
<java.util.NavigableMap: NavigableSet<K> descendingKeySet()> -> _SOURCE_
<java.util.NavigableMap: Navigablejava.util.Map descendingMap()> -> _SOURCE_
<java.util.NavigableMap: Entry<K, V> firstEntry()> -> _SOURCE_
<java.util.NavigableMap: Entry<K, V> floorEntry(K)> -> _SOURCE_
<java.util.NavigableMap: K floorKey(K)> -> _SOURCE_
<java.util.NavigableMap: Sortedjava.util.Map headMap(K)> -> _SOURCE_
<java.util.NavigableMap: Navigablejava.util.Map headMap(K,boolean)> -> _SOURCE_
<java.util.NavigableMap: Entry<K, V> higherEntry(K)> -> _SOURCE_
<java.util.NavigableMap: K higherKey(K)> -> _SOURCE_
<java.util.NavigableMap: Entry<K, V> lastEntry()> -> _SOURCE_
<java.util.NavigableMap: Entry<K, V> lowerEntry(K)> -> _SOURCE_
<java.util.NavigableMap: K lowerKey(K)> -> _SOURCE_
<java.util.NavigableMap: NavigableSet<K> navigableKeySet()> -> _SOURCE_
<java.util.NavigableMap: Sortedjava.util.Map subMap(K,K)> -> _SOURCE_
<java.util.NavigableMap: Navigablejava.util.Map subMap(K,boolean,K,boolean)> -> _SOURCE_
<java.util.NavigableMap: Navigablejava.util.Map tailMap(K,boolean)> -> _SOURCE_
<java.util.NavigableMap: Sortedjava.util.Map tailMap(K)> -> _SOURCE_
<java.util.MissingFormatWidthException: java.lang.String getFormatSpecifier()> -> _SOURCE_
<java.util.MissingFormatWidthException: java.lang.String getMessage()> -> _SOURCE_
<java.util.NavigableSet: NavigableSet<E> descendingSet()> -> _SOURCE_
<java.util.NavigableSet: NavigableSet<E> subSet(E,boolean,E,boolean)> -> _SOURCE_
<java.util.NavigableSet: SortedSet<E> subSet(E,E)> -> _SOURCE_
<java.util.Objects: int hashCode(java.lang.Object)> -> _SOURCE_
<java.util.Objects:  T requireNonNullElse(T,T)> -> _SOURCE_
<java.util.Objects:  T requireNonNullElseGet(T,Supplier<?)> -> _SOURCE_
<java.util.Objects: String toString(java.lang.Object)> -> _SOURCE_
<java.util.Objects: String toString(java.lang.Object,java.lang.String)> -> _SOURCE_
<java.util.Map.Entry: <K, V> Comparator<Entry<K, V>> comparingByKey(Comparator<?)> -> _SOURCE_
<java.util.Map.Entry: K getKey()> -> _SOURCE_
<java.util.Map.Entry: V getValue()> -> _SOURCE_
<java.util.Map.Entry: int hashCode()> -> _SOURCE_
<android.database.Observable: int countObservers()> -> _SOURCE_
<java.util.OptionalInt: OptionalInt empty()> -> _SOURCE_
<java.util.OptionalInt: int getAsInt()> -> _SOURCE_
<java.util.OptionalInt: int hashCode()> -> _SOURCE_
<java.util.OptionalInt: OptionalInt of(int)> -> _SOURCE_
<java.util.OptionalInt: int orElse(int)> -> _SOURCE_
<java.util.OptionalInt: <X extends Throwable> int orElseThrow(Supplier<?)> -> _SOURCE_
<java.util.OptionalInt: int orElseThrow()> -> _SOURCE_
<java.util.OptionalInt: java.lang.String toString()> -> _SOURCE_
<java.util.OptionalLong: OptionalLong empty()> -> _SOURCE_
<java.util.OptionalLong: long getAsLong()> -> _SOURCE_
<java.util.OptionalLong: int hashCode()> -> _SOURCE_
<java.util.OptionalLong: OptionalLong of(long)> -> _SOURCE_
<java.util.OptionalLong: long orElse(long)> -> _SOURCE_
<java.util.OptionalLong: <X extends Throwable> long orElseThrow(Supplier<?)> -> _SOURCE_
<java.util.OptionalLong: long orElseThrow()> -> _SOURCE_
<java.util.OptionalLong: java.lang.String toString()> -> _SOURCE_
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.Properties: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<java.util.Properties: void list(java.io.PrintStream)> -> _SOURCE_
<java.util.Properties: void list(java.io.PrintWriter)> -> _SOURCE_
<java.util.Properties: void load(java.io.InputStream)> -> _SOURCE_
<java.util.Properties: void load(android.se.omapi.Reader)> -> _SOURCE_
<java.util.Properties: void loadFromXML(java.io.InputStream)> -> _SOURCE_
<java.util.Properties: Enumeration<?> propertyNames()> -> _SOURCE_
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)> -> _SINK_
<java.util.Properties: void store(java.io.Writer,java.lang.String)> -> _SINK_
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)> -> _SINK_
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)> -> _SINK_
<java.util.Properties: Set<String> stringPropertyNames()> -> _SOURCE_
<java.util.PropertyResourceBundle: Enumeration<String> getKeys()> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional:  Optional empty()> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: Optional filter(Predicate<?)> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: T get()> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: int hashCode()> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional:  Optional of(T)> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional:  Optional ofNullable(T)> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: T orElse(T)> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: <X extends Throwable> T orElseThrow(Supplier<?)> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: T orElseThrow()> -> _SOURCE_
<androidx.camera.core.impl.utils.Optional: java.lang.String toString()> -> _SOURCE_
<java.util.Queue: E element()> -> _SOURCE_
<java.util.Queue: E peek()> -> _SOURCE_
<java.util.ServiceLoader: java.lang.String toString()> -> _SOURCE_
<java.util.Random: java.util.stream.DoubleStream doubles(long)> -> _SOURCE_
<java.util.Random: java.util.stream.DoubleStream doubles(long,double,double)> -> _SOURCE_
<java.util.Random: java.util.stream.IntStream ints(long)> -> _SOURCE_
<java.util.Random: java.util.stream.LongStream longs()> -> _SOURCE_
<java.util.Random: java.util.stream.LongStream longs(long)> -> _SOURCE_
<java.util.Random: void nextBytes(byte[])> -> _SINK_
<java.util.Random: void setSeed(long)> -> _SINK_
<java.util.OptionalDouble: OptionalDouble empty()> -> _SOURCE_
<java.util.OptionalDouble: double getAsDouble()> -> _SOURCE_
<java.util.OptionalDouble: int hashCode()> -> _SOURCE_
<java.util.OptionalDouble: OptionalDouble of(double)> -> _SOURCE_
<java.util.OptionalDouble: double orElse(double)> -> _SOURCE_
<java.util.OptionalDouble: <X extends Throwable> double orElseThrow(Supplier<?)> -> _SOURCE_
<java.util.OptionalDouble: double orElseThrow()> -> _SOURCE_
<java.util.Scanner: java.util.regex.Pattern delimiter()> -> _SOURCE_
<java.util.Scanner: boolean hasNext()> -> _SOURCE_
<java.util.Scanner: boolean hasNext(java.lang.String)> -> _SOURCE_
<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)> -> _SOURCE_
<java.util.Scanner: boolean hasNextBigDecimal()> -> _SOURCE_
<java.util.Scanner: boolean hasNextBigInteger(int)> -> _SOURCE_
<java.util.Scanner: boolean hasNextBigInteger()> -> _SOURCE_
<java.util.Scanner: boolean hasNextBoolean()> -> _SOURCE_
<java.util.Scanner: boolean hasNextByte()> -> _SOURCE_
<java.util.Scanner: boolean hasNextByte(int)> -> _SOURCE_
<java.util.Scanner: boolean hasNextDouble()> -> _SOURCE_
<java.util.Scanner: boolean hasNextFloat()> -> _SOURCE_
<java.util.Scanner: boolean hasNextInt()> -> _SOURCE_
<java.util.Scanner: boolean hasNextInt(int)> -> _SOURCE_
<java.util.Scanner: boolean hasNextLong()> -> _SOURCE_
<java.util.Scanner: boolean hasNextLong(int)> -> _SOURCE_
<java.util.Scanner: boolean hasNextShort()> -> _SOURCE_
<java.util.Scanner: boolean hasNextShort(int)> -> _SOURCE_
<java.util.Scanner: java.io.IOException ioException()> -> _SOURCE_
<java.util.Scanner: androidx.compose.ui.text.intl.Locale locale()> -> _SOURCE_
<java.util.Scanner: java.util.regex.MatchResult match()> -> _SOURCE_
<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)> -> _SOURCE_
<java.util.Scanner: java.lang.String next(java.lang.String)> -> _SOURCE_
<java.util.Scanner: android.icu.math.BigDecimal nextBigDecimal()> -> _SOURCE_
<java.util.Scanner: java.math.BigInteger nextBigInteger()> -> _SOURCE_
<java.util.Scanner: java.math.BigInteger nextBigInteger(int)> -> _SOURCE_
<java.util.Scanner: boolean nextBoolean()> -> _SOURCE_
<java.util.Scanner: byte nextByte(int)> -> _SOURCE_
<java.util.Scanner: byte nextByte()> -> _SOURCE_
<java.util.Scanner: float nextFloat()> -> _SOURCE_
<java.util.Scanner: int radix()> -> _SOURCE_
<java.util.Scanner: java.util.Scanner useLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<java.util.Scanner: java.util.Scanner useRadix(int)> -> _SINK_
<java.util.SortedSet: Comparator<? super E> comparator()> -> _SOURCE_
<java.util.SortedSet: E first()> -> _SOURCE_
<java.util.SortedSet: SortedSet<E> subSet(E,E)> -> _SOURCE_
<java.util.SortedSet: SortedSet<E> tailSet(E)> -> _SOURCE_
<java.util.Set: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.Set: boolean containsAll(Collection<?>)> -> _SOURCE_
<java.util.Set: int hashCode()> -> _SOURCE_
<java.util.Set: boolean isEmpty()> -> _SOURCE_
<java.util.Set: Iterator<E> iterator()> -> _SOURCE_
<java.util.Set: <E> Set<E> of(E)> -> _SOURCE_
<java.util.Set: int size()> -> _SOURCE_
<java.util.Set: Object[] toArray()> -> _SOURCE_
<java.util.ResourceBundle.Control: List<Locale> getCandidateLocales(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.util.ResourceBundle.Control: ResourceBundle.Control getControl(List<String>)> -> _SOURCE_
<java.util.ResourceBundle.Control: androidx.compose.ui.text.intl.Locale getFallbackLocale(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.util.ResourceBundle.Control: List<String> getFormats(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle.Control: ResourceBundle.Control getNoFallbackControl(List<String>)> -> _SOURCE_
<java.util.ResourceBundle.Control: long getTimeToLive(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.util.ResourceBundle.Control: java.lang.String toBundleName(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.util.ResourceBundle.Control: String toResourceName(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.LinkedHashMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.LinkedHashMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.LinkedHashMap: V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.LinkedHashMap: Set<K> keySet()> -> _SOURCE_
<java.util.LinkedHashMap: Collection<V> values()> -> _SOURCE_
<java.util.Spliterator: int characteristics()> -> _SOURCE_
<java.util.Spliterator: long estimateSize()> -> _SOURCE_
<java.util.SortedMap: Comparator<? super K> comparator()> -> _SOURCE_
<java.util.SortedMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.SortedMap: K firstKey()> -> _SOURCE_
<java.util.SortedMap: Sortedjava.util.Map headMap(K)> -> _SOURCE_
<java.util.SortedMap: Set<K> keySet()> -> _SOURCE_
<java.util.SortedMap: K lastKey()> -> _SOURCE_
<java.util.SortedMap: Sortedjava.util.Map subMap(K,K)> -> _SOURCE_
<java.util.SortedMap: Sortedjava.util.Map tailMap(K)> -> _SOURCE_
<java.util.SortedMap: Collection<V> values()> -> _SOURCE_
<java.util.Spliterators.AbstractLongSpliterator: int characteristics()> -> _SOURCE_
<java.util.Spliterators.AbstractLongSpliterator: long estimateSize()> -> _SOURCE_
<java.util.SimpleTimeZone: java.lang.Object clone()> -> _SOURCE_
<java.util.SimpleTimeZone: int getDSTSavings()> -> _SOURCE_
<java.util.SimpleTimeZone: int getOffset(long)> -> _SOURCE_
<java.util.SimpleTimeZone: int getOffset(int,int,int,int,int,int)> -> _SOURCE_
<java.util.SimpleTimeZone: int getRawOffset()> -> _SOURCE_
<java.util.SimpleTimeZone: boolean hasSameRules(android.icu.util.TimeZone)> -> _SOURCE_
<java.util.SimpleTimeZone: int hashCode()> -> _SOURCE_
<java.util.SimpleTimeZone: boolean inDaylightTime(java.sql.Date)> -> _SOURCE_
<java.util.SimpleTimeZone: boolean observesDaylightTime()> -> _SOURCE_
<java.util.SimpleTimeZone: void setDSTSavings(int)> -> _SINK_
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int,boolean)> -> _SINK_
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)> -> _SINK_
<java.util.SimpleTimeZone: void setEndRule(int,int,int)> -> _SINK_
<java.util.SimpleTimeZone: void setRawOffset(int)> -> _SINK_
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)> -> _SINK_
<java.util.SimpleTimeZone: void setStartRule(int,int,int)> -> _SINK_
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int,boolean)> -> _SINK_
<java.util.SimpleTimeZone: void setStartYear(int)> -> _SINK_
<java.util.SimpleTimeZone: java.lang.String toString()> -> _SOURCE_
<java.util.SimpleTimeZone: boolean useDaylightTime()> -> _SOURCE_
<java.util.Spliterators.AbstractDoubleSpliterator: int characteristics()> -> _SOURCE_
<java.util.Spliterators.AbstractDoubleSpliterator: long estimateSize()> -> _SOURCE_
<java.util.Stack: int search(java.lang.Object)> -> _SOURCE_
<java.util.Spliterators.AbstractIntSpliterator: int characteristics()> -> _SOURCE_
<java.util.Spliterators.AbstractIntSpliterator: long estimateSize()> -> _SOURCE_
<java.util.SplittableRandom: java.util.stream.DoubleStream doubles(long)> -> _SOURCE_
<java.util.SplittableRandom: java.util.stream.IntStream ints(long)> -> _SOURCE_
<java.util.SplittableRandom: java.util.stream.LongStream longs(long)> -> _SOURCE_
<java.util.SplittableRandom: java.util.stream.LongStream longs(long,long,long)> -> _SOURCE_
<java.util.SplittableRandom: boolean nextBoolean()> -> _SOURCE_
<java.util.SplittableRandom: void nextBytes(byte[])> -> _SINK_
<java.util.SplittableRandom: double nextDouble()> -> _SOURCE_
<java.util.SplittableRandom: double nextDouble(double)> -> _SOURCE_
<java.util.SplittableRandom: double nextDouble(double,double)> -> _SOURCE_
<java.util.SplittableRandom: int nextInt()> -> _SOURCE_
<java.util.SplittableRandom: int nextInt(int,int)> -> _SOURCE_
<java.util.SplittableRandom: int nextInt(int)> -> _SOURCE_
<java.util.SplittableRandom: long nextLong(long)> -> _SOURCE_
<java.util.SplittableRandom: long nextLong()> -> _SOURCE_
<java.util.SplittableRandom: long nextLong(long,long)> -> _SOURCE_
<java.util.StringTokenizer: int countTokens()> -> _SOURCE_
<java.util.StringTokenizer: boolean hasMoreElements()> -> _SOURCE_
<java.util.StringTokenizer: boolean hasMoreTokens()> -> _SOURCE_
<java.util.StringTokenizer: java.lang.Object nextElement()> -> _SOURCE_
<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)> -> _SOURCE_
<java.util.StringTokenizer: java.lang.String nextToken()> -> _SOURCE_
<java.util.TimerTask: long scheduledExecutionTime()> -> _SOURCE_
<java.util.StringJoiner: int length()> -> _SOURCE_
<java.util.StringJoiner: java.lang.String toString()> -> _SOURCE_
<android.icu.util.TimeZone: java.lang.Object clone()> -> _SINK_
<android.icu.util.TimeZone: String[] getAvailableIDs()> -> _SOURCE_
<android.icu.util.TimeZone: String[] getAvailableIDs(int)> -> _SOURCE_
<android.icu.util.TimeZone: int getDSTSavings()> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getDefault()> -> _SOURCE_
<android.icu.util.TimeZone: java.lang.String getDisplayName(boolean,int,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName(androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName(boolean,int)> -> _SOURCE_
<android.icu.util.TimeZone: String getDisplayName()> -> _SOURCE_
<android.icu.util.TimeZone: java.lang.String getID()> -> _SOURCE_
<android.icu.util.TimeZone: int getOffset(long)> -> _SOURCE_
<android.icu.util.TimeZone: int getOffset(int,int,int,int,int,int)> -> _SOURCE_
<android.icu.util.TimeZone: int getRawOffset()> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getTimeZone(java.lang.String)> -> _SOURCE_
<android.icu.util.TimeZone: TimeZone getTimeZone(java.time.ZoneId)> -> _SOURCE_
<android.icu.util.TimeZone: boolean inDaylightTime(java.sql.Date)> -> _SOURCE_
<android.icu.util.TimeZone: boolean observesDaylightTime()> -> _SOURCE_
<android.icu.util.TimeZone: void setDefault(android.icu.util.TimeZone)> -> _SINK_
<android.icu.util.TimeZone: void setID(java.lang.String)> -> _SINK_
<android.icu.util.TimeZone: void setRawOffset(int)> -> _SINK_
<android.icu.util.TimeZone: java.time.ZoneId toZoneId()> -> _SOURCE_
<android.icu.util.TimeZone: boolean useDaylightTime()> -> _SOURCE_
<java.util.UnknownFormatConversionException: java.lang.String getConversion()> -> _SOURCE_
<java.util.UnknownFormatConversionException: java.lang.String getMessage()> -> _SOURCE_
<java.util.UUID: int clockSequence()> -> _SOURCE_
<java.util.UUID: int compareTo(java.util.UUID)> -> _SOURCE_
<java.util.UUID: UUID fromString(java.lang.String)> -> _SOURCE_
<java.util.UUID: long getLeastSignificantBits()> -> _SOURCE_
<java.util.UUID: long getMostSignificantBits()> -> _SOURCE_
<java.util.UUID: int hashCode()> -> _SOURCE_
<java.util.UUID: UUID nameUUIDFromBytes(byte[])> -> _SOURCE_
<java.util.UUID: long node()> -> _SOURCE_
<java.util.UUID: UUID randomUUID()> -> _SOURCE_
<java.util.UUID: long timestamp()> -> _SOURCE_
<java.util.UUID: java.lang.String toString()> -> _SOURCE_
<java.util.UUID: int variant()> -> _SOURCE_
<java.util.UUID: int version()> -> _SOURCE_
<java.util.UnknownFormatFlagsException: java.lang.String getFlags()> -> _SOURCE_
<java.util.UnknownFormatFlagsException: java.lang.String getMessage()> -> _SOURCE_
<java.util.Spliterators: Spliterator.OfDouble spliterator(java.util.PrimitiveIterator.OfDouble,long,int)> -> _SOURCE_
<java.util.Spliterators.AbstractSpliterator: int characteristics()> -> _SOURCE_
<java.util.Spliterators.AbstractSpliterator: long estimateSize()> -> _SOURCE_
<java.util.ResourceBundle: boolean containsKey(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle: java.lang.String getBaseBundleName()> -> _SOURCE_
<java.util.ResourceBundle: ResourceBundle getBundle(java.lang.String,androidx.compose.ui.text.intl.Locale,java.util.ResourceBundle.Control)> -> _SOURCE_
<java.util.ResourceBundle: ResourceBundle getBundle(java.lang.String,androidx.compose.ui.text.intl.Locale)> -> _SOURCE_
<java.util.ResourceBundle: ResourceBundle getBundle(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle: ResourceBundle getBundle(java.lang.String,androidx.compose.ui.text.intl.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)> -> _SOURCE_
<java.util.ResourceBundle: ResourceBundle getBundle(java.lang.String,androidx.compose.ui.text.intl.Locale,java.lang.ClassLoader)> -> _SOURCE_
<java.util.ResourceBundle: ResourceBundle getBundle(java.lang.String,java.util.ResourceBundle.Control)> -> _SOURCE_
<java.util.ResourceBundle: Enumeration<String> getKeys()> -> _SOURCE_
<java.util.ResourceBundle: androidx.compose.ui.text.intl.Locale getLocale()> -> _SOURCE_
<java.util.ResourceBundle: Object getObject(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle: String getString(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle: String[] getStringArray(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle: Set<String> keySet()> -> _SOURCE_
<java.util.WeakHashMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.WeakHashMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.WeakHashMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.WeakHashMap: boolean isEmpty()> -> _SOURCE_
<java.util.WeakHashMap: Set<K> keySet()> -> _SOURCE_
<java.util.WeakHashMap: V put(K,V)> -> _SOURCE_
<java.util.WeakHashMap: int size()> -> _SOURCE_
<java.util.WeakHashMap: Collection<V> values()> -> _SOURCE_
<java.util.concurrent.AbstractExecutorService:  List<Future> invokeAll(Collection<?)> -> _SINK_
<java.util.concurrent.AbstractExecutorService:  List<Future> invokeAll(Collection<?,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.AbstractExecutorService:  Future submit(Callable)> -> _SINK_
<java.util.concurrent.AbstractExecutorService:  Future submit(java.lang.Runnable,T)> -> _SINK_
<java.util.concurrent.AbstractExecutorService: Future<?> submit(java.lang.Runnable)> -> _SINK_
<java.util.TreeSet: Comparator<? super E> comparator()> -> _SOURCE_
<java.util.TreeSet: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.TreeSet: Iterator<E> descendingIterator()> -> _SOURCE_
<java.util.TreeSet: NavigableSet<E> descendingSet()> -> _SOURCE_
<java.util.TreeSet: E first()> -> _SOURCE_
<java.util.TreeSet: boolean isEmpty()> -> _SOURCE_
<java.util.TreeSet: int size()> -> _SOURCE_
<java.util.TreeSet: NavigableSet<E> subSet(E,boolean,E,boolean)> -> _SOURCE_
<java.util.TreeSet: SortedSet<E> subSet(E,E)> -> _SOURCE_
<java.util.Timer: void schedule(java.util.TimerTask,java.sql.Date)> -> _SINK_
<java.util.concurrent.CompletionService: Future<V> submit(java.lang.Runnable,V)> -> _SINK_
<java.util.concurrent.CompletionService: Future<V> submit(Callable<V>)> -> _SINK_
<java.util.concurrent.BlockingQueue: int remainingCapacity()> -> _SOURCE_
<java.util.concurrent.CompletionStage: CompletionStage<Void> thenAccept(Consumer<?)> -> _SOURCE_
<java.util.concurrent.CompletionStage: <U> CompletionStage<U> thenCompose(Function<?)> -> _SOURCE_
<java.util.concurrent.CompletionStage: <U> CompletionStage<U> thenComposeAsync(Function<?,java.util.concurrent.Executor)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: CompletableFuture<Void> allOf(CompletableFuture[]<?>)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: CompletableFuture completeOnTimeout(T,long,android.icu.util.TimeUnit)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletableFuture<U> completedFuture(U)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletionStage<U> completedStage(U)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: java.util.concurrent.Executor defaultExecutor()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletionStage<U> failedStage(java.lang.Throwable)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: T getNow(T)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: int getNumberOfDependents()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: boolean isCompletedExceptionally()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: T join()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletableFuture<U> newIncompleteFuture()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletableFuture<U> supplyAsync(Supplier<U>)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletableFuture<U> supplyAsync(Supplier<U>,java.util.concurrent.Executor)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: CompletableFuture<Void> thenAccept(Consumer<?)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletableFuture<U> thenCompose(Function<?)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: <U> CompletableFuture<U> thenComposeAsync(Function<?,java.util.concurrent.Executor)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: CompletableFuture toCompletableFuture()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: NavigableSet<K> descendingKeySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map descendingMap()> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map headMap(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map headMap(K,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: NavigableSet<K> keySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: NavigableSet<K> navigableKeySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map subMap(K,K)> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map subMap(K,boolean,K,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map tailMap(K,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentNavigableMap: ConcurrentNavigablejava.util.Map tailMap(K)> -> _SOURCE_
<java.util.concurrent.DelayQueue: E peek()> -> _SOURCE_
<java.util.concurrent.DelayQueue: int remainingCapacity()> -> _SOURCE_
<java.util.concurrent.DelayQueue: int size()> -> _SOURCE_
<java.util.concurrent.DelayQueue:  T[] toArray(T[])> -> _SOURCE_
<java.util.concurrent.DelayQueue: Object[] toArray()> -> _SOURCE_
<java.util.concurrent.BlockingDeque: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.BlockingDeque: E element()> -> _SOURCE_
<java.util.concurrent.BlockingDeque: E peek()> -> _SOURCE_
<java.util.concurrent.BlockingDeque: int size()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: Comparator<? super E> comparator()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: Iterator<E> descendingIterator()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: NavigableSet<E> descendingSet()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: E first()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: boolean isEmpty()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: Spliterator<E> spliterator()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: NavigableSet<E> subSet(E,boolean,E,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListSet: NavigableSet<E> subSet(E,E)> -> _SOURCE_
<java.util.concurrent.Delayed: long getDelay(android.icu.util.TimeUnit)> -> _SOURCE_
<java.util.TreeMap: Entry<K, V> ceilingEntry(K)> -> _SOURCE_
<java.util.TreeMap: K ceilingKey(K)> -> _SOURCE_
<java.util.TreeMap: Comparator<? super K> comparator()> -> _SOURCE_
<java.util.TreeMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.TreeMap: NavigableSet<K> descendingKeySet()> -> _SOURCE_
<java.util.TreeMap: Navigablejava.util.Map descendingMap()> -> _SOURCE_
<java.util.TreeMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.TreeMap: Entry<K, V> firstEntry()> -> _SOURCE_
<java.util.TreeMap: K firstKey()> -> _SOURCE_
<java.util.TreeMap: Entry<K, V> floorEntry(K)> -> _SOURCE_
<java.util.TreeMap: K floorKey(K)> -> _SOURCE_
<java.util.TreeMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.TreeMap: Sortedjava.util.Map headMap(K)> -> _SOURCE_
<java.util.TreeMap: Navigablejava.util.Map headMap(K,boolean)> -> _SOURCE_
<java.util.TreeMap: Entry<K, V> higherEntry(K)> -> _SOURCE_
<java.util.TreeMap: K higherKey(K)> -> _SOURCE_
<java.util.TreeMap: Set<K> keySet()> -> _SOURCE_
<java.util.TreeMap: Entry<K, V> lastEntry()> -> _SOURCE_
<java.util.TreeMap: K lastKey()> -> _SOURCE_
<java.util.TreeMap: Entry<K, V> lowerEntry(K)> -> _SOURCE_
<java.util.TreeMap: K lowerKey(K)> -> _SOURCE_
<java.util.TreeMap: NavigableSet<K> navigableKeySet()> -> _SOURCE_
<java.util.TreeMap: V put(K,V)> -> _SOURCE_
<java.util.TreeMap: V replace(K,V)> -> _SINK_
<java.util.TreeMap: int size()> -> _SOURCE_
<java.util.TreeMap: Sortedjava.util.Map subMap(K,K)> -> _SOURCE_
<java.util.TreeMap: Navigablejava.util.Map subMap(K,boolean,K,boolean)> -> _SOURCE_
<java.util.TreeMap: Navigablejava.util.Map tailMap(K,boolean)> -> _SOURCE_
<java.util.TreeMap: Sortedjava.util.Map tailMap(K)> -> _SOURCE_
<java.util.TreeMap: Collection<V> values()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: V compute(K,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: Enumeration<V> elements()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: int hashCode()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: Set<K> keySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: Enumeration<K> keys()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: long mappingCount()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: V put(K,V)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: void putAll(Map<?)> -> _SINK_
<java.util.concurrent.ConcurrentHashMap: <U> U reduce(long,BiFunction<?,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: Entry<K, V> reduceEntries(long,BiFunction<Entry<K,)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: K reduceKeys(long,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: <U> U reduceKeys(long,Function<?,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: double reduceKeysToDouble(long,ToDoubleFunction<?,double,java.util.function.DoubleBinaryOperator)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: int reduceKeysToInt(long,ToIntFunction<?,int,java.util.function.IntBinaryOperator)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: long reduceKeysToLong(long,ToLongFunction<?,long,java.util.function.LongBinaryOperator)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: double reduceValuesToDouble(long,ToDoubleFunction<?,double,java.util.function.DoubleBinaryOperator)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: int reduceValuesToInt(long,ToIntFunction<?,int,java.util.function.IntBinaryOperator)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: long reduceValuesToLong(long,ToLongFunction<?,long,java.util.function.LongBinaryOperator)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: V replace(K,V)> -> _SINK_
<java.util.concurrent.ConcurrentHashMap: <U> U search(long,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: <U> U searchEntries(long,Function<Entry<K,)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: <U> U searchKeys(long,Function<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: <U> U searchValues(long,Function<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: int size()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: Collection<V> values()> -> _SOURCE_
<java.util.concurrent.CountDownLatch: long getCount()> -> _SOURCE_
<java.util.concurrent.CountDownLatch: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.CyclicBarrier: int await()> -> _SINK_
<java.util.concurrent.CyclicBarrier: int getNumberWaiting()> -> _SOURCE_
<java.util.concurrent.CyclicBarrier: int getParties()> -> _SOURCE_
<java.util.concurrent.CyclicBarrier: boolean isBroken()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Entry<K, V> ceilingEntry(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: K ceilingKey(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Comparator<? super K> comparator()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: V compute(K,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: NavigableSet<K> descendingKeySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map descendingMap()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Set<Entry<K, V>> entrySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Entry<K, V> firstEntry()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: K firstKey()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Entry<K, V> floorEntry(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: K floorKey(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: V get(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map headMap(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map headMap(K,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Entry<K, V> higherEntry(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: K higherKey(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: boolean isEmpty()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: NavigableSet<K> keySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Entry<K, V> lastEntry()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: K lastKey()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Entry<K, V> lowerEntry(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: K lowerKey(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: NavigableSet<K> navigableKeySet()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: V put(K,V)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: V replace(K,V)> -> _SINK_
<java.util.concurrent.ConcurrentSkipListMap: int size()> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map subMap(K,K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map subMap(K,boolean,K,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map tailMap(K,boolean)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: ConcurrentNavigablejava.util.Map tailMap(K)> -> _SOURCE_
<java.util.concurrent.ConcurrentSkipListMap: Collection<V> values()> -> _SOURCE_
<java.util.concurrent.ConcurrentMap: default V compute(K,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentMap: default V getOrDefault(java.lang.Object,V)> -> _SOURCE_
<java.util.concurrent.ConcurrentMap: default V merge(K,V,BiFunction<?)> -> _SOURCE_
<java.util.concurrent.ConcurrentMap: V replace(K,V)> -> _SINK_
<androidx.constraintlayout.helper.widget.Flow: int defaultBufferSize()> -> _SINK_
<java.util.concurrent.ExecutorCompletionService: Future<V> submit(java.lang.Runnable,V)> -> _SINK_
<java.util.concurrent.ExecutorCompletionService: Future<V> submit(Callable<V>)> -> _SINK_
<java.util.concurrent.Executor: void execute(java.lang.Runnable)> -> _SINK_
<java.util.concurrent.FutureTask: V get()> -> _SOURCE_
<java.util.concurrent.FutureTask: void run()> -> _SINK_
<java.util.concurrent.FutureTask: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool.ManagedBlocker: boolean isReleasable()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: boolean compareAndSetForkJoinTaskTag(short,short)> -> _SINK_
<java.util.concurrent.ForkJoinTask: ForkJoinTask<V> fork()> -> _SINK_
<java.util.concurrent.ForkJoinTask: V get()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: Throwable getException()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: short getForkJoinTaskTag()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: ForkJoinPool getPool()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: int getQueuedTaskCount()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: V getRawResult()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: int getSurplusQueuedTaskCount()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: boolean isCompletedAbnormally()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: V join()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: void quietlyComplete()> -> _SINK_
<java.util.concurrent.ForkJoinTask: void quietlyJoin()> -> _SOURCE_
<java.util.concurrent.Future: V get()> -> _SOURCE_
<java.util.concurrent.Executors: Callable<Object> callable(java.lang.Runnable)> -> _SOURCE_
<java.util.concurrent.Executors: Callable<Object> callable(PrivilegedAction<?>)> -> _SOURCE_
<java.util.concurrent.Executors: Callable<Object> callable(PrivilegedExceptionAction<?>)> -> _SOURCE_
<java.util.concurrent.Executors:  Callable callable(java.lang.Runnable,T)> -> _SOURCE_
<java.util.concurrent.Executors: ThreadFactory defaultThreadFactory()> -> _SOURCE_
<java.util.concurrent.RecursiveAction: Void getRawResult()> -> _SOURCE_
<java.util.concurrent.Phaser: int getArrivedParties()> -> _SOURCE_
<java.util.concurrent.Phaser: java.util.concurrent.Phaser getParent()> -> _SOURCE_
<java.util.concurrent.Phaser: int getPhase()> -> _SOURCE_
<java.util.concurrent.Phaser: int getRegisteredParties()> -> _SOURCE_
<java.util.concurrent.Phaser: java.util.concurrent.Phaser getRoot()> -> _SOURCE_
<java.util.concurrent.Phaser: int getUnarrivedParties()> -> _SOURCE_
<java.util.concurrent.Phaser: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.RecursiveTask: V getRawResult()> -> _SOURCE_
<java.util.concurrent.ScheduledExecutorService: <V> ScheduledFuture<V> schedule(Callable<V>,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.ScheduledExecutorService: ScheduledFuture<?> schedule(java.lang.Runnable,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.Semaphore: int availablePermits()> -> _SOURCE_
<java.util.concurrent.Semaphore: int getQueueLength()> -> _SOURCE_
<java.util.concurrent.Semaphore: boolean hasQueuedThreads()> -> _SOURCE_
<java.util.concurrent.Semaphore: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: void complete(T)> -> _SOURCE_
<java.util.concurrent.CountedCompleter: void compute()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: CountedCompleter<?> firstComplete()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: CountedCompleter<?> getCompleter()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: int getPendingCount()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: T getRawResult()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: CountedCompleter<?> getRoot()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: void quietlyCompleteRoot()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: void setPendingCount(int)> -> _SINK_
<java.util.concurrent.Flow.Subscription: void request(long)> -> _SINK_
<java.util.concurrent.SynchronousQueue: void clear()> -> _SINK_
<java.util.concurrent.SynchronousQueue: boolean contains(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: boolean isEmpty()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: E peek()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: int remainingCapacity()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: boolean remove(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: boolean removeAll(Collection<?>)> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: boolean retainAll(Collection<?>)> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: int size()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: Spliterator<E> spliterator()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: Object[] toArray()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: BlockingQueue<Runnable> getQueue()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: <V> ScheduledFuture<V> schedule(Callable<V>,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: ScheduledFuture<?> schedule(java.lang.Runnable,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: Future<?> submit(java.lang.Runnable)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor:  Future submit(Callable)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor:  Future submit(java.lang.Runnable,T)> -> _SINK_
<java.util.concurrent.ExecutorService:  List<Future> invokeAll(Collection<?)> -> _SINK_
<java.util.concurrent.ExecutorService:  List<Future> invokeAll(Collection<?,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.ExecutorService: boolean isShutdown()> -> _SOURCE_
<java.util.concurrent.ExecutorService:  Future submit(Callable)> -> _SINK_
<java.util.concurrent.ExecutorService:  Future submit(java.lang.Runnable,T)> -> _SINK_
<java.util.concurrent.ExecutorService: Future<?> submit(java.lang.Runnable)> -> _SINK_
<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool getPool()> -> _SOURCE_
<java.util.concurrent.ForkJoinWorkerThread: int getPoolIndex()> -> _SOURCE_
<java.util.concurrent.RunnableFuture: void run()> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: boolean getAcquire()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicBoolean: boolean getOpaque()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicBoolean: boolean getPlain()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: void setOpaque(boolean)> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: void setPlain(boolean)> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: void setRelease(boolean)> -> _SINK_
<java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.TransferQueue: boolean tryTransfer(E,long,android.icu.util.TimeUnit)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int getAcquire()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int getOpaque()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int getPlain()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int intValue()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: void set(int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: void setOpaque(int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: void setPlain(int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: void setRelease(int)> -> _SINK_
<java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(T,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(T,int,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(T,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndIncrement(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(T,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(T,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(T,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean weakCompareAndSet(T,int,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongArray: long get(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongArray: long getAcquire(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongArray: long getOpaque(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongArray: long getPlain(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongArray: int length()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: ThreadLocalRandom current()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(long,double,double)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(long)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(long)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: boolean nextBoolean()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: double nextDouble()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: double nextDouble(double)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: double nextDouble(double,double)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: int nextInt()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: int nextInt(int)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: long nextLong(long,long)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: long nextLong(long)> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: long nextLong()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceArray: E get(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceArray: E getAcquire(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceArray: E getOpaque(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceArray: E getPlain(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceArray: int length()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerArray: int getAcquire(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerArray: int getOpaque(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerArray: int getPlain(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerArray: int length()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(T,V,V)> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V get(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V getAndSet(T,V)> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(T,V)> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(T,V)> -> _SINK_
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean weakCompareAndSet(T,V,V)> -> _SINK_
<java.util.concurrent.atomic.AtomicMarkableReference: V get(boolean[])> -> _SOURCE_
<java.util.concurrent.atomic.AtomicMarkableReference: V getReference()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicMarkableReference: boolean isMarked()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicStampedReference: boolean attemptStamp(V,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicStampedReference: boolean compareAndSet(V,V,int,int)> -> _SINK_
<java.util.concurrent.atomic.AtomicStampedReference: V get(int[])> -> _SOURCE_
<java.util.concurrent.atomic.AtomicStampedReference: V getReference()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicStampedReference: int getStamp()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicStampedReference: boolean weakCompareAndSet(V,V,int,int)> -> _SINK_
<java.util.concurrent.atomic.LongAdder: long sum()> -> _SOURCE_
<java.util.concurrent.atomic.LongAdder: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.LongAccumulator: void accumulate(long)> -> _SINK_
<java.util.concurrent.atomic.LongAccumulator: double doubleValue()> -> _SOURCE_
<java.util.concurrent.atomic.LongAccumulator: float floatValue()> -> _SOURCE_
<java.util.concurrent.atomic.LongAccumulator: long get()> -> _SOURCE_
<java.util.concurrent.atomic.LongAccumulator: long longValue()> -> _SOURCE_
<java.util.concurrent.atomic.LongAccumulator: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: Collection<Thread> getExclusiveQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: Thread getFirstQueuedThread()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: int getQueueLength()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: Collection<Thread> getSharedQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: Collection<Thread> getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasQueuedPredecessors()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean release(long)> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.lang.String toString()> -> _SOURCE_
<androidx.compose.animation.core.AtomicReference: V getAcquire()> -> _SOURCE_
<androidx.compose.animation.core.AtomicReference: V getAndSet(V)> -> _SOURCE_
<androidx.compose.animation.core.AtomicReference: V getOpaque()> -> _SOURCE_
<androidx.compose.animation.core.AtomicReference: V getPlain()> -> _SOURCE_
<androidx.compose.animation.core.AtomicReference: void lazySet(V)> -> _SINK_
<androidx.compose.animation.core.AtomicReference: void set(V)> -> _SINK_
<androidx.compose.animation.core.AtomicReference: void setOpaque(V)> -> _SINK_
<androidx.compose.animation.core.AtomicReference: void setPlain(V)> -> _SINK_
<androidx.compose.animation.core.AtomicReference: void setRelease(V)> -> _SINK_
<androidx.compose.animation.core.AtomicReference: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.DoubleAdder: double sum()> -> _SOURCE_
<java.util.concurrent.atomic.DoubleAdder: java.lang.String toString()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long decrementAndGet()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long getAcquire()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long getAndDecrement()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long getAndIncrement()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long getAndSet(long)> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long getOpaque()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long getPlain()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: long incrementAndGet()> -> _SOURCE_
<androidx.compose.foundation.AtomicLong: void lazySet(long)> -> _SINK_
<androidx.compose.foundation.AtomicLong: void set(long)> -> _SINK_
<androidx.compose.foundation.AtomicLong: void setOpaque(long)> -> _SINK_
<androidx.compose.foundation.AtomicLong: void setPlain(long)> -> _SINK_
<androidx.compose.foundation.AtomicLong: void setRelease(long)> -> _SINK_
<androidx.compose.foundation.AtomicLong: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: Collection<Thread> getExclusiveQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: Thread getFirstQueuedThread()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getQueueLength()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: Collection<Thread> getSharedQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: Collection<Thread> getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedPredecessors()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean release(int)> -> _SINK_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean awaitUntil(java.sql.Date)> -> _SINK_
<java.util.concurrent.locks.ReadWriteLock: Lock readLock()> -> _SOURCE_
<java.util.concurrent.locks.ReadWriteLock: Lock writeLock()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: int getHoldCount()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void lock()> -> _SINK_
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: boolean awaitUntil(java.sql.Date)> -> _SINK_
<java.util.concurrent.locks.LockSupport: Object getBlocker(java.lang.Thread)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(T,long)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(T,long,long)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAdd(T,long)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndSet(T,long)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(T)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void lazySet(T,long)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(T,long)> -> _SINK_
<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean weakCompareAndSet(T,long,long)> -> _SINK_
<java.util.concurrent.locks.ReentrantLock: int getHoldCount()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: int getQueueLength()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(android.service.notification.Condition)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: boolean isFair()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: boolean isLocked()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: java.lang.String toString()> -> _SOURCE_
<java.util.function.BiPredicate: default BiPredicate<T, U> negate()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: java.util.concurrent.locks.Lock asReadLock()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: java.util.concurrent.locks.Lock asWriteLock()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: int getReadLockCount()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: boolean isLockStamp(long)> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: boolean isOptimisticReadStamp(long)> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: boolean isReadLocked()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: boolean isWriteLocked()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: long tryConvertToOptimisticRead(long)> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: long tryOptimisticRead()> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: void unlock(long)> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: void unlockWrite(long)> -> _SOURCE_
<java.util.concurrent.locks.StampedLock: boolean validate(long)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWaitQueueLength(android.service.notification.Condition)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThreads()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasWaiters(android.service.notification.Condition)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isFair()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLocked()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock readLock()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock writeLock()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.DoubleAccumulator: void accumulate(double)> -> _SINK_
<java.util.concurrent.atomic.DoubleAccumulator: double doubleValue()> -> _SOURCE_
<java.util.concurrent.atomic.DoubleAccumulator: double get()> -> _SOURCE_
<java.util.concurrent.atomic.DoubleAccumulator: long longValue()> -> _SOURCE_
<java.util.concurrent.atomic.DoubleAccumulator: java.lang.String toString()> -> _SOURCE_
<java.util.function.DoubleSupplier: double getAsDouble()> -> _SOURCE_
<java.util.function.DoublePredicate: default DoublePredicate negate()> -> _SOURCE_
<java.util.function.BooleanSupplier: boolean getAsBoolean()> -> _SOURCE_
<java.util.function.IntSupplier: int getAsInt()> -> _SOURCE_
<android.arch.core.util.Function:  Function<T, T> identity()> -> _SOURCE_
<java.util.function.IntPredicate: default IntPredicate negate()> -> _SOURCE_
<java.util.function.LongSupplier: long getAsLong()> -> _SOURCE_
<androidx.core.util.Predicate: default Predicate negate()> -> _SOURCE_
<androidx.core.util.Predicate:  Predicate not(Predicate<?)> -> _SOURCE_
<androidx.core.util.Supplier: T get()> -> _SOURCE_
<java.util.function.LongPredicate: default LongPredicate negate()> -> _SOURCE_
<java.util.jar.Attributes.Name: int hashCode()> -> _SOURCE_
<java.util.jar.Attributes.Name: java.lang.String toString()> -> _SOURCE_
<java.util.jar.Attributes: boolean containsKey(java.lang.Object)> -> _SOURCE_
<java.util.jar.Attributes: boolean containsValue(java.lang.Object)> -> _SOURCE_
<java.util.jar.Attributes: Set<Entry<Object, Object>> entrySet()> -> _SOURCE_
<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes.Name)> -> _SOURCE_
<java.util.jar.Attributes: int hashCode()> -> _SOURCE_
<java.util.jar.Attributes: boolean isEmpty()> -> _SOURCE_
<java.util.jar.Attributes: Set<Object> keySet()> -> _SOURCE_
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<java.util.jar.Attributes: void putAll(java.util.Map -> _SINK_
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: Collection<Object> values()> -> _SOURCE_
<java.util.jar.JarFile: Enumeration<JarEntry> entries()> -> _SOURCE_
<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)> -> _SOURCE_
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> -> _SOURCE_
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)> -> _SOURCE_
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()> -> _SOURCE_
<java.util.jar.JarFile: Stream<JarEntry> stream()> -> _SOURCE_
<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()> -> _SOURCE_
<java.util.jar.JarEntry: Certificate[] getCertificates()> -> _SOURCE_
<java.util.jar.JarEntry: CodeSigner[] getCodeSigners()> -> _SOURCE_
<java.util.jar.JarEntry: java.lang.String getRealName()> -> _SOURCE_
<java.util.jar.Pack200.Packer: void pack(java.util.jar.JarInputStream,java.io.OutputStream)> -> _SOURCE_
<java.util.jar.Pack200.Packer: void pack(java.util.jar.JarFile,java.io.OutputStream)> -> _SOURCE_
<java.util.jar.Pack200.Packer: Sortedjava.util.Map properties()> -> _SOURCE_
<java.util.jar.Pack200.Unpacker: default void addPropertyChangeListener(java.beans.PropertyChangeListener)> -> _SOURCE_
<java.util.jar.Pack200.Unpacker: Sortedjava.util.Map properties()> -> _SOURCE_
<java.util.jar.Pack200.Unpacker: void unpack(java.io.InputStream,java.util.jar.JarOutputStream)> -> _SOURCE_
<java.util.jar.Pack200.Unpacker: void unpack(java.io.File,java.util.jar.JarOutputStream)> -> _SOURCE_
<android.text.format.Formatter: String format(java.util.logging.LogRecord)> -> _SOURCE_
<android.text.format.Formatter: java.lang.String getHead(android.os.Handler)> -> _SOURCE_
<android.text.format.Formatter: java.lang.String getTail(android.os.Handler)> -> _SOURCE_
<java.util.logging.FileHandler: void publish(java.util.logging.LogRecord)> -> _SINK_
<java.util.jar.JarInputStream: java.util.jar.Manifest getManifest()> -> _SOURCE_
<java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()> -> _SOURCE_
<java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()> -> _SOURCE_
<java.util.jar.JarInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.util.logging.ConsoleHandler: void publish(java.util.logging.LogRecord)> -> _SINK_
<java.util.logging.LogRecord: java.util.logging.Level getLevel()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getLoggerName()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getMessage()> -> _SOURCE_
<java.util.logging.LogRecord: long getMillis()> -> _SOURCE_
<java.util.logging.LogRecord: Object[] getParameters()> -> _SOURCE_
<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getResourceBundleName()> -> _SOURCE_
<java.util.logging.LogRecord: long getSequenceNumber()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getSourceClassName()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getSourceMethodName()> -> _SOURCE_
<java.util.logging.LogRecord: int getThreadID()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.Throwable getThrown()> -> _SOURCE_
<java.util.logging.LogRecord: void setLevel(java.util.logging.Level)> -> _SINK_
<java.util.logging.LogRecord: void setLoggerName(java.lang.String)> -> _SINK_
<java.util.logging.LogRecord: void setMessage(java.lang.String)> -> _SINK_
<java.util.logging.LogRecord: void setMillis(long)> -> _SINK_
<java.util.logging.LogRecord: void setParameters(Object[])> -> _SINK_
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)> -> _SINK_
<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)> -> _SINK_
<java.util.logging.LogRecord: void setSequenceNumber(long)> -> _SINK_
<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)> -> _SOURCE_
<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)> -> _SOURCE_
<java.util.logging.LogRecord: void setThreadID(int)> -> _SINK_
<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)> -> _SINK_
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)> -> _SINK_
<java.util.logging.LogManager: LogManager getLogManager()> -> _SOURCE_
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)> -> _SOURCE_
<java.util.logging.LogManager: Enumeration<String> getLoggerNames()> -> _SOURCE_
<java.util.logging.LogManager: LoggingMXBean getLoggingMXBean()> -> _SOURCE_
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)> -> _SOURCE_
<java.util.logging.LoggingMXBean: String getLoggerLevel(java.lang.String)> -> _SOURCE_
<java.util.logging.LoggingMXBean: List<String> getLoggerNames()> -> _SOURCE_
<java.util.logging.LoggingMXBean: String getParentLoggerName(java.lang.String)> -> _SOURCE_
<java.util.logging.LoggingMXBean: void setLoggerLevel(java.lang.String,java.lang.String)> -> _SINK_
<java.util.logging.SimpleFormatter: java.lang.String format(java.util.logging.LogRecord)> -> _SOURCE_
<java.util.logging.MemoryHandler: java.util.logging.Level getPushLevel()> -> _SINK_
<java.util.logging.MemoryHandler: void setPushLevel(java.util.logging.Level)> -> _SINK_
<androidx.datastore.preferences.core.PreferencesFactory: Preferences systemRoot()> -> _SOURCE_
<androidx.datastore.preferences.core.PreferencesFactory: Preferences userRoot()> -> _SOURCE_
<java.util.prefs.PreferenceChangeEvent: java.lang.String getKey()> -> _SOURCE_
<java.util.prefs.PreferenceChangeEvent: java.lang.String getNewValue()> -> _SOURCE_
<java.util.prefs.PreferenceChangeEvent: androidx.datastore.preferences.core.Preferences getNode()> -> _SOURCE_
<java.util.logging.XMLFormatter: java.lang.String format(java.util.logging.LogRecord)> -> _SINK_
<java.util.logging.XMLFormatter: java.lang.String getHead(android.os.Handler)> -> _SOURCE_
<java.util.logging.XMLFormatter: java.lang.String getTail(android.os.Handler)> -> _SOURCE_
<java.util.prefs.NodeChangeEvent: androidx.datastore.preferences.core.Preferences getChild()> -> _SOURCE_
<java.util.prefs.NodeChangeEvent: androidx.datastore.preferences.core.Preferences getParent()> -> _SOURCE_
<java.util.logging.StreamHandler: boolean isLoggable(java.util.logging.LogRecord)> -> _SOURCE_
<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)> -> _SINK_
<java.util.logging.StreamHandler: void setEncoding(java.lang.String)> -> _SINK_
<java.util.jar.Manifest: boolean equals(java.lang.Object)> -> _SOURCE_
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)> -> _SOURCE_
<java.util.jar.Manifest: java.util.Map getEntries()> -> _SOURCE_
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()> -> _SOURCE_
<java.util.jar.Manifest: int hashCode()> -> _SOURCE_
<java.util.jar.Manifest: void read(java.io.InputStream)> -> _SOURCE_
<java.util.jar.Manifest: void write(java.io.OutputStream)> -> _SINK_
<java.util.regex.MatchResult: int end(int)> -> _SOURCE_
<java.util.regex.MatchResult: int end()> -> _SOURCE_
<java.util.regex.MatchResult: String group(int)> -> _SOURCE_
<java.util.regex.MatchResult: String group()> -> _SOURCE_
<java.util.regex.MatchResult: int groupCount()> -> _SOURCE_
<java.util.regex.MatchResult: int start()> -> _SOURCE_
<java.util.regex.MatchResult: int start(int)> -> _SOURCE_
<java.util.stream.BaseStream: boolean isParallel()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: String absolutePath()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: String[] childrenNames()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: void exportNode(java.io.OutputStream)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void flush()> -> _SINK_
<androidx.datastore.preferences.core.Preferences: String get(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: byte[] getByteArray(java.lang.String,byte[])> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: double getDouble(java.lang.String,double)> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: float getFloat(java.lang.String,float)> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: int getInt(java.lang.String,int)> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: long getLong(java.lang.String,long)> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: void importPreferences(java.io.InputStream)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: boolean isUserNode()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: String[] keys()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: String name()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: Preferences parent()> -> _SOURCE_
<androidx.datastore.preferences.core.Preferences: void put(java.lang.String,java.lang.String)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void putBoolean(java.lang.String,boolean)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void putByteArray(java.lang.String,byte[])> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void putDouble(java.lang.String,double)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void putFloat(java.lang.String,float)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void putInt(java.lang.String,int)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void putLong(java.lang.String,long)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: void sync()> -> _SINK_
<androidx.datastore.preferences.core.Preferences: Preferences systemNodeForPackage(Class<?>)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: Preferences systemRoot()> -> _SINK_
<androidx.datastore.preferences.core.Preferences: Preferences userNodeForPackage(Class<?>)> -> _SINK_
<androidx.datastore.preferences.core.Preferences: Preferences userRoot()> -> _SINK_
<java.util.prefs.AbstractPreferences: java.lang.String absolutePath()> -> _SOURCE_
<java.util.prefs.AbstractPreferences: String[] childrenNames()> -> _SINK_
<java.util.prefs.AbstractPreferences: void exportNode(java.io.OutputStream)> -> _SINK_
<java.util.prefs.AbstractPreferences: void exportSubtree(java.io.OutputStream)> -> _SINK_
<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: byte[] getByteArray(java.lang.String,byte[])> -> _SOURCE_
<java.util.prefs.AbstractPreferences: double getDouble(java.lang.String,double)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: float getFloat(java.lang.String,float)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: int getInt(java.lang.String,int)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: long getLong(java.lang.String,long)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: String[] keys()> -> _SOURCE_
<java.util.prefs.AbstractPreferences: java.lang.String name()> -> _SOURCE_
<java.util.prefs.AbstractPreferences: androidx.datastore.preferences.core.Preferences node(java.lang.String)> -> _SOURCE_
<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)> -> _SINK_
<java.util.prefs.AbstractPreferences: void putBoolean(java.lang.String,boolean)> -> _SINK_
<java.util.prefs.AbstractPreferences: void putByteArray(java.lang.String,byte[])> -> _SINK_
<java.util.prefs.AbstractPreferences: void putDouble(java.lang.String,double)> -> _SINK_
<java.util.prefs.AbstractPreferences: void putFloat(java.lang.String,float)> -> _SINK_
<java.util.prefs.AbstractPreferences: void putInt(java.lang.String,int)> -> _SINK_
<java.util.prefs.AbstractPreferences: void putLong(java.lang.String,long)> -> _SINK_
<java.util.prefs.AbstractPreferences: java.lang.String toString()> -> _SOURCE_
<android.os.Handler: java.lang.String getEncoding()> -> _SOURCE_
<android.os.Handler: java.util.logging.ErrorManager getErrorManager()> -> _SOURCE_
<android.os.Handler: android.widget.Filter getFilter()> -> _SOURCE_
<android.os.Handler: android.text.format.Formatter getFormatter()> -> _SOURCE_
<android.os.Handler: java.util.logging.Level getLevel()> -> _SOURCE_
<android.os.Handler: boolean isLoggable(java.util.logging.LogRecord)> -> _SOURCE_
<android.os.Handler: void publish(java.util.logging.LogRecord)> -> _SINK_
<android.os.Handler: void setEncoding(java.lang.String)> -> _SINK_
<android.os.Handler: void setFormatter(android.text.format.Formatter)> -> _SINK_
<android.os.Handler: void setLevel(java.util.logging.Level)> -> _SINK_
<java.util.regex.Pattern: int flags()> -> _SOURCE_
<java.util.regex.Pattern: java.lang.String pattern()> -> _SOURCE_
<java.util.regex.Pattern: String quote(java.lang.String)> -> _SOURCE_
<java.util.regex.Pattern: java.lang.String toString()> -> _SOURCE_
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)> -> _SINK_
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)> -> _SINK_
<java.util.regex.Matcher: int end(int)> -> _SOURCE_
<java.util.regex.Matcher: int end(java.lang.String)> -> _SOURCE_
<java.util.regex.Matcher: int end()> -> _SOURCE_
<java.util.regex.Matcher: java.lang.String group(int)> -> _SOURCE_
<java.util.regex.Matcher: java.lang.String group(java.lang.String)> -> _SOURCE_
<java.util.regex.Matcher: java.lang.String group()> -> _SOURCE_
<java.util.regex.Matcher: int groupCount()> -> _SOURCE_
<java.util.regex.Matcher: boolean hitEnd()> -> _SOURCE_
<java.util.regex.Matcher: java.util.regex.Pattern pattern()> -> _SOURCE_
<java.util.regex.Matcher: String quoteReplacement(java.lang.String)> -> _SOURCE_
<java.util.regex.Matcher: int start()> -> _SOURCE_
<java.util.regex.Matcher: int start(int)> -> _SOURCE_
<java.util.regex.Matcher: int start(java.lang.String)> -> _SOURCE_
<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()> -> _SOURCE_
<java.util.regex.Matcher: java.lang.String toString()> -> _SOURCE_
<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)> -> _SINK_
<java.util.stream.Collector: Set<Collector.Characteristics> characteristics()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: java.lang.String getDescription()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: int getIndex()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: java.lang.String getMessage()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: java.lang.String getPattern()> -> _SOURCE_
<java.util.logging.Logger: void addHandler(android.os.Handler)> -> _SINK_
<java.util.logging.Logger: void config(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void config(Supplier<String>)> -> _SINK_
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,Object[])> -> _SOURCE_
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object)> -> _SOURCE_
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String,java.lang.Object)> -> _SOURCE_
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.logging.Logger: void fine(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void fine(Supplier<String>)> -> _SINK_
<java.util.logging.Logger: void finer(Supplier<String>)> -> _SINK_
<java.util.logging.Logger: void finer(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void finest(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void finest(Supplier<String>)> -> _SINK_
<java.util.logging.Logger: Logger getAnonymousLogger(java.lang.String)> -> _SINK_
<java.util.logging.Logger: Logger getAnonymousLogger()> -> _SINK_
<java.util.logging.Logger: android.widget.Filter getFilter()> -> _SOURCE_
<java.util.logging.Logger: Logger getGlobal()> -> _SOURCE_
<java.util.logging.Logger: Handler[] getHandlers()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Level getLevel()> -> _SOURCE_
<java.util.logging.Logger: Logger getLogger(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.logging.Logger: Logger getLogger(java.lang.String)> -> _SOURCE_
<java.util.logging.Logger: java.lang.String getName()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Logger getParent()> -> _SOURCE_
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()> -> _SOURCE_
<java.util.logging.Logger: java.lang.String getResourceBundleName()> -> _SOURCE_
<java.util.logging.Logger: void info(Supplier<String>)> -> _SINK_
<java.util.logging.Logger: void info(java.lang.String)> -> _SINK_
<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)> -> _SOURCE_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.Throwable,Supplier<String>)> -> _SOURCE_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,Object[])> -> _SOURCE_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.LogRecord)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)> -> _SOURCE_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)> -> _SOURCE_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,Supplier<String>)> -> _SOURCE_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,Supplier<String>)> -> _SOURCE_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)> -> _SOURCE_
<java.util.logging.Logger: void setFilter(android.widget.Filter)> -> _SINK_
<java.util.logging.Logger: void setLevel(java.util.logging.Level)> -> _SINK_
<java.util.logging.Logger: void setParent(java.util.logging.Logger)> -> _SINK_
<java.util.logging.Logger: void setResourceBundle(java.util.ResourceBundle)> -> _SINK_
<java.util.logging.Logger: void setUseParentHandlers(boolean)> -> _SINK_
<java.util.logging.Logger: void severe(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void warning(java.lang.String)> -> _SINK_
<java.util.zip.Adler32: long getValue()> -> _SOURCE_
<java.util.zip.Adler32: void update(byte[])> -> _SINK_
<java.util.zip.Adler32: void update(java.nio.ByteBuffer)> -> _SINK_
<java.util.zip.Adler32: void update(byte[],int,int)> -> _SINK_
<java.util.stream.DoubleStream: OptionalDouble average()> -> _SOURCE_
<java.util.stream.DoubleStream: long count()> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream distinct()> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream empty()> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream filter(java.util.function.DoublePredicate)> -> _SOURCE_
<java.util.stream.DoubleStream: OptionalDouble findAny()> -> _SOURCE_
<java.util.stream.DoubleStream: OptionalDouble findFirst()> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream limit(long)> -> _SOURCE_
<java.util.stream.DoubleStream: LongStream mapToLong(java.util.function.DoubleToLongFunction)> -> _SOURCE_
<java.util.stream.DoubleStream: OptionalDouble max()> -> _SOURCE_
<java.util.stream.DoubleStream: OptionalDouble min()> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream of(double[])> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream of(double)> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleStream sorted()> -> _SOURCE_
<java.util.stream.DoubleStream: double sum()> -> _SOURCE_
<java.util.stream.DoubleStream: DoubleSummaryStatistics summaryStatistics()> -> _SOURCE_
<java.util.stream.DoubleStream: double[] toArray()> -> _SOURCE_
<java.util.stream.Stream: long count()> -> _SOURCE_
<java.util.stream.Stream: Stream distinct()> -> _SOURCE_
<java.util.stream.Stream:  Stream empty()> -> _SOURCE_
<java.util.stream.Stream: Stream filter(Predicate<?)> -> _SOURCE_
<java.util.stream.Stream: Optional findAny()> -> _SOURCE_
<java.util.stream.Stream: Optional findFirst()> -> _SOURCE_
<java.util.stream.Stream: Stream limit(long)> -> _SOURCE_
<java.util.stream.Stream: DoubleStream mapToDouble(ToDoubleFunction<?)> -> _SOURCE_
<java.util.stream.Stream: LongStream mapToLong(ToLongFunction<?)> -> _SOURCE_
<java.util.stream.Stream: Optional max(Comparator<?)> -> _SOURCE_
<java.util.stream.Stream: Optional min(Comparator<?)> -> _SOURCE_
<java.util.stream.Stream:  Stream of(T)> -> _SOURCE_
<java.util.stream.Stream:  Stream of(T[])> -> _SOURCE_
<java.util.stream.Stream: Stream sorted(Comparator<?)> -> _SOURCE_
<java.util.stream.Stream: Stream sorted()> -> _SOURCE_
<java.util.stream.Stream: Object[] toArray()> -> _SOURCE_
<java.util.stream.Stream: <A> A[] toArray(IntFunction<A[]>)> -> _SOURCE_
<java.util.zip.CRC32: long getValue()> -> _SOURCE_
<java.util.zip.CRC32: void update(byte[])> -> _SINK_
<java.util.zip.CRC32: void update(java.nio.ByteBuffer)> -> _SINK_
<java.util.zip.CRC32: void update(byte[],int,int)> -> _SINK_
<java.util.stream.Collectors:  Collector<T, ?, IntSummaryStatistics> summarizingInt(ToIntFunction<?)> -> _SOURCE_
<java.util.stream.Collectors:  Collector<T, ?, LongSummaryStatistics> summarizingLong(ToLongFunction<?)> -> _SOURCE_
<java.util.zip.CheckedOutputStream: android.content.pm.Checksum getChecksum()> -> _SOURCE_
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.CheckedOutputStream: void write(int)> -> _SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.DeflaterOutputStream: void write(int)> -> _SINK_
<java.util.logging.SocketHandler: void publish(java.util.logging.LogRecord)> -> _SINK_
<java.util.stream.IntStream: DoubleStream asDoubleStream()> -> _SOURCE_
<java.util.stream.IntStream: LongStream asLongStream()> -> _SOURCE_
<java.util.stream.IntStream: OptionalDouble average()> -> _SOURCE_
<java.util.stream.IntStream: long count()> -> _SOURCE_
<java.util.stream.IntStream: IntStream distinct()> -> _SOURCE_
<java.util.stream.IntStream: IntStream empty()> -> _SOURCE_
<java.util.stream.IntStream: IntStream filter(java.util.function.IntPredicate)> -> _SOURCE_
<java.util.stream.IntStream: OptionalInt findAny()> -> _SOURCE_
<java.util.stream.IntStream: OptionalInt findFirst()> -> _SOURCE_
<java.util.stream.IntStream: IntStream limit(long)> -> _SOURCE_
<java.util.stream.IntStream: DoubleStream mapToDouble(java.util.function.IntToDoubleFunction)> -> _SOURCE_
<java.util.stream.IntStream: LongStream mapToLong(java.util.function.IntToLongFunction)> -> _SOURCE_
<java.util.stream.IntStream: OptionalInt max()> -> _SOURCE_
<java.util.stream.IntStream: OptionalInt min()> -> _SOURCE_
<java.util.stream.IntStream: IntStream of(int)> -> _SOURCE_
<java.util.stream.IntStream: IntStream of(int[])> -> _SOURCE_
<java.util.stream.IntStream: IntStream sorted()> -> _SOURCE_
<java.util.stream.IntStream: int sum()> -> _SOURCE_
<java.util.stream.IntStream: IntSummaryStatistics summaryStatistics()> -> _SOURCE_
<java.util.stream.IntStream: int[] toArray()> -> _SOURCE_
<java.util.stream.LongStream: DoubleStream asDoubleStream()> -> _SOURCE_
<java.util.stream.LongStream: OptionalDouble average()> -> _SOURCE_
<java.util.stream.LongStream: Stream<Long> boxed()> -> _SOURCE_
<java.util.stream.LongStream: long count()> -> _SOURCE_
<java.util.stream.LongStream: LongStream distinct()> -> _SOURCE_
<java.util.stream.LongStream: LongStream empty()> -> _SOURCE_
<java.util.stream.LongStream: LongStream filter(java.util.function.LongPredicate)> -> _SOURCE_
<java.util.stream.LongStream: OptionalLong findAny()> -> _SOURCE_
<java.util.stream.LongStream: OptionalLong findFirst()> -> _SOURCE_
<java.util.stream.LongStream: LongStream limit(long)> -> _SOURCE_
<java.util.stream.LongStream: DoubleStream mapToDouble(java.util.function.LongToDoubleFunction)> -> _SOURCE_
<java.util.stream.LongStream: OptionalLong max()> -> _SOURCE_
<java.util.stream.LongStream: OptionalLong min()> -> _SOURCE_
<java.util.stream.LongStream: LongStream of(long[])> -> _SOURCE_
<java.util.stream.LongStream: LongStream of(long)> -> _SOURCE_
<java.util.stream.LongStream: LongStream sorted()> -> _SOURCE_
<java.util.stream.LongStream: long sum()> -> _SOURCE_
<java.util.stream.LongStream: LongSummaryStatistics summaryStatistics()> -> _SOURCE_
<java.util.stream.LongStream: long[] toArray()> -> _SOURCE_
<java.util.logging.Level: java.lang.String getLocalizedName()> -> _SOURCE_
<java.util.logging.Level: java.lang.String getName()> -> _SOURCE_
<java.util.logging.Level: java.lang.String getResourceBundleName()> -> _SOURCE_
<java.util.logging.Level: int hashCode()> -> _SOURCE_
<java.util.logging.Level: int intValue()> -> _SOURCE_
<java.util.logging.Level: Level parse(java.lang.String)> -> _SOURCE_
<java.util.logging.Level: String toString()> -> _SOURCE_
<java.util.zip.DeflaterInputStream: int read(byte[],int,int)> -> _SOURCE_
<android.content.pm.Checksum: long getValue()> -> _SOURCE_
<android.content.pm.Checksum: void update(byte[],int,int)> -> _SINK_
<android.content.pm.Checksum: void update(int)> -> _SINK_
<java.util.zip.GZIPInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.util.zip.InflaterInputStream: int read()> -> _SOURCE_
<java.util.zip.InflaterInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.util.zip.InflaterInputStream: long skip(long)> -> _SINK_
<java.util.zip.Deflater: int deflate(byte[],int,int)> -> _SINK_
<java.util.zip.Deflater: int deflate(byte[])> -> _SINK_
<java.util.zip.Deflater: int deflate(byte[],int,int,int)> -> _SINK_
<java.util.zip.Deflater: int getAdler()> -> _SOURCE_
<java.util.zip.Deflater: long getBytesRead()> -> _SOURCE_
<java.util.zip.Deflater: long getBytesWritten()> -> _SOURCE_
<java.util.zip.Deflater: int getTotalIn()> -> _SOURCE_
<java.util.zip.Deflater: int getTotalOut()> -> _SOURCE_
<java.util.zip.Deflater: boolean needsInput()> -> _SOURCE_
<java.util.zip.Deflater: void setDictionary(byte[],int,int)> -> _SINK_
<java.util.zip.Deflater: void setDictionary(byte[])> -> _SINK_
<java.util.zip.Deflater: void setInput(byte[],int,int)> -> _SINK_
<java.util.zip.Deflater: void setInput(byte[])> -> _SINK_
<java.util.zip.Deflater: void setLevel(int)> -> _SINK_
<java.util.zip.Deflater: void setStrategy(int)> -> _SINK_
<java.util.zip.CheckedInputStream: android.content.pm.Checksum getChecksum()> -> _SOURCE_
<java.util.zip.CheckedInputStream: int read()> -> _SOURCE_
<java.util.zip.CheckedInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.util.zip.ZipFile: Enumeration<? extends ZipEntry> entries()> -> _SOURCE_
<java.util.zip.ZipFile: java.lang.String getComment()> -> _SOURCE_
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)> -> _SOURCE_
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> -> _SOURCE_
<java.util.zip.ZipFile: java.lang.String getName()> -> _SOURCE_
<java.util.zip.ZipFile: int size()> -> _SOURCE_
<java.util.zip.ZipFile: Stream<? extends ZipEntry> stream()> -> _SOURCE_
<javax.crypto.ExemptionMechanism: String getName()> -> _SOURCE_
<javax.crypto.ExemptionMechanism: int getOutputSize(int)> -> _SOURCE_
<javax.crypto.ExemptionMechanism: Provider getProvider()> -> _SOURCE_
<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(androidx.compose.ui.input.key.Key)> -> _SOURCE_
<javax.crypto.Cipher: String getAlgorithm()> -> _SOURCE_
<javax.crypto.Cipher: int getBlockSize()> -> _SOURCE_
<javax.crypto.Cipher: ExemptionMechanism getExemptionMechanism()> -> _SOURCE_
<javax.crypto.Cipher: byte[] getIV()> -> _SOURCE_
<javax.crypto.Cipher: Cipher getInstance(java.lang.String)> -> _SOURCE_
<javax.crypto.Cipher: Cipher getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.crypto.Cipher: Cipher getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)> -> _SOURCE_
<javax.crypto.Cipher: AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)> -> _SOURCE_
<javax.crypto.Cipher: int getOutputSize(int)> -> _SOURCE_
<javax.crypto.Cipher: AlgorithmParameters getParameters()> -> _SOURCE_
<javax.crypto.Cipher: Provider getProvider()> -> _SOURCE_
<javax.crypto.Cipher: void init(int,androidx.compose.ui.input.key.Key,java.security.AlgorithmParameters)> -> _SOURCE_
<javax.crypto.Cipher: void init(int,androidx.compose.ui.input.key.Key,java.security.spec.AlgorithmParameterSpec)> -> _SOURCE_
<javax.crypto.Cipher: void init(int,androidx.compose.ui.input.key.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> -> _SOURCE_
<javax.crypto.Cipher: void init(int,androidx.compose.ui.input.key.Key,java.security.AlgorithmParameters,java.security.SecureRandom)> -> _SOURCE_
<javax.crypto.Cipher: void updateAAD(byte[],int,int)> -> _SINK_
<javax.crypto.Cipher: void updateAAD(java.nio.ByteBuffer)> -> _SOURCE_
<javax.crypto.Cipher: void updateAAD(byte[])> -> _SOURCE_
<java.util.zip.ZipEntry: java.lang.String getComment()> -> _SOURCE_
<java.util.zip.ZipEntry: long getCompressedSize()> -> _SOURCE_
<java.util.zip.ZipEntry: long getCrc()> -> _SOURCE_
<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getCreationTime()> -> _SOURCE_
<java.util.zip.ZipEntry: byte[] getExtra()> -> _SOURCE_
<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastAccessTime()> -> _SOURCE_
<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastModifiedTime()> -> _SOURCE_
<java.util.zip.ZipEntry: int getMethod()> -> _SOURCE_
<java.util.zip.ZipEntry: java.lang.String getName()> -> _SOURCE_
<java.util.zip.ZipEntry: long getSize()> -> _SOURCE_
<java.util.zip.ZipEntry: long getTime()> -> _SOURCE_
<java.util.zip.ZipEntry: int hashCode()> -> _SOURCE_
<java.util.zip.ZipEntry: boolean isDirectory()> -> _SOURCE_
<java.util.zip.ZipEntry: void setComment(java.lang.String)> -> _SINK_
<java.util.zip.ZipEntry: void setCompressedSize(long)> -> _SINK_
<java.util.zip.ZipEntry: void setCrc(long)> -> _SINK_
<java.util.zip.ZipEntry: java.util.zip.ZipEntry setCreationTime(java.nio.file.attribute.FileTime)> -> _SINK_
<java.util.zip.ZipEntry: void setExtra(byte[])> -> _SINK_
<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastAccessTime(java.nio.file.attribute.FileTime)> -> _SINK_
<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastModifiedTime(java.nio.file.attribute.FileTime)> -> _SINK_
<java.util.zip.ZipEntry: void setSize(long)> -> _SINK_
<java.util.zip.ZipEntry: void setTime(long)> -> _SINK_
<java.util.zip.ZipEntry: java.lang.String toString()> -> _SOURCE_
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)> -> _SINK_
<java.util.zip.ZipOutputStream: void setComment(java.lang.String)> -> _SINK_
<java.util.zip.ZipOutputStream: void setLevel(int)> -> _SINK_
<java.util.zip.ZipOutputStream: void setMethod(int)> -> _SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)> -> _SINK_
<javax.crypto.CipherOutputStream: void write(byte[])> -> _SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)> -> _SINK_
<javax.crypto.CipherOutputStream: void write(int)> -> _SINK_
<javax.crypto.CipherInputStream: int available()> -> _SOURCE_
<javax.crypto.CipherInputStream: int read()> -> _SOURCE_
<javax.crypto.CipherInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.util.zip.ZipInputStream: int available()> -> _SOURCE_
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()> -> _SOURCE_
<java.util.zip.ZipInputStream: int read(byte[],int,int)> -> _SINK_
<java.util.zip.ZipInputStream: long skip(long)> -> _SINK_
<java.util.zip.InflaterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.InflaterOutputStream: void write(int)> -> _SINK_
<javax.crypto.KeyGenerator: String getAlgorithm()> -> _SOURCE_
<javax.crypto.KeyGenerator: KeyGenerator getInstance(java.lang.String)> -> _SOURCE_
<javax.crypto.KeyGenerator: KeyGenerator getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.crypto.KeyGenerator: KeyGenerator getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.crypto.KeyGenerator: Provider getProvider()> -> _SOURCE_
<java.util.zip.Inflater: int getAdler()> -> _SOURCE_
<java.util.zip.Inflater: long getBytesRead()> -> _SOURCE_
<java.util.zip.Inflater: long getBytesWritten()> -> _SOURCE_
<java.util.zip.Inflater: int getRemaining()> -> _SOURCE_
<java.util.zip.Inflater: int getTotalIn()> -> _SOURCE_
<java.util.zip.Inflater: int getTotalOut()> -> _SOURCE_
<java.util.zip.Inflater: boolean needsDictionary()> -> _SOURCE_
<java.util.zip.Inflater: void setDictionary(byte[],int,int)> -> _SINK_
<java.util.zip.Inflater: void setDictionary(byte[])> -> _SINK_
<java.util.zip.Inflater: void setInput(byte[],int,int)> -> _SINK_
<java.util.zip.Inflater: void setInput(byte[])> -> _SINK_
<javax.crypto.Mac: String getAlgorithm()> -> _SOURCE_
<javax.crypto.Mac: Mac getInstance(java.lang.String)> -> _SOURCE_
<javax.crypto.Mac: Mac getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.crypto.Mac: Mac getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.crypto.Mac: int getMacLength()> -> _SOURCE_
<javax.crypto.Mac: Provider getProvider()> -> _SOURCE_
<javax.crypto.Mac: void init(androidx.compose.ui.input.key.Key,java.security.spec.AlgorithmParameterSpec)> -> _SOURCE_
<javax.crypto.SealedObject: String getAlgorithm()> -> _SOURCE_
<javax.crypto.SealedObject: Object getObject(androidx.compose.ui.input.key.Key,java.lang.String)> -> _SOURCE_
<javax.crypto.SealedObject: Object getObject(androidx.compose.ui.input.key.Key)> -> _SOURCE_
<javax.crypto.SealedObject: Object getObject(javax.crypto.Cipher)> -> _SOURCE_
<javax.crypto.interfaces.DHPublicKey: BigInteger getY()> -> _SOURCE_
<javax.crypto.KeyAgreement: byte[] generateSecret()> -> _SOURCE_
<javax.crypto.KeyAgreement: int generateSecret(byte[],int)> -> _SOURCE_
<javax.crypto.KeyAgreement: SecretKey generateSecret(java.lang.String)> -> _SOURCE_
<javax.crypto.KeyAgreement: String getAlgorithm()> -> _SOURCE_
<javax.crypto.KeyAgreement: KeyAgreement getInstance(java.lang.String)> -> _SOURCE_
<javax.crypto.KeyAgreement: KeyAgreement getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.crypto.KeyAgreement: KeyAgreement getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.crypto.KeyAgreement: Provider getProvider()> -> _SOURCE_
<javax.crypto.KeyAgreement: void init(androidx.compose.ui.input.key.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> -> _SOURCE_
<javax.crypto.spec.DESedeKeySpec: byte[] getKey()> -> _SOURCE_
<javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[],int)> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String getAlgName()> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters getAlgParameters()> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncryptedData()> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(androidx.compose.ui.input.key.Key)> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(androidx.compose.ui.input.key.Key,java.security.Provider)> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(androidx.compose.ui.input.key.Key,java.lang.String)> -> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)> -> _SOURCE_
<javax.crypto.spec.DESKeySpec: byte[] getKey()> -> _SOURCE_
<javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)> -> _SOURCE_
<javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)> -> _SOURCE_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()> -> _SOURCE_
<javax.crypto.spec.DHParameterSpec: int getL()> -> _SOURCE_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()> -> _SOURCE_
<javax.crypto.spec.DHGenParameterSpec: int getExponentSize()> -> _SOURCE_
<javax.crypto.spec.DHGenParameterSpec: int getPrimeSize()> -> _SOURCE_
<javax.crypto.interfaces.DHPrivateKey: BigInteger getX()> -> _SOURCE_
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getG()> -> _SOURCE_
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getP()> -> _SOURCE_
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getX()> -> _SOURCE_
<javax.crypto.interfaces.DHKey: DHParameterSpec getParams()> -> _SOURCE_
<javax.crypto.SecretKeyFactory: SecretKey generateSecret(java.security.spec.KeySpec)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: String getAlgorithm()> -> _SOURCE_
<javax.crypto.SecretKeyFactory: SecretKeyFactory getInstance(java.lang.String)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: SecretKeyFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: SecretKeyFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: KeySpec getKeySpec(javax.crypto.SecretKey,Class<?>)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: Provider getProvider()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()> -> _SOURCE_
<javax.crypto.interfaces.PBEKey: int getIterationCount()> -> _SOURCE_
<javax.crypto.interfaces.PBEKey: char[] getPassword()> -> _SOURCE_
<javax.crypto.interfaces.PBEKey: byte[] getSalt()> -> _SOURCE_
<javax.crypto.spec.IvParameterSpec: byte[] getIV()> -> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: int getIterationCount()> -> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: java.security.spec.AlgorithmParameterSpec getParameterSpec()> -> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()> -> _SOURCE_
<javax.crypto.spec.PSource: java.lang.String getAlgorithm()> -> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()> -> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()> -> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()> -> _SOURCE_
<javax.crypto.spec.PSource.PSpecified: byte[] getValue()> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: int hashCode()> -> _SOURCE_
<javax.crypto.spec.PBEKeySpec: int getIterationCount()> -> _SOURCE_
<javax.crypto.spec.PBEKeySpec: int getKeyLength()> -> _SOURCE_
<javax.crypto.spec.PBEKeySpec: char[] getPassword()> -> _SOURCE_
<javax.crypto.spec.PBEKeySpec: byte[] getSalt()> -> _SOURCE_
<javax.net.ServerSocketFactory: ServerSocketFactory getDefault()> -> _SOURCE_
<javax.net.SocketFactory: Socket createSocket(java.lang.String,int)> -> _SOURCE_
<javax.net.SocketFactory: Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> -> _SOURCE_
<javax.net.SocketFactory: SocketFactory getDefault()> -> _SOURCE_
<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> -> _SINK_
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: Certificate[] getLocalCertificates()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: X509Certificate[] getPeerCertificateChain()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: Certificate[] getPeerCertificates()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()> -> _SOURCE_
<javax.net.ssl.KeyStoreBuilderParameters: List<KeyStore.Builder> getParameters()> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getRounds()> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getWordSize()> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int hashCode()> -> _SOURCE_
<javax.net.ssl.SNIMatcher: int getType()> -> _SOURCE_
<javax.net.ssl.SNIMatcher: boolean matches(javax.net.ssl.SNIServerName)> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLEngine createSSLEngine()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLEngine createSSLEngine(java.lang.String,int)> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLSessionContext getClientSessionContext()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLContext getDefault()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLParameters getDefaultSSLParameters()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLContext getInstance(java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLContext getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLContext getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.net.ssl.SSLContext: String getProtocol()> -> _SOURCE_
<javax.net.ssl.SSLContext: Provider getProvider()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLSessionContext getServerSessionContext()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLServerSocketFactory getServerSocketFactory()> -> _SOURCE_
<javax.net.ssl.SSLContext: SSLParameters getSupportedSSLParameters()> -> _SOURCE_
<javax.net.ssl.SSLContext: void setDefault(javax.net.ssl.SSLContext)> -> _SINK_
<javax.crypto.spec.GCMParameterSpec: byte[] getIV()> -> _SOURCE_
<javax.crypto.spec.GCMParameterSpec: int getTLen()> -> _SOURCE_
<javax.net.ssl.ExtendedSSLSession: String[] getLocalSupportedSignatureAlgorithms()> -> _SOURCE_
<javax.net.ssl.ExtendedSSLSession: String[] getPeerSupportedSignatureAlgorithms()> -> _SOURCE_
<javax.net.ssl.ExtendedSSLSession: List<SNIServerName> getRequestedServerNames()> -> _SOURCE_
<javax.net.ssl.SNIServerName: byte[] getEncoded()> -> _SOURCE_
<javax.net.ssl.SNIServerName: int getType()> -> _SOURCE_
<javax.net.ssl.SNIServerName: int hashCode()> -> _SOURCE_
<javax.net.ssl.SNIServerName: java.lang.String toString()> -> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()> -> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()> -> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: int hashCode()> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: String getAlgorithm()> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: String getDefaultAlgorithm()> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: KeyManagerFactory getInstance(java.lang.String)> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: KeyManagerFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: KeyManagerFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: KeyManager[] getKeyManagers()> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: Provider getProvider()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: int bytesConsumed()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: int bytesProduced()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: SSLEngineResult.HandshakeStatus getHandshakeStatus()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: SSLEngineResult.Status getStatus()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.SNIHostName: SNIMatcher createSNIMatcher(java.lang.String)> -> _SOURCE_
<javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)> -> _SOURCE_
<javax.net.ssl.SNIHostName: java.lang.String getAsciiName()> -> _SOURCE_
<javax.net.ssl.SNIHostName: int hashCode()> -> _SOURCE_
<javax.net.ssl.SNIHostName: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.SSLEngine: java.lang.String getApplicationProtocol()> -> _SOURCE_
<javax.net.ssl.SSLEngine: Runnable getDelegatedTask()> -> _SOURCE_
<javax.net.ssl.SSLEngine: boolean getEnableSessionCreation()> -> _SOURCE_
<javax.net.ssl.SSLEngine: String[] getEnabledCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLEngine: String[] getEnabledProtocols()> -> _SOURCE_
<javax.net.ssl.SSLEngine: java.lang.String getHandshakeApplicationProtocol()> -> _SOURCE_
<javax.net.ssl.SSLEngine: BiFunction<SSLEngine, List<String>, String> getHandshakeApplicationProtocolSelector()> -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getHandshakeSession()> -> _SOURCE_
<javax.net.ssl.SSLEngine: SSLEngineResult.HandshakeStatus getHandshakeStatus()> -> _SOURCE_
<javax.net.ssl.SSLEngine: boolean getNeedClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()> -> _SOURCE_
<javax.net.ssl.SSLEngine: int getPeerPort()> -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()> -> _SOURCE_
<javax.net.ssl.SSLEngine: SSLSession getSession()> -> _SOURCE_
<javax.net.ssl.SSLEngine: String[] getSupportedCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLEngine: String[] getSupportedProtocols()> -> _SOURCE_
<javax.net.ssl.SSLEngine: boolean getUseClientMode()> -> _SOURCE_
<javax.net.ssl.SSLEngine: boolean getWantClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLEngine: void setEnabledCipherSuites(String[])> -> _SINK_
<javax.net.ssl.SSLEngine: void setEnabledProtocols(String[])> -> _SINK_
<javax.net.ssl.SSLEngine: void setHandshakeApplicationProtocolSelector(BiFunction<SSLEngine,)> -> _SOURCE_
<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SOURCE_
<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)> -> _SINK_
<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,ByteBuffer[])> -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)> -> _SOURCE_
<javax.net.ssl.SSLEngine: SSLEngineResult unwrap(java.nio.ByteBuffer,ByteBuffer[],int,int)> -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(ByteBuffer[],java.nio.ByteBuffer)> -> _SOURCE_
<javax.net.ssl.SSLEngine: SSLEngineResult wrap(ByteBuffer[],int,int,java.nio.ByteBuffer)> -> _SOURCE_
<javax.net.ssl.CertPathTrustManagerParameters: java.security.cert.CertPathParameters getParameters()> -> _SOURCE_
<javax.net.ssl.SSLSession: int getApplicationBufferSize()> -> _SOURCE_
<javax.net.ssl.SSLSession: String getCipherSuite()> -> _SOURCE_
<javax.net.ssl.SSLSession: long getCreationTime()> -> _SOURCE_
<javax.net.ssl.SSLSession: byte[] getId()> -> _SOURCE_
<javax.net.ssl.SSLSession: long getLastAccessedTime()> -> _SOURCE_
<javax.net.ssl.SSLSession: Certificate[] getLocalCertificates()> -> _SOURCE_
<javax.net.ssl.SSLSession: Principal getLocalPrincipal()> -> _SOURCE_
<javax.net.ssl.SSLSession: int getPacketBufferSize()> -> _SOURCE_
<javax.net.ssl.SSLSession: X509Certificate[] getPeerCertificateChain()> -> _SOURCE_
<javax.net.ssl.SSLSession: Certificate[] getPeerCertificates()> -> _SOURCE_
<javax.net.ssl.SSLSession: String getPeerHost()> -> _SOURCE_
<javax.net.ssl.SSLSession: int getPeerPort()> -> _SOURCE_
<javax.net.ssl.SSLSession: Principal getPeerPrincipal()> -> _SOURCE_
<javax.net.ssl.SSLSession: String getProtocol()> -> _SOURCE_
<javax.net.ssl.SSLSession: SSLSessionContext getSessionContext()> -> _SOURCE_
<javax.net.ssl.SSLSession: Object getValue(java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLSession: String[] getValueNames()> -> _SOURCE_
<javax.net.ssl.SSLSession: void invalidate()> -> _SINK_
<javax.net.ssl.SSLSession: boolean isValid()> -> _SOURCE_
<javax.net.ssl.SSLSession: void putValue(java.lang.String,java.lang.Object)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: String getCipherSuite()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: HostnameVerifier getDefaultHostnameVerifier()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: SSLSocketFactory getDefaultSSLSocketFactory()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: Certificate[] getLocalCertificates()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: Certificate[] getServerCertificates()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)> -> _SINK_
<javax.net.ssl.SSLServerSocket: boolean getEnableSessionCreation()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: String[] getEnabledCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: String[] getEnabledProtocols()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: boolean getNeedClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: javax.net.ssl.SSLParameters getSSLParameters()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: String[] getSupportedCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: String[] getSupportedProtocols()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: boolean getUseClientMode()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: boolean getWantClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLServerSocket: void setEnabledCipherSuites(String[])> -> _SINK_
<javax.net.ssl.SSLServerSocket: void setEnabledProtocols(String[])> -> _SINK_
<javax.net.ssl.SSLServerSocket: void setNeedClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLServerSocket: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SINK_
<javax.net.ssl.SSLServerSocket: void setUseClientMode(boolean)> -> _SINK_
<javax.net.ssl.SSLServerSocket: void setWantClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLServerSocket: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.security.AlgorithmConstraints getAlgorithmConstraints()> -> _SOURCE_
<javax.net.ssl.SSLParameters: String[] getApplicationProtocols()> -> _SOURCE_
<javax.net.ssl.SSLParameters: String[] getCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String getEndpointIdentificationAlgorithm()> -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLParameters: String[] getProtocols()> -> _SOURCE_
<javax.net.ssl.SSLParameters: Collection<SNIMatcher> getSNIMatchers()> -> _SOURCE_
<javax.net.ssl.SSLParameters: List<SNIServerName> getServerNames()> -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getUseCipherSuitesOrder()> -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLParameters: void setAlgorithmConstraints(java.security.AlgorithmConstraints)> -> _SINK_
<javax.net.ssl.SSLParameters: void setApplicationProtocols(String[])> -> _SINK_
<javax.net.ssl.SSLParameters: void setCipherSuites(String[])> -> _SINK_
<javax.net.ssl.SSLParameters: void setEndpointIdentificationAlgorithm(java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLParameters: void setNeedClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLParameters: void setProtocols(String[])> -> _SINK_
<javax.net.ssl.SSLParameters: void setSNIMatchers(Collection<SNIMatcher>)> -> _SINK_
<javax.net.ssl.SSLParameters: void setServerNames(List<SNIServerName>)> -> _SINK_
<javax.net.ssl.SSLParameters: void setUseCipherSuitesOrder(boolean)> -> _SINK_
<javax.net.ssl.SSLParameters: void setWantClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()> -> _SOURCE_
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()> -> _SOURCE_
<javax.net.ssl.SSLSessionContext: Enumeration<byte[]> getIds()> -> _SOURCE_
<javax.net.ssl.SSLSessionContext: SSLSession getSession(byte[])> -> _SOURCE_
<javax.net.ssl.SSLSessionContext: int getSessionCacheSize()> -> _SOURCE_
<javax.net.ssl.SSLSessionContext: int getSessionTimeout()> -> _SOURCE_
<javax.net.ssl.SSLSessionContext: void setSessionCacheSize(int)> -> _SINK_
<javax.net.ssl.SSLSessionContext: void setSessionTimeout(int)> -> _SINK_
<javax.net.ssl.SSLSocketFactory: SocketFactory getDefault()> -> _SOURCE_
<javax.net.ssl.SSLSocketFactory: String[] getDefaultCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLSocketFactory: String[] getSupportedCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLServerSocketFactory: String[] getDefaultCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLServerSocketFactory: String[] getSupportedCipherSuites()> -> _SOURCE_
<javax.net.ssl.X509ExtendedTrustManager: void checkClientTrusted(X509Certificate[],java.lang.String,java.net.Socket)> -> _SOURCE_
<javax.net.ssl.X509ExtendedTrustManager: void checkClientTrusted(X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)> -> _SOURCE_
<javax.net.ssl.X509ExtendedTrustManager: void checkServerTrusted(X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)> -> _SOURCE_
<javax.net.ssl.X509ExtendedTrustManager: void checkServerTrusted(X509Certificate[],java.lang.String,java.net.Socket)> -> _SOURCE_
<javax.net.ssl.X509KeyManager: String chooseClientAlias(String[],Principal[],java.net.Socket)> -> _SINK_
<javax.net.ssl.X509KeyManager: String chooseServerAlias(java.lang.String,Principal[],java.net.Socket)> -> _SINK_
<javax.net.ssl.X509KeyManager: X509Certificate[] getCertificateChain(java.lang.String)> -> _SOURCE_
<javax.net.ssl.X509KeyManager: String[] getClientAliases(java.lang.String,Principal[])> -> _SOURCE_
<javax.net.ssl.X509KeyManager: PrivateKey getPrivateKey(java.lang.String)> -> _SOURCE_
<javax.net.ssl.X509KeyManager: String[] getServerAliases(java.lang.String,Principal[])> -> _SOURCE_
<javax.security.auth.Subject:  T doAsPrivileged(javax.security.auth.Subject,PrivilegedExceptionAction,java.security.AccessControlContext)> -> _SINK_
<javax.security.auth.Subject:  T doAsPrivileged(javax.security.auth.Subject,PrivilegedAction,java.security.AccessControlContext)> -> _SINK_
<javax.security.auth.Subject: Set<Principal> getPrincipals()> -> _SINK_
<javax.security.auth.Subject: <T extends Principal> Set getPrincipals(Class)> -> _SOURCE_
<javax.security.auth.Subject:  Set getPrivateCredentials(Class)> -> _SOURCE_
<javax.security.auth.Subject: Set<Object> getPrivateCredentials()> -> _SOURCE_
<javax.security.auth.Subject: Set<Object> getPublicCredentials()> -> _SOURCE_
<javax.security.auth.Subject:  Set getPublicCredentials(Class)> -> _SOURCE_
<javax.security.auth.Subject: Subject getSubject(java.security.AccessControlContext)> -> _SOURCE_
<javax.security.auth.Subject: int hashCode()> -> _SOURCE_
<javax.security.auth.Subject: boolean isReadOnly()> -> _SOURCE_
<javax.security.auth.Subject: java.lang.String toString()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: byte[] getEncoded()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)> -> _SOURCE_
<javax.security.auth.x500.X500Principal: java.lang.String getName()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map -> _SOURCE_
<javax.security.auth.x500.X500Principal: int hashCode()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: java.lang.String toString()> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: char[] getPassword()> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: java.lang.String getPrompt()> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: boolean isEchoOn()> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: void setPassword(char[])> -> _SOURCE_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(String[],Principal[],javax.net.ssl.SSLEngine)> -> _SOURCE_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,Principal[],javax.net.ssl.SSLEngine)> -> _SINK_
<javax.security.auth.callback.CallbackHandler: void handle(Callback[])> -> _SOURCE_
<java.security.Certificate: byte[] getEncoded()> -> _SOURCE_
<java.security.Certificate: PublicKey getPublicKey()> -> _SOURCE_
<java.security.Certificate: int hashCode()> -> _SOURCE_
<java.security.Certificate: String toString()> -> _SOURCE_
<java.security.Certificate: void verify(java.security.PublicKey,java.lang.String)> -> _SINK_
<java.security.Certificate: void verify(java.security.PublicKey)> -> _SINK_
<javax.net.ssl.TrustManagerFactory: String getAlgorithm()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: String getDefaultAlgorithm()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: Provider getProvider()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: TrustManager[] getTrustManagers()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)> -> _SINK_
<javax.security.auth.callback.UnsupportedCallbackException: javax.security.auth.callback.Callback getCallback()> -> _SOURCE_
<javax.net.ssl.SSLSocket: java.lang.String getApplicationProtocol()> -> _SOURCE_
<javax.net.ssl.SSLSocket: boolean getEnableSessionCreation()> -> _SOURCE_
<javax.net.ssl.SSLSocket: String[] getEnabledCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLSocket: String[] getEnabledProtocols()> -> _SOURCE_
<javax.net.ssl.SSLSocket: java.lang.String getHandshakeApplicationProtocol()> -> _SOURCE_
<javax.net.ssl.SSLSocket: BiFunction<SSLSocket, List<String>, String> getHandshakeApplicationProtocolSelector()> -> _SOURCE_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getHandshakeSession()> -> _SOURCE_
<javax.net.ssl.SSLSocket: boolean getNeedClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()> -> _SOURCE_
<javax.net.ssl.SSLSocket: SSLSession getSession()> -> _SOURCE_
<javax.net.ssl.SSLSocket: String[] getSupportedCipherSuites()> -> _SOURCE_
<javax.net.ssl.SSLSocket: String[] getSupportedProtocols()> -> _SOURCE_
<javax.net.ssl.SSLSocket: boolean getUseClientMode()> -> _SOURCE_
<javax.net.ssl.SSLSocket: boolean getWantClientAuth()> -> _SOURCE_
<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(String[])> -> _SINK_
<javax.net.ssl.SSLSocket: void setEnabledProtocols(String[])> -> _SINK_
<javax.net.ssl.SSLSocket: void setHandshakeApplicationProtocolSelector(BiFunction<SSLSocket,)> -> _SOURCE_
<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)> -> _SINK_
<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SINK_
<javax.net.ssl.SSLSocket: void setUseClientMode(boolean)> -> _SINK_
<javax.net.ssl.SSLSocket: void setWantClientAuth(boolean)> -> _SINK_
<javax.sql.ConnectionEvent: android.database.SQLException getSQLException()> -> _SOURCE_
<javax.sql.CommonDataSource: PrintWriter getLogWriter()> -> _SOURCE_
<javax.sql.CommonDataSource: int getLoginTimeout()> -> _SOURCE_
<javax.sql.CommonDataSource: Logger getParentLogger()> -> _SOURCE_
<javax.sql.CommonDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<javax.sql.CommonDataSource: void setLoginTimeout(int)> -> _SINK_
<java.security.cert.X509Certificate: X509Certificate getInstance(byte[])> -> _SINK_
<java.security.cert.X509Certificate: Principal getIssuerDN()> -> _SOURCE_
<java.security.cert.X509Certificate: Date getNotAfter()> -> _SOURCE_
<java.security.cert.X509Certificate: Date getNotBefore()> -> _SOURCE_
<java.security.cert.X509Certificate: BigInteger getSerialNumber()> -> _SOURCE_
<java.security.cert.X509Certificate: String getSigAlgName()> -> _SOURCE_
<java.security.cert.X509Certificate: String getSigAlgOID()> -> _SOURCE_
<java.security.cert.X509Certificate: byte[] getSigAlgParams()> -> _SOURCE_
<java.security.cert.X509Certificate: Principal getSubjectDN()> -> _SOURCE_
<java.security.cert.X509Certificate: int getVersion()> -> _SOURCE_
<javax.sql.RowSetMetaData: void setCaseSensitive(int,boolean)> -> _SINK_
<javax.sql.RowSetMetaData: void setCatalogName(int,java.lang.String)> -> _SINK_
<javax.sql.RowSetMetaData: void setColumnDisplaySize(int,int)> -> _SINK_
<javax.sql.RowSetMetaData: void setColumnLabel(int,java.lang.String)> -> _SINK_
<javax.sql.RowSetMetaData: void setColumnName(int,java.lang.String)> -> _SINK_
<javax.sql.RowSetMetaData: void setColumnType(int,int)> -> _SINK_
<javax.sql.RowSetMetaData: void setColumnTypeName(int,java.lang.String)> -> _SINK_
<javax.sql.RowSetMetaData: void setCurrency(int,boolean)> -> _SINK_
<javax.sql.RowSetMetaData: void setNullable(int,int)> -> _SINK_
<javax.sql.RowSetMetaData: void setPrecision(int,int)> -> _SINK_
<javax.sql.RowSetMetaData: void setScale(int,int)> -> _SINK_
<javax.sql.RowSetMetaData: void setSchemaName(int,java.lang.String)> -> _SINK_
<javax.sql.RowSetMetaData: void setSearchable(int,boolean)> -> _SINK_
<javax.sql.RowSetMetaData: void setSigned(int,boolean)> -> _SINK_
<javax.sql.RowSetMetaData: void setTableName(int,java.lang.String)> -> _SINK_
<javax.net.ssl.X509TrustManager: void checkClientTrusted(X509Certificate[],java.lang.String)> -> _SOURCE_
<javax.net.ssl.X509TrustManager: void checkServerTrusted(X509Certificate[],java.lang.String)> -> _SOURCE_
<javax.net.ssl.X509TrustManager: X509Certificate[] getAcceptedIssuers()> -> _SOURCE_
<javax.sql.ConnectionPoolDataSource: PooledConnection getPooledConnection()> -> _SINK_
<javax.sql.ConnectionPoolDataSource: PooledConnection getPooledConnection(java.lang.String,java.lang.String)> -> _SINK_
<javax.xml.datatype.DatatypeConstants.Field: int getId()> -> _SOURCE_
<javax.xml.datatype.DatatypeConstants.Field: java.lang.String toString()> -> _SOURCE_
<java.time.Duration: void addTo(android.icu.util.Calendar)> -> _SINK_
<java.time.Duration: void addTo(java.sql.Date)> -> _SINK_
<java.time.Duration: int getDays()> -> _SOURCE_
<java.time.Duration: Number getField(javax.xml.datatype.DatatypeConstants.Field)> -> _SOURCE_
<java.time.Duration: int getHours()> -> _SOURCE_
<java.time.Duration: int getMinutes()> -> _SOURCE_
<java.time.Duration: int getSeconds()> -> _SOURCE_
<java.time.Duration: long getTimeInMillis(android.icu.util.Calendar)> -> _SOURCE_
<java.time.Duration: long getTimeInMillis(java.sql.Date)> -> _SOURCE_
<java.time.Duration: javax.xml.namespace.QName getXMLSchemaType()> -> _SOURCE_
<java.time.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants.Field)> -> _SOURCE_
<java.time.Duration: Duration negate()> -> _SOURCE_
<java.time.Duration: java.lang.String toString()> -> _SOURCE_
<javax.sql.StatementEvent: android.database.SQLException getSQLException()> -> _SOURCE_
<javax.sql.StatementEvent: java.sql.PreparedStatement getStatement()> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: Duration newDuration(java.lang.String)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: java.time.Duration newDurationDayTime(long)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: java.time.Duration newDurationDayTime(java.lang.String)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: java.time.Duration newDurationYearMonth(java.lang.String)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: java.time.Duration newDurationYearMonth(long)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: DatatypeFactory newInstance(java.lang.String,java.lang.ClassLoader)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(int,int,int,int,int,int,int,int)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarDate(int,int,int,int)> -> _SOURCE_
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,android.icu.math.BigDecimal,int)> -> _SINK_
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,int,int)> -> _SINK_
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,int)> -> _SINK_
<javax.xml.namespace.NamespaceContext: String getNamespaceURI(java.lang.String)> -> _SOURCE_
<javax.xml.namespace.NamespaceContext: String getPrefix(java.lang.String)> -> _SOURCE_
<javax.xml.namespace.NamespaceContext: Iterator getPrefixes(java.lang.String)> -> _SOURCE_
<javax.sql.RowSetWriter: boolean writeData(javax.sql.RowSetInternal)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: Object getAttribute(java.lang.String)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: boolean getFeature(java.lang.String)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.validation.Schema getSchema()> -> _SOURCE_
<javax.xml.parsers.DocumentBuilderFactory: boolean isXIncludeAware()> -> _SOURCE_
<javax.xml.parsers.DocumentBuilderFactory: DocumentBuilderFactory newInstance(java.lang.String,java.lang.ClassLoader)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilderFactory: DocumentBuilderFactory newInstance()> -> _SOURCE_
<javax.xml.parsers.DocumentBuilderFactory: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)> -> _SINK_
<javax.xml.parsers.DocumentBuilderFactory: void setXIncludeAware(boolean)> -> _SINK_
<javax.xml.namespace.QName: java.lang.String getLocalPart()> -> _SOURCE_
<javax.xml.namespace.QName: java.lang.String getNamespaceURI()> -> _SOURCE_
<javax.xml.namespace.QName: java.lang.String getPrefix()> -> _SOURCE_
<javax.xml.namespace.QName: int hashCode()> -> _SOURCE_
<javax.xml.namespace.QName: java.lang.String toString()> -> _SOURCE_
<javax.xml.namespace.QName: QName valueOf(java.lang.String)> -> _SOURCE_
<javax.xml.parsers.SAXParser: Parser getParser()> -> _SOURCE_
<javax.xml.parsers.SAXParser: Object getProperty(java.lang.String)> -> _SOURCE_
<javax.xml.parsers.SAXParser: javax.xml.validation.Schema getSchema()> -> _SOURCE_
<javax.xml.parsers.SAXParser: XMLReader getXMLReader()> -> _SOURCE_
<javax.xml.parsers.SAXParser: boolean isXIncludeAware()> -> _SOURCE_
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.HandlerBase)> -> _SOURCE_
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.HandlerBase)> -> _SOURCE_
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)> -> _SOURCE_
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.helpers.DefaultHandler)> -> _SOURCE_
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)> -> _SOURCE_
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)> -> _SOURCE_
<javax.xml.parsers.SAXParser: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<javax.sql.RowSetInternal: Connection getConnection()> -> _SOURCE_
<javax.sql.RowSetInternal: ResultSet getOriginal()> -> _SOURCE_
<javax.sql.RowSetInternal: ResultSet getOriginalRow()> -> _SOURCE_
<javax.sql.RowSetInternal: Object[] getParams()> -> _SOURCE_
<javax.sql.RowSetInternal: void setMetaData(javax.sql.RowSetMetaData)> -> _SINK_
<javax.xml.parsers.DocumentBuilder: DOMImplementation getDOMImplementation()> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: javax.xml.validation.Schema getSchema()> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: boolean isXIncludeAware()> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: androidx.appsearch.annotation.Document parse(java.lang.String)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: androidx.appsearch.annotation.Document parse(java.io.InputStream)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: androidx.appsearch.annotation.Document parse(java.io.InputStream,java.lang.String)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: androidx.appsearch.annotation.Document parse(java.io.File)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)> -> _SOURCE_
<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)> -> _SOURCE_
<javax.xml.parsers.SAXParserFactory: boolean getFeature(java.lang.String)> -> _SOURCE_
<javax.xml.parsers.SAXParserFactory: javax.xml.validation.Schema getSchema()> -> _SOURCE_
<javax.xml.parsers.SAXParserFactory: boolean isXIncludeAware()> -> _SOURCE_
<javax.xml.parsers.SAXParserFactory: SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)> -> _SOURCE_
<javax.xml.parsers.SAXParserFactory: SAXParserFactory newInstance()> -> _SOURCE_
<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)> -> _SINK_
<javax.xml.parsers.SAXParserFactory: void setXIncludeAware(boolean)> -> _SINK_
<javax.xml.parsers.FactoryConfigurationError: java.lang.Exception getException()> -> _SOURCE_
<javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()> -> _SOURCE_
<javax.sql.RowSet: void clearParameters()> -> _SINK_
<javax.sql.RowSet: void execute()> -> _SINK_
<javax.sql.RowSet: String getCommand()> -> _SOURCE_
<javax.sql.RowSet: String getDataSourceName()> -> _SOURCE_
<javax.sql.RowSet: boolean getEscapeProcessing()> -> _SOURCE_
<javax.sql.RowSet: int getMaxFieldSize()> -> _SOURCE_
<javax.sql.RowSet: int getMaxRows()> -> _SOURCE_
<javax.sql.RowSet: String getPassword()> -> _SOURCE_
<javax.sql.RowSet: int getQueryTimeout()> -> _SOURCE_
<javax.sql.RowSet: int getTransactionIsolation()> -> _SOURCE_
<javax.sql.RowSet: java.util.Map> getTypeMap()> -> _SOURCE_
<javax.sql.RowSet: String getUrl()> -> _SOURCE_
<javax.sql.RowSet: String getUsername()> -> _SOURCE_
<javax.sql.RowSet: boolean isReadOnly()> -> _SOURCE_
<javax.sql.RowSet: void setArray(int,java.lang.reflect.Array)> -> _SINK_
<javax.sql.RowSet: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<javax.sql.RowSet: void setAsciiStream(int,java.io.InputStream)> -> _SINK_
<javax.sql.RowSet: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<javax.sql.RowSet: void setAsciiStream(java.lang.String,java.io.InputStream)> -> _SINK_
<javax.sql.RowSet: void setBigDecimal(int,android.icu.math.BigDecimal)> -> _SINK_
<javax.sql.RowSet: void setBigDecimal(java.lang.String,android.icu.math.BigDecimal)> -> _SINK_
<javax.sql.RowSet: void setBinaryStream(java.lang.String,java.io.InputStream)> -> _SINK_
<javax.sql.RowSet: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<javax.sql.RowSet: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<javax.sql.RowSet: void setBinaryStream(int,java.io.InputStream)> -> _SINK_
<javax.sql.RowSet: void setBlob(int,java.io.InputStream,long)> -> _SINK_
<javax.sql.RowSet: void setBlob(int,java.io.InputStream)> -> _SINK_
<javax.sql.RowSet: void setBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<javax.sql.RowSet: void setBlob(java.lang.String,java.io.InputStream,long)> -> _SINK_
<javax.sql.RowSet: void setBlob(int,java.sql.Blob)> -> _SINK_
<javax.sql.RowSet: void setBlob(java.lang.String,java.io.InputStream)> -> _SINK_
<javax.sql.RowSet: void setBoolean(java.lang.String,boolean)> -> _SINK_
<javax.sql.RowSet: void setBoolean(int,boolean)> -> _SINK_
<javax.sql.RowSet: void setByte(int,byte)> -> _SINK_
<javax.sql.RowSet: void setByte(java.lang.String,byte)> -> _SINK_
<javax.sql.RowSet: void setBytes(java.lang.String,byte[])> -> _SINK_
<javax.sql.RowSet: void setBytes(int,byte[])> -> _SINK_
<javax.sql.RowSet: void setCharacterStream(int,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setCharacterStream(java.lang.String,android.se.omapi.Reader,int)> -> _SINK_
<javax.sql.RowSet: void setCharacterStream(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setCharacterStream(int,android.se.omapi.Reader,int)> -> _SINK_
<javax.sql.RowSet: void setClob(int,java.sql.Clob)> -> _SINK_
<javax.sql.RowSet: void setClob(int,android.se.omapi.Reader,long)> -> _SINK_
<javax.sql.RowSet: void setClob(int,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setClob(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<javax.sql.RowSet: void setClob(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setCommand(java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setConcurrency(int)> -> _SINK_
<javax.sql.RowSet: void setDataSourceName(java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setDate(java.lang.String,java.sql.Date,android.icu.util.Calendar)> -> _SINK_
<javax.sql.RowSet: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<javax.sql.RowSet: void setDate(int,java.sql.Date)> -> _SINK_
<javax.sql.RowSet: void setDate(int,java.sql.Date,android.icu.util.Calendar)> -> _SINK_
<javax.sql.RowSet: void setDouble(int,double)> -> _SINK_
<javax.sql.RowSet: void setDouble(java.lang.String,double)> -> _SINK_
<javax.sql.RowSet: void setEscapeProcessing(boolean)> -> _SINK_
<javax.sql.RowSet: void setFloat(java.lang.String,float)> -> _SINK_
<javax.sql.RowSet: void setFloat(int,float)> -> _SINK_
<javax.sql.RowSet: void setInt(java.lang.String,int)> -> _SINK_
<javax.sql.RowSet: void setLong(int,long)> -> _SINK_
<javax.sql.RowSet: void setLong(java.lang.String,long)> -> _SINK_
<javax.sql.RowSet: void setMaxFieldSize(int)> -> _SINK_
<javax.sql.RowSet: void setMaxRows(int)> -> _SINK_
<javax.sql.RowSet: void setNCharacterStream(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<javax.sql.RowSet: void setNCharacterStream(int,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setNCharacterStream(int,android.se.omapi.Reader,long)> -> _SINK_
<javax.sql.RowSet: void setNCharacterStream(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setNClob(java.lang.String,android.se.omapi.Reader,long)> -> _SINK_
<javax.sql.RowSet: void setNClob(java.lang.String,java.sql.NClob)> -> _SINK_
<javax.sql.RowSet: void setNClob(int,android.se.omapi.Reader,long)> -> _SINK_
<javax.sql.RowSet: void setNClob(java.lang.String,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setNClob(int,java.sql.NClob)> -> _SINK_
<javax.sql.RowSet: void setNClob(int,android.se.omapi.Reader)> -> _SINK_
<javax.sql.RowSet: void setNString(int,java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setNString(java.lang.String,java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setNull(java.lang.String,int)> -> _SINK_
<javax.sql.RowSet: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<javax.sql.RowSet: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<javax.sql.RowSet: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<javax.sql.RowSet: void setPassword(java.lang.String)> -> _SOURCE_
<javax.sql.RowSet: void setQueryTimeout(int)> -> _SINK_
<javax.sql.RowSet: void setReadOnly(boolean)> -> _SINK_
<javax.sql.RowSet: void setRef(int,androidx.compose.ui.node.Ref)> -> _SINK_
<javax.sql.RowSet: void setRowId(int,java.sql.RowId)> -> _SOURCE_
<javax.sql.RowSet: void setRowId(java.lang.String,java.sql.RowId)> -> _SOURCE_
<javax.sql.RowSet: void setSQLXML(int,java.sql.SQLXML)> -> _SINK_
<javax.sql.RowSet: void setSQLXML(java.lang.String,java.sql.SQLXML)> -> _SINK_
<javax.sql.RowSet: void setShort(int,short)> -> _SINK_
<javax.sql.RowSet: void setShort(java.lang.String,short)> -> _SINK_
<javax.sql.RowSet: void setString(java.lang.String,java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setString(int,java.lang.String)> -> _SINK_
<javax.sql.RowSet: void setTime(int,android.text.format.Time,android.icu.util.Calendar)> -> _SINK_
<javax.sql.RowSet: void setTime(java.lang.String,android.text.format.Time)> -> _SINK_
<javax.sql.RowSet: void setTime(int,android.text.format.Time)> -> _SINK_
<javax.sql.RowSet: void setTimestamp(int,java.security.Timestamp,android.icu.util.Calendar)> -> _SOURCE_
<javax.sql.RowSet: void setTimestamp(java.lang.String,java.security.Timestamp,android.icu.util.Calendar)> -> _SINK_
<javax.sql.RowSet: void setTimestamp(java.lang.String,java.security.Timestamp)> -> _SINK_
<javax.sql.RowSet: void setTimestamp(int,java.security.Timestamp)> -> _SOURCE_
<javax.sql.RowSet: void setTransactionIsolation(int)> -> _SINK_
<javax.sql.RowSet: void setType(int)> -> _SINK_
<javax.sql.RowSet: void setURL(int,java.net.URL)> -> _SINK_
<javax.sql.RowSet: void setUrl(java.lang.String)> -> _SOURCE_
<javax.sql.RowSet: void setUsername(java.lang.String)> -> _SINK_
<javax.xml.transform.Result: String getSystemId()> -> _SOURCE_
<javax.xml.transform.Result: void setSystemId(java.lang.String)> -> _SOURCE_
<javax.xml.transform.Source: String getSystemId()> -> _SOURCE_
<javax.xml.transform.Source: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.transform.dom.DOMLocator: Node getOriginatingNode()> -> _SOURCE_
<javax.xml.transform.ErrorListener: void error(javax.xml.transform.TransformerException)> -> _SOURCE_
<javax.xml.transform.ErrorListener: void fatalError(javax.xml.transform.TransformerException)> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: void add(java.time.Duration)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: int compare(javax.xml.datatype.XMLGregorianCalendar)> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getDay()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: BigInteger getEon()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: BigInteger getEonAndYear()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: BigDecimal getFractionalSecond()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getHour()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getMillisecond()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getMinute()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getMonth()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getSecond()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: TimeZone getTimeZone(int)> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getTimezone()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: QName getXMLSchemaType()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: int getYear()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: boolean isValid()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: XMLGregorianCalendar normalize()> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setDay(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setFractionalSecond(android.icu.math.BigDecimal)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setHour(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setMillisecond(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setMinute(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setMonth(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setSecond(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int,android.icu.math.BigDecimal)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int,int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setTimezone(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setYear(java.math.BigInteger)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: void setYear(int)> -> _SINK_
<javax.xml.datatype.XMLGregorianCalendar: java.lang.String toString()> -> _SOURCE_
<javax.xml.datatype.XMLGregorianCalendar: String toXMLFormat()> -> _SOURCE_
<javax.xml.transform.TransformerException: java.lang.Throwable getCause()> -> _SOURCE_
<javax.xml.transform.TransformerException: java.lang.Throwable getException()> -> _SOURCE_
<javax.xml.transform.TransformerException: java.lang.String getLocationAsString()> -> _SOURCE_
<javax.xml.transform.TransformerException: javax.xml.transform.SourceLocator getLocator()> -> _SOURCE_
<javax.xml.transform.TransformerException: java.lang.String getMessageAndLocation()> -> _SOURCE_
<javax.xml.transform.SourceLocator: int getColumnNumber()> -> _SOURCE_
<javax.xml.transform.SourceLocator: int getLineNumber()> -> _SOURCE_
<javax.xml.transform.SourceLocator: String getPublicId()> -> _SOURCE_
<javax.xml.transform.SourceLocator: String getSystemId()> -> _SOURCE_
<javax.xml.transform.TransformerFactoryConfigurationError: java.lang.Exception getException()> -> _SOURCE_
<javax.xml.transform.TransformerFactoryConfigurationError: java.lang.String getMessage()> -> _SOURCE_
<javax.xml.transform.TransformerFactory: Source getAssociatedStylesheet(javax.xml.transform.Source,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<javax.xml.transform.TransformerFactory: Object getAttribute(java.lang.String)> -> _SINK_
<javax.xml.transform.TransformerFactory: boolean getFeature(java.lang.String)> -> _SOURCE_
<javax.xml.transform.TransformerFactory: URIResolver getURIResolver()> -> _SOURCE_
<javax.xml.transform.TransformerFactory: TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)> -> _SOURCE_
<javax.xml.transform.TransformerFactory: TransformerFactory newInstance()> -> _SOURCE_
<javax.xml.transform.TransformerFactory: Templates newTemplates(javax.xml.transform.Source)> -> _SOURCE_
<javax.xml.transform.TransformerFactory: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<javax.xml.transform.sax.TemplatesHandler: String getSystemId()> -> _SOURCE_
<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()> -> _SOURCE_
<javax.xml.transform.dom.DOMSource: java.lang.String getSystemId()> -> _SOURCE_
<javax.xml.transform.dom.DOMSource: void setNode(org.w3c.dom.Node)> -> _SINK_
<javax.xml.transform.dom.DOMSource: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.transform.sax.SAXResult: java.net.ContentHandler getHandler()> -> _SOURCE_
<javax.xml.transform.sax.SAXResult: org.xml.sax.ext.LexicalHandler getLexicalHandler()> -> _SOURCE_
<javax.xml.transform.sax.SAXResult: java.lang.String getSystemId()> -> _SOURCE_
<javax.xml.transform.sax.SAXResult: void setHandler(java.net.ContentHandler)> -> _SINK_
<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)> -> _SINK_
<javax.xml.transform.Templates: Properties getOutputProperties()> -> _SOURCE_
<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()> -> _SOURCE_
<javax.xml.transform.stream.StreamSource: java.lang.String getPublicId()> -> _SOURCE_
<javax.xml.transform.stream.StreamSource: android.se.omapi.Reader getReader()> -> _SOURCE_
<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()> -> _SOURCE_
<javax.xml.transform.stream.StreamSource: void setInputStream(java.io.InputStream)> -> _SINK_
<javax.xml.transform.stream.StreamSource: void setPublicId(java.lang.String)> -> _SINK_
<javax.xml.transform.stream.StreamSource: void setReader(android.se.omapi.Reader)> -> _SINK_
<javax.xml.transform.stream.StreamSource: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.transform.stream.StreamSource: void setSystemId(java.io.File)> -> _SOURCE_
<android.service.autofill.Validator: ErrorHandler getErrorHandler()> -> _SOURCE_
<android.service.autofill.Validator: boolean getFeature(java.lang.String)> -> _SOURCE_
<android.service.autofill.Validator: java.lang.Object getProperty(java.lang.String)> -> _SOURCE_
<android.service.autofill.Validator: LSResourceResolver getResourceResolver()> -> _SOURCE_
<android.service.autofill.Validator: void setErrorHandler(org.xml.sax.ErrorHandler)> -> _SINK_
<android.service.autofill.Validator: void setFeature(java.lang.String,boolean)> -> _SINK_
<android.service.autofill.Validator: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.service.autofill.Validator: void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)> -> _SINK_
<javax.xml.transform.Transformer: void clearParameters()> -> _SINK_
<javax.xml.transform.Transformer: ErrorListener getErrorListener()> -> _SOURCE_
<javax.xml.transform.Transformer: Properties getOutputProperties()> -> _SOURCE_
<javax.xml.transform.Transformer: String getOutputProperty(java.lang.String)> -> _SOURCE_
<javax.xml.transform.Transformer: Object getParameter(java.lang.String)> -> _SOURCE_
<javax.xml.transform.Transformer: URIResolver getURIResolver()> -> _SOURCE_
<javax.xml.transform.Transformer: void setOutputProperties(java.util.Properties)> -> _SINK_
<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)> -> _SINK_
<javax.xml.transform.Transformer: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<javax.xml.transform.Transformer: void setURIResolver(javax.xml.transform.URIResolver)> -> _SOURCE_
<javax.xml.xpath.XPath: Object evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPath: String evaluate(java.lang.String,java.lang.Object)> -> _SOURCE_
<javax.xml.xpath.XPath: Object evaluate(java.lang.String,org.xml.sax.InputSource,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPath: String evaluate(java.lang.String,org.xml.sax.InputSource)> -> _SOURCE_
<javax.xml.xpath.XPath: NamespaceContext getNamespaceContext()> -> _SOURCE_
<javax.xml.xpath.XPath: XPathFunctionResolver getXPathFunctionResolver()> -> _SOURCE_
<javax.xml.xpath.XPath: XPathVariableResolver getXPathVariableResolver()> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: ContentHandler getContentHandler()> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: ErrorHandler getErrorHandler()> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: boolean getFeature(java.lang.String)> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: java.lang.Object getProperty(java.lang.String)> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: LSResourceResolver getResourceResolver()> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: TypeInfoProvider getTypeInfoProvider()> -> _SOURCE_
<javax.xml.validation.ValidatorHandler: void setFeature(java.lang.String,boolean)> -> _SINK_
<javax.xml.validation.ValidatorHandler: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<javax.xml.validation.ValidatorHandler: void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)> -> _SINK_
<javax.xml.xpath.XPathException: java.lang.Throwable getCause()> -> _SOURCE_
<javax.xml.xpath.XPathException: void printStackTrace()> -> _SINK_
<javax.xml.xpath.XPathException: void printStackTrace(java.io.PrintWriter)> -> _SINK_
<javax.xml.xpath.XPathException: void printStackTrace(java.io.PrintStream)> -> _SINK_
<javax.xml.transform.sax.TransformerHandler: String getSystemId()> -> _SOURCE_
<javax.xml.transform.sax.TransformerHandler: Transformer getTransformer()> -> _SOURCE_
<javax.xml.transform.sax.TransformerHandler: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.validation.TypeInfoProvider: TypeInfo getAttributeTypeInfo(int)> -> _SOURCE_
<javax.xml.validation.TypeInfoProvider: TypeInfo getElementTypeInfo()> -> _SOURCE_
<javax.xml.validation.TypeInfoProvider: boolean isIdAttribute(int)> -> _SOURCE_
<javax.xml.validation.TypeInfoProvider: boolean isSpecified(int)> -> _SOURCE_
<javax.xml.xpath.XPathFunctionResolver: XPathFunction resolveFunction(javax.xml.namespace.QName,int)> -> _SOURCE_
<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()> -> _SOURCE_
<javax.xml.transform.stream.StreamResult: java.lang.String getSystemId()> -> _SOURCE_
<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()> -> _SOURCE_
<javax.xml.transform.stream.StreamResult: void setOutputStream(java.io.OutputStream)> -> _SINK_
<javax.xml.transform.stream.StreamResult: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.transform.stream.StreamResult: void setSystemId(java.io.File)> -> _SOURCE_
<javax.xml.transform.stream.StreamResult: void setWriter(java.io.Writer)> -> _SINK_
<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNode()> -> _SOURCE_
<javax.xml.transform.dom.DOMResult: java.lang.String getSystemId()> -> _SOURCE_
<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.xpath.XPathVariableResolver: Object resolveVariable(javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource getInputSource()> -> _SOURCE_
<javax.xml.transform.sax.SAXSource: java.lang.String getSystemId()> -> _SOURCE_
<javax.xml.transform.sax.SAXSource: void setInputSource(org.xml.sax.InputSource)> -> _SINK_
<javax.xml.transform.sax.SAXSource: void setSystemId(java.lang.String)> -> _SINK_
<javax.xml.transform.sax.SAXSource: InputSource sourceToInputSource(javax.xml.transform.Source)> -> _SOURCE_
<android.test.ComparisonFailure: java.lang.String getActual()> -> _SOURCE_
<android.test.ComparisonFailure: java.lang.String getExpected()> -> _SOURCE_
<android.test.ComparisonFailure: java.lang.String getMessage()> -> _SOURCE_
<javax.xml.validation.SchemaFactory: ErrorHandler getErrorHandler()> -> _SOURCE_
<javax.xml.validation.SchemaFactory: boolean getFeature(java.lang.String)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: java.lang.Object getProperty(java.lang.String)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: LSResourceResolver getResourceResolver()> -> _SOURCE_
<javax.xml.validation.SchemaFactory: boolean isSchemaLanguageSupported(java.lang.String)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: SchemaFactory newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: SchemaFactory newInstance(java.lang.String)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(java.io.File)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: Schema newSchema()> -> _SINK_
<javax.xml.validation.SchemaFactory: Schema newSchema(Source[])> -> _SOURCE_
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(java.net.URL)> -> _SOURCE_
<javax.xml.validation.SchemaFactory: void setFeature(java.lang.String,boolean)> -> _SINK_
<javax.xml.validation.SchemaFactory: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<junit.framework.TestListener: void endTest(junit.framework.Test)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: String evaluate(java.lang.Object)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: String evaluate(org.xml.sax.InputSource)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: Object evaluate(org.xml.sax.InputSource,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: Object evaluate(java.lang.Object,javax.xml.namespace.QName)> -> _SOURCE_
<junit.framework.TestCase: java.lang.String getName()> -> _SOURCE_
<junit.framework.TestCase: junit.framework.TestResult run()> -> _SOURCE_
<junit.framework.TestCase: void setName(java.lang.String)> -> _SINK_
<junit.framework.TestCase: java.lang.String toString()> -> _SOURCE_
<junit.framework.TestResult: int errorCount()> -> _SOURCE_
<junit.framework.TestResult: Enumeration<TestFailure> errors()> -> _SOURCE_
<junit.framework.TestResult: Enumeration<TestFailure> failures()> -> _SOURCE_
<junit.framework.TestResult: boolean wasSuccessful()> -> _SOURCE_
<org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)> -> _SOURCE_
<org.apache.http.params.HttpParams: double getDoubleParameter(java.lang.String,double)> -> _SOURCE_
<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)> -> _SOURCE_
<org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)> -> _SOURCE_
<org.apache.http.params.HttpParams: Object getParameter(java.lang.String)> -> _SOURCE_
<org.apache.http.params.HttpParams: HttpParams setBooleanParameter(java.lang.String,boolean)> -> _SOURCE_
<org.apache.http.params.HttpParams: HttpParams setDoubleParameter(java.lang.String,double)> -> _SOURCE_
<org.apache.http.params.HttpParams: HttpParams setIntParameter(java.lang.String,int)> -> _SINK_
<org.apache.http.params.HttpParams: HttpParams setLongParameter(java.lang.String,long)> -> _SINK_
<org.apache.http.params.HttpParams: HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SOURCE_
<org.apache.http.conn.scheme.LayeredSocketFactory: Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SOURCE_
<org.json.JSONStringer: org.json.JSONStringer array()> -> _SINK_
<org.json.JSONStringer: org.json.JSONStringer key(java.lang.String)> -> _SOURCE_
<org.json.JSONStringer: java.lang.String toString()> -> _SOURCE_
<org.json.JSONStringer: org.json.JSONStringer value(long)> -> _SINK_
<org.json.JSONStringer: org.json.JSONStringer value(double)> -> _SINK_
<org.json.JSONStringer: org.json.JSONStringer value(boolean)> -> _SINK_
<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)> -> _SINK_
<org.json.JSONTokener: int dehexchar(char)> -> _SOURCE_
<org.json.JSONTokener: char next()> -> _SOURCE_
<org.json.JSONTokener: char next(char)> -> _SOURCE_
<org.json.JSONTokener: java.lang.String next(int)> -> _SOURCE_
<org.json.JSONTokener: char nextClean()> -> _SOURCE_
<org.json.JSONTokener: java.lang.String nextString(char)> -> _SOURCE_
<org.json.JSONTokener: java.lang.String nextTo(java.lang.String)> -> _SOURCE_
<org.json.JSONTokener: java.lang.String nextTo(char)> -> _SOURCE_
<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)> -> _SOURCE_
<org.w3c.dom.DOMConfiguration: boolean canSetParameter(java.lang.String,java.lang.Object)> -> _SOURCE_
<org.w3c.dom.DOMConfiguration: Object getParameter(java.lang.String)> -> _SOURCE_
<org.w3c.dom.DOMConfiguration: DOMStringList getParameterNames()> -> _SOURCE_
<org.w3c.dom.DOMConfiguration: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<org.w3c.dom.CharacterData: void appendData(java.lang.String)> -> _SINK_
<org.w3c.dom.CharacterData: void deleteData(int,int)> -> _SINK_
<org.w3c.dom.CharacterData: String getData()> -> _SINK_
<org.w3c.dom.CharacterData: int getLength()> -> _SOURCE_
<org.w3c.dom.CharacterData: void insertData(int,java.lang.String)> -> _SINK_
<org.w3c.dom.CharacterData: void replaceData(int,int,java.lang.String)> -> _SINK_
<org.w3c.dom.CharacterData: void setData(java.lang.String)> -> _SINK_
<org.w3c.dom.CharacterData: String substringData(int,int)> -> _SOURCE_
<org.json.JSONArray: java.lang.Object get(int)> -> _SOURCE_
<org.json.JSONArray: boolean getBoolean(int)> -> _SOURCE_
<org.json.JSONArray: double getDouble(int)> -> _SOURCE_
<org.json.JSONArray: int getInt(int)> -> _SOURCE_
<org.json.JSONArray: org.json.JSONArray getJSONArray(int)> -> _SOURCE_
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)> -> _SOURCE_
<org.json.JSONArray: long getLong(int)> -> _SOURCE_
<org.json.JSONArray: java.lang.String getString(int)> -> _SOURCE_
<org.json.JSONArray: int length()> -> _SOURCE_
<org.json.JSONArray: java.lang.Object opt(int)> -> _SOURCE_
<org.json.JSONArray: boolean optBoolean(int)> -> _SOURCE_
<org.json.JSONArray: boolean optBoolean(int,boolean)> -> _SOURCE_
<org.json.JSONArray: double optDouble(int)> -> _SOURCE_
<org.json.JSONArray: double optDouble(int,double)> -> _SOURCE_
<org.json.JSONArray: int optInt(int)> -> _SOURCE_
<org.json.JSONArray: int optInt(int,int)> -> _SOURCE_
<org.json.JSONArray: org.json.JSONArray optJSONArray(int)> -> _SOURCE_
<org.json.JSONArray: org.json.JSONObject optJSONObject(int)> -> _SOURCE_
<org.json.JSONArray: long optLong(int)> -> _SOURCE_
<org.json.JSONArray: long optLong(int,long)> -> _SOURCE_
<org.json.JSONArray: java.lang.String optString(int)> -> _SOURCE_
<org.json.JSONArray: java.lang.String optString(int,java.lang.String)> -> _SOURCE_
<org.json.JSONArray: java.lang.String toString()> -> _SINK_
<org.json.JSONArray: java.lang.String toString(int)> -> _SINK_
<org.w3c.dom.DOMError: String getMessage()> -> _SOURCE_
<org.w3c.dom.DOMError: Object getRelatedData()> -> _SOURCE_
<org.w3c.dom.DOMError: Object getRelatedException()> -> _SOURCE_
<org.w3c.dom.DOMError: short getSeverity()> -> _SOURCE_
<org.w3c.dom.DOMError: String getType()> -> _SOURCE_
<org.w3c.dom.DOMImplementationSource: DOMImplementation getDOMImplementation(java.lang.String)> -> _SOURCE_
<org.w3c.dom.DOMImplementationSource: DOMImplementationList getDOMImplementationList(java.lang.String)> -> _SOURCE_
<org.w3c.dom.DOMImplementationList: int getLength()> -> _SOURCE_
<android.renderscript.Element: String getAttribute(java.lang.String)> -> _SOURCE_
<android.renderscript.Element: String getAttributeNS(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Element: Attr getAttributeNode(java.lang.String)> -> _SOURCE_
<android.renderscript.Element: Attr getAttributeNodeNS(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Element: NodeList getElementsByTagName(java.lang.String)> -> _SOURCE_
<android.renderscript.Element: NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Element: TypeInfo getSchemaTypeInfo()> -> _SOURCE_
<android.renderscript.Element: String getTagName()> -> _SOURCE_
<android.renderscript.Element: boolean hasAttribute(java.lang.String)> -> _SOURCE_
<android.renderscript.Element: boolean hasAttributeNS(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Element: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.renderscript.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.renderscript.Element: Attr setAttributeNode(org.w3c.dom.Attr)> -> _SINK_
<android.renderscript.Element: Attr setAttributeNodeNS(org.w3c.dom.Attr)> -> _SINK_
<android.arch.persistence.room.Entity: String getInputEncoding()> -> _SOURCE_
<android.arch.persistence.room.Entity: String getNotationName()> -> _SOURCE_
<android.arch.persistence.room.Entity: String getPublicId()> -> _SOURCE_
<android.arch.persistence.room.Entity: String getSystemId()> -> _SOURCE_
<android.arch.persistence.room.Entity: String getXmlEncoding()> -> _SOURCE_
<android.arch.persistence.room.Entity: String getXmlVersion()> -> _SOURCE_
<org.w3c.dom.DOMImplementation: DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.w3c.dom.DOMImplementation: Object getFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<org.w3c.dom.DocumentType: NamedNodeMap getEntities()> -> _SOURCE_
<org.w3c.dom.DocumentType: String getName()> -> _SOURCE_
<org.w3c.dom.DocumentType: NamedNodeMap getNotations()> -> _SOURCE_
<org.w3c.dom.DocumentType: String getPublicId()> -> _SOURCE_
<org.w3c.dom.DocumentType: String getSystemId()> -> _SOURCE_
<org.w3c.dom.NameList: int getLength()> -> _SOURCE_
<org.w3c.dom.NameList: String getName(int)> -> _SOURCE_
<org.w3c.dom.NameList: String getNamespaceURI(int)> -> _SOURCE_
<org.w3c.dom.DOMStringList: boolean contains(java.lang.String)> -> _SOURCE_
<org.w3c.dom.DOMStringList: int getLength()> -> _SOURCE_
<org.w3c.dom.Text: boolean isElementContentWhitespace()> -> _SOURCE_
<org.w3c.dom.Text: Text replaceWholeText(java.lang.String)> -> _SINK_
<org.w3c.dom.Attr: String getName()> -> _SOURCE_
<org.w3c.dom.Attr: Element getOwnerElement()> -> _SOURCE_
<org.w3c.dom.Attr: TypeInfo getSchemaTypeInfo()> -> _SOURCE_
<org.w3c.dom.Attr: String getValue()> -> _SOURCE_
<org.w3c.dom.Attr: boolean isId()> -> _SOURCE_
<org.w3c.dom.Attr: void setValue(java.lang.String)> -> _SOURCE_
<javax.xml.transform.dom.DOMLocator: int getByteOffset()> -> _SOURCE_
<javax.xml.transform.dom.DOMLocator: int getColumnNumber()> -> _SOURCE_
<javax.xml.transform.dom.DOMLocator: int getLineNumber()> -> _SOURCE_
<javax.xml.transform.dom.DOMLocator: String getUri()> -> _SOURCE_
<org.w3c.dom.NamedNodeMap: Node getNamedItem(java.lang.String)> -> _SOURCE_
<org.w3c.dom.NamedNodeMap: Node getNamedItemNS(java.lang.String,java.lang.String)> -> _SOURCE_
<org.w3c.dom.NamedNodeMap: Node item(int)> -> _SOURCE_
<org.w3c.dom.ls.DOMImplementationLS: LSOutput createLSOutput()> -> _SINK_
<org.w3c.dom.Node: short compareDocumentPosition(org.w3c.dom.Node)> -> _SOURCE_
<org.w3c.dom.Node: NamedNodeMap getAttributes()> -> _SOURCE_
<org.w3c.dom.Node: String getBaseURI()> -> _SOURCE_
<org.w3c.dom.Node: Object getFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: Node getFirstChild()> -> _SOURCE_
<org.w3c.dom.Node: Node getLastChild()> -> _SOURCE_
<org.w3c.dom.Node: String getLocalName()> -> _SOURCE_
<org.w3c.dom.Node: String getNamespaceURI()> -> _SOURCE_
<org.w3c.dom.Node: Node getNextSibling()> -> _SOURCE_
<org.w3c.dom.Node: String getNodeName()> -> _SOURCE_
<org.w3c.dom.Node: String getNodeValue()> -> _SOURCE_
<org.w3c.dom.Node: Document getOwnerDocument()> -> _SOURCE_
<org.w3c.dom.Node: Node getParentNode()> -> _SOURCE_
<org.w3c.dom.Node: String getPrefix()> -> _SOURCE_
<org.w3c.dom.Node: Node getPreviousSibling()> -> _SOURCE_
<org.w3c.dom.Node: String getTextContent()> -> _SOURCE_
<org.w3c.dom.Node: Object getUserData(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: boolean hasAttributes()> -> _SOURCE_
<org.w3c.dom.Node: boolean hasChildNodes()> -> _SOURCE_
<org.w3c.dom.Node: boolean isDefaultNamespace(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: boolean isSameNode(org.w3c.dom.Node)> -> _SOURCE_
<org.w3c.dom.Node: String lookupNamespaceURI(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: String lookupPrefix(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: void setNodeValue(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: void setPrefix(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: void setTextContent(java.lang.String)> -> _SOURCE_
<org.w3c.dom.Node: Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> -> _SINK_
<androidx.appsearch.annotation.Document: Attr createAttribute(java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: Attr createAttributeNS(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: CDATASection createCDATASection(java.lang.String)> -> _SINK_
<androidx.appsearch.annotation.Document: Comment createComment(java.lang.String)> -> _SINK_
<androidx.appsearch.annotation.Document: ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: Text createTextNode(java.lang.String)> -> _SINK_
<androidx.appsearch.annotation.Document: DocumentType getDoctype()> -> _SOURCE_
<androidx.appsearch.annotation.Document: String getDocumentURI()> -> _SOURCE_
<androidx.appsearch.annotation.Document: DOMConfiguration getDomConfig()> -> _SOURCE_
<androidx.appsearch.annotation.Document: Element getElementById(java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: NodeList getElementsByTagName(java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: String getInputEncoding()> -> _SINK_
<androidx.appsearch.annotation.Document: String getXmlEncoding()> -> _SOURCE_
<androidx.appsearch.annotation.Document: boolean getXmlStandalone()> -> _SINK_
<androidx.appsearch.annotation.Document: String getXmlVersion()> -> _SOURCE_
<androidx.appsearch.annotation.Document: void setDocumentURI(java.lang.String)> -> _SOURCE_
<androidx.appsearch.annotation.Document: void setXmlStandalone(boolean)> -> _SINK_
<androidx.appsearch.annotation.Document: void setXmlVersion(java.lang.String)> -> _SOURCE_
<org.w3c.dom.ls.LSParser: DOMConfiguration getDomConfig()> -> _SOURCE_
<org.w3c.dom.ls.LSParser: Document parse(org.w3c.dom.ls.LSInput)> -> _SOURCE_
<org.w3c.dom.ls.LSParser: Document parseURI(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: java.lang.Object get(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: boolean getBoolean(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: double getDouble(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: int getInt(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: long getLong(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: java.lang.String getString(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: boolean has(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: boolean isNull(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: Iterator<String> keys()> -> _SOURCE_
<org.json.JSONObject: int length()> -> _SOURCE_
<org.json.JSONObject: org.json.JSONArray names()> -> _SOURCE_
<org.json.JSONObject: String numberToString(java.lang.Number)> -> _SINK_
<org.json.JSONObject: java.lang.Object opt(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)> -> _SOURCE_
<org.json.JSONObject: boolean optBoolean(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: double optDouble(java.lang.String,double)> -> _SOURCE_
<org.json.JSONObject: double optDouble(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: int optInt(java.lang.String,int)> -> _SOURCE_
<org.json.JSONObject: int optInt(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: long optLong(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: long optLong(java.lang.String,long)> -> _SOURCE_
<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)> -> _SOURCE_
<org.json.JSONObject: java.lang.String optString(java.lang.String)> -> _SOURCE_
<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)> -> _SINK_
<org.json.JSONObject: String quote(java.lang.String)> -> _SINK_
<org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)> -> _SOURCE_
<org.json.JSONObject: java.lang.String toString()> -> _SINK_
<org.json.JSONObject: java.lang.String toString(int)> -> _SOURCE_
<org.w3c.dom.ls.LSResourceResolver: LSInput resolveResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.icu.number.Notation: String getPublicId()> -> _SOURCE_
<android.icu.number.Notation: String getSystemId()> -> _SOURCE_
<java.util.jar.Attributes: int getIndex(java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: int getIndex(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: int getLength()> -> _SOURCE_
<java.util.jar.Attributes: String getLocalName(int)> -> _SOURCE_
<java.util.jar.Attributes: String getQName(int)> -> _SOURCE_
<java.util.jar.Attributes: String getType(java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: String getType(int)> -> _SOURCE_
<java.util.jar.Attributes: String getType(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: String getURI(int)> -> _SOURCE_
<java.util.jar.Attributes: String getValue(java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: String getValue(int)> -> _SOURCE_
<java.util.jar.Attributes: String getValue(java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.ContentHandler: void characters(char[],int,int)> -> _SINK_
<java.net.ContentHandler: void endDocument()> -> _SOURCE_
<java.net.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.ContentHandler: void setDocumentLocator(androidx.test.espresso.web.webdriver.Locator)> -> _SOURCE_
<org.w3c.dom.TypeInfo: String getTypeName()> -> _SOURCE_
<org.w3c.dom.TypeInfo: String getTypeNamespace()> -> _SOURCE_
<org.w3c.dom.ls.LSOutput: Writer getCharacterStream()> -> _SOURCE_
<org.w3c.dom.ls.LSOutput: String getEncoding()> -> _SINK_
<org.w3c.dom.ls.LSOutput: String getSystemId()> -> _SOURCE_
<org.w3c.dom.ls.LSOutput: void setCharacterStream(java.io.Writer)> -> _SOURCE_
<org.w3c.dom.ls.LSOutput: void setEncoding(java.lang.String)> -> _SINK_
<org.w3c.dom.ls.LSOutput: void setSystemId(java.lang.String)> -> _SOURCE_
<org.xml.sax.ErrorHandler: void error(org.xml.sax.SAXParseException)> -> _SOURCE_
<org.xml.sax.ErrorHandler: void fatalError(org.xml.sax.SAXParseException)> -> _SOURCE_
<org.xml.sax.InputSource: java.io.InputStream getByteStream()> -> _SOURCE_
<org.xml.sax.InputSource: android.se.omapi.Reader getCharacterStream()> -> _SOURCE_
<org.xml.sax.InputSource: java.lang.String getEncoding()> -> _SOURCE_
<org.xml.sax.InputSource: java.lang.String getPublicId()> -> _SOURCE_
<org.xml.sax.InputSource: java.lang.String getSystemId()> -> _SOURCE_
<org.xml.sax.InputSource: void setByteStream(java.io.InputStream)> -> _SINK_
<org.xml.sax.InputSource: void setCharacterStream(android.se.omapi.Reader)> -> _SINK_
<org.xml.sax.InputSource: void setEncoding(java.lang.String)> -> _SINK_
<org.xml.sax.InputSource: void setPublicId(java.lang.String)> -> _SINK_
<org.w3c.dom.ls.LSSerializer: DOMConfiguration getDomConfig()> -> _SOURCE_
<org.w3c.dom.ls.LSSerializer: boolean writeToURI(org.w3c.dom.Node,java.lang.String)> -> _SINK_
<org.xml.sax.SAXException: java.lang.Exception getException()> -> _SOURCE_
<org.xml.sax.SAXException: java.lang.String getMessage()> -> _SOURCE_
<org.xml.sax.SAXException: java.lang.String toString()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.Locator: int getColumnNumber()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.Locator: int getLineNumber()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.Locator: String getPublicId()> -> _SOURCE_
<androidx.test.espresso.web.webdriver.Locator: String getSystemId()> -> _SOURCE_
<org.w3c.dom.NodeList: int getLength()> -> _SOURCE_
<org.xml.sax.HandlerBase: void characters(char[],int,int)> -> _SOURCE_
<org.xml.sax.HandlerBase: void endElement(java.lang.String)> -> _SOURCE_
<org.xml.sax.HandlerBase: void error(org.xml.sax.SAXParseException)> -> _SOURCE_
<org.xml.sax.HandlerBase: void processingInstruction(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.HandlerBase: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.HandlerBase: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: int getLength()> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getLocalName(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getQName(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setLocalName(int,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setQName(int,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setType(int,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setURI(int,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.AttributesImpl: void setValue(int,java.lang.String)> -> _SINK_
<org.xml.sax.ext.Locator2Impl: java.lang.String getEncoding()> -> _SOURCE_
<org.xml.sax.ext.Locator2Impl: java.lang.String getXMLVersion()> -> _SOURCE_
<org.xml.sax.ext.Locator2Impl: void setEncoding(java.lang.String)> -> _SINK_
<org.xml.sax.ext.Locator2Impl: void setXMLVersion(java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.EntityResolver2: InputSource getExternalSubset(java.lang.String,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.LocatorImpl: int getColumnNumber()> -> _SOURCE_
<org.xml.sax.helpers.LocatorImpl: int getLineNumber()> -> _SOURCE_
<org.xml.sax.helpers.LocatorImpl: java.lang.String getPublicId()> -> _SOURCE_
<org.xml.sax.helpers.LocatorImpl: java.lang.String getSystemId()> -> _SOURCE_
<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)> -> _SINK_
<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)> -> _SINK_
<org.xml.sax.XMLReader: ContentHandler getContentHandler()> -> _SOURCE_
<org.xml.sax.XMLReader: DTDHandler getDTDHandler()> -> _SOURCE_
<org.xml.sax.XMLReader: EntityResolver getEntityResolver()> -> _SOURCE_
<org.xml.sax.XMLReader: ErrorHandler getErrorHandler()> -> _SOURCE_
<org.xml.sax.XMLReader: boolean getFeature(java.lang.String)> -> _SOURCE_
<org.xml.sax.XMLReader: Object getProperty(java.lang.String)> -> _SOURCE_
<org.xml.sax.XMLReader: void parse(java.lang.String)> -> _SOURCE_
<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)> -> _SINK_
<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)> -> _SINK_
<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<org.xml.sax.SAXParseException: int getColumnNumber()> -> _SOURCE_
<org.xml.sax.SAXParseException: int getLineNumber()> -> _SOURCE_
<org.xml.sax.SAXParseException: java.lang.String getPublicId()> -> _SOURCE_
<org.xml.sax.SAXParseException: java.lang.String getSystemId()> -> _SOURCE_
<org.xml.sax.ext.DefaultHandler2: void endCDATA()> -> _SOURCE_
<org.xml.sax.ext.DefaultHandler2: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.DefaultHandler2: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.DefaultHandler2: void startCDATA()> -> _SINK_
<org.xml.sax.Parser: void parse(java.lang.String)> -> _SOURCE_
<org.xml.sax.Parser: void setErrorHandler(org.xml.sax.ErrorHandler)> -> _SINK_
<org.xml.sax.Parser: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getDeclaredPrefixes()> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getPrefix(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes()> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: String[] processName(java.lang.String,String[],boolean)> -> _SOURCE_
<org.xml.sax.ext.Locator2: String getEncoding()> -> _SOURCE_
<org.xml.sax.ext.Locator2: String getXMLVersion()> -> _SOURCE_
<org.xml.sax.AttributeList: int getLength()> -> _SOURCE_
<org.xml.sax.AttributeList: String getName(int)> -> _SOURCE_
<org.xml.sax.AttributeList: String getType(java.lang.String)> -> _SOURCE_
<org.xml.sax.AttributeList: String getType(int)> -> _SOURCE_
<org.xml.sax.AttributeList: String getValue(java.lang.String)> -> _SOURCE_
<org.xml.sax.AttributeList: String getValue(int)> -> _SOURCE_
<org.xml.sax.XMLFilter: XMLReader getParent()> -> _SOURCE_
<org.xml.sax.XMLFilter: void setParent(org.xml.sax.XMLReader)> -> _SINK_
<org.xml.sax.ext.Attributes2: boolean isDeclared(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2: boolean isDeclared(int)> -> _SOURCE_
<org.xml.sax.ext.Attributes2: boolean isDeclared(java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2: boolean isSpecified(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2: boolean isSpecified(int)> -> _SOURCE_
<org.xml.sax.ext.Attributes2: boolean isSpecified(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: void characters(char[],int,int)> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: void error(org.xml.sax.SAXParseException)> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: void processingInstruction(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.DocumentHandler: void characters(char[],int,int)> -> _SINK_
<org.xml.sax.DocumentHandler: void endDocument()> -> _SOURCE_
<org.xml.sax.DocumentHandler: void endElement(java.lang.String)> -> _SOURCE_
<org.xml.sax.DocumentHandler: void processingInstruction(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.DocumentHandler: void setDocumentLocator(androidx.test.espresso.web.webdriver.Locator)> -> _SOURCE_
<org.xml.sax.helpers.XMLReaderAdapter: void parse(org.xml.sax.InputSource)> -> _SOURCE_
<org.xml.sax.helpers.XMLReaderAdapter: void parse(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentLocator(androidx.test.espresso.web.webdriver.Locator)> -> _SINK_
<org.xml.sax.helpers.XMLReaderAdapter: void setLocale(androidx.compose.ui.text.intl.Locale)> -> _SINK_
<org.xml.sax.helpers.XMLReaderAdapter: void startPrefixMapping(java.lang.String,java.lang.String)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: java.net.ContentHandler getContentHandler()> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.DTDHandler getDTDHandler()> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.EntityResolver getEntityResolver()> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ErrorHandler getErrorHandler()> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter: boolean getFeature(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter: java.lang.Object getProperty(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter: void setEntityResolver(org.xml.sax.EntityResolver)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: void setFeature(java.lang.String,boolean)> -> _SINK_
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<org.w3c.dom.ls.LSInput: String getBaseURI()> -> _SOURCE_
<org.w3c.dom.ls.LSInput: String getEncoding()> -> _SOURCE_
<org.w3c.dom.ls.LSInput: String getPublicId()> -> _SOURCE_
<org.w3c.dom.ls.LSInput: String getStringData()> -> _SOURCE_
<org.w3c.dom.ls.LSInput: String getSystemId()> -> _SOURCE_
<org.w3c.dom.ls.LSInput: void setBaseURI(java.lang.String)> -> _SOURCE_
<org.w3c.dom.ls.LSInput: void setEncoding(java.lang.String)> -> _SOURCE_
<org.w3c.dom.ls.LSInput: void setPublicId(java.lang.String)> -> _SOURCE_
<org.w3c.dom.ls.LSInput: void setStringData(java.lang.String)> -> _SOURCE_
<org.w3c.dom.ls.LSInput: void setSystemId(java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.LexicalHandler: void endCDATA()> -> _SOURCE_
<org.xml.sax.ext.LexicalHandler: void startCDATA()> -> _SINK_
<org.xml.sax.helpers.XMLReaderFactory: XMLReader createXMLReader()> -> _SOURCE_
<org.xml.sax.helpers.XMLReaderFactory: XMLReader createXMLReader(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.ParserFactory: Parser makeParser(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: int getLength()> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getName(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getType(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getType(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getValue(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getValue(int)> -> _SOURCE_
<org.xml.sax.helpers.AttributeListImpl: void setAttributeList(org.xml.sax.AttributeList)> -> _SINK_
<org.xml.sax.ext.Attributes2Impl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(int)> -> _SOURCE_
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(int)> -> _SOURCE_
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(java.lang.String)> -> _SOURCE_
<org.xml.sax.ext.Attributes2Impl: void setDeclared(int,boolean)> -> _SINK_
<org.xml.sax.ext.Attributes2Impl: void setSpecified(int,boolean)> -> _SINK_
<org.xml.sax.helpers.XMLFilterImpl: java.net.ContentHandler getContentHandler()> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.DTDHandler getDTDHandler()> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.EntityResolver getEntityResolver()> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.ErrorHandler getErrorHandler()> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: boolean getFeature(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.XMLReader getParent()> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: java.lang.Object getProperty(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: void parse(java.lang.String)> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: void parse(org.xml.sax.InputSource)> -> _SOURCE_
<org.xml.sax.helpers.XMLFilterImpl: void setEntityResolver(org.xml.sax.EntityResolver)> -> _SINK_
<org.xml.sax.helpers.XMLFilterImpl: void setErrorHandler(org.xml.sax.ErrorHandler)> -> _SINK_
<org.xml.sax.helpers.XMLFilterImpl: void setFeature(java.lang.String,boolean)> -> _SINK_
<org.xml.sax.helpers.XMLFilterImpl: void setParent(org.xml.sax.XMLReader)> -> _SINK_
<org.xml.sax.helpers.XMLFilterImpl: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)> -> _SINK_
<org.xmlpull.v1.XmlPullParser: int getAttributeCount()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getAttributeName(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getAttributeNamespace(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getAttributePrefix(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getAttributeType(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getAttributeValue(java.lang.String,java.lang.String)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getAttributeValue(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: int getColumnNumber()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: int getDepth()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: int getEventType()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getInputEncoding()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: int getLineNumber()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getName()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getNamespace()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getNamespace(java.lang.String)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getNamespacePrefix(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getNamespaceUri(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getPositionDescription()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getPrefix()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: Object getProperty(java.lang.String)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String getText()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: int next()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: String nextText()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)> -> _SINK_
<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<org.xmlpull.v1.XmlPullParserFactory: boolean getFeature(java.lang.String)> -> _SOURCE_
<org.xmlpull.v1.XmlPullParserFactory: void setFeature(java.lang.String,boolean)> -> _SINK_
